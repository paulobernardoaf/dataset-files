<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\mux\mp4\mp4.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_iso_lang.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/mp4/libmp4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libmp4mux.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/hxxx_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../av1_pack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../extradata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTSTART_TEXT</name></cpp:macro> <cpp:value>N_("Create \"Fast Start\" files")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTSTART_LONGTEXT</name></cpp:macro> <cpp:value>N_("Create \"Fast Start\" files. " "\"Fast Start\" files are optimized for downloads and allow the user " "to start previewing the file while it is downloading.")</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseFrag</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-mp4-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"MP4/MOV muxer"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_SOUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_SOUT_MUX</argument>)</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"MP4"</literal></argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument>SOUT_CFG_PREFIX <literal type="string">"faststart"</literal></argument>, <argument>false</argument>,

<argument>FASTSTART_TEXT</argument>, <argument>FASTSTART_LONGTEXT</argument>,

<argument>true</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"sout mux"</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"mp4"</literal></argument>, <argument><literal type="string">"mov"</literal></argument>, <argument><literal type="string">"3gp"</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>add_submodule</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Fragmented and streamable MP4 muxer"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_SOUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_SOUT_MUX</argument>)</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"MP4 Frag"</literal></argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"mp4frag"</literal></argument>, <argument><literal type="string">"mp4stream"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"sout mux"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>CloseFrag</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"faststart"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name> <parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MuxFrag</name> <parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>struct</name> <name>mp4_fragentry_t</name></name></type> <name>mp4_fragentry_t</name>;</typedef>

<struct>struct <name>mp4_fragentry_t</name>

<block>{

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_fragentry_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>mp4_fragindex_t</name>

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_moofoffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_traf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_trun</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample</name></decl>;</decl_stmt>

}</block></struct></type> <name>mp4_fragindex_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>mp4_fragqueue_t</name>

<block>{

<decl_stmt><decl><type><name>mp4_fragentry_t</name> <modifier>*</modifier></type><name>p_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_fragentry_t</name> <modifier>*</modifier></type><name>p_last</name></decl>;</decl_stmt>

}</block></struct></type> <name>mp4_fragqueue_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>tinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type><name>extrabuilder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length_neg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_first_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_hasiframes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_current_run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_fragentry_t</name> <modifier>*</modifier></type><name>p_held_entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_fragqueue_t</name></type> <name>read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_fragqueue_t</name></type> <name>towrite</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_iframe_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_written_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_fragindex_t</name> <modifier>*</modifier></type><name>p_indexentries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_indexentriesmax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_indexentries</name></decl>;</decl_stmt>

}</block></struct></type> <name>mp4_stream_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>muxh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_3gp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_fast_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_header_sent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_mdat_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_read_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_nb_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_written_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_mfhd_sequence</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_mux_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp4_stream_Delete</name><parameter_list>(<parameter><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>extrabuilder</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mux_extradata_builder_Delete</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>extrabuilder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_fragentry_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_first</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_fragentry_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_first</name></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_indexentries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>mp4_stream_t</name> <modifier>*</modifier></type><name>mp4_stream_New</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_stream</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_stream</name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>box_send</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ConvertSUBT</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CreateCurrentEdit</name><parameter_list>(<parameter><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MuxStream</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WriteSlowStartHeader</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp4mux_Is</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><name>QUICKTIME</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>mp4mux_GetFtyp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>box</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_send</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"mdat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>box</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>box</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>box_send</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sout_mux_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Mp4 muxer opened"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>mp4mux_options</name></name></type> <name>options</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument>, <argument><expr><literal type="string">"mov"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>QUICKTIME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument>, <argument><expr><literal type="string">"mp4frag"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument>, <argument><expr><literal type="string">"mp4stream"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>options</name> <operator>|=</operator> <name>FRAGMENTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_3gp</name></name> <operator>=</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument>, <argument><expr><literal type="string">"3gp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name> <operator>=</operator> <call><name>mp4mux_New</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_sent</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_read_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_written_duration</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mfhd_sequence</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_addstream</name></name> <operator>=</operator> <name>AddStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_delstream</name></name> <operator>=</operator> <name>DelStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_mux</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>options</name> <operator>&amp;</operator> <name>FRAGMENTED</name><operator>)</operator></expr> ?</condition><then> <expr><name>MuxFrag</name></expr> </then><else>: <expr><name>Mux</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_3gp</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mp4mux_SetBrand</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><name>BRAND_3gp6</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrand</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><name>BRAND_3gp4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>mp4mux_SetBrand</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><name>BRAND_isom</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Close"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bo_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>cleanup</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"mdat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_64be</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"wide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name> <operator>-</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"mdat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>sout_AccessOutSeek</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>bo</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_64bitext</name> <init>= <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&gt;</operator> <name>UINT32_MAX</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>b_64bitext</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_Set64BitExt</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_moov_pos</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>moov</name> <init>= <expr><call><name>mp4mux_GetMoov</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fast_start</name></name> <operator>=</operator> <call><name>var_GetBool</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"faststart"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fast_start</name></name> <operator>&amp;&amp;</operator> <name>moov</name> <operator>&amp;&amp;</operator> <name><name>moov</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_mdatsize</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_64bitext</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mp4mux_Set64BitExt</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_64bitext</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>moov64</name> <init>= <expr><call><name>mp4mux_GetMoov</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>moov64</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>moov</name> <operator>=</operator> <name>moov64</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mp4mux_ShiftSamples</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>,<argument><expr><literal type="string">"Moving data by %"</literal><name>PRIu64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>bo_size</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>shifted</name> <init>= <expr><call><name>mp4mux_GetMoov</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>shifted</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fast_start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>shifted</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>moov</name> <operator>=</operator> <name>shifted</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i_mdatsize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_chunk</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><literal type="number">32768</literal></expr></argument>, <argument><expr><name>i_mdatsize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_buf</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>i_chunk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sout_AccessOutSeek</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name> <operator>+</operator> <name>i_mdatsize</name> <operator>-</operator> <name>i_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name> <init>= <expr><call><name>sout_AccessOutRead</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>i_read</name> <operator>&lt;</operator> <name>i_chunk</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"read() not supported by access output, "</literal>

<literal type="string">"won't create a fast start file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fast_start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sout_AccessOutSeek</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name> <operator>+</operator> <name>i_mdatsize</name> <operator>+</operator>

<call><name>bo_size</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_mdatsize</name> <operator>-=</operator> <name>i_chunk</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_fast_start</name></name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_moov_pos</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mdat_pos</name></name> <operator>+=</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_fast_start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>sout_AccessOutSeek</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>i_moov_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>moov</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_send</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>cleanup</name>:</label>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i_trak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_trak</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i_trak</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4_stream_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i_trak</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp4mux_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>i_query</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>MUX_CAN_ADD_STREAM_WHILE_MUXING</name></expr>:</case>

<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>MUX_GET_MIME</name></expr>:</case> 

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>mp4mux_CanMux</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><call><name>mp4mux_Is</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><name>QUICKTIME</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>BRAND_qt__</name></expr> </then><else>: <expr><name>BRAND_isom</name></expr></else></ternary></expr></argument>,

<argument><expr><call><name>mp4mux_Is</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><name>FRAGMENTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"unsupported codec %4.4s in mp4"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>p_stream</name> <operator>=</operator> <call><name>mp4_stream_New</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_track_timescale</name> <init>= <expr><name>CLOCK_FREQ</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>trackfmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trackfmt</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trackfmt</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>trackfmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"no audio rate given for stream %d, assuming 48KHz"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trackfmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_track_timescale</name> <operator>=</operator> <name><name>trackfmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>trackfmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>||</operator>

<operator>!</operator><name><name>trackfmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Missing frame rate for stream %d, assuming 25fps"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trackfmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>trackfmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_track_timescale</name> <operator>=</operator> <name><name>trackfmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>*</operator>

<name><name>trackfmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_track_timescale</name> <operator>&gt;</operator> <name>CLOCK_FREQ</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_track_timescale</name> <operator>=</operator> <name>CLOCK_FREQ</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_track_timescale</name> <operator>&lt;</operator> <literal type="number">90000</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_track_timescale</name> <operator>=</operator> <literal type="number">90000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name> <operator>=</operator> <call><name>mp4mux_track_Add</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>trackfmt</name></expr></argument>, <argument><expr><name>i_track_timescale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trackfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>extrabuilder</name></name> <operator>=</operator> <call><name>mux_extradata_builder_New</name><argument_list>(<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><name>EXTRADATA_ISOBMFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name></name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>mp4_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>mp4mux_Is</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><name>FRAGMENTED</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<while>while<condition>(<expr><call><name>block_FifoCount</name><argument_list>(<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>MuxStream</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content/>}</block></while><empty_stmt>;</empty_stmt>

<if_stmt><if>if<condition>(<expr><call><name>CreateCurrentEdit</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_track_DebugEdits</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"removing input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>CreateCurrentEdit</name><parameter_list>(<parameter><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_mux_start_dts</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_fragmented</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4mux_edit_t</name> <modifier>*</modifier></type><name>p_lastedit</name> <init>= <expr><call><name>mp4mux_track_GetLastEdit</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_lastedit</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>b_fragmented</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>p_lastsample</name> <init>= <expr><call><name>mp4mux_track_GetLastSample</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_lastsample</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mp4mux_edit_t</name></type> <name>newedit</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_lastedit</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>newedit</name><operator>.</operator><name>i_start_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newedit</name><operator>.</operator><name>i_start_offset</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>-</operator> <name>i_mux_start_dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>newedit</name><operator>.</operator><name>i_start_time</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_lastedit</name><operator>-&gt;</operator><name>i_start_time</name></name> <operator>+</operator> <name><name>p_lastedit</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newedit</name><operator>.</operator><name>i_start_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>b_fragmented</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>newedit</name><operator>.</operator><name>i_duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newedit</name><operator>.</operator><name>i_duration</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_last_pts</name></name> <operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>newedit</name><operator>.</operator><name>i_duration</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>newedit</name><operator>.</operator><name>i_duration</name></name> <operator>+=</operator> <name><name>p_lastsample</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>mp4mux_track_AddEdit</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newedit</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>BlockDequeue</name><parameter_list>(<parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_FifoGet</name><argument_list>(<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_block</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>extrabuilder</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>mp4mux_track_HasSamplePriv</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>mux_extradata_builder_Feed</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>extrabuilder</name></name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name> <init>= <expr><call><name>mux_extradata_builder_Get</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>extrabuilder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_extra</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_track_SetSamplePriv</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_codec</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_AV1</name></expr>:</case>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>AV1_Pack_Sample</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>hxxx_AnnexB_to_xVC</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_SUBT</name></expr>:</case>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>ConvertSUBT</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>dts_fb_pts</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr></then><else>: <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MuxStream</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>BlockDequeue</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name> <operator>&amp;&amp;</operator>

<call><name>mp4mux_track_GetLastSample</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>CreateCurrentEdit</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_Is</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><name>FRAGMENTED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length_neg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>=</operator> <call><name>dts_fb_pts</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>!=</operator> <name>SPU_ES</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>block_FifoCount</name><argument_list>(<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><call><name>block_FifoShow</name><argument_list>(<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_next</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr> )</condition>

<block>{<block_content> 

<if_stmt><if>if <condition>( <expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(

<argument><expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_SINGLE_FIELD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"video track %u fixup to %"</literal><name>PRId64</name><literal type="string">" for sample %u"</literal></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetID</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetSampleCount</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator>

<call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>p_data</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"audio track %u fixup to %"</literal><name>PRId64</name><literal type="string">" for sample %u"</literal></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetID</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetSampleCount</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"unknown length for track %u sample %u"</literal></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetID</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetSampleCount</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_diff</name> <init>= <expr><call><name>dts_fb_pts</name><argument_list>( <argument><expr><name>p_next</name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>dts_fb_pts</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_diff</name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_diff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"i_length &lt;= 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length_neg</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length_neg</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_recover</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_length_neg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-=</operator> <name>i_recover</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length_neg</name></name> <operator>+=</operator> <name>i_recover</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>p_lastsample</name> <init>= <expr><call><name>mp4mux_track_GetLastSample</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_lastsample</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_lastsample</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_sample_t</name></type> <name>updated</name> <init>= <expr><operator>*</operator><name>p_lastsample</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_length</name> <init>= <expr><call><name>dts_fb_pts</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>updated</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <name>i_length</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp4mux_track_UpdateLastSample</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>updated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_INTERLACED_MASK</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>mp4mux_track_GetInterlacing</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>INTERLACING_NONE</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_SINGLE_FIELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_track_SetInterlacing</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name>INTERLACING_SINGLE_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TOP_FIELD_FIRST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_track_SetInterlacing</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name>INTERLACING_TOPBOTTOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_track_SetInterlacing</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>, <argument><expr><name>INTERLACING_BOTTOMTOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <call><name>dts_fb_pts</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&gt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_last_pts</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_pts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mp4mux_sample_t</name></type> <name>sample</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sample</name><operator>.</operator><name>i_pos</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sample</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&gt;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sample</name><operator>.</operator><name>i_pts_dts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sample</name><operator>.</operator><name>i_pts_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sample</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sample</name><operator>.</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <call><name>dts_fb_pts</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mp4mux_track_AddSample</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sample</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>SPU_ES</name> <operator>&amp;&amp;</operator> <name><name>sample</name><operator>.</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_empty</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_SUBT</name><operator>||</operator>

<call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_QTXT</name><operator>||</operator>

<call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_TX3G</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_empty</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_empty</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_empty</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_empty</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_empty</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_TTML</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_empty</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_empty</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_empty</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="string">"&lt;tt&gt;&lt;body&gt;&lt;div&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/tt&gt;"</literal></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_WEBVTT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_empty</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_empty</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_empty</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="string">"\x00\x00\x00\x08vtte"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>+=</operator> <name><name>sample</name><operator>.</operator><name>i_length</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_empty</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_sample_t</name></type> <name>closersample</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>closersample</name><operator>.</operator><name>i_pos</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>closersample</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <name><name>p_empty</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>closersample</name><operator>.</operator><name>i_pts_dts</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>closersample</name><operator>.</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>closersample</name><operator>.</operator><name>i_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>mp4mux_track_AddSample</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>closersample</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <name><name>p_empty</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_empty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>mp4mux_track_GetDuration</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_read_duration</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_read_duration</name></name> <operator>=</operator> <call><name>mp4mux_track_GetDuration</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_sent</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>WriteSlowStartHeader</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_sent</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name> <init>= <expr><call><name>sout_MuxGetStream</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_stream</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>mp4_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>MuxStream</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>;</do>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ConvertSUBT</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>box_send</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>box</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>box</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>box</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAGMENT_LENGTH</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(1500)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENQUEUE_ENTRY</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if (object.p_last)object.p_last-&gt;p_next = entry;object.p_last = entry;if (!object.p_first)object.p_first = entry;} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEQUEUE_ENTRY</name><parameter_list>(<parameter><type><name>object</name></type></parameter>, <parameter><type><name>entry</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {entry = object.p_first;if (object.p_last == entry)object.p_last = NULL;object.p_first = object.p_first-&gt;p_next;entry-&gt;p_next = NULL;} while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddKeyframeEntry</name><parameter_list>(<parameter><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_moof_pos</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_traf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_sample</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_fragindex_t</name> <modifier>*</modifier></type><name>p_entries</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_indexentries</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentries</name></name> <operator>&gt;=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentriesmax</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentriesmax</name></name> <operator>+=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_entries</name> <operator>=</operator> <call><name>xrealloc</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_indexentries</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentriesmax</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>mp4_fragindex_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_entries</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_indexentries</name></name> <operator>=</operator> <name>p_entries</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_entry_time</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentries</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_entry_time</name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>p_indexentries</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_time</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_entry_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>p_entries</name> <operator>&amp;&amp;</operator> <name>i_time</name> <operator>-</operator> <name>i_last_entry_time</name> <operator>&gt;=</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_fragindex_t</name> <modifier>*</modifier></type><name>p_indexentry</name> <init>= <expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_indexentries</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentries</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_time</name></name> <operator>=</operator> <name>i_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_moofoffset</name></name> <operator>=</operator> <name>i_moof_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_sample</name></name> <operator>=</operator> <name>i_sample</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_traf</name></name> <operator>=</operator> <name>i_traf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_trun</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentries</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetMoofBox</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_mdat_total_size</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_barrier_time</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_write_pos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>moof</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mfhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_fixupoffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_mdat_total_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>moof</name> <operator>=</operator> <call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"moof"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>moof</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>mfhd</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"mfhd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mfhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>moof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mfhd</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_mfhd_sequence</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>moof</name></expr></argument>, <argument><expr><name>mfhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i_trak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_trak</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i_trak</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i_trak</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>traf</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"traf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>traf</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_written_duration</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_allsamesize</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_allsamelength</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_fragentry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p_entry</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>b_allsamelength</name> <operator>||</operator> <name>b_allsamesize</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_allsamelength</name> <operator>&amp;=</operator> <operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>==</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b_allsamesize</name> <operator>&amp;=</operator> <operator>(</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_tfhd_flags</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b_allsamelength</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>!=</operator>

<call><name>mp4mux_track_GetDefaultSampleDuration</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_tfhd_flags</name> <operator>|=</operator> <name>MP4_TFHD_DFLT_SAMPLE_DURATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_allsamesize</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>!=</operator>

<call><name>mp4mux_track_GetDefaultSampleSize</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_tfhd_flags</name> <operator>|=</operator> <name>MP4_TFHD_DFLT_SAMPLE_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_tfhd_flags</name> <operator>|=</operator> <name>MP4_TFHD_DURATION_IS_EMPTY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>tfhd</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"tfhd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_tfhd_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tfhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>traf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tfhd</name></expr></argument>, <argument><expr><call><name>mp4mux_track_GetID</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_tfhd_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_DURATION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tfhd</name></expr></argument>, <argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetTimescale</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_tfhd_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tfhd</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>traf</name></expr></argument>, <argument><expr><name>tfhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>tfdt</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"tfdt"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tfdt</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>traf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>tfdt</name></expr></argument>, <argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_written_duration</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetTimescale</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>traf</name></expr></argument>, <argument><expr><name>tfdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_trun_flags</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_hasiframes</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_trun_flags</name> <operator>|=</operator> <name>MP4_TRUN_FIRST_FLAGS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_allsamelength</name> <operator>||</operator>

<operator>(</operator> <operator>!</operator><operator>(</operator><name>i_tfhd_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_DURATION</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>mp4mux_track_GetDefaultSampleDuration</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_trun_flags</name> <operator>|=</operator> <name>MP4_TRUN_SAMPLE_DURATION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_allsamesize</name> <operator>||</operator>

<operator>(</operator> <operator>!</operator><operator>(</operator><name>i_tfhd_flags</name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_SIZE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>mp4mux_track_GetDefaultSampleSize</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_trun_flags</name> <operator>|=</operator> <name>MP4_TRUN_SAMPLE_SIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp4mux_track_HasBFrames</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_trun_flags</name> <operator>|=</operator> <name>MP4_TRUN_SAMPLE_TIME_OFFSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_fixupoffset</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_trun_flags</name> <operator>|=</operator> <name>MP4_TRUN_DATA_OFFSET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>trun</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"trun"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_trun_flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>trun</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>traf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_run_time</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_written_duration</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_fragentry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>p_entry</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_barrier_time</name> <operator>&amp;&amp;</operator> <name>i_run_time</name> <operator>+</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <name>i_barrier_time</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_entry_count</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_run_time</name> <operator>+=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trun</name></expr></argument>, <argument><expr><name>i_entry_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>i_trun_flags</name> <operator>&amp;</operator> <name>MP4_TRUN_DATA_OFFSET</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_fixupoffset</name> <operator>=</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>moof</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>traf</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>trun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trun</name></expr></argument>, <argument><expr><literal type="number">0xdeadbeef</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_trun_flags</name> <operator>&amp;</operator> <name>MP4_TRUN_FIRST_FLAGS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trun</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<while>while<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name> <operator>&amp;&amp;</operator> <name>i_entry_count</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DEQUEUE_ENTRY</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name></name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_trun_flags</name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_DURATION</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trun</name></expr></argument>, <argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetTimescale</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>i_trun_flags</name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trun</name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>i_trun_flags</name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_TIME_OFFSET</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&gt;</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_diff</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trun</name></expr></argument>, <argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>i_diff</name></expr></argument>, <argument><expr><call><name>mp4mux_track_GetTimescale</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_mdat_total_size</name> <operator>+=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ENQUEUE_ENTRY</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name></name></expr></argument>, <argument><expr><name>p_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_entry_count</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sample</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_hasiframes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator>

<call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>AUDIO_ES</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AddKeyframeEntry</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_write_pos</name></expr></argument>, <argument><expr><name>i_trak</name></expr></argument>, <argument><expr><name>i_sample</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_time</name> <operator>+=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>traf</name></expr></argument>, <argument><expr><name>trun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>moof</name></expr></argument>, <argument><expr><name>traf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>moof</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>moof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>box_fix</name><argument_list>(<argument><expr><name>moof</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>moof</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_fixupoffset</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_set_32be</name><argument_list>(<argument><expr><name>moof</name></expr></argument>, <argument><expr><name>i_fixupoffset</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>moof</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>moof</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>

<return>return <expr><name>moof</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WriteFragmentMDAT</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_total_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>mdat</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"mdat"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mdat</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>mdat</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_fix</name><argument_list>(<argument><expr><name>mdat</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>mdat</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i_total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>mdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>mdat</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mdat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i_trak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_trak</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i_trak</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i_trak</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_first</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_fragentry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_written_duration</name></name> <operator>+=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_first</name></name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_first</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>towrite</name><operator>.</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetMfraBox</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_mux_sys_t</name><operator>*</operator><operator>)</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>mfra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentries</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>tfra</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"tfra"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tfra</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tfra</name></expr></argument>, <argument><expr><call><name>mp4mux_track_GetID</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tfra</name></expr></argument>, <argument><expr><literal type="number">0x3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tfra</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>uint32_t</name></type> <name>i_index</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name><operator>&lt;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_indexentries</name></name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_fragindex_t</name> <modifier>*</modifier></type><name>p_indexentry</name> <init>= <expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_indexentries</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tfra</name></expr></argument>, <argument><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tfra</name></expr></argument>, <argument><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_moofoffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_traf</name></name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_trun</name></name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_sample</name></name></expr></argument>)</argument_list></sizeof><operator>==</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>tfra</name></expr></argument>, <argument><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_traf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>tfra</name></expr></argument>, <argument><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_trun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tfra</name></expr></argument>, <argument><expr><name><name>p_indexentry</name><operator>-&gt;</operator><name>i_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mfra</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>mfra</name> <operator>=</operator> <call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"mfra"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>tfra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>mfra</name></expr></argument>,<argument><expr><name>tfra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>mfra</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FlushHeader</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_mux_sys_t</name><operator>*</operator><operator>)</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><literal type="number">0x1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_Set64BitExt</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>ftyp</name> <init>= <expr><call><name>mp4mux_GetFtyp</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>ftyp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>moov</name> <init>= <expr><call><name>mp4mux_GetMoov</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>ftyp</name></expr></argument>, <argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ftyp</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>ftyp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_send</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>ftyp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_sent</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>WriteFragments</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_mux_sys_t</name><operator>*</operator><operator>)</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>moof</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_barrier_time</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_written_duration</name></name> <operator>+</operator> <name>FRAGMENT_LENGTH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_mdat_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_samples</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_sent</name></name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>CreateCurrentEdit</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_track_DebugEdits</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_has_samples</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_hasiframes</name></name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>i_last_iframe_time</name></name> <operator>&gt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_written_duration</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator>

<call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>AUDIO_ES</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_barrier_time</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name>i_barrier_time</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_iframe_time</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_header_sent</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FlushHeader</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_has_samples</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>moof</name> <operator>=</operator> <call><name>GetMoofBox</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_mdat_size</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>b_flush</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><name>i_barrier_time</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>moof</name> <operator>&amp;&amp;</operator> <name>i_mdat_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>moof</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name>moof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>moof</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"writing moof @ %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>bo_size</name><argument_list>(<argument><expr><name>moof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>moof</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>box_send</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>moof</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"writing mdat @ %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WriteFragmentMDAT</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>i_mdat_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_iframe_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LengthLocalFixup</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_entrydata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>

<call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_entrydata</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(

<argument><expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"video track %d fixup to %"</literal><name>PRId64</name><literal type="string">" for sample %u"</literal></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetID</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_entrydata</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetSampleCount</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>AUDIO_ES</name> <operator>&amp;&amp;</operator>

<call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>p_entrydata</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>&amp;&amp;</operator> <call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_entrydata</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>p_entrydata</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"audio track %d fixup to %"</literal><name>PRId64</name><literal type="string">" for sample %u"</literal></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetID</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_entrydata</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetSampleCount</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"unknown length for track %d sample %u"</literal></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetID</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetSampleCount</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_entrydata</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseFrag</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name> <operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_mux_sys_t</name><operator>*</operator><operator>)</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name><operator>-&gt;</operator><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LengthLocalFixup</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name><operator>-&gt;</operator><name>p_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ENQUEUE_ENTRY</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>WriteFragments</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument>, <argument><expr><literal type="string">"mp4frag"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>mfra</name> <init>= <expr><call><name>GetMfraBox</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mfra</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>mfro</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"mfro"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mfro</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mfra</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>box_fix</name><argument_list>(<argument><expr><name>mfra</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>mfra</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mfro</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>mfra</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>MP4_MFRO_BOXSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>mfra</name></expr></argument>, <argument><expr><name>mfro</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>box_send</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>mfra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4_stream_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp4mux_Delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>muxh</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MuxFrag</name><parameter_list>(<parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>sout_mux_sys_t</name><operator>*</operator><operator>)</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name> <init>= <expr><call><name>sout_MuxGetStream</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_stream</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>mp4_stream_t</name><operator>*</operator><operator>)</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_currentblock</name> <init>= <expr><call><name>BlockDequeue</name><argument_list>(<argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_currentblock</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_first_dts</name></name> <operator>=</operator> <name><name>p_currentblock</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name> <operator>=</operator> <name><name>p_currentblock</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_heldblock</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name><operator>-&gt;</operator><name>p_block</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_heldblock</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_currentblock</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_heldblock</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_currentblock</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_heldblock</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_heldblock</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LengthLocalFixup</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_heldblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ENQUEUE_ENTRY</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_hasiframes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_heldblock</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name><operator>)</operator> <operator>&amp;&amp;</operator>

<call><name>mp4mux_track_GetDuration</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_written_duration</name></name> <operator>&lt;</operator> <name>FRAGMENT_LENGTH</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_iframe_time</name></name> <operator>=</operator> <call><name>mp4mux_track_GetDuration</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mp4mux_track_ForceDuration</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>,

<argument><expr><call><name>mp4mux_track_GetDuration</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_heldblock</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mp4_fragentry_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name><operator>-&gt;</operator><name>p_block</name></name> <operator>=</operator> <name>p_currentblock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name><operator>-&gt;</operator><name>i_run</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_current_run</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_held_entry</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>b_hasiframes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_currentblock</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_hasiframes</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>mp4mux_track_HasBFrames</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_currentblock</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>p_currentblock</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&gt;</operator> <name><name>p_currentblock</name><operator>-&gt;</operator><name>i_dts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_track_SetHasBFrames</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_min_read_duration</name> <init>= <expr><call><name>mp4mux_track_GetDuration</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_min_written_duration</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_written_duration</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nb_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4_stream_t</name> <modifier>*</modifier></type><name>p_s</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>

<call><name>mp4mux_track_GetFmt</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_cat</name> <operator>!=</operator> <name>AUDIO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>mp4mux_track_GetDuration</name><argument_list>(<argument><expr><name><name>p_s</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>i_min_read_duration</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_min_read_duration</name> <operator>=</operator> <call><name>mp4mux_track_GetDuration</name><argument_list>(<argument><expr><name><name>p_s</name><operator>-&gt;</operator><name>tinfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_s</name><operator>-&gt;</operator><name>i_written_duration</name></name> <operator>&lt;</operator> <name>i_min_written_duration</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_min_written_duration</name> <operator>=</operator> <name><name>p_s</name><operator>-&gt;</operator><name>i_written_duration</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_read_duration</name></name> <operator>=</operator> <name>i_min_read_duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_written_duration</name></name> <operator>=</operator> <name>i_min_written_duration</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>read</name><operator>.</operator><name>p_first</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_read_duration</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_written_duration</name></name> <operator>&gt;=</operator> <name>FRAGMENT_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>WriteFragments</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
