<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\mux\mp4\libmp4mux.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libmp4mux.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../demux/mp4/libmp4.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/hevc_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/h264_nal.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/hxxx_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/iso_color_tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_iso_lang.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_text_style.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<struct>struct <name>mp4mux_trackinfo_t</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_track_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_samples_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_samples_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

}</block> <decl><name>sample_priv</name></decl>;</struct>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_read_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_hasbframes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>mp4mux_interlacing</name></name></type> <name>e_interlace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_trex_default_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_trex_default_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_edits_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mp4mux_edit_t</name> <modifier>*</modifier></type><name>p_edits</name></decl>;</decl_stmt>

}</block>;</struct>

<struct>struct <name>mp4mux_handle_t</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>tracks</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_major</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_minor</name></decl>;</decl_stmt>

<macro><name>DECL_ARRAY</name><argument_list>(<argument>vlc_fourcc_t</argument>)</argument_list></macro> <expr_stmt><expr><name>extra</name></expr>;</expr_stmt>

}</block> <decl><name>brands</name></decl>;</struct>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp4mux_AddExtraBrandForFormat</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrand</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BRAND_avc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrand</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BRAND_hevc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_AV1</name></expr>:</case>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrand</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BRAND_av01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrand</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BRAND_iso6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DIV1</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DIV2</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DIV3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_H263</name></expr>:</case>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrand</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BRAND_mp41</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrand</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BRAND_mp41</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrand</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>BRAND_M4A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>mp4mux_trackinfo_Init</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_id</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_stream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>=</operator> <name>i_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>=</operator> <name>i_timescale</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mp4mux_trackinfo_Clear</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp4mux_track_SetSamplePriv</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_edits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type> <name>mp4mux_track_Add</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>timescale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>t</name> <operator>||</operator> <operator>!</operator><call><name>mp4mux_trackinfo_Init</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>=</operator> <name>timescale</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_append</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrandForFormat</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mp4mux_track_AddEdit</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mp4mux_edit_t</name> <modifier>*</modifier></type><name>p_newedit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>i_edits_count</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>i_edits_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mp4mux_edit_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>vlc_reallocarray</name><argument_list>( <argument><expr><name><name>t</name><operator>-&gt;</operator><name>p_edits</name></name></expr></argument>,

<argument><expr><name><name>t</name><operator>-&gt;</operator><name>i_edits_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_realloc</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_realloc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>p_edits</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>i_edits_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p_newedit</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>mp4mux_edit_t</name> <modifier>*</modifier></type><name>mp4mux_track_GetLastEdit</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>i_edits_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>i_edits_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_track_DebugEdits</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>t</name><operator>-&gt;</operator><name>i_edits_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"tk %d elst media time %"</literal> <name>PRId64</name> <literal type="string">" duration %"</literal> <name>PRIu64</name> <literal type="string">" offset %"</literal> <name>PRId64</name></expr></argument> ,

<argument><expr><name><name>t</name><operator>-&gt;</operator><name>i_track_id</name></name></expr></argument>,

<argument><expr><name><name>t</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start_time</name></expr></argument>,

<argument><expr><name><name>t</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_duration</name></expr></argument>,

<argument><expr><name><name>t</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mp4mux_track_AddSample</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_count</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name><name>t</name><operator>-&gt;</operator><name>i_samples_max</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_max</name></name> <operator>+</operator> <literal type="number">1000</literal> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>i_samples_max</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>vlc_reallocarray</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>,

<argument><expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_max</name></name> <operator>+</operator> <literal type="number">1000</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_realloc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_realloc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_max</name></name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>entry</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>b_hasbframes</name></name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>i_pts_dts</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>b_hasbframes</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_read_duration</name></name> <operator>+=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>mp4mux_track_GetLastSample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>mp4mux_track_GetSampleCount</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_track_UpdateLastSample</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>i_samples_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_read_duration</name></name> <operator>-=</operator> <name><name>e</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_read_duration</name></name> <operator>+=</operator> <name><name>entry</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>e</name> <operator>=</operator> <operator>*</operator><name>entry</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>mp4mux_track_GetDefaultSampleDuration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>i_trex_default_length</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>mp4mux_track_GetDefaultSampleSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>i_trex_default_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type> <name>mp4mux_track_GetFmt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>fmt</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mp4mux_track_HasBFrames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>b_hasbframes</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_track_SetHasBFrames</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>b_hasbframes</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>mp4mux_track_GetTimescale</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>i_timescale</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>mp4mux_track_GetDuration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>i_read_duration</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_track_ForceDuration</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_read_duration</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>mp4mux_track_GetID</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>i_track_id</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_track_SetInterlacing</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>mp4mux_interlacing</name></name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>e_interlace</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>mp4mux_interlacing</name></name></type> <name>mp4mux_track_GetInterlacing</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>e_interlace</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_track_SetSamplePriv</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>p_data</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>p_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>i_data</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_data</name> <operator>&amp;&amp;</operator> <name>i_data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_data</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>t</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>i_data</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mp4mux_track_HasSamplePriv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>t</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>i_data</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_ShiftSamples</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i_track</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_track</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i_track</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i_track</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>t</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>sample</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>samples</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sample</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pos</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type> <name>mp4mux_New</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>mp4mux_options</name></name></type> <name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>i_major</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>i_minor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>options</name></expr>;</expr_stmt>

<return>return <expr><name>h</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_Delete</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mp4mux_trackinfo_Clear</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_Set64BitExt</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>|=</operator> <name>USE64BITEXT</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mp4mux_Is</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>mp4mux_options</name></name></type> <name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>o</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_SetBrand</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_major</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_minor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>i_major</name></name> <operator>=</operator> <name>i_major</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>i_minor</name></name> <operator>=</operator> <name>i_minor</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mp4mux_AddExtraBrand</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_major</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mp4mux_AddExtraBrand</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>extra</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>extra</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>extra</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bo_t</name> <modifier>*</modifier></type><name>box_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>box</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>box</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>bo_init</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name> <argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name>fcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>box</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bo_t</name> <modifier>*</modifier></type><name>box_full_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fcc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>box</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_8</name> <argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_24be</name> <argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>box</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>box_fix</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_set_32be</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>box_gather</name> <parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>, <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>box2</name> <operator>&amp;&amp;</operator> <name><name>box2</name><operator>-&gt;</operator><name>b</name></name> <operator>&amp;&amp;</operator> <name>box</name> <operator>&amp;&amp;</operator> <name><name>box</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>box_fix</name><argument_list>(<argument><expr><name>box2</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>( <argument><expr><name>box2</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><call><name>bo_size</name><argument_list>( <argument><expr><name>box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>box</name><operator>-&gt;</operator><name>b</name></name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>(<argument><expr><name><name>box</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>box</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name><name>box2</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name><name>box</name><operator>-&gt;</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>box</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>box2</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>box2</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>box2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>bo_add_mp4_tag_descr</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><operator>(</operator><name>size</name><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">7</literal><operator>*</operator><name>i</name><operator>)</operator><operator>)</operator> <operator>|</operator> <literal type="number">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name>size</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>get_timestamp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_timestamp</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_timestamp</name> <operator>+=</operator> <literal type="number">2082844800</literal></expr>;</expr_stmt> 

<return>return <expr><name>i_timestamp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>matrix_apply_rotation</name><parameter_list>(<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name><name>mvhd_matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>video_orientation_t</name></name></type> <name>orientation</name> <init>= <expr><name>ORIENT_NORMAL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>orientation</name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATAN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { mvhd_matrix[1] = ((uint32_t)(a)) &lt;&lt; 16; mvhd_matrix[0] = ((uint32_t)(b)) &lt;&lt; 16; } while(0)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>orientation</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ORIENT_ROTATED_90</name></expr>:</case> <expr_stmt><expr><call><name>ATAN</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ORIENT_ROTATED_180</name></expr>:</case> <expr_stmt><expr><call><name>ATAN</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>ORIENT_ROTATED_270</name></expr>:</case> <expr_stmt><expr><call><name>ATAN</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>ATAN</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>mvhd_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>mvhd_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x10000</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mvhd_matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>mvhd_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0x10000</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddEdit</name><parameter_list>(<parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>elst</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>i_movie_scaled_duration</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>i_media_scaled_time</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_64_ext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>b_64_ext</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>elst</name></expr></argument>, <argument><expr><name>i_movie_scaled_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>elst</name></expr></argument>, <argument><expr><name>i_media_scaled_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>elst</name></expr></argument>, <argument><expr><name>i_movie_scaled_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>elst</name></expr></argument>, <argument><expr><name>i_media_scaled_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>elst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>elst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetEDTS</name><parameter_list>( <parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_movietimescale</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_64_ext</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_edits_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>edts</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"edts"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>elst</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"elst"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_64_ext</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>elst</name> <operator>||</operator> <operator>!</operator><name>edts</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>elst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>edts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_total_edits</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_edits_count</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_edits_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start_offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_total_edits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>elst</name></expr></argument>, <argument><expr><name>i_total_edits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_edits_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start_offset</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AddEdit</name><argument_list>(<argument><expr><name>elst</name></expr></argument>,

<argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start_offset</name></expr></argument>, <argument><expr><name>i_movietimescale</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>b_64_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AddEdit</name><argument_list>(<argument><expr><name>elst</name></expr></argument>,

<argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_duration</name></expr></argument>, <argument><expr><name>i_movietimescale</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_edits</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start_time</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>b_64_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>edts</name></expr></argument>, <argument><expr><name>elst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>edts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetESDS</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>esds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extradata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extradata</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extradata_allocated</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_SPU</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SPU_PALETTE_DEFINED</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>p_extradata</name> <operator>=</operator> <name>p_extradata_allocated</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_extradata_allocated</name></expr>)</condition>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_extradata_allocated</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i_extradata</name> <operator>=</operator> <literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>p_extradata</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_extradata</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>p_extradata</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_extradata</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>i_decoder_specific_info_size</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_extradata</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">5</literal> <operator>+</operator> <name>i_extradata</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>esds</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"esds"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>esds</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_extradata_allocated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_bitrate_avg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_bitrate_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i_bitrate_avg</name> <operator>+=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_bitrate</name> <init>= <expr><name>CLOCK_FREQ</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name> <operator>/</operator> <name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_length</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_bitrate</name> <operator>&gt;</operator> <name>i_bitrate_max</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bitrate_max</name> <operator>=</operator> <name>i_bitrate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_read_duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bitrate_avg</name> <operator>=</operator> <name>CLOCK_FREQ</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>i_bitrate_avg</name> <operator>/</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_read_duration</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bitrate_avg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_bitrate_max</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bitrate_max</name> <operator>=</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_mp4_tag_descr</name><argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">13</literal> <operator>+</operator> <name>i_decoder_specific_info_size</name> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name> <argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_mp4_tag_descr</name><argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument>, <argument><expr><literal type="number">13</literal> <operator>+</operator> <name>i_decoder_specific_info_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_object_profile_indication</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>

<expr_stmt><expr><name>i_object_profile_indication</name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>==</operator> <name>VLC_CODEC_MP1V</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_object_profile_indication</name> <operator>=</operator> <literal type="number">0x6a</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>VLC_CODEC_MP2V</name></expr>:</case>

<expr_stmt><expr><name>i_object_profile_indication</name> <operator>=</operator> <literal type="number">0x61</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP1V</name></expr>:</case>

<expr_stmt><expr><name>i_object_profile_indication</name> <operator>=</operator> <literal type="number">0x6a</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>

<expr_stmt><expr><name>i_object_profile_indication</name> <operator>=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>

<expr_stmt><expr><name>i_object_profile_indication</name> <operator>=</operator>

<ternary><condition><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&lt;</operator> <literal type="number">32000</literal></expr> ?</condition><then> <expr><literal type="number">0x69</literal></expr> 

</then><else>: <expr><literal type="number">0x6b</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>

<expr_stmt><expr><name>i_object_profile_indication</name> <operator>=</operator> <literal type="number">0xa9</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>VLC_CODEC_SPU</name></expr>:</case>

<expr_stmt><expr><name>i_object_profile_indication</name> <operator>=</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt> 

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>i_object_profile_indication</name> <operator>=</operator> <literal type="number">0xFE</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_type</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<expr_stmt><expr><name>i_stream_type</name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<expr_stmt><expr><name>i_stream_type</name> <operator>=</operator> <literal type="number">0x05</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>

<expr_stmt><expr><name>i_stream_type</name> <operator>=</operator> <literal type="number">0x0D</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>i_stream_type</name> <operator>=</operator> <literal type="number">0x20</literal></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>bo_add_8</name> <argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><name>i_object_profile_indication</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name> <argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><operator>(</operator><name>i_stream_type</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_24be</name><argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><name>i_bitrate_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><name>i_bitrate_avg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>i_extradata</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_mp4_tag_descr</name><argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><name>i_extradata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_extradata</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><name><name>p_extradata</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_extradata_allocated</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_mp4_tag_descr</name><argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><literal type="number">0x06</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name> <argument_list>(<argument><expr><name>esds</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>esds</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetWaveTag</name><parameter_list>(<parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>wave</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name></decl>;</decl_stmt>

<expr_stmt><expr><name>wave</name> <operator>=</operator> <call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"wave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>wave</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"frma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>box</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="string">"mp4a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>wave</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"mp4a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>box</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>wave</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>GetESDS</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>wave</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"srcq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>box</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>wave</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>wave</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>wave</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>wave</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetDamrTag</name><parameter_list>(<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>damr</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"damr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>damr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>damr</name></expr></argument>, <argument><expr><literal type="string">"REFC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>damr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_AMR_NB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>damr</name></expr></argument>, <argument><expr><literal type="number">0x81ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>damr</name></expr></argument>, <argument><expr><literal type="number">0x83ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>damr</name></expr></argument>, <argument><expr><literal type="number">0x1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>damr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetD263Tag</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>d263</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"d263"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>d263</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>d263</name></expr></argument>, <argument><expr><literal type="string">"VLC "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>d263</name></expr></argument>, <argument><expr><literal type="number">0xa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>d263</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>d263</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetHvcCTag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_completeness</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>hvcC</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"hvcC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hvcC</name> <operator>||</operator> <operator>!</operator><name>i_extra</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>hvcC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hevc_ishvcC</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>bo_add_mem</name><argument_list>(<argument><expr><name>hvcC</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hvcC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hevc_dcr_params</name></name></type> <name>params</name> <init>= <expr><block>{ }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_nal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hxxx_iterator_ctx_t</name></type> <name>it</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hxxx_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>(<expr><call><name>hxxx_annexb_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>it</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_nal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_nal</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>hevc_getNALType</name><argument_list>(<argument><expr><name>p_nal</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEVC_NAL_VPS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>params</name><operator>.</operator><name>i_vps_count</name></name> <operator>!=</operator> <name>HEVC_DCR_VPS_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_vps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_vps_count</name></name></expr>]</index></name> <operator>=</operator> <name>p_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_vps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_vps_count</name></name></expr>]</index></name> <operator>=</operator> <name>i_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>i_vps_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SPS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>params</name><operator>.</operator><name>i_sps_count</name></name> <operator>!=</operator> <name>HEVC_DCR_SPS_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_sps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_sps_count</name></name></expr>]</index></name> <operator>=</operator> <name>p_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_sps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_sps_count</name></name></expr>]</index></name> <operator>=</operator> <name>i_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>i_sps_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_PPS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>params</name><operator>.</operator><name>i_pps_count</name></name> <operator>!=</operator> <name>HEVC_DCR_PPS_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_pps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_pps_count</name></name></expr>]</index></name> <operator>=</operator> <name>p_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_pps</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_pps_count</name></name></expr>]</index></name> <operator>=</operator> <name>i_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>i_pps_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_PREF_SEI</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>params</name><operator>.</operator><name>i_seipref_count</name></name> <operator>!=</operator> <name>HEVC_DCR_SEI_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_seipref</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_seipref_count</name></name></expr>]</index></name> <operator>=</operator> <name>p_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_seipref</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_seipref_count</name></name></expr>]</index></name> <operator>=</operator> <name>i_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>i_seipref_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SUFF_SEI</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name><name>params</name><operator>.</operator><name>i_seisuff_count</name></name> <operator>!=</operator> <name>HEVC_DCR_SEI_COUNT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_seisuff</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_seisuff_count</name></name></expr>]</index></name> <operator>=</operator> <name>p_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>rgi_seisuff</name><index>[<expr><name><name>params</name><operator>.</operator><name>i_seisuff_count</name></name></expr>]</index></name> <operator>=</operator> <name>i_nal</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>i_seisuff_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_dcr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dcr</name> <init>= <expr><call><name>hevc_create_dcr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>b_completeness</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dcr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_dcr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>hvcC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>hvcC</name></expr></argument>, <argument><expr><name>i_dcr</name></expr></argument>, <argument><expr><name>p_dcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_dcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>hvcC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetWaveFormatExTag</name><parameter_list>(<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>box</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>wFormatTag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fourcc_to_wf_tag</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wFormatTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name>wFormatTag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32le</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16le</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>box</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetxxxxTag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>box</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>box</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetFielBox</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>mp4mux_interlacing</name></name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"fiel"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_box</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>values</name><index>[]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><name>INTERLACING_NONE</name></expr>]</index> <operator>=</operator> <literal type="number">0x0100</literal></expr>,

<expr><index>[<expr><name>INTERLACING_SINGLE_FIELD</name></expr>]</index> <operator>=</operator> <literal type="number">0x0200</literal></expr>,

<expr><index>[<expr><name>INTERLACING_TOPBOTTOM</name></expr>]</index> <operator>=</operator> <literal type="number">0x0201</literal></expr>,

<expr><index>[<expr><name>INTERLACING_BOTTOMTOP</name></expr> ]</index> <operator>=</operator> <literal type="number">0x0206</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetColrBox</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_vfmt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"colr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_box</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>b_mov</name></expr> ?</condition><then> <expr><literal type="string">"nclc"</literal></expr> </then><else>: <expr><literal type="string">"nclx"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><call><name>vlc_primaries_to_iso_23001_8_cp</name><argument_list>(<argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>primaries</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><call><name>vlc_xfer_to_iso_23001_8_tc</name><argument_list>(<argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>transfer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><call><name>vlc_coeffs_to_iso_23001_8_mc</name><argument_list>(<argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>space</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>COLOR_RANGE_FULL</name></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetMdcv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_vfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_vfmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"mdcv"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_box</name></expr>)</condition>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>min_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetClli</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_vfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_vfmt</name><operator>-&gt;</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"clli"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_box</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><name><name>p_vfmt</name><operator>-&gt;</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetAvcCTag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>avcC</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"avcC"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>avcC</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_pps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_ext</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_sps_size</name></decl>, <decl><type ref="prev"/><name>i_pps_size</name></decl>, <decl><type ref="prev"/><name>i_ext_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator> <call><name>h264_AnnexB_get_spspps</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sps_size</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_pps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pps_size</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_ext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_ext_size</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_sps</name> <operator>=</operator> <name>p_pps</name> <operator>=</operator> <name>p_ext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sps_size</name> <operator>=</operator> <name>i_pps_size</name> <operator>=</operator> <name>i_ext_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i_sps_size</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>p_sps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>PROFILE_H264_MAIN</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i_sps_size</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>p_sps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i_sps_size</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>p_sps</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">30</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><literal type="number">0xe0</literal> <operator>|</operator> <operator>(</operator><ternary><condition><expr><name>i_sps_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>i_sps_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><name>i_sps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><name>i_sps_size</name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>i_pps_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>i_pps_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><name>i_pps_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><name>i_pps_size</name></expr></argument>, <argument><expr><name>p_pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sps_size</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_sps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>PROFILE_H264_HIGH</name> <operator>||</operator>

<name><name>p_sps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>PROFILE_H264_HIGH_10</name> <operator>||</operator>

<name><name>p_sps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>PROFILE_H264_HIGH_422</name> <operator>||</operator>

<name><name>p_sps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>PROFILE_H264_HIGH_444</name> <operator>||</operator>

<name><name>p_sps</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>PROFILE_H264_HIGH_444_PREDICTIVE</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_spsdata</name> <init>= <expr><call><name>h264_decode_sps</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name>i_sps_size</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_spsdata</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>h264_get_chroma_luma</name><argument_list>( <argument><expr><name>p_spsdata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><literal type="number">0xFC</literal> <operator>|</operator> <name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><literal type="number">0xF8</literal> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><literal type="number">0xF8</literal> <operator>|</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>i_ext_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ext_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><name>i_ext_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>avcC</name></expr></argument>, <argument><expr><name>i_ext_size</name></expr></argument>, <argument><expr><name>p_ext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>h264_release_sps</name><argument_list>( <argument><expr><name>p_spsdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>avcC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetSVQ3Tag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>smi</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"SMI "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>smi</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_extra</name> <operator>&gt;</operator> <literal type="number">0x4e</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><name>i_extra</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">0x46</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>p_end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"SMI "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>smi</name></expr></argument>, <argument><expr><name>p_end</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>smi</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>smi</name></expr></argument>, <argument><expr><literal type="string">"SEQH"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>smi</name></expr></argument>, <argument><expr><literal type="number">0x5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>smi</name></expr></argument>, <argument><expr><literal type="number">0xe2c0211d</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>smi</name></expr></argument>, <argument><expr><literal type="number">0xc0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>smi</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetUdtaTag</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>muxh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>udta</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"udta"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>udta</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>muxh</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>muxh</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_MP4V</name> <operator>||</operator> <name>codec</name> <operator>==</operator> <name>VLC_CODEC_MP4A</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"\251req"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>box</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"QuickTime 6.0 or greater"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"QuickTime 6.0 or greater"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><literal type="string">"QuickTime 6.0 or greater"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>udta</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"\251enc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>box</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PACKAGE_STRING</name> <literal type="string">" stream output"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PACKAGE_STRING</name> <literal type="string">" stream output"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>PACKAGE_STRING</name> <literal type="string">" stream output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>udta</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

vlc_meta_t *p_meta = p_mux-&gt;p_sout-&gt;p_meta;

if (p_meta) {

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADD_META_BOX</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>box_string</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ bo_t *box = NULL; if (vlc_meta_Get(p_meta, vlc_meta_##type)) box = box_new("\251" box_string); if (box) { bo_add_16be(box, strlen(vlc_meta_Get(p_meta, vlc_meta_##type))); bo_add_16be(box, 0); bo_add_mem(box, strlen(vlc_meta_Get(p_meta, vlc_meta_##type)), (uint8_t*)(vlc_meta_Get(p_meta, vlc_meta_##type))); box_gather(udta, box); } }</cpp:value></cpp:define>

ADD_META_BOX(Title, "nam");

ADD_META_BOX(Artist, "ART");

ADD_META_BOX(Genre, "gen");

ADD_META_BOX(Copyright, "cpy");

ADD_META_BOX(Description, "des");

ADD_META_BOX(Date, "day");

ADD_META_BOX(URL, "url");

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ADD_META_BOX</name></cpp:undef>

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>udta</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetSounBox</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_descr</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fcc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_MPGA</name> <operator>||</operator>

<name>codec</name> <operator>==</operator> <name>VLC_CODEC_MP3</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>b_mov</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b_descr</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">".mp3"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"mp4a"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_A52</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"ac-3"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_EAC3</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"ec-3"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_DTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"DTS "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_WMAP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"wma "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_fourcc_to_char</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>fcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>soun</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>soun</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>b_mov</name> <operator>&amp;&amp;</operator> <name>codec</name> <operator>==</operator> <name>VLC_CODEC_MP4A</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr> ?</condition><then>

<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>b_mov</name> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4A</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">1536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_descr</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extradata</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extradata</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>i_data</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_extradata</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>p_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_extradata</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>i_data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_mov</name> <operator>&amp;&amp;</operator> <name>codec</name> <operator>==</operator> <name>VLC_CODEC_MP4A</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>GetWaveTag</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_AMR_NB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>GetDamrTag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_A52</name> <operator>&amp;&amp;</operator> <name>i_extradata</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>GetxxxxTag</name><argument_list>(<argument><expr><name>p_extradata</name></expr></argument>, <argument><expr><name>i_extradata</name></expr></argument>, <argument><expr><literal type="string">"dac3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_EAC3</name> <operator>&amp;&amp;</operator> <name>i_extradata</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>GetxxxxTag</name><argument_list>(<argument><expr><name>p_extradata</name></expr></argument>, <argument><expr><name>i_extradata</name></expr></argument>, <argument><expr><literal type="string">"dec3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_WMAP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>GetWaveFormatExTag</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><literal type="string">"wfex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>box</name> <operator>=</operator> <call><name>GetESDS</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>box</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>soun</name></expr></argument>, <argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>soun</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetVideBox</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>fcc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_colr</name> <init>= <expr><name>false</name></expr></init></decl>, <decl><type ref="prev"/><name>b_fiel</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>VLC_CODEC_YUV4</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>,<argument><expr><literal type="char">'u'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incorrect fcc for yuv4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>VLC_CODEC_V210</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incorrect fcc for v210"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>VLC_CODEC_V308</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'3'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incorrect fcc for v308"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>VLC_CODEC_V408</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>,<argument><expr><literal type="char">'8'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incorrect fcc for v408"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>VLC_CODEC_V410</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"incorrect fcc for v410"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"mp4v"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_MJPG</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"mjpa"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_SVQ1</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"SVQ1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_SVQ3</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"SVQ3"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_H263</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"s263"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"avc1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_VC1</name></expr> :</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"vc-1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"hev1"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"yv12"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>b_colr</name> <operator>=</operator> <name>b_fiel</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"YUY2"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>b_colr</name> <operator>=</operator> <name>b_fiel</name><operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case> <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>, <argument><expr><literal type="string">"2vuy"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>b_colr</name> <operator>=</operator> <name>b_fiel</name><operator>=</operator> <name>true</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>VLC_CODEC_YUV4</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_V210</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_V308</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_V408</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_V410</name></expr>:</case>

<expr_stmt><expr><call><name>vlc_fourcc_to_char</name><argument_list>(<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>fcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_colr</name> <operator>=</operator> <name>b_fiel</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_fourcc_to_char</name><argument_list>(<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>fcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>vide</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><name>fcc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>vide</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">0x00480000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">0x00480000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>compressor_name</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_AV1</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>compressor_name</name></expr></argument>, <argument><expr><literal type="string">"\012AOM Coding"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>compressor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><literal type="number">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extradata</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extradata</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>i_data</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_extradata</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>p_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_extradata</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>sample_priv</name><operator>.</operator><name>i_data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_AV1</name></expr>:</case>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetxxxxTag</name><argument_list>(<argument><expr><name>p_extradata</name></expr></argument>, <argument><expr><name>i_extradata</name></expr></argument>, <argument><expr><literal type="string">"av1C"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_colr</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetESDS</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_H263</name></expr>:</case>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetD263Tag</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_SVQ3</name></expr>:</case>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetSVQ3Tag</name><argument_list>(<argument><expr><name>p_extradata</name></expr></argument>, <argument><expr><name>i_extradata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetAvcCTag</name><argument_list>(<argument><expr><name>p_extradata</name></expr></argument>, <argument><expr><name>i_extradata</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_VC1</name></expr>:</case>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetxxxxTag</name><argument_list>(<argument><expr><name>p_extradata</name></expr></argument>, <argument><expr><name>i_extradata</name></expr></argument>, <argument><expr><literal type="string">"dvc1"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetHvcCTag</name><argument_list>(<argument><expr><name>p_extradata</name></expr></argument>, <argument><expr><name>i_extradata</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>b_colr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetColrBox</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>b_mov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>b_fiel</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetFielBox</name><argument_list>(<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>e_interlace</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetMdcv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>vide</name></expr></argument>, <argument><expr><call><name>GetClli</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>vide</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetTextBox</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_mov</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_QTXT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>text</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;=</operator> <literal type="number">44</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"Serif"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>text</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SUBT</name> <operator>||</operator>

<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TX3G</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>tx3g</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"tx3g"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tx3g</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TX3G</name> <operator>&amp;&amp;</operator>

<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><name>STYLE_DEFAULT_FONT_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><literal type="number">0xFFFFFFFFU</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>ftab</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"ftab"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ftab</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>ftab</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_mov</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>ftab</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>ftab</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"Serif"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>ftab</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>ftab</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <operator>(</operator><ternary><condition><expr><name>b_mov</name></expr> ?</condition><then> <expr><literal type="string">"Sans-Serif"</literal></expr> </then><else>: <expr><literal type="string">"Sans-serif"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_mov</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>ftab</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>ftab</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><literal type="string">"Monospace"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>tx3g</name></expr></argument>, <argument><expr><name>ftab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>tx3g</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_WEBVTT</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>wvtt</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"wvtt"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>wvtt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>wvtt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>wvtt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>ftab</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"vttc"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>wvtt</name></expr></argument>, <argument><expr><name>ftab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>wvtt</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TTML</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>stpp</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"stpp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stpp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>stpp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>stpp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>stpp</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SPU</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>mp4s</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"mp4s"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mp4s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>mp4s</name></expr></argument>, <argument><expr><call><name>GetESDS</name><argument_list>(<argument><expr><name>p_track</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>mp4s</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>GetScaledEntryDuration</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>p_entry</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_total_mtime</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>pi_total_scaled</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_totalscaledtototalmtime</name> <init>= <expr><call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><operator>*</operator><name>pi_total_scaled</name></expr></argument>, <argument><expr><name>i_timescale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_diff</name> <init>= <expr><operator>*</operator><name>pi_total_mtime</name> <operator>-</operator> <name>i_totalscaledtototalmtime</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_scaled</name> <init>= <expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+</operator> <name>i_diff</name></expr></argument>, <argument><expr><name>i_timescale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_total_mtime</name> <operator>+=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_total_scaled</name> <operator>+=</operator> <name>i_scaled</name></expr>;</expr_stmt>

<return>return <expr><name>i_scaled</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bo_t</name> <modifier>*</modifier></type><name>GetStblBox</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_mov</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_stco64</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>stsd</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"stsd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stsd</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stsd</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stsd</name></expr></argument>, <argument><expr><call><name>GetSounBox</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>b_mov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stsd</name></expr></argument>, <argument><expr><call><name>GetVideBox</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>b_mov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stsd</name></expr></argument>, <argument><expr><call><name>GetTextBox</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>b_mov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>stco</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b_stco64</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stco</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"co64"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>stco</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"stco"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stco</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stco</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>stsc</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"stsc"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stsc</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stsc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_chunk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_stsc_last_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_stsc_entries</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>i_chunk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_sample_t</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>samples</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_first</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b_stco64</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>stco</name></expr></argument>, <argument><expr><name><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stco</name></expr></argument>, <argument><expr><name><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pos</name> <operator>+</operator> <name><name>entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name> <operator>!=</operator> <name><name>entry</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i_stsc_last_val</name> <operator>!=</operator> <name>i</name> <operator>-</operator> <name>i_first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stsc</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stsc</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>i_first</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stsc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>i_stsc_last_val</name> <operator>=</operator> <name>i</name> <operator>-</operator> <name>i_first</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_stsc_entries</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_swap_32be</name><argument_list>(<argument><expr><name>stco</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>i_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"created %d chunks (stco)"</literal></expr></argument>, <argument><expr><name>i_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_swap_32be</name><argument_list>(<argument><expr><name>stsc</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>i_stsc_entries</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>stts</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"stts"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stts</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_total_mtime</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_total_scaled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_first</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_scaled</name> <init>= <expr><call><name>GetScaledEntryDuration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_total_mtime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_total_scaled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_total_mtime_next</name> <init>= <expr><name>i_total_mtime</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_total_scaled_next</name> <init>= <expr><name>i_total_scaled</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_scalednext</name> <init>= <expr><call><name>GetScaledEntryDuration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_total_mtime_next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_total_scaled_next</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_scalednext</name> <operator>!=</operator> <name>i_scaled</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_total_mtime</name> <operator>=</operator> <name>i_total_mtime_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_total_scaled</name> <operator>=</operator> <name>i_total_scaled_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stts</name></expr></argument>, <argument><expr><operator>++</operator><name>i</name> <operator>-</operator> <name>i_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stts</name></expr></argument>, <argument><expr><name>i_scaled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_swap_32be</name><argument_list>(<argument><expr><name>stts</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>i_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>ctts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>b_hasbframes</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ctts</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"ctts"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>ctts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_first</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_offset</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pts_dts</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name> <operator>||</operator> <name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pts_dts</name> <operator>!=</operator> <name>i_offset</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>ctts</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>i_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>ctts</name></expr></argument>, <argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>i_offset</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_swap_32be</name><argument_list>(<argument><expr><name>ctts</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>i_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>stsz</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"stsz"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stsz</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name> <operator>!=</operator> <name>i_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stsz</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stsz</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><name>i_size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stsz</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>stss</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_interval</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_interval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_interval</name> <operator>+=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_length</name> <operator>+</operator> <name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pts_dts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_interval</name> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_flags</name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>stss</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>stss</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"stss"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stss</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stss</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>stss</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_interval</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stss</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_swap_32be</name><argument_list>(<argument><expr><name>stss</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>i_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>stbl</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"stbl"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>stbl</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>stss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>ctts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stbl</name></expr></argument>, <argument><expr><name>stsd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stbl</name></expr></argument>, <argument><expr><name>stts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stss</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stbl</name></expr></argument>, <argument><expr><name>stss</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ctts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stbl</name></expr></argument>, <argument><expr><name>ctts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stbl</name></expr></argument>, <argument><expr><name>stsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stbl</name></expr></argument>, <argument><expr><name>stsz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>stbl</name></expr></argument>, <argument><expr><name>stco</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>stbl</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>ApplyARtoWidth</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>vfmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>vfmt</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>vfmt</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>vfmt</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>vfmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>/</operator> <name><name>vfmt</name><operator>-&gt;</operator><name>i_sar_den</name></name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name><name>vfmt</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bo_t</name> <modifier>*</modifier></type> <name>mp4mux_GetMoov</name><parameter_list>(<parameter><decl><type><name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>moov</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>mvhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_movie_timescale</name> <init>= <expr><literal type="number">90000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_timestamp</name> <init>= <expr><call><name>get_timestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_movie_timescale</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mp4mux_trackinfo_t</name> <operator>*</operator><operator>)</operator><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>i_timescale</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>moov</name> <operator>=</operator> <call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"moov"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>moov</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_duration</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>FRAGMENTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_duration</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name>i_duration</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_read_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>p_obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"movie duration %"</literal><name>PRId64</name><literal type="string">"s"</literal></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_duration</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_movie_duration</name> <init>= <expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>i_duration</name></expr></argument>, <argument><expr><name>i_movie_timescale</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>USE64BITEXT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mvhd</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"mvhd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mvhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name>i_movie_timescale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name>i_movie_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mvhd</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"mvhd"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mvhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name>i_movie_timescale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name>i_movie_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><literal type="number">0x10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><literal type="number">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>mvhd_matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x10000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0x40000000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name><name>mvhd_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>lasttrack</name> <init>= <expr><ternary><condition><expr><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_next_track_id</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>lasttrack</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>lasttrack</name><operator>-&gt;</operator><name>i_track_id</name></name> <operator>&lt;</operator> <literal type="number">0xFFFFFFFFU</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_next_track_id</name> <operator>+=</operator> <name><name>lasttrack</name><operator>-&gt;</operator><name>i_track_id</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_next_track_id</name> <operator>=</operator> <literal type="number">0xFFFFFFFFU</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mvhd</name></expr></argument>, <argument><expr><name>i_next_track_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>moov</name></expr></argument>, <argument><expr><name>mvhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i_trak</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_trak</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i_trak</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i_trak</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_stream_duration</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>FRAGMENTED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_stream_duration</name> <operator>=</operator> <call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_read_duration</name></name></expr></argument>, <argument><expr><name>i_movie_timescale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_stream_duration</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>trak</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"trak"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>trak</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>tkhd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>USE64BITEXT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tkhd</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"tkhd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tkhd</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"tkhd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tkhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>trak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name>i_stream_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tkhd</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"tkhd"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tkhd</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"tkhd"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>tkhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>trak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name>i_stream_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> ?</condition><then> <expr><literal type="number">0x100</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>matrix_apply_rotation</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>mvhd_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name><name>mvhd_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><call><name>ApplyARtoWidth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_width</name> <init>= <expr><literal type="number">320</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_height</name> <init>= <expr><literal type="number">200</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <call><name>ApplyARtoWidth</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_height</name> <operator>=</operator> <name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name>i_width</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>tkhd</name></expr></argument>, <argument><expr><name>i_height</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>trak</name></expr></argument>, <argument><expr><name>tkhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>edts</name> <init>= <expr><call><name>GetEDTS</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_movie_timescale</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>USE64BITEXT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>edts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>trak</name></expr></argument>, <argument><expr><name>edts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>mdia</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"mdia"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mdia</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>trak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>mdhd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>USE64BITEXT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mdhd</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"mdhd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mdhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>mdia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>trak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><name>i_stream_duration</name> <operator>*</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>/</operator> <name>i_movie_timescale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mdhd</name> <operator>=</operator> <call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"mdhd"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>mdhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>mdia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>trak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><name>i_timestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><name>i_stream_duration</name> <operator>*</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>/</operator> <name>i_movie_timescale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>iso639_lang_t</name> <modifier>*</modifier></type><name>pl</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>lang</name> <init>= <expr><literal type="number">0x0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_1</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_2B</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument>, <argument><expr><literal type="string">"??"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pl</name> <operator>=</operator> <call><name>GetLang_2T</name><argument_list>(<argument><expr><name>psz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pl</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_1</name></name></expr></argument>, <argument><expr><literal type="string">"??"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lang</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x60</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>pl</name><operator>-&gt;</operator><name>psz_iso639_2T</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">0x60</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><name>lang</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>mdhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>mdia</name></expr></argument>, <argument><expr><name>mdhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>hdlr</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"hdlr"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>hdlr</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>mdia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>trak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="string">"mhlr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="string">"soun"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="string">"vide"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TX3G</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"sbtl"</literal></expr> </then><else>: <expr><literal type="string">"text"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TTML</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="string">"sbtl"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SPU</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="string">"subp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"SoundHandler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"VideoHandler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SPU</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>language</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>strncpy</name><argument_list>( <argument><expr><name>language</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>language</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"Text Handler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_8</name><argument_list>(<argument><expr><name>hdlr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>mdia</name></expr></argument>, <argument><expr><name>hdlr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>minf</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"minf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>minf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>mdia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>trak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>smhd</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"smhd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>smhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>smhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>smhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>minf</name></expr></argument>, <argument><expr><name>smhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>vmhd</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"vmhd"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>vmhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vmhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>vmhd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>minf</name></expr></argument>, <argument><expr><name>vmhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SUBT</name><operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TX3G</name><operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_QTXT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>gmin</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"gmin"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>gmin</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>gmin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>gmin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>gmin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_16be</name><argument_list>(<argument><expr><name>gmin</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>gmhd</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"gmhd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>gmhd</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>gmhd</name></expr></argument>, <argument><expr><name>gmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>minf</name></expr></argument>, <argument><expr><name>gmhd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>gmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>dref</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"dref"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dref</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>dref</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"url "</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>url</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>dref</name></expr></argument>, <argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>dinf</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"dinf"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>dinf</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>dinf</name></expr></argument>, <argument><expr><name>dref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>minf</name></expr></argument>, <argument><expr><name>dinf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bo_free</name><argument_list>(<argument><expr><name>dref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>stbl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>FRAGMENTED</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_backup</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_samples_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>stbl</name> <operator>=</operator> <call><name>GetStblBox</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>USE64BITEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_samples_count</name></name> <operator>=</operator> <name>i_backup</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>stbl</name> <operator>=</operator> <call><name>GetStblBox</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>QUICKTIME</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>USE64BITEXT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>minf</name></expr></argument>, <argument><expr><name>stbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>mdia</name></expr></argument>, <argument><expr><name>minf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>trak</name></expr></argument>, <argument><expr><name>mdia</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>moov</name></expr></argument>, <argument><expr><name>trak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>moov</name></expr></argument>, <argument><expr><call><name>GetUdtaTag</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>FRAGMENTED</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>mvex</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"mvex"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>mvex</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_movie_duration</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>mehd</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"mehd"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>USE64BITEXT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>mehd</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>USE64BITEXT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_64be</name><argument_list>(<argument><expr><name>mehd</name></expr></argument>, <argument><expr><name>i_movie_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>mehd</name></expr></argument>, <argument><expr><name>i_movie_duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>mvex</name></expr></argument>, <argument><expr><name>mehd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>mvex</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mp4mux_trackinfo_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_samples_count</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_trex_default_length</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_trex_default_size</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_trex_default_length</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_trex_default_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>trex</name> <init>= <expr><call><name>box_full_new</name><argument_list>(<argument><expr><literal type="string">"trex"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trex</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_track_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trex</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trex</name></expr></argument>, <argument><expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_trex_default_length</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trex</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_trex_default_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_32be</name><argument_list>(<argument><expr><name>trex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>mvex</name></expr></argument>, <argument><expr><name>trex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>box_gather</name><argument_list>(<argument><expr><name>moov</name></expr></argument>, <argument><expr><name>mvex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>moov</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>box_fix</name><argument_list>(<argument><expr><name>moov</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>moov</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>moov</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bo_t</name> <modifier>*</modifier></type><name>mp4mux_GetFtyp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>mp4mux_handle_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>box</name> <init>= <expr><call><name>box_new</name><argument_list>(<argument><expr><literal type="string">"ftyp"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>box</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>i_major</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_32be</name> <argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>i_minor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>extra</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_fourcc</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>brands</name><operator>.</operator><name>extra</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>box</name><operator>-&gt;</operator><name>b</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>box_fix</name><argument_list>(<argument><expr><name>box</name></expr></argument>, <argument><expr><call><name>bo_size</name><argument_list>(<argument><expr><name>box</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>box</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>mp4mux_CanMux</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_brand</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_fragmented</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP2V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP1V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MJPG</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MJPGB</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_SVQ1</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_SVQ3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_H263</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_AMR_NB</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_AMR_WB</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_YUV4</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_V210</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_V308</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_V408</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_V410</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_VC1</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WMAP</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_AV1</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&amp;&amp;</operator> <name>p_obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"H264 muxing from AnnexB source will set an incorrect default profile"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>p_obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"HEVC muxing from AnnexB source is unsupported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_SPU</name></expr>:</case>

<return>return <expr><name>i_brand</name> <operator>!=</operator> <name>BRAND_qt__</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_SUBT</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>p_obj</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"subtitle track added like in .mov (even when creating .mp4)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><name>b_fragmented</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_TTML</name></expr>:</case>

<return>return <expr><name>i_brand</name> <operator>==</operator> <name>BRAND_smoo</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_QTXT</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_TX3G</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WEBVTT</name></expr>:</case>

<return>return <expr><operator>!</operator><name>b_fragmented</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
