<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\mux\extradata.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"extradata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/av1_obu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../packetizer/a52.h"</cpp:file></cpp:include>

<struct>struct <name>mux_extradata_builder_cb</name>

<block>{

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_init</name>)<parameter_list>(<parameter><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_feed</name>)<parameter_list>(<parameter><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_deinit</name>)<parameter_list>(<parameter><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<struct>struct <name>mux_extradata_builder_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>mux_extradata_builder_cb</name></name></type> <name>cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_extradata_builder_Feed</name><parameter_list>(<parameter><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>||</operator> <name>i_data</name> <operator>&lt;</operator> <name>VLC_A52_MIN_HEADER_SIZE</name> <operator>||</operator>

<name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0B</literal> <operator>||</operator> <name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x77</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_a52_bitstream_info</name></name></type> <name>bsi</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vlc_a52_ParseAc3BitstreamInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, 

<argument><expr><name>VLC_A52_MIN_HEADER_SIZE</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>p_extra</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_write_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_fscod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_bsid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_bsmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_acmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_lfeon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_frmsizcod</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mux_extradata_builder_cb</name></name></type> <name>ac3_cb</name> <init>=

<expr><block>{

<expr><name>NULL</name></expr>,

<expr><name>ac3_extradata_builder_Feed</name></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>eac3_extradata_builder_Feed</name><parameter_list>(<parameter><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>||</operator> <name>i_data</name> <operator>&lt;</operator> <name>VLC_A52_MIN_HEADER_SIZE</name> <operator>||</operator>

<name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0B</literal> <operator>||</operator> <name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x77</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_a52_bitstream_info</name></name></type> <name>bsi</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>vlc_a52_ParseEac3BitstreamInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bsi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, 

<argument><expr><name>i_data</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>p_extra</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_write_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name><name>rgi_fscod_samplerates</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">32000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fs</name> <init>= <expr><name><name>rgi_fscod_samplerates</name><index>[<expr><name><name>bsi</name><operator>.</operator><name>i_fscod</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>numblks</name> <init>= <expr><name><name>bsi</name><operator>.</operator><name>eac3</name><operator>.</operator><name>i_numblkscod</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>numblks</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>numblks</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>data_rate</name> <init>= <expr><operator>(</operator><name><name>bsi</name><operator>.</operator><name>eac3</name><operator>.</operator><name>i_frmsiz</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>fs</name> <operator>/</operator> <operator>(</operator><name>numblks</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><name>data_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_fscod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_bsid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_bsmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_acmod</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>bsi</name><operator>.</operator><name>i_lfeon</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mux_extradata_builder_cb</name></name></type> <name>eac3_cb</name> <init>=

<expr><block>{

<expr><name>NULL</name></expr>,

<expr><name>eac3_extradata_builder_Feed</name></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>av1_extradata_builder_Feed</name><parameter_list>(<parameter><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>i_extra</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>AV1_OBU_iterator_ctx_t</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV1_OBU_iterator_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_obu</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>i_obu</name></decl>;</decl_stmt>

<while>while<condition>(<expr><call><name>AV1_OBU_iterate_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_obu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_obu</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>av1_obu_type_e</name></name></type> <name>OBUtype</name> <init>= <expr><call><name>AV1_OBUGetType</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>OBUtype</name> <operator>!=</operator> <name>AV1_OBU_SEQUENCE_HEADER</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_sh</name> <init>= <expr><call><name>AV1_OBU_parse_sequence_header</name><argument_list>(<argument><expr><name>p_obu</name></expr></argument>, <argument><expr><name>i_obu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_sh</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <call><name>AV1_create_DecoderConfigurationRecord</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>m</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p_sh</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p_obu</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_obu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV1_release_sequence_header</name><argument_list>(<argument><expr><name>p_sh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></while>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mux_extradata_builder_cb</name></name></type> <name>av1_cb</name> <init>=

<expr><block>{

<expr><name>NULL</name></expr>,

<expr><name>av1_extradata_builder_Feed</name></expr>,

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>mux_extradata_builder_Delete</name><parameter_list>(<parameter><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>pf_deinit</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>pf_deinit</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>mux_extradata_type_e</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mux_extradata_builder_cb</name></name> <modifier>*</modifier></type><name>cb</name></decl>;</decl_stmt>

}</block> <decl><name><name>mappings</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>EXTRADATA_ISOBMFF</name></expr>, <expr><name>VLC_CODEC_AV1</name></expr>, <expr><operator>&amp;</operator><name>av1_cb</name></expr> }</block></expr>,

<expr><block>{ <expr><name>EXTRADATA_ISOBMFF</name></expr>, <expr><name>VLC_CODEC_A52</name></expr>, <expr><operator>&amp;</operator><name>ac3_cb</name></expr> }</block></expr>,

<expr><block>{ <expr><name>EXTRADATA_ISOBMFF</name></expr>, <expr><name>VLC_CODEC_EAC3</name></expr>, <expr><operator>&amp;</operator><name>eac3_cb</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type> <name>mux_extradata_builder_New</name><parameter_list>(<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fcc</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>mux_extradata_type_e</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>mux_extradata_builder_cb</name></name> <modifier>*</modifier></type><name>cb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>mappings</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>type</name> <operator>||</operator> <name><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fcc</name> <operator>!=</operator> <name>fcc</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>mappings</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cb</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if<condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>m</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>fcc</name></name> <operator>=</operator> <name>fcc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>cb</name></name> <operator>=</operator> <operator>*</operator><name>cb</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>m</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>pf_init</name></name> <operator>&amp;&amp;</operator> <call><name><name>m</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>pf_init</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>m</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>mux_extradata_builder_Get</name><parameter_list>(<parameter><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>a</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>p_extra</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>m</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>mux_extradata_builder_Feed</name><parameter_list>(<parameter><decl><type><name>mux_extradata_builder_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>m</name><operator>-&gt;</operator><name>cb</name><operator>.</operator><name>pf_feed</name></name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
