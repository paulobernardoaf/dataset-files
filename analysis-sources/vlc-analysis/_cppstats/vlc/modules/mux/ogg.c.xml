<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\mux\ogg.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/xiph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ogg/ogg.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEXINTVL_TEXT</name></cpp:macro> <cpp:value>N_("Index interval")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEXINTVL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Minimal index interval, in milliseconds. " "Set to 0 to disable index creation.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEXRATIO_TEXT</name></cpp:macro> <cpp:value>N_("Index size ratio")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEXRATIO_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set index size ratio. Alters default (60min content) or estimated size." )</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-ogg-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Ogg/OGM muxer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout mux"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_MUX</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"ogg"</literal></argument>, <argument><literal type="string">"ogm"</literal></argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"indexintvl"</literal></argument>, <argument><literal type="number">1000</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>INT_MAX</argument>,

<argument>INDEXINTVL_TEXT</argument>, <argument>INDEXINTVL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"indexratio"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">1000</literal></argument>,

<argument>INDEXRATIO_TEXT</argument>, <argument>INDEXRATIO_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MuxBlock</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>OggCreateHeaders</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OggFillSkeletonFishead</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FISBONE_BASE_SIZE</name></cpp:macro> <cpp:value>52</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FISBONE_BASE_OFFSET</name></cpp:macro> <cpp:value>44</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INDEX_BASE_SIZE</name></cpp:macro> <cpp:value>42</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_TYPE_HEADER</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_TYPE_COMMENT</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKET_IS_SYNCPOINT</name></cpp:macro> <cpp:value>0x08</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_height</name></decl>;</decl_stmt>

}</block></struct></type> <name>oggds_header_video_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_block_align</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_avgbytespersec</name></decl>;</decl_stmt>

}</block></struct></type> <name>oggds_header_audio_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_packet_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>stream_type</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sub_type</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_time_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_samples_per_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_default_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_bits_per_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_padding_0</name></decl>;</decl_stmt> 

<union>union

<block>{

<decl_stmt><decl><type><name>oggds_header_video_t</name></type> <name>video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>oggds_header_audio_t</name></type> <name>audio</name></decl>;</decl_stmt>

}</block> <decl><name>header</name></decl>;</union>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_padding_1</name></decl>;</decl_stmt> 

}</block></struct></type> <name>oggds_header_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_new</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_packet_no</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_serial_no</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_keyframe_granule_shift</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_last_keyframe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_num_frames</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>u_last_granulepos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_num_keyframes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_state</name></type> <name>os</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>oggds_header_t</name> <modifier>*</modifier></type><name>p_oggds_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_started</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_finished</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_fisbone_done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_index_done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_index_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_index_payload</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_index_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_index_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_index_packetno</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_index_pageno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_last_keyframe_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_keyframe_time</name></decl>;</decl_stmt>

}</block> <decl><name>skeleton</name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>i_dirac_last_pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_dirac_last_dt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_baseptsdelay</name></decl>;</decl_stmt>

}</block></struct></type> <name>ogg_stream_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_next_serial_no</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_add_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_can_add_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_del_streams</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_del_streams</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_create</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_serial_no</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_packet_no</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_state</name></type> <name>os</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_head_done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_fishead_offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_index_intvl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>i_index_ratio</name></decl>;</decl_stmt>

}</block> <decl><name>skeleton</name></decl>;</struct>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_data_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_segment_start</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_mux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OggSetDate</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> , <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>OggStreamFlush</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ogg_stream_state</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OggCreateStreamFooter</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OggRewriteFisheadPage</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>AllocateIndex</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Open"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_mux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_add_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_can_add_streams</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_head_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_intvl</name></name> <operator>=</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"indexintvl"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_ratio</name></name> <operator>=</operator>

<call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"indexratio"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_segment_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_addstream</name></name> <operator>=</operator> <name>AddStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_delstream</name></name> <operator>=</operator> <name>DelStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_mux</name></name> <operator>=</operator> <name>Mux</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_serial_no</name></name> <operator>=</operator> <name>r</name> <operator>&amp;</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Close"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"writing footers"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OggCreateStreamFooter</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_head_done</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OggRewriteFisheadPage</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>MUX_CAN_ADD_STREAM_WHILE_MUXING</name></expr>:</case>

<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>MUX_GET_MIME</name></expr>:</case>

<expr_stmt><expr><name>ppsz</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"application/ogg"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_stream</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ogg_stream_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_input</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_serial_no</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_serial_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_keyframe</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_keyframes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_baseptsdelay</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dirac_last_pt</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dirac_last_dt</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>||</operator>

<operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Missing frame rate, assuming 25fps"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP1V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP2V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DIV3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MJPG</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WMV1</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WMV2</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WMV3</name></expr>:</case>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oggds_header_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_packet_type</name></name> <operator>=</operator> <name>PACKET_TYPE_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4V</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>sub_type</name></name></expr></argument>, <argument><expr><literal type="string">"XVID"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIV3</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>sub_type</name></name></expr></argument>, <argument><expr><literal type="string">"DIV3"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>sub_type</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_time_unit</name></name> <operator>=</operator>

<call><name>MSFTIME_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>/</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_samples_per_unit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_default_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt> 

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_bits_per_sample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"%4.4s stream"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DIRAC</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"dirac stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_THEORA</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"theora stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DAALA</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"daala stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"VP8 stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<switch>switch<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_OPUS</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"opus stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_VORBIS</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"vorbis stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_SPEEX</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"speex stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_FLAC</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"flac stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>fourcc_to_wf_tag</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tag</name> <operator>==</operator> <name>WAVE_FORMAT_UNKNOWN</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name> <operator>=</operator>

<call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oggds_header_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oggds_header_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_packet_type</name></name> <operator>=</operator> <name>PACKET_TYPE_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIx16</name></expr></argument>, <argument><expr><name>i_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>sub_type</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_time_unit</name></name> <operator>=</operator> <call><name>MSFTIME_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_default_len</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <literal type="number">30</literal><operator>*</operator><literal type="number">1024</literal></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_samples_per_unit</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_bits_per_sample</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_block_align</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_avgbytespersec</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"%4.4s stream"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>

<switch>switch<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_SUBT</name></expr>:</case>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>oggds_header_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_packet_type</name></name> <operator>=</operator> <name>PACKET_TYPE_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"subtitles stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_new</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_add_streams</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>ogg_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_og</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"removing input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>b_new</name></name></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><call><name>block_FifoCount</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MuxBlock</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>b_new</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OggSetDate</name><argument_list>( <argument><expr><name>p_og</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>b_new</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ogg_stream_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_add_streams</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WriteQWVariableLE</name><parameter_list>( <parameter><decl><type><name>uint64_t</name></type> <name>i_64</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_buffer_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>p_buffer</name> <operator>+</operator> <name>i_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_written</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>p_dest</name> <operator>-</operator> <name>p_buffer</name> <operator>&gt;=</operator> <name>i_buffer_size</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_dest</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>(</operator> <name>i_64</name> <operator>&amp;</operator> <literal type="number">0x7F</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_64</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_written</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_64</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<return>return <expr><name>i_written</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_dest</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>AddIndexEntry</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>ogg_stream_t</name> <operator>*</operator><operator>)</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_posdelta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_timedelta</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_intvl</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_last_keyframe_pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_last_keyframe_pos</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_segment_start</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_posdelta</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_last_keyframe_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_timedelta</name> <operator>=</operator> <name>i_time</name> <operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_last_keyframe_time</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_timedelta</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_intvl</name></name> <operator>||</operator> <name>i_posdelta</name> <operator>&lt;=</operator> <literal type="number">0xFFFF</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_payload</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>WriteQWVariableLE</name><argument_list>( <argument><expr><name>i_posdelta</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <name>i_ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>WriteQWVariableLE</name><argument_list>( <argument><expr><name>i_timedelta</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_payload</name></name> <operator>=</operator> <name>i_offset</name> <operator>+</operator> <name>i_ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_last_keyframe_pos</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_last_keyframe_time</name></name> <operator>=</operator> <name>i_time</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Added index on stream %d entry %zd %"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_serial_no</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_segment_start</name></name></expr></argument>, <argument><expr><name>i_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>OggStreamGetPage</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>,

<parameter><decl><type><name>ogg_stream_state</name> <modifier>*</modifier></type><name>p_os</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>flush</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>p_mux</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_og</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_og_first</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_page</name></type> <name>og</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pager</name>)<parameter_list>( <parameter><decl><type><name>ogg_stream_state</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ogg_page</name><modifier>*</modifier></type></decl></parameter> )</parameter_list> <init>= <expr><ternary><condition><expr><name>flush</name></expr> ?</condition><then> <expr><name>ogg_stream_flush</name></expr></then></ternary></expr> <operator>:</operator> <expr><name>ogg_stream_pageout</name></expr></init>;</function_decl>

<while>while<condition>( <expr><call><name>pager</name><argument_list>( <argument><expr><name>p_os</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>og</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>og</name><operator>.</operator><name>header_len</name></name> <operator>+</operator> <name><name>og</name><operator>.</operator><name>body_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_og</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>og</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>og</name><operator>.</operator><name>header_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_og</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>og</name><operator>.</operator><name>header_len</name></name></expr></argument>, <argument><expr><name><name>og</name><operator>.</operator><name>body</name></name></expr></argument>, <argument><expr><name><name>og</name><operator>.</operator><name>body_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_og</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_og</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_og</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_og_first</name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>p_og_first</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>OggStreamFlush</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>,

<parameter><decl><type><name>ogg_stream_state</name> <modifier>*</modifier></type><name>p_os</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>OggStreamGetPage</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_os</name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>OggStreamPageOut</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>,

<parameter><decl><type><name>ogg_stream_state</name> <modifier>*</modifier></type><name>p_os</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>OggStreamGetPage</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_os</name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OggGetSkeletonIndex</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>, <parameter><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name>INDEX_BASE_SIZE</name> <operator>+</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_buffer</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_buffer</name> <operator>=</operator> <name>p_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_serial_no</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><name>CLOCK_FREQ</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_buffer</name> <operator>+</operator> <name>INDEX_BASE_SIZE</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_payload</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>INDEX_BASE_SIZE</name> <operator>+</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_size</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OggGetSkeletonFisbone</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer</name></decl></parameter>, <parameter><decl><type><name>long</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>,

<parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psz_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>ogg_stream_t</name> <operator>*</operator><operator>)</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_content_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_role</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

}</block> <decl><name>headers</name> <init>= <expr><block>{ <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</struct>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_VORBIS</name></expr>:</case>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <literal type="string">"audio/vorbis"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_THEORA</name></expr>:</case>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <literal type="string">"video/theora"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DAALA</name></expr>:</case>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <literal type="string">"video/daala"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_SPEEX</name></expr>:</case>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <literal type="string">"audio/speex"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_FLAC</name></expr>:</case>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <literal type="string">"audio/flac"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_CMML</name></expr>:</case>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <literal type="string">"text/cmml"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_KATE</name></expr>:</case>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <literal type="string">"application/kate"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <literal type="string">"video/x-vp8"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <literal type="string">"application/octet-stream"</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Unknown fourcc for stream %s, setting Content-Type to %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_fourcc_GetDescription</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>headers</name><operator>.</operator><name>psz_content_type</name></name></expr></argument>, <argument><expr><literal type="string">"Content-Type: %s\r\n"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>i_size</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>headers</name><operator>.</operator><name>psz_content_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>&gt;</operator> <name>ES_PRIORITY_NOT_SELECTABLE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_max_prio</name> <init>= <expr><name>ES_PRIORITY_MIN</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_max_prio</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_priority</name></name></expr></argument>, <argument><expr><name>i_max_prio</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>||</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>==</operator> <name>i_max_prio</name> <operator>&amp;&amp;</operator> <name>i_max_prio</name> <operator>&gt;=</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>)</operator></expr> ?</condition><then>

<expr><literal type="string">"video/main"</literal></expr> </then><else>: <expr><literal type="string">"audio/main"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>)</operator></expr> ?</condition><then>

<expr><literal type="string">"video/alternate"</literal></expr> </then><else>: <expr><literal type="string">"audio/alternate"</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_KATE</name> <operator>)</operator></expr> ?</condition><then>

<expr><literal type="string">"text/karaoke"</literal></expr> </then><else>: <expr><literal type="string">"text/subtitle"</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_value</name> <operator>&amp;&amp;</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>headers</name><operator>.</operator><name>psz_role</name></name></expr></argument>, <argument><expr><literal type="string">"Role: %s\r\n"</literal></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>i_size</name></name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>headers</name><operator>.</operator><name>psz_role</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>headers</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_buffer</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>FISBONE_BASE_SIZE</name> <operator>+</operator> <name><name>headers</name><operator>.</operator><name>i_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>*</operator><name>pp_buffer</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_buffer</name> <operator>=</operator> <operator>*</operator><name>pp_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"fisbone"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>FISBONE_BASE_OFFSET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_serial_no</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>headers</name><operator>.</operator><name>i_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pp_buffer</name><operator>)</operator><index>[<expr><literal type="number">20</literal></expr>]</index></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pp_buffer</name><operator>)</operator><index>[<expr><literal type="number">28</literal></expr>]</index></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pp_buffer</name><operator>)</operator><index>[<expr><literal type="number">20</literal></expr>]</index></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pp_buffer</name><operator>)</operator><index>[<expr><literal type="number">28</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pp_buffer</name><operator>)</operator><index>[<expr><literal type="number">20</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pp_buffer</name><operator>)</operator><index>[<expr><literal type="number">28</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>*</operator><name>pp_buffer</name><operator>)</operator><index>[<expr><literal type="number">44</literal></expr>]</index></expr></argument>,

<argument><expr><call><name>xiph_CountUnknownHeaders</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>,

<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>headers</name><operator>.</operator><name>i_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_header</name> <operator>=</operator> <operator>*</operator><name>pp_buffer</name> <operator>+</operator> <name>FISBONE_BASE_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><name><name>headers</name><operator>.</operator><name>psz_content_type</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>headers</name><operator>.</operator><name>psz_content_type</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_header</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>headers</name><operator>.</operator><name>psz_content_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>headers</name><operator>.</operator><name>psz_role</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz_header</name></expr></argument>, <argument><expr><name><name>headers</name><operator>.</operator><name>psz_role</name></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>headers</name><operator>.</operator><name>psz_role</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>FISBONE_BASE_SIZE</name> <operator>+</operator> <name><name>headers</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>headers</name><operator>.</operator><name>psz_content_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>headers</name><operator>.</operator><name>psz_role</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OggFillSkeletonFishead</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"fishead"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_segment_start</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">72</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_start</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_segment_start</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>OggFillDsHeader</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>oggds_header_t</name> <modifier>*</modifier></type><name>p_oggds_header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cat</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_packet_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>stream_type</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>sub_type</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>sub_type</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>sub_type</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_isize</name> <init>= <expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_time_unit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_samples_per_unit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_default_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_bits_per_sample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_padding_0</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_cat</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<expr_stmt><expr><call><name>SetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_block_align</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_avgbytespersec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_padding_1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>p_oggds_header</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_oggds_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name><name>p_oggds_header</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetDWLE</name><argument_list>( <argument><expr><name>p_isize</name></expr></argument>, <argument><expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>index</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OggFillVP8Header</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>ogg_stream_t</name> <operator>*</operator><operator>)</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="string">"OVP80\x01\x01\x00"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>OggCreateHeaders</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_hdr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_og</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sout_AccessOutControl</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>,

<argument><expr><name>ACCESS_OUT_CAN_SEEK</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>&amp;=</operator> <operator>!</operator><operator>!</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_head_done</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"creating header for skeleton"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_serial_no</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_serial_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_serial_no</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>bytes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OggFillSkeletonFishead</name><argument_list>( <argument><expr><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_packet_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_hdr</name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_head_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_fishead_offset</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pass</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>video</name> <init>= <expr><operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_THEORA</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIRAC</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DAALA</name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator> <name>pass</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>video</name> <operator>)</operator> <operator>||</operator> <operator>(</operator> <name>pass</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>video</name> <operator>)</operator> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"creating header for %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_serial_no</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_new</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_started</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_VORBIS</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SPEEX</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_OPUS</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_THEORA</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DAALA</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_size</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>pp_data</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xiph_SplitHeaders</name><argument_list>( <argument><expr><name>pi_size</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_count</name></expr></argument>,

<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pp_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pi_size</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"header data corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_THEORA</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DAALA</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_keyframe_granule_shift</name></name> <operator>=</operator>

<operator>(</operator> <operator>(</operator><name><name>op</name><operator>.</operator><name>packet</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><name><name>op</name><operator>.</operator><name>packet</name><index>[<expr><literal type="number">41</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xe0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIRAC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_FLAC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><literal type="string">"fLaC"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_VP8</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">26</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>op</name><operator>.</operator><name>packet</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OggFillVP8Header</name><argument_list>( <argument><expr><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>op</name><operator>.</operator><name>packet</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <call><name>OggFillDsHeader</name><argument_list>( <argument><expr><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_hdr</name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_fisbone_done</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OggGetSkeletonFisbone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_packet_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_hdr</name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_fisbone_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>p_og</name> <operator>=</operator> <name>p_hdr</name></expr>;</init> <condition><expr><name>p_og</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_og</name> <operator>=</operator> <name><name>p_og</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_og</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_HEADER</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_hdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_hdr</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>ogg_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_index_done</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>AllocateIndex</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Creating index for stream %d"</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_serial_no</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OggGetSkeletonIndex</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_offset</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_packetno</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name><operator>.</operator><name>packetno</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_pageno</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name><operator>.</operator><name>pageno</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_packet_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_index_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>ogg_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_VORBIS</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SPEEX</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_OPUS</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_THEORA</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DAALA</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>pi_size</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name><name>pp_data</name><index>[<expr><name>XIPH_MAX_HEADER_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xiph_SplitHeaders</name><argument_list>( <argument><expr><name>pi_size</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_count</name></expr></argument>,

<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>pi_size</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pp_data</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pi_size</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"header data corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding non bos, secondary header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>j</name> <operator>==</operator> <name>i_count</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamPageOut</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_og</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_hdr</name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_FLAC</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DIRAC</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>com</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_com</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>com</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PACKET_TYPE_COMMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_com</name> <operator>=</operator> <call><name>snprintf</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>com</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>,

<argument><expr><name>PACKAGE_VERSION</name><literal type="string">" stream output"</literal></expr></argument> )</argument_list></call>

<operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name>com</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name>i_com</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_hdr</name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4V</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_FLAC</name> <operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"writing extra data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>flac_streaminfo</name><index>[<expr><literal type="number">34</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_FLAC</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <literal type="number">42</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><literal type="string">"fLaC"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>flac_streaminfo</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">38</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name>flac_streaminfo</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>==</operator> <literal type="number">34</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>flac_streaminfo</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flac_streaminfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>flac_streaminfo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flac_streaminfo</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>flac_streaminfo</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">34</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name>flac_streaminfo</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Invalid FLAC streaminfo (%ld bytes)"</literal></expr></argument>,

<argument><expr><name><name>op</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_hdr</name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"ending skeleton"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_hdr</name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>p_og</name> <operator>=</operator> <name>p_hdr</name></expr>;</init> <condition><expr><name>p_og</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_og</name> <operator>=</operator> <name><name>p_og</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_og</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_HEADER</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_hdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OggCreateStreamFooter</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_og</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name>

<operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_payload</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sout_AccessOutSeek</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OggGetSkeletonIndex</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>op</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Rewriting index at %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_reset_serialno</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_serial_no</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_packetno</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name><operator>.</operator><name>pageno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_pageno</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_packetno</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_packet_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>sout_AccessOutSeek</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_fisbone_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_index_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_payload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_last_keyframe_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_last_keyframe_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_keyframes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>u_last_granulepos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OggSetDate</name><argument_list>( <argument><expr><name>p_og</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ogg_stream_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OggSetDate</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_og</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_delta</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_tmp</name> <operator>=</operator> <name>p_og</name></expr><operator>,</operator> <expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p_tmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_tmp</name> <operator>=</operator> <name><name>p_tmp</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>i_delta</name> <operator>=</operator> <name>i_length</name> <operator>/</operator> <name>i_count</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_tmp</name> <operator>=</operator> <name>p_og</name></expr>;</init> <condition><expr><name>p_tmp</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_tmp</name> <operator>=</operator> <name><name>p_tmp</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_tmp</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tmp</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_dts</name> <operator>+=</operator> <name>i_delta</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OggRewriteFisheadPage</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>op</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>bytes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_reset_serialno</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_serial_no</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OggFillSkeletonFishead</name><argument_list>( <argument><expr><name><name>op</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_packet_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"rewriting fishead at %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_fishead_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutSeek</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_fishead_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>,

<argument><expr><call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>os</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutSeek</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>AllocateIndex</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>ogg_stream_t</name> <operator>*</operator><operator>)</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_interval</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_intvl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_interval</name><operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_interval</name></expr></argument>,

<argument><expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>/</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_tuple_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>i_interval</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>( <expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_tuple_size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_tuple_size</name> <operator>=</operator> <literal type="number">24</literal> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>i_interval</name></expr>;</expr_stmt>

<while>while <condition>( <expr><name>i</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_tuple_size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name>i_tuple_size</name> <operator>*</operator> <operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <name>i_interval</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <operator>(</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">3600</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">11.2</literal> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_intvl</name></name> <operator>)</operator>

<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_ratio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"No stream length, using default allocation for index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>*=</operator> <operator>(</operator> <literal type="number">8.0</literal> <operator>/</operator> <literal type="number">7</literal> <operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"allocating %zu bytes for index"</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>p_index</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>i_index_payload</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>OggCreateStreamFooter</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_oggds_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_del_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_head_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_can_add_streams</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_segment_start</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_add_streams</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_can_add_streams</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Can't add new stream %d/%d: Considerer increasing sout-mux-caching variable"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Resetting and setting new identity to current streams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type> <name>p_stream</name> <init>= <expr><operator>(</operator><name>ogg_stream_t</name> <operator>*</operator><operator>)</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_sys</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>||</operator> <operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>b_started</name></name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>OggCreateStreamFooter</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_serial_no</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_serial_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_head_done</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OggRewriteFisheadPage</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_can_add_streams</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_head_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_segment_start</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sout_MuxGetStream</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"waiting for data..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"writing streams headers"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_streams</name></name> <operator>=</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>i_nb_inputs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_del_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_add_streams</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>skeleton</name><operator>.</operator><name>b_create</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <call><name>OggCreateHeaders</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_can_add_streams</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"data starts from %zu"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_start</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_can_add_streams</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name> <init>= <expr><call><name>sout_MuxGetStream</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_stream</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MuxBlock</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MuxBlock</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>ogg_stream_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>block_FifoGet</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_og</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_VORBIS</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_FLAC</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_SPEEX</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_OPUS</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_THEORA</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DAALA</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_VP8</name> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_DIRAC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PACKET_IS_SYNCPOINT</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIRAC</name> <operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_baseptsdelay</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_baseptsdelay</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packet</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>bytes</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>b_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>e_o_s</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>packetno</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_packet_no</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_VORBIS</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_FLAC</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_OPUS</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SPEEX</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator>

<call><name>samples_from_vlc_tick</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name> <operator>+</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>,

<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_time</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddIndexEntry</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <call><name>samples_from_vlc_tick</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_samples_per_unit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_THEORA</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DAALA</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_keyframes</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_keyframe</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_time</name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><operator>(</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddIndexEntry</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <operator>(</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_keyframe</name></name> <operator>&lt;&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_keyframe_granule_shift</name></name> <operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name><operator>-</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_keyframe</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIRAC</name></expr> )</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAME_ROUND</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ( ( a + 5000 / CLOCK_FREQ ) &gt; ( a / CLOCK_FREQ ) )a += 5000;a /= CLOCK_FREQ;</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dt</name> <init>= <expr><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name><operator>)</operator> <operator>*</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>/</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FRAME_ROUND</name><argument_list>( <argument><expr><name>dt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pt</name> <init>= <expr><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name> <operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_baseptsdelay</name></name> <operator>)</operator> <operator>*</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>/</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FRAME_ROUND</name><argument_list>( <argument><expr><name>pt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>pt</name> <operator>==</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_dirac_last_pt</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dirac_last_pt</name></name> <operator>=</operator> <name>pt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>dt</name> <operator>==</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_dirac_last_dt</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>dt</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dirac_last_dt</name></name> <operator>=</operator> <name>dt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_keyframe</name></name> <operator>=</operator> <name>dt</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dist</name> <init>= <expr><name>dt</name> <operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_last_keyframe</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>true</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>pt</name> <operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dt</name> <operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>delay</name> <init>= <expr><call><name>llabs</name><argument_list>(<argument><expr><name>pt</name> <operator>-</operator> <name>dt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <operator>(</operator><name>pt</name> <operator>-</operator> <name>delay</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal> <operator>|</operator> <operator>(</operator><name>dist</name><operator>&amp;</operator><literal type="number">0xff00</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal>

<operator>|</operator> <operator>(</operator><name>delay</name><operator>&amp;</operator><literal type="number">0x1fff</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">9</literal> <operator>|</operator> <operator>(</operator><name>dist</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"dts %"</literal><name>PRId64</name><literal type="string">" pts %"</literal><name>PRId64</name><literal type="string">" dt %"</literal><name>PRId64</name><literal type="string">" pt %"</literal><name>PRId64</name><literal type="string">" delay %"</literal><name>PRId64</name><literal type="string">" granule %"</literal><name>PRId64</name></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name> <operator>)</operator></expr></argument>,

<argument><expr><name>dt</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>, <argument><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AddIndexEntry</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_VP8</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_keyframes</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_last_keyframe</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_time</name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddIndexEntry</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator> <operator>(</operator> <operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_num_frames</name></name> <operator>-</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_last_keyframe</name></name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07FFFFFF</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <call><name>MSFTIME_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name></expr></argument> )</argument_list></call> <operator>/</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>p_oggds_header</name><operator>-&gt;</operator><name>i_time_unit</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>op</name><operator>.</operator><name>granulepos</name></name> <operator>=</operator> <call><name>MS_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_start_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>u_last_granulepos</name></name> <operator>=</operator> <name><name>op</name><operator>.</operator><name>granulepos</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ogg_stream_packetin</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SPEEX</name> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIRAC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamFlush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_og</name> <operator>=</operator> <call><name>OggStreamPageOut</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>os</name></name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_og</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>OggSetDate</name><argument_list>( <argument><expr><name>p_og</name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>p_og</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_length</name></name> <operator>+=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
