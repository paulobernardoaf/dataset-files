<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\mux\asf.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../demux/asf/libasf_guid.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ASF_TRACKS</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_DATA_PACKET_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define> 

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SOUT_CFG_PREFIX</name></cpp:macro> <cpp:value>"sout-asf-"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TITLE_TEXT</name></cpp:macro> <cpp:value>N_("Title")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TITLE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Title to put in ASF comments." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHOR_TEXT</name></cpp:macro> <cpp:value>N_("Author")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AUTHOR_LONGTEXT</name></cpp:macro> <cpp:value>N_("Author to put in ASF comments." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYRIGHT_TEXT</name></cpp:macro> <cpp:value>N_("Copyright")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPYRIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Copyright string to put in ASF comments." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENT_TEXT</name></cpp:macro> <cpp:value>N_("Comment")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMMENT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Comment to put in ASF comments." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATING_TEXT</name></cpp:macro> <cpp:value>N_("Rating")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RATING_LONGTEXT</name></cpp:macro> <cpp:value>N_("\"Rating\" to put in ASF comments." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKETSIZE_TEXT</name></cpp:macro> <cpp:value>N_("Packet Size")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKETSIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_("ASF packet size -- default is 4096 bytes")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITRATE_TEXT</name></cpp:macro> <cpp:value>N_("Bitrate override")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITRATE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Do not try to guess ASF bitrate. Setting this, allows you to control how Windows Media Player will cache streamed content. Set to audio+video bitrate in bytes")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"ASF muxer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_MUX</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"ASF"</literal></argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"sout mux"</literal></argument>, <argument><literal type="number">5</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"asf"</literal></argument>, <argument><literal type="string">"asfh"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"title"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>TITLE_TEXT</argument>, <argument>TITLE_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"author"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>AUTHOR_TEXT</argument>,

<argument>AUTHOR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"copyright"</literal></argument>,<argument><literal type="string">""</literal></argument>, <argument>COPYRIGHT_TEXT</argument>,

<argument>COPYRIGHT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"comment"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>COMMENT_TEXT</argument>,

<argument>COMMENT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"rating"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>RATING_TEXT</argument>,

<argument>RATING_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"packet-size"</literal></argument>, <argument><literal type="number">4096</literal></argument>, <argument>PACKETSIZE_TEXT</argument>,

<argument>PACKETSIZE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>SOUT_CFG_PREFIX <literal type="string">"bitrate-override"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>BITRATE_TEXT</argument>,

<argument>BITRATE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sout_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"title"</literal></expr>, <expr><literal type="string">"author"</literal></expr>, <expr><literal type="string">"copyright"</literal></expr>, <expr><literal type="string">"comment"</literal></expr>, <expr><literal type="string">"rating"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name> <parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_tag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_blockalign</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_audio_correction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sequence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_extended</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

}</block></struct></type> <name>asf_track_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_guid_t</name></type> <name>fid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_packet_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_packet_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts_first</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_preroll_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_bitrate_override</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_write_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pk_used</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pk_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pk_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_asf_http</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_seq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_author</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_copyright</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_comment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rating</name></decl>;</decl_stmt>

}</block></struct></type> <name>sout_mux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>asf_header_create</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>asf_packet_create</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>asf_track_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>asf_stream_end_create</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>asf_packet_flush</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

}</block></struct></type> <name>bo_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bo_init</name> <parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bo_add_u8</name> <parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bo_addle_u16</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bo_addle_u32</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bo_addle_u64</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bo_add_mem</name> <parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>bo_addle_str16</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"asf muxer opened"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_sout_options</name></expr></argument>, <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_addstream</name></name> <operator>=</operator> <name>AddStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_delstream</name></name> <operator>=</operator> <name>DelStream</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>pf_mux</name></name> <operator>=</operator> <name>Mux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>sout_mux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name> <operator>=</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>psz_mux</name></name></expr></argument>, <argument><expr><literal type="string">"asfh"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"creating asf stream to be used with mmsh"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_used</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_first</name></name> <operator>=</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_last</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_time</name></name> <operator>=</operator> <literal type="number">2000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_override</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_write_header</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"sout-asf-packet-size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_override</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"sout-asf-bitrate-override"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Packet size %d"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_override</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Bitrate override %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_override</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <literal type="number">0xbabac001</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name><operator>.</operator><name>Data2</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name><operator>.</operator><name>Data2</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name><operator>.</operator><name>Data3</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name><operator>.</operator><name>Data3</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_rand_bytes</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name><operator>.</operator><name>Data4</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name><operator>.</operator><name>Data4</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"title"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_author</name></name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"author"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_copyright</name></name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"copyright"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_comment</name></name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"comment"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_rating</name></name> <operator>=</operator> <call><name>var_GetString</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>SOUT_CFG_PREFIX</name> <literal type="string">"rating"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"meta data: title='%s', author='%s', copyright='%s', "</literal>

<literal type="string">"comment='%s', rating='%s'"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_author</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_copyright</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_comment</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name> <init>= <expr><operator>(</operator><name>sout_mux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Asf muxer closed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>out</name> <operator>=</operator> <call><name>asf_packet_flush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>out</name> <operator>=</operator> <call><name>asf_stream_end_create</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sout_AccessOutSeek</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>asf_header_create</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_track_t</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>track</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>track</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_author</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_copyright</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_comment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>MUX_CAN_ADD_STREAM_WHILE_MUXING</name></expr>:</case>

<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>MUX_GET_MIME</name></expr>:</case>

<expr_stmt><expr><name>ppsz</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>char</name> <operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ppsz</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"video/x-ms-asf-stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ppsz</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"video/x-ms-asf"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AddStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>asf_track_t</name> <modifier>*</modifier></type><name>tk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <name>MAX_ASF_TRACKS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"cannot add this track (too much tracks)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tk</name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>asf_track_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>tk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>tk</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_sequence</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_extended</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_blockalign</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bitspersample</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_A52</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"A/52"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitspersample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_AAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"MPEG-4 Audio"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitspersample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP3</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"MPEG Audio Layer 3"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_MPEGLAYER3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitspersample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_blockalign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_extra</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"MPEG Audio Layer 1/2"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_MPEG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitspersample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_blockalign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_extra</name> <operator>=</operator> <literal type="number">22</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_WMA1</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Windows Media Audio v1"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_WMA1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_WMA2</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name><operator>=</operator> <literal type="string">"Windows Media Audio (v2) 7, 8 and 9 Series"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_WMA2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_WMAP</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Windows Media Audio 9 Professional"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_WMAP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_WMAL</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Windows Media Audio 9 Lossless"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_WMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_U8</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Raw audio 8bits"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_blockalign</name><operator>=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitspersample</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_S16L</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Raw audio 16bits"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_blockalign</name><operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitspersample</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_S24L</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Raw audio 24bits"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_blockalign</name><operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitspersample</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_S32L</name></expr>:</case>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Raw audio 32bits"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>=</operator> <name>WAVE_FORMAT_PCM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_blockalign</name><operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bitspersample</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof> <operator>+</operator>

<name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>+</operator> <name>i_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_blockalign</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blockalign</name></name> <operator>=</operator> <name>i_blockalign</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_bitspersample</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <name>WAVE_FORMAT_MPEGLAYER3</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding mp3 header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1152</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1393</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <name>WAVE_FORMAT_MPEG</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"adding mp2 header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">8</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>&gt;</operator> <literal type="number">24000</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>+=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>+=</operator> <literal type="number">128000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_override</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_override</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_codec_extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_codec_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4V</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"MPEG-4 Video"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIV3</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"MSMPEG-4 V3 Video"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIV2</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"MSMPEG-4 V2 Video"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIV1</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"MSMPEG-4 V1 Video"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_WMV1</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Windows Media Video 7"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_WMV2</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Windows Media Video 8"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_WMV3</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Windows Media Video 9"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_extended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_VC1</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"Windows Media Video 9 Advanced Profile"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>b_extended</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_codec_extra</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_codec_extra</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_codec_extra</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_codec_extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_codec_extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_H264</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <literal type="string">"H.264/MPEG-4 AVC"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'6'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>_</name><argument_list>(<argument><expr><literal type="string">"Unknown Video"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr> ?</condition><then> <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name></expr> </then><else>: <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_codec_extra</name> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_codec_extra</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_codec_extra</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_codec_extra</name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_codec_extra</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">11</literal> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument> )</argument_list></sizeof> <operator>+</operator> <name>i_codec_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>tk</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_codec_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument> )</argument_list></sizeof> <operator>+</operator> <name>i_codec_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument> )</argument_list></sizeof> <operator>+</operator> <name>i_codec_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_codec_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_mem</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>p_codec_extra</name></expr></argument>, <argument><expr><name>i_codec_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_codec_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>&gt;</operator> <literal type="number">50000</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>+=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>+=</operator> <literal type="number">512000</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_override</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_override</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"unhandled track type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><call><name>vlc_array_append</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <call><name>vlc_array_index_of_item</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_write_header</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DelStream</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>asf_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"removing input"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_override</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>&gt;</operator> <literal type="number">24000</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>-=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>-=</operator> <literal type="number">128000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>&gt;</operator> <literal type="number">50000</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>-=</operator> <name><name>p_input</name><operator>-&gt;</operator><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>-=</operator> <literal type="number">512000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_array_remove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><call><name>vlc_array_index_of_item</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>tk</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_write_header</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mux</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_write_header</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>asf_header_create</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_write_header</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_input_t</name> <modifier>*</modifier></type><name>p_input</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>asf_track_t</name> <modifier>*</modifier></type><name>tk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stream</name> <init>= <expr><call><name>sout_MuxGetStream</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_stream</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_first</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_first</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_last</name></name> <operator>&lt;</operator> <name>i_dts</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_last</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_input</name> <operator>=</operator> <name><name>p_mux</name><operator>-&gt;</operator><name>pp_inputs</name><index>[<expr><name>i_stream</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tk</name> <operator>=</operator> <operator>(</operator><name>asf_track_t</name><operator>*</operator><operator>)</operator><name><name>p_input</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>block_FifoGet</name><argument_list>( <argument><expr><name><name>p_input</name><operator>-&gt;</operator><name>p_fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'W'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><name><name>data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>||</operator> <name><name>data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>||</operator>

<name><name>data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x01</literal> <operator>||</operator>

<operator>(</operator> <name><name>data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0D</literal> <operator>&amp;&amp;</operator> <name><name>data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0C</literal> <operator>)</operator> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_buffer</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>pk</name> <operator>=</operator> <call><name>asf_packet_create</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_access</name></name></expr></argument>, <argument><expr><name>pk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bo_init</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>p_buffer</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bo_add_u8</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bo_addle_u16</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_u8</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i</name> <operator>&amp;</operator><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><operator>(</operator> <operator>(</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">0xff</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bo_addle_u32</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i</name> <operator>&amp;</operator><literal type="number">0xffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><operator>(</operator> <operator>(</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">0xffff</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bo_addle_u64</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name>i</name> <operator>&amp;</operator><literal type="number">0xffffffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><operator>(</operator> <operator>(</operator> <name>i</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>&amp;</operator><literal type="number">0xffffffff</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bo_add_mem</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_mem</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_copy</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>-</operator> <name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bo</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>p_mem</name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_bo</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bo_addle_str16</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>bo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>bo</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>str</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>bo</name></expr></argument>, <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bo_addle_str16_nosize</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>bo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>)</operator><operator>*</operator><name>str</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>bo</name></expr></argument>, <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>bo_add_guid</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>p_bo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_guid_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>Data1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>Data2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>Data3</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_u8</name><argument_list>( <argument><expr><name>p_bo</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>Data4</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>asf_chunk_add</name><parameter_list>( <parameter><decl><type><name>bo_t</name> <modifier>*</modifier></type><name>bo</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_seq</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>bo</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>bo</name></expr></argument>, <argument><expr><name>i_len</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><name>bo</name></expr></argument>, <argument><expr><name>i_seq</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>bo</name></expr></argument>, <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><name>bo</name></expr></argument>, <argument><expr><name>i_len</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>asf_header_create</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_broadcast</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>, <decl><type ref="prev"/><name>i_header_ext_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ci_size</name></decl>, <decl><type ref="prev"/><name>i_cm_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_cd_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"Asf muxer creating header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_first</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_last</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_first</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_duration</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_last</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_first</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <literal type="number">30</literal> <operator>+</operator> <literal type="number">104</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ci_size</name> <operator>=</operator> <literal type="number">44</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <literal type="number">78</literal> <operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ci_size</name> <operator>+=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_ci_size</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_ci_size</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>||</operator> <operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_author</name></name> <operator>||</operator> <operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_copyright</name></name> <operator>||</operator>

<operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_comment</name></name> <operator>||</operator> <operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>psz_rating</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_cd_size</name> <operator>=</operator> <literal type="number">34</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_author</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_copyright</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_comment</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_header_ext_size</name> <operator>=</operator> <literal type="number">46</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>asf_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>

<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_cm_size</name> <operator>=</operator> <literal type="number">26</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"AspectRatio?"</literal></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>b_extended</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_header_ext_size</name> <operator>+=</operator> <literal type="number">88</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_header_ext_size</name> <operator>+=</operator> <name>i_cm_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <name>i_ci_size</name> <operator>+</operator> <name>i_cd_size</name> <operator>+</operator> <name>i_header_ext_size</name></expr> ;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">50</literal> <operator>+</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">50</literal> <operator>+</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>asf_chunk_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x4824</literal></expr></argument>, <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">50</literal></expr></argument>, <argument><expr><literal type="number">0xc00</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq</name></name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">50</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">50</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_header_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>+</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name>i_cd_size</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i_cm_size</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_file_properties_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">104</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">50</literal> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name> <operator>*</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_broadcast</name></expr> ?</condition><then> <expr><literal type="number">0xffffffffLL</literal></expr> </then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><call><name>MSFTIME_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_duration</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><call><name>MSFTIME_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i_duration</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><ternary><condition><expr><name>b_broadcast</name></expr> ?</condition><then> <expr><literal type="number">0x01</literal></expr> </then><else>: <expr><literal type="number">0x02</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_header_extension_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_header_ext_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_guid_reserved_1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_header_ext_size</name> <operator>-</operator> <literal type="number">46</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>asf_track_t</name> <modifier>*</modifier></type><name>p_track</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>b_extended</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_avg_duration</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>

<name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_avg_duration</name> <operator>=</operator> <operator>(</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">10000000</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>+</operator>

<name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name><operator>/</operator><literal type="number">2</literal> <operator>)</operator> <operator>/</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_extended_stream_properties_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">88</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_avg_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_cm_size</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_dst_num</name></decl>, <decl><type ref="prev"/><name>i_dst_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>asf_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>tk</name> <operator>=</operator> <call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>

<name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_dst_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dst_den</name></expr></argument>,

<argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name></expr></argument>,

<argument><expr><name><name>tk</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>tk</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument>, <argument><expr><literal type="string">"pixel aspect-ratio: %i/%i"</literal></expr></argument>, <argument><expr><name>i_dst_num</name></expr></argument>, <argument><expr><name>i_dst_den</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_metadata_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_cm_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"AspectRatioX"</literal></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_str16_nosize</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioX"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_dst_num</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"AspectRatioY"</literal></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_str16_nosize</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="string">"AspectRatioY"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_dst_den</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_cd_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_content_description_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_cd_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_author</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_copyright</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_comment</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_str16_nosize</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_str16_nosize</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_author</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_str16_nosize</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_copyright</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_str16_nosize</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_comment</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_str16_nosize</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_stream_properties_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">78</literal> <operator>+</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_guid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_stream_type_audio</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_guid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_guid_audio_conceal_spread</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bo_add_guid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_no_error_correction_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_guid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_stream_type_video</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_no_error_correction_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_add_u8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blockalign</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_blockalign</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_add_u8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_codec_list_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_ci_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_guid_reserved_2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_track_t</name> <modifier>*</modifier></type><name>tk</name> <init>= <expr><call><name>vlc_array_item_at_index</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument> ,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0xFFFF</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>bo_addle_str16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>tk</name><operator>-&gt;</operator><name>i_fourcc</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_data_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">50</literal> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x101</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>asf_packet_flush</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pad</name></decl>, <decl><type ref="prev"/><name>i_preheader</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pk</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_pad</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_used</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pk</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_used</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_pad</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pk</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">14</literal> <operator>+</operator> <name>i_preheader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>asf_chunk_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x4424</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument>, <argument><expr><literal type="number">0x0</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x82</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x5d</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_pad</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_first</name></name></expr></argument>)</argument_list></call> <operator>+</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x80</literal> <operator>|</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pk</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pk</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_count</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>pk</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>asf_packet_create</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter>,

<parameter><decl><type><name>asf_track_t</name> <modifier>*</modifier></type><name>tk</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_data</name> <init>= <expr><name><name>data</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name><init>= <expr><name><name>data</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>first</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>last</name> <init>= <expr><operator>&amp;</operator><name>first</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_preheader</name> <init>= <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_pos</name> <operator>&lt;</operator> <name>i_data</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_payload</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pk</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pk</name></name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>+</operator> <name>i_preheader</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_used</name></name> <operator>=</operator> <literal type="number">14</literal> <operator>+</operator> <name>i_preheader</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_dts</name></name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pk</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_used</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_used</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_payload</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_data</name> <operator>-</operator> <name>i_pos</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_used</name></name> <operator>-</operator> <literal type="number">17</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>tk</name><operator>-&gt;</operator><name>b_audio_correction</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_frame</name></name> <operator>&amp;&amp;</operator> <name>i_payload</name> <operator>&lt;</operator> <name>i_data</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <call><name>asf_packet_flush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>!</operator><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_P</name> <operator>||</operator>

<name><name>data</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_B</name><operator>)</operator></expr> ?</condition><then>

<expr><literal type="number">0x80</literal> <operator>|</operator> <name><name>tk</name><operator>-&gt;</operator><name>i_id</name></name></expr> </then><else>: <expr><name><name>tk</name><operator>-&gt;</operator><name>i_id</name></name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>tk</name><operator>-&gt;</operator><name>i_sequence</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_u8</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x08</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_dts_first</name></name></expr></argument>)</argument_list></call> <operator>+</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_preroll_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u16</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_mem</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pos</name> <operator>+=</operator> <name>i_payload</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_used</name></name> <operator>+=</operator> <literal type="number">17</literal> <operator>+</operator> <name>i_payload</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_frame</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pk_used</name></name> <operator>+</operator> <literal type="number">17</literal> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <call><name>asf_packet_flush</name><argument_list>( <argument><expr><name>p_mux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>last</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>tk</name><operator>-&gt;</operator><name>i_sequence</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>first</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>asf_stream_end_create</name><parameter_list>( <parameter><decl><type><name>sout_mux_t</name> <modifier>*</modifier></type><name>p_mux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_mux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_mux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bo_t</name></type> <name>bo</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_asf_http</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>asf_chunk_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0x4524</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_seq</name></name><operator>++</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">56</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_index_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">56</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_add_guid</name> <argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u64</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bo_addle_u32</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

</unit>
