<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\mux\mpeg\tables.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dvbpsi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/descriptor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pmt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/sdt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/psi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dvbpsi_compat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"streams.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/jpeg2000.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/dts_header.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>WritePSISection</name><parameter_list>( <parameter><decl><type><name>dvbpsi_psi_section_t</name><modifier>*</modifier></type> <name>p_section</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_psi</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_first</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_section</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name><name>p_section</name><operator>-&gt;</operator><name>p_payload_end</name></name> <operator>-</operator> <name><name>p_section</name><operator>-&gt;</operator><name>p_data</name></name><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name><name>p_section</name><operator>-&gt;</operator><name>b_syntax_indicator</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_psi</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_psi</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_psi</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_psi</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_psi</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_psi</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_psi</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_psi</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p_section</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>,

<argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_first</name></expr></argument>, <argument><expr><name>p_psi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_section</name> <operator>=</operator> <name><name>p_section</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return<expr><operator>(</operator> <name>p_first</name> <operator>)</operator></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_first</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_first</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>BuildPAT</name><parameter_list>( <parameter><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_dvbpsi</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>, <parameter><decl><type><name>PEStoTSCallback</name></type> <name>pf_callback</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_tsid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pat_version_number</name></decl></parameter>,

<parameter><decl><type><name>tsmux_stream_t</name> <modifier>*</modifier></type><name>p_pat</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_programs</name></decl></parameter>, <parameter><decl><type><name>tsmux_stream_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>pi_programs_number</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_pat_t</name></type> <name>patpsi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_psi_section_t</name> <modifier>*</modifier></type><name>p_section</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pat_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>patpsi</name></expr></argument>, <argument><expr><name>i_tsid</name></expr></argument>, <argument><expr><name>i_pat_version_number</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_programs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dvbpsi_pat_program_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>patpsi</name></expr></argument>, <argument><expr><name><name>pi_programs_number</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_pmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p_section</name> <operator>=</operator> <call><name>dvbpsi_pat_sections_generate</name><argument_list>( <argument><expr><name>p_dvbpsi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>patpsi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_section</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>WritePSISection</name><argument_list>( <argument><expr><name>p_section</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PEStoTS</name><argument_list>( <argument><expr><name>p_opaque</name></expr></argument>, <argument><expr><name>pf_callback</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name><name>p_pat</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pat</name><operator>-&gt;</operator><name>b_discontinuity</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pat</name><operator>-&gt;</operator><name>i_continuity_counter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_DeletePSISections</name><argument_list>( <argument><expr><name>p_section</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_pat_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>patpsi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>GetDescriptorLength24b</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_length</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_l1</name></decl>, <decl><type ref="prev"/><name>i_l2</name></decl>, <decl><type ref="prev"/><name>i_l3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_l1</name> <operator>=</operator> <name>i_length</name><operator>&amp;</operator><literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_l2</name> <operator>=</operator> <operator>(</operator> <name>i_length</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x7f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_l3</name> <operator>=</operator> <operator>(</operator> <name>i_length</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x7f</literal></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <literal type="number">0x808000</literal> <operator>|</operator> <operator>(</operator> <name>i_l3</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>i_l2</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name>i_l1</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Mpeg4SUBTDecoderSpecific_55</name><parameter_list>( <parameter><decl><type><name>bits_buffer_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">52</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>fontname</name><index>[]</index></name> <init>= <expr><literal type="string">"Helvetica"</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>fontname</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetPMTmpeg4</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_pmt_t</name> <modifier>*</modifier></type><name>p_dvbpmt</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_mapped_streams</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pes_mapped_stream_t</name> <modifier>*</modifier></type><name>p_mapped_streams</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iod</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bits_buffer_t</name></type> <name>bits</name></decl>, <decl><type ref="prev"/><name>bits_fix_IOD</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>iod</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_initwrite</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>, <argument><expr><name>iod</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>bits_fix_IOD</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>,

<argument><expr><call><name>GetDescriptorLength24b</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0x0f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xfe</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xfe</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_mapped_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>pes_mapped_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>&amp;</operator><name><name>p_mapped_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>!=</operator> <literal type="number">0xfa</literal> <operator>&amp;&amp;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>!=</operator> <literal type="number">0xfb</literal> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>!=</operator> <literal type="number">0xfe</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bits_buffer_t</name></type> <name>bits_fix_ESDescr</name></decl>, <decl><type ref="prev"/><name>bits_fix_Decoder</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x03</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>bits_fix_ESDescr</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>,

<argument><expr><call><name>GetDescriptorLength24b</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_es_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>bits_fix_Decoder</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><call><name>GetDescriptorLength24b</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>==</operator> <literal type="number">0x10</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>==</operator> <literal type="number">0x1b</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x21</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>==</operator> <literal type="number">0x11</literal> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>==</operator> <literal type="number">0x0f</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>==</operator> <literal type="number">0x12</literal> <operator>&amp;&amp;</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SUBT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x0B</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x04</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">"Unsupported stream_type =&gt; broken IOD"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0x7fffffff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SUBT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><literal type="number">55</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Mpeg4SUBTDecoderSpecific_55</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><call><name>GetDescriptorLength24b</name><argument_list>(

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits_fix_Decoder</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>,

<argument><expr><call><name>GetDescriptorLength24b</name><argument_list>( <argument><expr><name><name>bits</name><operator>.</operator><name>i_data</name></name> <operator>-</operator>

<name><name>bits_fix_Decoder</name><operator>.</operator><name>i_data</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x06</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><call><name>GetDescriptorLength24b</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits_fix_ESDescr</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>,

<argument><expr><call><name>GetDescriptorLength24b</name><argument_list>( <argument><expr><name><name>bits</name><operator>.</operator><name>i_data</name></name> <operator>-</operator>

<name><name>bits_fix_ESDescr</name><operator>.</operator><name>i_data</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bits_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bits_write</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bits_fix_IOD</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>,

<argument><expr><call><name>GetDescriptorLength24b</name><argument_list>(<argument><expr><name><name>bits</name><operator>.</operator><name>i_data</name></name> <operator>-</operator> <name><name>bits_fix_IOD</name><operator>.</operator><name>i_data</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_descriptor_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dvbpmt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x1d</literal></expr></argument>, <argument><expr><name><name>bits</name><operator>.</operator><name>i_data</name></name></expr></argument>, <argument><expr><name><name>bits</name><operator>.</operator><name>p_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateServiceType</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_service_cat</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_service_type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>tsmux_stream_t</name> <modifier>*</modifier></type><name>p_ts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_type</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_stream_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<case>case <expr><literal type="number">0x02</literal></expr>:</case> 

<case>case <expr><literal type="number">0x80</literal></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x24</literal></expr>:</case> 

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<case>case <expr><literal type="number">0x1b</literal></expr>:</case> 

<case>case <expr><literal type="number">0xA0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xd1</literal></expr>:</case> 

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <literal type="number">0x16</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">468</literal> <operator>&amp;&amp;</operator>

<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>&gt;</operator> <literal type="number">720</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <literal type="number">0x11</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x16</literal> <operator>&amp;&amp;</operator> <name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>&gt;</operator> <literal type="number">468</literal> <operator>&amp;&amp;</operator>

<name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>&gt;</operator> <literal type="number">720</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <literal type="number">0x19</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_service_cat</name> <operator>!=</operator> <name>VIDEO_ES</name> <operator>||</operator> <name>i_type</name> <operator>&gt;</operator> <operator>*</operator><name>pi_service_type</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_service_type</name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_service_cat</name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_service_cat</name> <operator>!=</operator> <name>VIDEO_ES</name></expr> )</condition> 

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_ts</name><operator>-&gt;</operator><name>i_stream_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x03</literal></expr>:</case> 

<case>case <expr><literal type="number">0x04</literal></expr>:</case> 

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x06</literal></expr>:</case>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case>

<case>case <expr><literal type="number">0x81</literal></expr>:</case>

<case>case <expr><literal type="number">0x83</literal></expr>:</case>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <literal type="number">0x0A</literal></expr>;</expr_stmt> 

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>&gt;</operator> <operator>*</operator><name>pi_service_type</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_service_type</name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>Write_AnnexA_String</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_src</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_src</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>i_src</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_latin</name> <init>= <expr><operator>(</operator><name><name>p_src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0x20</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>i_src</name> <operator>&amp;&amp;</operator> <name>b_latin</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_latin</name> <operator>&amp;=</operator> <operator>!</operator><operator>(</operator> <name><name>p_src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>b_latin</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_src</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>UINT8_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_src</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>i_src</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_src</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_src</name></expr></argument>, <argument><expr><name>UINT8_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>i_src</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x15</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dest</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal> <operator>+</operator> <name>i_src</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>BuildPMT</name><parameter_list>( <parameter><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_dvbpsi</name></decl></parameter>, <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>,

<parameter><decl><type><name>ts_mux_standard</name></type> <name>standard</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>, <parameter><decl><type><name>PEStoTSCallback</name></type> <name>pf_callback</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_tsid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pmt_version_number</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_pcr_pid</name></decl></parameter>,

<parameter><decl><type><name>sdt_psi_t</name> <modifier>*</modifier></type><name>p_sdt</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_programs</name></decl></parameter>, <parameter><decl><type><name>tsmux_stream_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>pi_programs_number</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_mapped_streams</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>pes_mapped_stream_t</name> <modifier>*</modifier></type><name>p_mapped_streams</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_pmt_t</name> <modifier>*</modifier></type><name>dvbpmt</name> <init>= <expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_programs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dvbpsi_pmt_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>dvbpmt</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>standard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dvbpsi_sdt_t</name></type> <name>sdtpsi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_service_types</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_service_cats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sdt</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_sdt_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sdtpsi</name></expr></argument>, <argument><expr><literal type="number">0x42</literal></expr></argument>, <argument><expr><name>i_tsid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_netid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pi_service_types</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_programs</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof <name/></sizeof>*<name>pi_service_types</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pi_service_types</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>dvbpmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pi_service_cats</name> <operator>=</operator> <operator>&amp;</operator><name><name>pi_service_types</name><index>[<expr><name>i_programs</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_programs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_pmt_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dvbpmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pi_programs_number</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, 

<argument><expr><name>i_pmt_version_number</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>, 

<argument><expr><name>i_pcr_pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_mapped_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>pes_mapped_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>&amp;</operator><name><name>p_mapped_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>==</operator> <literal type="number">0xfa</literal> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>==</operator> <literal type="number">0xfb</literal> <operator>||</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>==</operator> <literal type="number">0xfe</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GetPMTmpeg4</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>dvbpmt</name></expr></argument>, <argument><expr><name>i_mapped_streams</name></expr></argument>, <argument><expr><name>p_mapped_streams</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_mapped_streams</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>pes_mapped_stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>&amp;</operator><name><name>p_mapped_streams</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>dvbpsi_pmt_es_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dvbpmt</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_mapped_prog</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>==</operator> <literal type="number">0xfa</literal> <operator>||</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>==</operator> <literal type="number">0xfb</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>es_id</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>es_id</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_id</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_es_id</name></name><operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x1f</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>es_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>==</operator> <literal type="number">0xa0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><literal type="number">502</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name><operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_extra</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_extra</name> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_extra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0xa0</literal></expr></argument>, <argument><expr><name>i_extra</name> <operator>+</operator> <literal type="number">10</literal></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_JPEG2000</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">24</literal> <operator>+</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_data</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>profile</name> <init>= <expr><call><name>j2k_get_profile</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>profile</name> <operator>&lt;</operator> <name>J2K_PROFILE_HD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if<condition>( <expr><name>profile</name> <operator>&lt;</operator> <name>J2K_PROFILE_3G</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x04</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <call><name>j2k_get_color_spec</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>primaries</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>transfer</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>space</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument>, <argument><expr><literal type="number">24</literal> <operator>+</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIRAC</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'d'</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="char">'c'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DTS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_ver</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_profile</name></name> <operator>==</operator> <name>PROFILE_DTS_HD</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ver</name> <operator>=</operator> <literal type="char">'H'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ver</name> <operator>=</operator> <call><name>ctz</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_ver</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_ver</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_ver</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ver</name> <operator>+=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i_ver</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><name>i_ver</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_A52</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>format</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'-'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>standard</name> <operator>==</operator> <name>TS_MUX_STANDARD_ATSC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>==</operator> <literal type="number">0x81</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x6a</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_EAC3</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>format</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'E'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="char">'3'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>standard</name> <operator>==</operator> <name>TS_MUX_STANDARD_ATSC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>==</operator> <literal type="number">0x87</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0xcc</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x7a</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_OPUS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x80</literal></expr>, 

<expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x7f</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>format</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'O'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="char">'s'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>format</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TELETEXT</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DVBS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_subtitling_dr_t</name></type> <name>descr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_subtitle_t</name></type> <name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_descr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>sub</name><operator>.</operator><name>i_iso6392_language_code</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>.</operator><name>i_subtitling_type</name></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sub</name><operator>.</operator><name>i_composition_page_id</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>.</operator><name>i_ancillary_page_id</name></name> <operator>=</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>descr</name><operator>.</operator><name>i_subtitles_number</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>descr</name><operator>.</operator><name>p_subtitle</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>sub</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_descr</name> <operator>=</operator> <call><name>dvbpsi_GenSubtitlingDr</name><argument_list>( <argument><expr><operator>&amp;</operator><name>descr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_descr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name><name>p_descr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument>,

<argument><expr><name><name>p_descr</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><name><name>p_descr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_langs</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_pmt_es_descriptor_add</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x0a</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>*</operator><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>i_langs</name></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pes</name><operator>-&gt;</operator><name>lang</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sdt</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdateServiceType</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pi_service_cats</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_mapped_prog</name></name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pi_service_types</name><index>[<expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_mapped_prog</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_programs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_psi_section_t</name> <modifier>*</modifier></type><name>sect</name> <init>= <expr><call><name>dvbpsi_pmt_sections_generate</name><argument_list>( <argument><expr><name>p_dvbpsi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dvbpmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>sect</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>pmt</name> <init>= <expr><call><name>WritePSISection</name><argument_list>( <argument><expr><name>sect</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>pmt</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PEStoTS</name><argument_list>( <argument><expr><name>p_opaque</name></expr></argument>, <argument><expr><name>pf_callback</name></expr></argument>, <argument><expr><name>pmt</name></expr></argument>, <argument><expr><name><name>p_pmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pid</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_discontinuity</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pmt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_continuity_counter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_DeletePSISections</name><argument_list>(<argument><expr><name>sect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dvbpmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>dvbpmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sdt</name></expr> )</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_programs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_sdt_service_t</name> <modifier>*</modifier></type><name>p_service</name> <init>= <expr><call><name>dvbpsi_sdt_service_add</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sdtpsi</name></expr></argument>,

<argument><expr><name><name>pi_programs_number</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, 

<argument><expr><name>false</name></expr></argument>, 

<argument><expr><name>false</name></expr></argument>, 

<argument><expr><literal type="number">4</literal></expr></argument>, 

<argument><expr><name>false</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sdtprov</name> <init>= <expr><name><name>p_sdt</name><operator>-&gt;</operator><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_provider</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_sdtserv</name> <init>= <expr><name><name>p_sdt</name><operator>-&gt;</operator><name>desc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_service_name</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_sdt_desc</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">255</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_sdt_desc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sdt_desc</name><index>[<expr><name>i_sdt_desc</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pi_service_types</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sdt_desc</name> <operator>+=</operator> <call><name>Write_AnnexA_String</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sdt_desc</name><index>[<expr><name>i_sdt_desc</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_sdtprov</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sdt_desc</name> <operator>+=</operator> <call><name>Write_AnnexA_String</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sdt_desc</name><index>[<expr><name>i_sdt_desc</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_sdtserv</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_sdt_service_descriptor_add</name><argument_list>( <argument><expr><name>p_service</name></expr></argument>, <argument><expr><literal type="number">0x48</literal></expr></argument>, <argument><expr><name>i_sdt_desc</name></expr></argument>, <argument><expr><name>p_sdt_desc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pi_service_types</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dvbpsi_psi_section_t</name> <modifier>*</modifier></type><name>sect</name> <init>= <expr><call><name>dvbpsi_sdt_sections_generate</name><argument_list>( <argument><expr><name>p_dvbpsi</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sdtpsi</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>sect</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_sdtblock</name> <init>= <expr><call><name>WritePSISection</name><argument_list>( <argument><expr><name>sect</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_sdtblock</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PEStoTS</name><argument_list>( <argument><expr><name>p_opaque</name></expr></argument>, <argument><expr><name>pf_callback</name></expr></argument>, <argument><expr><name>p_sdtblock</name></expr></argument>, <argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_pid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sdt</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>b_discontinuity</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sdt</name><operator>-&gt;</operator><name>ts</name><operator>.</operator><name>i_continuity_counter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_DeletePSISections</name><argument_list>( <argument><expr><name>sect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_sdt_empty</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sdtpsi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>FillPMTESParams</name><parameter_list>( <parameter><decl><type><name>ts_mux_standard</name></type> <name>standard</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><name>tsmux_stream_t</name> <modifier>*</modifier></type><name>ts</name></decl></parameter>, <parameter><decl><type><name>pesmux_stream_t</name> <modifier>*</modifier></type><name>pes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_MPGV</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP2V</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP1V</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP4V</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_HEVC</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_H264</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x1b</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xe0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_H263I</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_H263</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WMV3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WMV2</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WMV1</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DIV3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DIV2</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DIV1</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MJPG</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xa0</literal></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DIRAC</name></expr>:</case>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <operator>(</operator><name>PES_EXTENDED_STREAM_ID</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <literal type="number">0x60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0xd1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_JPEG2000</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>j2k_is_valid_framerate</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,

<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x21</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP2</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MP3</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&gt;=</operator> <literal type="number">32000</literal></expr> ?</condition><then> <expr><literal type="number">0x03</literal></expr> </then><else>: <expr><literal type="number">0x04</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>standard</name> <operator>==</operator> <name>TS_MUX_STANDARD_ATSC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x81</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DVD_LPCM</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x83</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_OPUS</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_EAC3</name></expr>:</case>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>standard</name> <operator>==</operator> <name>TS_MUX_STANDARD_ATSC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x87</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DTS</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>standard</name> <operator>==</operator> <name>TS_MUX_STANDARD_ATSC</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MP4A</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xc0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_SPU</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x82</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_SUBT</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xfa</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>=</operator> <name><name>ts</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DVBS</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>=</operator> <name><name>fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>dvb</name><operator>.</operator><name>i_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_TELETEXT</name></expr>:</case>

<expr_stmt><expr><name><name>ts</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0x06</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_id</name></name> <operator>=</operator> <literal type="number">0xbd</literal></expr>;</expr_stmt> 

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
