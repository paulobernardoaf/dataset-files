<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\mux\mpeg\csa.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"csa.h"</cpp:file></cpp:include>

<struct>struct <name>csa_t</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>o_ck</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>e_ck</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>o_kk</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>e_kk</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>B</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>, <decl><type ref="prev"/><name>Z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>D</name></decl>, <decl><type ref="prev"/><name>E</name></decl>, <decl><type ref="prev"/><name>F</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>use_odd</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>csa_ComputeKey</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name><name>kk</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>ck</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>csa_StreamCypher</name><parameter_list>( <parameter><decl><type><name>csa_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_init</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ck</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cb</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>csa_BlockDecypher</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name><name>kk</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>ib</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>bd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>csa_BlockCypher</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name><name>kk</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>bd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>ib</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>csa_t</name> <modifier>*</modifier></type><name>csa_New</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>csa_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>csa_Delete</name><parameter_list>( <parameter><decl><type><name>csa_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>csa_SetCW</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_caller</name></decl></parameter>, <parameter><decl><type><name>csa_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ck</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set_odd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>c</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_caller</name></expr></argument>, <argument><expr><literal type="string">"no CSA found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOOBJ</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_ck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>psz_ck</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'x'</literal> <operator>||</operator> <name><name>psz_ck</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_ck</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_ck</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">16</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_caller</name></expr></argument>, <argument><expr><literal type="string">"invalid csa ck (it must be 16 chars long)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EBADVAR</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_ck</name> <init>= <expr><call><name>strtoull</name><argument_list>( <argument><expr><name>psz_ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ck</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>ck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>i_ck</name> <operator>&gt;&gt;</operator> <operator>(</operator> <literal type="number">56</literal> <operator>-</operator> <literal type="number">8</literal><operator>*</operator><name>i</name><operator>)</operator> <operator>)</operator><operator>&amp;</operator><literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TS_NO_CSA_CK_MSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_caller</name></expr></argument>, <argument><expr><literal type="string">"using CSA (de)scrambling with %s "</literal>

<literal type="string">"key=%x:%x:%x:%x:%x:%x:%x:%x"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>set_odd</name></expr> ?</condition><then> <expr><literal type="string">"odd"</literal></expr> </then><else>: <expr><literal type="string">"even"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>ck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ck</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ck</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ck</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ck</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ck</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ck</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ck</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>set_odd</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>o_ck</name></name></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>csa_ComputeKey</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>o_kk</name></name></expr></argument>, <argument><expr><name>ck</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>e_ck</name></name></expr></argument> , <argument><expr><name>ck</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>csa_ComputeKey</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>e_kk</name></name></expr></argument> , <argument><expr><name>ck</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>csa_UseKey</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_caller</name></decl></parameter>, <parameter><decl><type><name>csa_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_odd</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>c</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_ENOOBJ</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>use_odd</name></name> <operator>=</operator> <name>use_odd</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TS_NO_CSA_CK_MSG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_caller</name></expr></argument>, <argument><expr><literal type="string">"using the %s key for scrambling"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>use_odd</name></expr> ?</condition><then> <expr><literal type="string">"odd"</literal></expr> </then><else>: <expr><literal type="string">"even"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>csa_Decrypt</name><parameter_list>( <parameter><decl><type><name>csa_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pkt_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ck</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>kk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ib</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>stream</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_hdr</name></decl>, <decl><type ref="prev"/><name>i_residue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x40</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>ck</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>o_ck</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>kk</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>o_kk</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ck</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>e_ck</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>kk</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>e_kk</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_hdr</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x20</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_hdr</name> <operator>+=</operator> <name><name>pkt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">188</literal> <operator>-</operator> <name>i_hdr</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>csa_StreamCypher</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><index>[<expr><name>i_hdr</name></expr>]</index></name></expr></argument>, <argument><expr><name>ib</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>i_pkt_size</name> <operator>-</operator> <name>i_hdr</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_residue</name> <operator>=</operator> <operator>(</operator><name>i_pkt_size</name> <operator>-</operator> <name>i_hdr</name><operator>)</operator> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>csa_BlockDecypher</name><argument_list>( <argument><expr><name>kk</name></expr></argument>, <argument><expr><name>ib</name></expr></argument>, <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <name>n</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>csa_StreamCypher</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>ib</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><index>[<expr><name>i_hdr</name><operator>+</operator><literal type="number">8</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>^</operator> <name><name>stream</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>ib</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><index>[<expr><name>i_hdr</name><operator>+</operator><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ib</name><index>[<expr><name>j</name></expr>]</index></name> <operator>^</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_residue</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>csa_StreamCypher</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_residue</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><index>[<expr><name>i_pkt_size</name> <operator>-</operator> <name>i_residue</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>stream</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>csa_Encrypt</name><parameter_list>( <parameter><decl><type><name>csa_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pkt_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ck</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>kk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_hdr</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ib</name><index>[<expr><literal type="number">184</literal><operator>/</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>stream</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i_residue</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>use_odd</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ck</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>o_ck</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>kk</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>o_kk</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>ck</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>e_ck</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>kk</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>e_kk</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_hdr</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x20</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_hdr</name> <operator>+=</operator> <name><name>pkt</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>i_pkt_size</name> <operator>-</operator> <name>i_hdr</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_residue</name> <operator>=</operator> <operator>(</operator><name>i_pkt_size</name> <operator>-</operator> <name>i_hdr</name><operator>)</operator> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;=</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>ib</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pkt</name><index>[<expr><name>i_hdr</name><operator>+</operator><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>j</name></expr>]</index></name> <operator>^</operator><name><name>ib</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>csa_BlockCypher</name><argument_list>( <argument><expr><name>kk</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>ib</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>csa_StreamCypher</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name><name>ib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><index>[<expr><name>i_hdr</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ib</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>csa_StreamCypher</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><index>[<expr><name>i_hdr</name><operator>+</operator><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ib</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>^</operator> <name><name>stream</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_residue</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>csa_StreamCypher</name><argument_list>( <argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ck</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_residue</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><index>[<expr><name>i_pkt_size</name> <operator>-</operator> <name>i_residue</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>^=</operator> <name><name>stream</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>key_perm</name><index>[<expr><literal type="number">0x40</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x1D</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0x3E</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0x40</literal></expr>,

<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0x1B</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0x29</literal></expr>,

<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x3A</literal></expr>,<expr><literal type="number">0x2D</literal></expr>,<expr><literal type="number">0x1F</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x2F</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0x11</literal></expr>,

<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0x2E</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x37</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>csa_ComputeKey</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name><name>kk</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>ck</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bit</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>newbit</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>kb</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>kb</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ck</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>bit</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>kb</name><index>[<expr><literal type="number">7</literal><operator>-</operator><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal><operator>-</operator><name>k</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>newbit</name><index>[<expr><name><name>key_perm</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>k</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bit</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>kb</name><index>[<expr><literal type="number">6</literal><operator>-</operator><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>kb</name><index>[<expr><literal type="number">6</literal><operator>-</operator><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>j</name></expr>]</index></name> <operator>|=</operator> <name><name>newbit</name><index>[<expr><name>j</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>k</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">7</literal><operator>-</operator><name>k</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>kk</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>kb</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>j</name></expr>]</index></name> <operator>^</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sbox1</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sbox2</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sbox3</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sbox4</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sbox5</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sbox6</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>sbox7</name><index>[<expr><literal type="number">0x20</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>csa_StreamCypher</name><parameter_list>( <parameter><decl><type><name>csa_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_init</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ck</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cb</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extra_B</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>,<decl><type ref="prev"/><name>s3</name></decl>,<decl><type ref="prev"/><name>s4</name></decl>,<decl><type ref="prev"/><name>s5</name></decl>,<decl><type ref="prev"/><name>s6</name></decl>,<decl><type ref="prev"/><name>s7</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_A1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_B1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_E</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_init</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>ck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>ck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>ck</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>ck</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>X</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>Z</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>D</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>E</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>F</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>op</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>in2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_init</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>in1</name> <operator>=</operator> <operator>(</operator> <name><name>sb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in2</name> <operator>=</operator> <operator>(</operator> <name><name>sb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>s1</name> <operator>=</operator> <name><name>sbox1</name><index>[ <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>sbox2</name><index>[ <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s3</name> <operator>=</operator> <name><name>sbox3</name><index>[ <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s4</name> <operator>=</operator> <name><name>sbox4</name><index>[ <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s5</name> <operator>=</operator> <name><name>sbox5</name><index>[ <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s6</name> <operator>=</operator> <name><name>sbox6</name><index>[ <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s7</name> <operator>=</operator> <name><name>sbox7</name><index>[ <expr><operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>extra_B</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">4</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>)</operator> <operator>|</operator>

<operator>(</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>)</operator> <operator>|</operator>

<operator>(</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>)</operator> <operator>|</operator>

<operator>(</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">8</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">0</literal><operator>)</operator> <operator>)</operator></expr> ;</expr_stmt>

<expr_stmt><expr><name>next_A1</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>X</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_init</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>next_A1</name> <operator>=</operator> <name>next_A1</name> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>D</name></name> <operator>^</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>j</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>in2</name></expr> </then><else>: <expr><name>in1</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_B1</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>Y</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_init</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>next_B1</name> <operator>=</operator> <name>next_B1</name> <operator>^</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>j</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>in1</name></expr> </then><else>: <expr><name>in2</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>p</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>next_B1</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>next_B1</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>next_B1</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>D</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>E</name></name> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>Z</name></name> <operator>^</operator> <name>extra_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_E</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>F</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>F</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>Z</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>E</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>r</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>r</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>F</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>F</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>F</name></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>F</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>E</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>E</name></name> <operator>=</operator> <name>next_E</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>k</name> <operator>=</operator> <literal type="number">10</literal></expr>;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>next_A1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>B</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>next_B1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>X</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>s4</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>s3</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s2</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>s1</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>s6</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>s5</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s4</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>s3</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>Z</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>s2</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>s1</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>s6</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>s5</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <operator>(</operator><name>s7</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>q</name></name> <operator>=</operator> <operator>(</operator><name>s7</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <operator>(</operator><name>op</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>^</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>D</name></name><operator>^</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>D</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>D</name></name><operator>^</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>D</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>b_init</name></expr> ?</condition><then> <expr><name><name>sb</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name>op</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>block_sbox</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0x3A</literal></expr>,<expr><literal type="number">0xEA</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0xFE</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0xE9</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0xE1</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0xBA</literal></expr>,<expr><literal type="number">0xE2</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0x12</literal></expr>,

<expr><literal type="number">0xE8</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0xE5</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0xA2</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x7C</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0xA3</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0x49</literal></expr>,

<expr><literal type="number">0xBE</literal></expr>,<expr><literal type="number">0x7A</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0xC1</literal></expr>,<expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0xBD</literal></expr>,<expr><literal type="number">0xCD</literal></expr>,<expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0xC9</literal></expr>,

<expr><literal type="number">0xFF</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0xEF</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0xF5</literal></expr>,<expr><literal type="number">0x5C</literal></expr>,<expr><literal type="number">0xC6</literal></expr>,

<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xAB</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0xF1</literal></expr>,<expr><literal type="number">0x6A</literal></expr>,<expr><literal type="number">0x2F</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0x62</literal></expr>,

<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0x2E</literal></expr>,<expr><literal type="number">0xAA</literal></expr>,<expr><literal type="number">0xC5</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0xE3</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0xE4</literal></expr>,<expr><literal type="number">0x58</literal></expr>,

<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0xDD</literal></expr>,<expr><literal type="number">0xEE</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xF6</literal></expr>,<expr><literal type="number">0x8A</literal></expr>,<expr><literal type="number">0xEC</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0xDE</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,

<expr><literal type="number">0x7E</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0x9D</literal></expr>,<expr><literal type="number">0xC2</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0x1F</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0x30</literal></expr>,

<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0xE7</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0x1B</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0xE6</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,

<expr><literal type="number">0xEB</literal></expr>,<expr><literal type="number">0xC3</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x2D</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0xA4</literal></expr>,<expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0xC7</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0xED</literal></expr>,<expr><literal type="number">0x90</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x9E</literal></expr>,<expr><literal type="number">0x4D</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x8D</literal></expr>,<expr><literal type="number">0x6F</literal></expr>,<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0x3E</literal></expr>,<expr><literal type="number">0xD7</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0xDF</literal></expr>,<expr><literal type="number">0x6B</literal></expr>,<expr><literal type="number">0x05</literal></expr>,

<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0x37</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0xD6</literal></expr>,<expr><literal type="number">0xA7</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0xB0</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0xB7</literal></expr>,

<expr><literal type="number">0xF8</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0xB1</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0x7D</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0xF2</literal></expr>,<expr><literal type="number">0xCB</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x60</literal></expr>,

<expr><literal type="number">0xD1</literal></expr>,<expr><literal type="number">0xF7</literal></expr>,<expr><literal type="number">0xE0</literal></expr>,<expr><literal type="number">0xB5</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0xB3</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x1D</literal></expr>,<expr><literal type="number">0xA6</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x7B</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x9F</literal></expr>,<expr><literal type="number">0xAE</literal></expr>,<expr><literal type="number">0x31</literal></expr>,

<expr><literal type="number">0xFB</literal></expr>,<expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0xB6</literal></expr>,<expr><literal type="number">0xCA</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0xF4</literal></expr>,<expr><literal type="number">0xD8</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x8B</literal></expr>,<expr><literal type="number">0xB9</literal></expr>,

<expr><literal type="number">0xAD</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0xAF</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,<expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0xB2</literal></expr>,<expr><literal type="number">0xA9</literal></expr>,<expr><literal type="number">0x9B</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>block_perm</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x02</literal></expr>,<expr><literal type="number">0x80</literal></expr>,<expr><literal type="number">0x82</literal></expr>,<expr><literal type="number">0x20</literal></expr>,<expr><literal type="number">0x22</literal></expr>,<expr><literal type="number">0xA0</literal></expr>,<expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x10</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x90</literal></expr>,<expr><literal type="number">0x92</literal></expr>,<expr><literal type="number">0x30</literal></expr>,<expr><literal type="number">0x32</literal></expr>,<expr><literal type="number">0xB0</literal></expr>,<expr><literal type="number">0xB2</literal></expr>,

<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x06</literal></expr>,<expr><literal type="number">0x84</literal></expr>,<expr><literal type="number">0x86</literal></expr>,<expr><literal type="number">0x24</literal></expr>,<expr><literal type="number">0x26</literal></expr>,<expr><literal type="number">0xA4</literal></expr>,<expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0x14</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0x94</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0x34</literal></expr>,<expr><literal type="number">0x36</literal></expr>,<expr><literal type="number">0xB4</literal></expr>,<expr><literal type="number">0xB6</literal></expr>,

<expr><literal type="number">0x40</literal></expr>,<expr><literal type="number">0x42</literal></expr>,<expr><literal type="number">0xC0</literal></expr>,<expr><literal type="number">0xC2</literal></expr>,<expr><literal type="number">0x60</literal></expr>,<expr><literal type="number">0x62</literal></expr>,<expr><literal type="number">0xE0</literal></expr>,<expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0x50</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xD0</literal></expr>,<expr><literal type="number">0xD2</literal></expr>,<expr><literal type="number">0x70</literal></expr>,<expr><literal type="number">0x72</literal></expr>,<expr><literal type="number">0xF0</literal></expr>,<expr><literal type="number">0xF2</literal></expr>,

<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x46</literal></expr>,<expr><literal type="number">0xC4</literal></expr>,<expr><literal type="number">0xC6</literal></expr>,<expr><literal type="number">0x64</literal></expr>,<expr><literal type="number">0x66</literal></expr>,<expr><literal type="number">0xE4</literal></expr>,<expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x54</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0xD4</literal></expr>,<expr><literal type="number">0xD6</literal></expr>,<expr><literal type="number">0x74</literal></expr>,<expr><literal type="number">0x76</literal></expr>,<expr><literal type="number">0xF4</literal></expr>,<expr><literal type="number">0xF6</literal></expr>,

<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x03</literal></expr>,<expr><literal type="number">0x81</literal></expr>,<expr><literal type="number">0x83</literal></expr>,<expr><literal type="number">0x21</literal></expr>,<expr><literal type="number">0x23</literal></expr>,<expr><literal type="number">0xA1</literal></expr>,<expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x13</literal></expr>,<expr><literal type="number">0x91</literal></expr>,<expr><literal type="number">0x93</literal></expr>,<expr><literal type="number">0x31</literal></expr>,<expr><literal type="number">0x33</literal></expr>,<expr><literal type="number">0xB1</literal></expr>,<expr><literal type="number">0xB3</literal></expr>,

<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x07</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x87</literal></expr>,<expr><literal type="number">0x25</literal></expr>,<expr><literal type="number">0x27</literal></expr>,<expr><literal type="number">0xA5</literal></expr>,<expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x17</literal></expr>,<expr><literal type="number">0x95</literal></expr>,<expr><literal type="number">0x97</literal></expr>,<expr><literal type="number">0x35</literal></expr>,<expr><literal type="number">0x37</literal></expr>,<expr><literal type="number">0xB5</literal></expr>,<expr><literal type="number">0xB7</literal></expr>,

<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x43</literal></expr>,<expr><literal type="number">0xC1</literal></expr>,<expr><literal type="number">0xC3</literal></expr>,<expr><literal type="number">0x61</literal></expr>,<expr><literal type="number">0x63</literal></expr>,<expr><literal type="number">0xE1</literal></expr>,<expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x51</literal></expr>,<expr><literal type="number">0x53</literal></expr>,<expr><literal type="number">0xD1</literal></expr>,<expr><literal type="number">0xD3</literal></expr>,<expr><literal type="number">0x71</literal></expr>,<expr><literal type="number">0x73</literal></expr>,<expr><literal type="number">0xF1</literal></expr>,<expr><literal type="number">0xF3</literal></expr>,

<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x47</literal></expr>,<expr><literal type="number">0xC5</literal></expr>,<expr><literal type="number">0xC7</literal></expr>,<expr><literal type="number">0x65</literal></expr>,<expr><literal type="number">0x67</literal></expr>,<expr><literal type="number">0xE5</literal></expr>,<expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x57</literal></expr>,<expr><literal type="number">0xD5</literal></expr>,<expr><literal type="number">0xD7</literal></expr>,<expr><literal type="number">0x75</literal></expr>,<expr><literal type="number">0x77</literal></expr>,<expr><literal type="number">0xF5</literal></expr>,<expr><literal type="number">0xF7</literal></expr>,

<expr><literal type="number">0x08</literal></expr>,<expr><literal type="number">0x0A</literal></expr>,<expr><literal type="number">0x88</literal></expr>,<expr><literal type="number">0x8A</literal></expr>,<expr><literal type="number">0x28</literal></expr>,<expr><literal type="number">0x2A</literal></expr>,<expr><literal type="number">0xA8</literal></expr>,<expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0x18</literal></expr>,<expr><literal type="number">0x1A</literal></expr>,<expr><literal type="number">0x98</literal></expr>,<expr><literal type="number">0x9A</literal></expr>,<expr><literal type="number">0x38</literal></expr>,<expr><literal type="number">0x3A</literal></expr>,<expr><literal type="number">0xB8</literal></expr>,<expr><literal type="number">0xBA</literal></expr>,

<expr><literal type="number">0x0C</literal></expr>,<expr><literal type="number">0x0E</literal></expr>,<expr><literal type="number">0x8C</literal></expr>,<expr><literal type="number">0x8E</literal></expr>,<expr><literal type="number">0x2C</literal></expr>,<expr><literal type="number">0x2E</literal></expr>,<expr><literal type="number">0xAC</literal></expr>,<expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0x1C</literal></expr>,<expr><literal type="number">0x1E</literal></expr>,<expr><literal type="number">0x9C</literal></expr>,<expr><literal type="number">0x9E</literal></expr>,<expr><literal type="number">0x3C</literal></expr>,<expr><literal type="number">0x3E</literal></expr>,<expr><literal type="number">0xBC</literal></expr>,<expr><literal type="number">0xBE</literal></expr>,

<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x4A</literal></expr>,<expr><literal type="number">0xC8</literal></expr>,<expr><literal type="number">0xCA</literal></expr>,<expr><literal type="number">0x68</literal></expr>,<expr><literal type="number">0x6A</literal></expr>,<expr><literal type="number">0xE8</literal></expr>,<expr><literal type="number">0xEA</literal></expr>, <expr><literal type="number">0x58</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xD8</literal></expr>,<expr><literal type="number">0xDA</literal></expr>,<expr><literal type="number">0x78</literal></expr>,<expr><literal type="number">0x7A</literal></expr>,<expr><literal type="number">0xF8</literal></expr>,<expr><literal type="number">0xFA</literal></expr>,

<expr><literal type="number">0x4C</literal></expr>,<expr><literal type="number">0x4E</literal></expr>,<expr><literal type="number">0xCC</literal></expr>,<expr><literal type="number">0xCE</literal></expr>,<expr><literal type="number">0x6C</literal></expr>,<expr><literal type="number">0x6E</literal></expr>,<expr><literal type="number">0xEC</literal></expr>,<expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x5C</literal></expr>,<expr><literal type="number">0x5E</literal></expr>,<expr><literal type="number">0xDC</literal></expr>,<expr><literal type="number">0xDE</literal></expr>,<expr><literal type="number">0x7C</literal></expr>,<expr><literal type="number">0x7E</literal></expr>,<expr><literal type="number">0xFC</literal></expr>,<expr><literal type="number">0xFE</literal></expr>,

<expr><literal type="number">0x09</literal></expr>,<expr><literal type="number">0x0B</literal></expr>,<expr><literal type="number">0x89</literal></expr>,<expr><literal type="number">0x8B</literal></expr>,<expr><literal type="number">0x29</literal></expr>,<expr><literal type="number">0x2B</literal></expr>,<expr><literal type="number">0xA9</literal></expr>,<expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x19</literal></expr>,<expr><literal type="number">0x1B</literal></expr>,<expr><literal type="number">0x99</literal></expr>,<expr><literal type="number">0x9B</literal></expr>,<expr><literal type="number">0x39</literal></expr>,<expr><literal type="number">0x3B</literal></expr>,<expr><literal type="number">0xB9</literal></expr>,<expr><literal type="number">0xBB</literal></expr>,

<expr><literal type="number">0x0D</literal></expr>,<expr><literal type="number">0x0F</literal></expr>,<expr><literal type="number">0x8D</literal></expr>,<expr><literal type="number">0x8F</literal></expr>,<expr><literal type="number">0x2D</literal></expr>,<expr><literal type="number">0x2F</literal></expr>,<expr><literal type="number">0xAD</literal></expr>,<expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0x1D</literal></expr>,<expr><literal type="number">0x1F</literal></expr>,<expr><literal type="number">0x9D</literal></expr>,<expr><literal type="number">0x9F</literal></expr>,<expr><literal type="number">0x3D</literal></expr>,<expr><literal type="number">0x3F</literal></expr>,<expr><literal type="number">0xBD</literal></expr>,<expr><literal type="number">0xBF</literal></expr>,

<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x4B</literal></expr>,<expr><literal type="number">0xC9</literal></expr>,<expr><literal type="number">0xCB</literal></expr>,<expr><literal type="number">0x69</literal></expr>,<expr><literal type="number">0x6B</literal></expr>,<expr><literal type="number">0xE9</literal></expr>,<expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x5B</literal></expr>,<expr><literal type="number">0xD9</literal></expr>,<expr><literal type="number">0xDB</literal></expr>,<expr><literal type="number">0x79</literal></expr>,<expr><literal type="number">0x7B</literal></expr>,<expr><literal type="number">0xF9</literal></expr>,<expr><literal type="number">0xFB</literal></expr>,

<expr><literal type="number">0x4D</literal></expr>,<expr><literal type="number">0x4F</literal></expr>,<expr><literal type="number">0xCD</literal></expr>,<expr><literal type="number">0xCF</literal></expr>,<expr><literal type="number">0x6D</literal></expr>,<expr><literal type="number">0x6F</literal></expr>,<expr><literal type="number">0xED</literal></expr>,<expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0x5D</literal></expr>,<expr><literal type="number">0x5F</literal></expr>,<expr><literal type="number">0xDD</literal></expr>,<expr><literal type="number">0xDF</literal></expr>,<expr><literal type="number">0x7D</literal></expr>,<expr><literal type="number">0x7F</literal></expr>,<expr><literal type="number">0xFD</literal></expr>,<expr><literal type="number">0xFF</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>csa_BlockDecypher</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name><name>kk</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>ib</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>bd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>perm_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>R</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_R8</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>R</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ib</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">56</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sbox_out</name> <init>= <expr><name><name>block_sbox</name><index>[ <expr><name><name>kk</name><index>[<expr><name>i</name></expr>]</index></name><operator>^</operator><name><name>R</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>perm_out</name> <operator>=</operator> <name><name>block_perm</name><index>[<expr><name>sbox_out</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_R8</name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>^</operator> <name>perm_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name><name>R</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name>sbox_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>R</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name>sbox_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>^</operator> <name><name>R</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name>sbox_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>^</operator> <name>sbox_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>next_R8</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>bd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>csa_BlockCypher</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name><name>kk</name><index>[<expr><literal type="number">57</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>bd</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>ib</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>perm_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>R</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>next_R1</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>R</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>bd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">56</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sbox_out</name> <init>= <expr><name><name>block_sbox</name><index>[ <expr><name><name>kk</name><index>[<expr><name>i</name></expr>]</index></name><operator>^</operator><name><name>R</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>perm_out</name> <operator>=</operator> <name><name>block_perm</name><index>[<expr><name>sbox_out</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>next_R1</name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>^</operator> <name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>^</operator> <name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>^</operator> <name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>^</operator> <name>perm_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>sbox_out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>R</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>next_R1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>ib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
