<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_filter\record.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_STREAM_FILTER</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Internal stream record"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"stream_filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_error</name></decl>;</decl_stmt>

}</block></struct></type> <name>stream_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_read</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_read</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Start</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_extension</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Stop</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Write</name> <parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>Read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>Seek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Stop</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_read</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_read</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_record</name> <init>= <expr><name>p_read</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ssize_t</name></type> <name>i_record</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_record</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_record</name> <operator>&amp;&amp;</operator> <name>i_record</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>Write</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_record</name></expr></argument>, <argument><expr><name>i_record</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_record</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_query</name> <operator>!=</operator> <name>STREAM_SET_RECORD_STATE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlc_stream_vaControl</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_active</name> <init>= <expr><operator>(</operator><name>bool</name><operator>)</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_extension</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_active</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_extension</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>f</name></name> <operator>==</operator> <operator>!</operator><name>b_active</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_active</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>Start</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>psz_extension</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>Stop</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Start</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_extension</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_extension</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_extension</name> <operator>=</operator> <literal type="string">"dat"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name> <init>= <expr><call><name>var_CreateGetNonEmptyString</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"input-record-path"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_path</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_path</name> <operator>=</operator> <call><name>config_GetUserDir</name><argument_list>( <argument><expr><name>VLC_DOWNLOAD_DIR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_path</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_file</name> <operator>=</operator> <call><name>input_item_CreateFilename</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_input_item</name></name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument>,

<argument><expr><name>INPUT_RECORD_PREFIX</name></expr></argument>, <argument><expr><name>psz_extension</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_file</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>f</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>var_SetString</name><argument_list>( <argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"record-file"</literal></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Recording into %s"</literal></expr></argument>, <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_file</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Stop</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Recording completed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Write</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_previous_error</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_written</name> <init>= <expr><call><name>fwrite</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>=</operator> <name>i_written</name> <operator>!=</operator> <name>i_buffer</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_previous_error</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Failed to record data (begin)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_error</name></name> <operator>&amp;&amp;</operator> <name>b_previous_error</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Failed to record data (end)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
