<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\stream_filter\hds\hds.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include> 

<typedef>typedef <type><struct>struct <name>chunk_s</name>

<block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frag_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>seg_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frun_entry</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mdat_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mdat_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>mdat_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>failed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>

}</block></struct></type> <name>chunk_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>segment_run_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>first_segment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fragments_per_segment</name></decl>;</decl_stmt>

}</block></struct></type> <name>segment_run_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>fragment_run_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fragment_number_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fragment_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>fragment_timestamp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>discont</name></decl>;</decl_stmt>

}</block></struct></type> <name>fragment_run_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>hds_stream_s</name>

<block>{

<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>chunks_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>chunks_livereadpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>chunks_downloadpos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>quality_segment_modifier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>download_leadtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>afrt_timescale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>timescale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>live_current_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>abst_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>dl_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>dl_cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>abst_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>movie_id</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HDS_SERVERS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>server_entries</name><index>[<expr><name>MAX_HDS_SERVERS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>server_entry_count</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HDS_SEGMENT_RUNS</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<decl_stmt><decl><type><name>segment_run_t</name></type> <name><name>segment_runs</name><index>[<expr><name>MAX_HDS_SEGMENT_RUNS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>segment_run_count</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HDS_FRAGMENT_RUNS</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>fragment_run_t</name></type> <name><name>fragment_runs</name><index>[<expr><name>MAX_HDS_FRAGMENT_RUNS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fragment_run_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>hds_stream_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REQUEST_SIZE</name></cpp:macro> <cpp:value>(50*1024*1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITRATE_AS_BYTES_PER_SECOND</name></cpp:macro> <cpp:value>1024/8</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>base_url</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>live_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>dl_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>chunk_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_array_t</name></type> <name>hds_streams</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>flv_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>flv_header_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>flv_header_bytes_sent</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>duration_seconds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>live</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>closed</name></decl>;</decl_stmt>

}</block></struct></type> <name>stream_sys_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_bootstrap_info</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>data_len</name></decl>;</decl_stmt>

}</block></struct></type> <name>bootstrap_info</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_media_info</name> <block>{

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>stream_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>media_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>bootstrap_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>metadata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>bitrate</name></decl>;</decl_stmt>

}</block></struct></type> <name>media_info</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BOOTSTRAP_INFO</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MEDIA_ELEMENTS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_XML_DEPTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>_manifest</name> <block>{

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>element_stack</name><index>[<expr><name>MAX_XML_DEPTH</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bootstrap_info</name></type> <name><name>bootstraps</name><index>[<expr><name>MAX_BOOTSTRAP_INFO</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>media_info</name></type> <name><name>medias</name><index>[<expr><name>MAX_MEDIA_ELEMENTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>vlc_reader</name></decl>;</decl_stmt>

}</block></struct></type> <name>manifest_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>flv_header_bytes</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="char">'F'</literal></expr>,

<expr><literal type="char">'L'</literal></expr>,

<expr><literal type="char">'V'</literal></expr>,

<expr><literal type="number">0x1</literal></expr>, 

<expr><literal type="number">0x5</literal></expr>, 

<expr><literal type="number">0x0</literal></expr>, 

<expr><literal type="number">0x0</literal></expr>, 

<expr><literal type="number">0x0</literal></expr>, 

<expr><literal type="number">0x9</literal></expr>, 

<expr><literal type="number">0x0</literal></expr>,

<expr><literal type="number">0x0</literal></expr>,

<expr><literal type="number">0x0</literal></expr>,

<expr><literal type="number">0x0</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>char</name></type> <name><name>amf_object_end</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x9</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLV_FILE_HEADER_LEN</name></cpp:macro> <cpp:value>sizeof(flv_header_bytes)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLV_TAG_HEADER_LEN</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRIPT_TAG</name></cpp:macro> <cpp:value>0x12</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_STREAM_FILTER</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"HTTP Dynamic Streaming"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"Dynamic Streaming"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"stream_filter"</literal></argument>, <argument><literal type="number">330</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>isFQUrl</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>url</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator> <name>NULL</name> <operator>!=</operator> <call><name>strcasestr</name><argument_list>( <argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"https://"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<name>NULL</name> <operator>!=</operator> <call><name>strcasestr</name><argument_list>( <argument><expr><name>url</name></expr></argument>, <argument><expr><literal type="string">"http://"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isHDS</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">200</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>peek</name></expr></argument>, <argument><expr><literal type="string">"\xFF\xFE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><name>peek</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>peek</name></expr></argument>, <argument><expr><literal type="string">"\xFE\xFF"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><name>peek</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>peek</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>str</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>strstr</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"&lt;manifest"</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_stream_size</name><parameter_list>( <parameter><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>live</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>hds_stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name><operator>.</operator><name>pp_elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>flv_header_len</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>duration_seconds</name></name> <operator>*</operator>

<name><name>hds_stream</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>*</operator> <name>BITRATE_AS_BYTES_PER_SECOND</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>parse_asrt</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>,

<parameter><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data_p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>asrt_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>asrt_len</name> <operator>=</operator> <call><name>U32_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>asrt_len</name> <operator>&gt;</operator> <name>data_end</name> <operator>-</operator> <name>data</name> <operator>||</operator>

<name>data_end</name> <operator>-</operator> <name>data</name> <operator>&lt;</operator> <literal type="number">14</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough asrt data (%"</literal><name>PRIu32</name><literal type="string">", %tu)"</literal></expr></argument>, <argument><expr><name>asrt_len</name></expr></argument>,

<argument><expr><name>data_end</name> <operator>-</operator> <name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>asrt_len</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <call><name>memcmp</name><argument_list>( <argument><expr><literal type="string">"asrt"</literal></expr></argument>, <argument><expr><name>data_p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Cant find asrt in bootstrap"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>quality_entry_count</name> <init>= <expr><operator>*</operator><name>data_p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>quality_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>quality_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>quality_entry_count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str_start</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <name>data_p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_p</name> <operator>=</operator> <call><name>memchr</name><argument_list>( <argument><expr><name>data_p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>data_end</name> <operator>-</operator> <name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>data_p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find quality entry string in asrt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>quality_found</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>strncmp</name><argument_list>( <argument><expr><name>str_start</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>quality_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>data_p</name> <operator>&gt;=</operator> <name>data_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Premature end of asrt in quality entries"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Premature end of asrt after quality entries"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>segment_run_entry_count</name> <init>= <expr><call><name>U32_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>segment_run_entry_count</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name>segment_run_entry_count</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough data in asrt for segment run entries"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>segment_run_entry_count</name> <operator>&gt;=</operator> <name>MAX_HDS_SEGMENT_RUNS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Too many segment runs"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>segment_run_entry_count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>quality_found</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>segment_run_count</name></name></expr>]</index></name><operator>.</operator><name>first_segment</name> <operator>=</operator> <call><name>U32_AT</name><argument_list>(<argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>quality_found</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>segment_run_count</name></name></expr>]</index></name><operator>.</operator><name>fragments_per_segment</name> <operator>=</operator> <call><name>U32_AT</name><argument_list>(<argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segment_run_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>data_p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>parse_afrt</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>,

<parameter><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data_p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>afrt_len</name> <init>= <expr><call><name>U32_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>afrt_len</name> <operator>&gt;</operator> <name>data_end</name> <operator>-</operator> <name>data</name> <operator>||</operator>

<name>data_end</name> <operator>-</operator> <name>data</name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough afrt data %u, %td"</literal></expr></argument>, <argument><expr><name>afrt_len</name></expr></argument>,

<argument><expr><name>data_end</name> <operator>-</operator> <name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>afrt_len</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>data_p</name></expr></argument>, <argument><expr><literal type="string">"afrt"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Cant find afrt in bootstrap"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"afrt is too short"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>afrt_timescale</name></name> <operator>=</operator> <call><name>U32_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>quality_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>quality_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>quality_entry_count</name> <init>= <expr><operator>*</operator><name>data_p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<while>while<condition>( <expr><name>quality_entry_count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str_start</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data_p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_p</name> <operator>=</operator> <call><name>memchr</name><argument_list>( <argument><expr><name>data_p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>data_end</name> <operator>-</operator> <name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>data_p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find quality entry string in afrt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>quality_found</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>strncmp</name><argument_list>( <argument><expr><name>str_start</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>quality_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"No more space in afrt after quality entries"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>fragment_run_entry_count</name> <init>= <expr><call><name>U32_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while<condition>(<expr><name>fragment_run_entry_count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough data in afrt"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name> <operator>&gt;=</operator> <name>MAX_HDS_FRAGMENT_RUNS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Too many fragment runs, exiting"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name></expr>]</index></name><operator>.</operator><name>fragment_number_start</name> <operator>=</operator> <call><name>U32_AT</name><argument_list>(<argument><expr><name>data_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name></expr>]</index></name><operator>.</operator><name>fragment_timestamp</name> <operator>=</operator> <call><name>U64_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name></expr>]</index></name><operator>.</operator><name>fragment_duration</name> <operator>=</operator> <call><name>U32_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name></expr>]</index></name><operator>.</operator><name>discont</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name></expr>]</index></name><operator>.</operator><name>fragment_duration</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name></expr>]</index></name><operator>.</operator><name>discont</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>data_p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fragment_number_start</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fragment_timestamp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fragment_duration</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>discont</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>data_p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>chunk_t</name><modifier>*</modifier></type> <name>chunk_new</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>chunk</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chunk_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>chunk</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>chunk_free</name><parameter_list>( <parameter><decl><type><name>chunk_t</name> <modifier>*</modifier></type> <name>chunk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>chunk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_BootstrapData</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>,

<parameter><decl><type><name>hds_stream_t</name> <modifier>*</modifier></type> <name>s</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data_p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>abst_len</name> <init>= <expr><call><name>U32_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>abst_len</name> <operator>&gt;</operator> <name>data_end</name> <operator>-</operator> <name>data</name>

<operator>||</operator> <name>data_end</name> <operator>-</operator> <name>data</name> <operator>&lt;</operator> <literal type="number">29</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough bootstrap data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>abst_len</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>data_p</name></expr></argument>, <argument><expr><literal type="string">"abst"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Cant find abst in bootstrap"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>timescale</name></name> <operator>=</operator> <call><name>U32_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>live_current_time</name></name> <operator>=</operator> <call><name>U64_AT</name><argument_list>( <argument><expr><name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>live_current_time</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>movie_id</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data_p</name></expr></argument>, <argument><expr><name>data_end</name> <operator>-</operator> <name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <operator>(</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>movie_id</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough bootstrap after Movie Identifier"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>server_entry_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>server_entry_count</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <operator>*</operator><name>data_p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>server_entry_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name>server_entry_count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>server_entry_count</name></name> <operator>&lt;</operator> <name>MAX_HDS_SERVERS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>server_entries</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>server_entry_count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data_p</name></expr></argument>,

<argument><expr><name>data_end</name> <operator>-</operator> <name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>server_entries</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>server_entry_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Too many servers"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_p</name> <operator>=</operator> <call><name>memchr</name><argument_list>( <argument><expr><name>data_p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>data_end</name> <operator>-</operator> <name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>data_p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find server entry"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>data_p</name> <operator>&gt;=</operator> <name>data_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Premature end of bootstrap info while reading servers"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough bootstrap after Servers"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>quality_entry_count</name> <init>= <expr><operator>*</operator><name>data_p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>quality_entry_count</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"I don't know what to do with multiple quality levels in the bootstrap - shouldn't this be handled at the manifest level?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>quality_entry_count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data_p</name></expr></argument>, <argument><expr><name>data_end</name> <operator>-</operator> <name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name> <operator>+=</operator> <call><name>strnlen</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>data_p</name></expr></argument>, <argument><expr><name>data_end</name> <operator>-</operator> <name>data_p</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough bootstrap after quality entries"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name> <operator>=</operator> <call><name>memchr</name><argument_list>( <argument><expr><name>data_p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>data_end</name> <operator>-</operator> <name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>data_p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find DRM Data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough bootstrap after drm data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name> <operator>=</operator> <call><name>memchr</name><argument_list>( <argument><expr><name>data_p</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>data_end</name> <operator>-</operator> <name>data_p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>data_p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find metadata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>data_end</name> <operator>-</operator> <name>data_p</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Not enough bootstrap after drm data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>asrt_count</name> <init>= <expr><operator>*</operator><name>data_p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>segment_run_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name>asrt_count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>data_end</name> <operator>&gt;</operator> <name>data_p</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>data_p</name> <operator>=</operator> <call><name>parse_asrt</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>, <argument><expr><name>data_end</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>data_p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find afrt data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>afrt_count</name> <init>= <expr><operator>*</operator><name>data_p</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>data_p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fragment_run_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name>afrt_count</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>data_end</name> <operator>&gt;</operator> <name>data_p</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>data_p</name> <operator>=</operator> <call><name>parse_afrt</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>data_p</name></expr></argument>, <argument><expr><name>data_end</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>is_whitespace</name><parameter_list>( <parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator> <literal type="char">' '</literal> <operator>==</operator> <name>c</name> <operator>||</operator>

<literal type="char">'\t'</literal> <operator>==</operator> <name>c</name> <operator>||</operator>

<literal type="char">'\n'</literal> <operator>==</operator> <name>c</name> <operator>||</operator>

<literal type="char">'\v'</literal> <operator>==</operator> <name>c</name> <operator>||</operator>

<literal type="char">'\f'</literal> <operator>==</operator> <name>c</name> <operator>||</operator>

<literal type="char">'\r'</literal> <operator>==</operator> <name>c</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>whitespace_substr</name><parameter_list>( <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>start</name></decl></parameter>,

<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><call><name>is_whitespace</name><argument_list>( <argument><expr><operator>*</operator><operator>*</operator><name>start</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>*</operator><name>start</name> <operator>!=</operator> <operator>*</operator><name>end</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>start</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>start</name> <operator>==</operator> <operator>*</operator><name>end</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><call><name>is_whitespace</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><operator>*</operator><name>end</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>end</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>find_chunk_mdat</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>chunkdata</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>chunkdata_end</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>mdatptr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>boxname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>boxdata</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>boxsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>chunkdata_end</name> <operator>&lt;</operator> <name>chunkdata</name> <operator>||</operator>

<name>chunkdata_end</name> <operator>-</operator> <name>chunkdata</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find mdat in box 1!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mdatptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>boxsize</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>U32_AT</name><argument_list>( <argument><expr><name>chunkdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkdata</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>boxname</name> <operator>=</operator> <name>chunkdata</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkdata</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>boxsize</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>chunkdata_end</name> <operator>-</operator> <name>chunkdata</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>boxsize</name> <operator>=</operator> <call><name>U64_AT</name><argument_list>(<argument><expr><name>chunkdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkdata</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't find mdat in box 2!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>mdatptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>boxdata</name> <operator>=</operator> <name>chunkdata</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkdata</name> <operator>+=</operator> <operator>(</operator><name>boxsize</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>boxdata</name> <operator>=</operator> <name>chunkdata</name></expr>;</expr_stmt>

<expr_stmt><expr><name>chunkdata</name> <operator>+=</operator> <operator>(</operator><name>boxsize</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>( <expr><literal type="number">0</literal> <operator>!=</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>boxname</name></expr></argument>, <argument><expr><literal type="string">"mdat"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>mdatptr</name> <operator>=</operator> <name>boxdata</name></expr>;</expr_stmt>

<return>return <expr><name>chunkdata_end</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>boxdata</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>download_chunk</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>stream_sys_t</name><modifier>*</modifier></type> <name>sys</name></decl></parameter>,

<parameter><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter>, <parameter><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>chunk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>quality</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>server_base</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>base_url</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>stream</name><operator>-&gt;</operator><name>server_entry_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>strlen</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>server_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>server_base</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>server_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>stream</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>quality</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>movie_id</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>isFQUrl</name><argument_list>( <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>server_base</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>movie_id</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>url</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>fragment_url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fragment_url</name></expr></argument>, <argument><expr><literal type="string">"%s/%s%sSeg%u-Frag%u"</literal></expr></argument>,

<argument><expr><name>server_base</name></expr></argument>,

<argument><expr><name>movie_id</name></expr></argument>,

<argument><expr><name>quality</name></expr></argument>,

<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>seg_num</name></name></expr></argument>,

<argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name></expr></argument> )</argument_list></call></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate memory for fragment url"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Downloading fragment %s"</literal></expr></argument>, <argument><expr><name>fragment_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>download_stream</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>fragment_url</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>download_stream</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Failed to download fragment %s"</literal></expr></argument>, <argument><expr><name>fragment_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>fragment_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>fragment_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name>download_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <name>size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&gt;</operator> <name>MAX_REQUEST_SIZE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Strangely-large chunk of %"</literal><name>PRIi64</name><literal type="string">" Bytes"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>data</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Couldn't allocate chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>download_stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,

<argument><expr><name>size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>read</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>read</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>data_len</name></name> <operator>=</operator> <name>read</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>read</name> <operator>&lt;</operator> <name>size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Requested %"</literal><name>PRIi64</name><literal type="string">" bytes, "</literal>\

<literal type="string">"but only got %d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>failed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>download_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>download_thread</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name> <init>= <expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name><modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hds_streams</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>hds_stream</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>hds_streams</name><operator>.</operator><name>pp_elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>dl_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>!</operator> <name><name>sys</name><operator>-&gt;</operator><name>closed</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_downloadpos</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>chunk</name> <init>= <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>(<expr><name>chunk</name> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>chunk</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_downloadpos</name></name> <operator>=</operator> <name>chunk</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_downloadpos</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_downloadpos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>download_chunk</name><argument_list>( <argument><expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></argument>,

<argument><expr><name>sys</name></expr></argument>,

<argument><expr><name>hds_stream</name></expr></argument>,

<argument><expr><name>chunk</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>chunk</name><operator>-&gt;</operator><name>failed</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name> <operator>=</operator>

<call><name>find_chunk_mdat</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>,

<argument><expr><name>data</name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data_len</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data_len</name></name> <operator>-</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>mdat_data</name></name> <operator>-</operator> <name>data</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_downloadpos</name></name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chunk_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>dl_cond</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>dl_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>dl_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>chunk_t</name><modifier>*</modifier></type> <name>generate_new_chunk</name><parameter_list>(

<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>,

<parameter><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>last_chunk</name></decl></parameter>,

<parameter><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>hds_stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_t</name> <modifier>*</modifier></type><name>chunk</name> <init>= <expr><call><name>chunk_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>frun_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>chunk</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn't allocate new chunk!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>last_chunk</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>last_chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+</operator> <name><name>last_chunk</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>=</operator> <name><name>last_chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>sys</name><operator>-&gt;</operator><name>live</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>frun_entry</name> <operator>=</operator> <name><name>last_chunk</name><operator>-&gt;</operator><name>frun_entry</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>fragment_run_t</name><modifier>*</modifier></type> <name>first_frun</name> <init>= <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>live</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <operator>(</operator><name><name>hds_stream</name><operator>-&gt;</operator><name>live_current_time</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>hds_stream</name><operator>-&gt;</operator><name>afrt_timescale</name></name><operator>)</operator><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>hds_stream</name><operator>-&gt;</operator><name>timescale</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>first_frun</name><operator>-&gt;</operator><name>fragment_timestamp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>=</operator> <name><name>first_frun</name><operator>-&gt;</operator><name>fragment_number_start</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>frun_entry</name> <operator>&lt;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_run_count</name></name></expr>;</condition>

<incr><expr><name>frun_entry</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name></expr>]</index></name><operator>.</operator><name>fragment_duration</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>frun_entry</name> <operator>==</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_run_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Discontinuity but can't find next timestamp!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>chunk_free</name><argument_list>( <argument><expr><name>chunk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fragment_number_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fragment_duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fragment_timestamp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>frun_entry</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>frun_entry</name> <operator>==</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_run_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator> <name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&gt;=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name></expr>]</index></name><operator>.</operator><name>fragment_timestamp</name> <operator>&amp;&amp;</operator>

<name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&lt;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fragment_timestamp</name> <operator>)</operator></expr>

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>fragment_run_t</name><modifier>*</modifier></type> <name>frun</name> <init>= <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name></name> <operator>+</operator> <name>frun_entry</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>=</operator> <name><name>frun</name><operator>-&gt;</operator><name>fragment_number_start</name></name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>-</operator> <name><name>frun</name><operator>-&gt;</operator><name>fragment_timestamp</name></name><operator>)</operator> <operator>/</operator>

<name><name>frun</name><operator>-&gt;</operator><name>fragment_duration</name></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>frun</name><operator>-&gt;</operator><name>fragment_duration</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name></expr>]</index></name><operator>.</operator><name>fragment_number_start</name> <operator>&lt;=</operator>

<name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>frun_entry</name> <operator>==</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_run_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fragment_number_start</name> <operator>&gt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name></expr>]</index></name><operator>.</operator><name>fragment_duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name></expr>]</index></name><operator>.</operator><name>fragment_timestamp</name> <operator>+</operator>

<name><name>chunk</name><operator>-&gt;</operator><name>duration</name></name> <operator>*</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>-</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name>frun_entry</name></expr>]</index></name><operator>.</operator><name>fragment_number_start</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>frun_entry</name> <operator>==</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_run_count</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Couldn'd find the fragment run!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>chunk_free</name><argument_list>( <argument><expr><name>chunk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>srun_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>segment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>fragments_accum</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>srun_entry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>srun_entry</name> <operator>&lt;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>segment_run_count</name></name></expr>;</condition>

<incr><expr><name>srun_entry</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>segment</name> <operator>=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>segment_runs</name><index>[<expr><name>srun_entry</name></expr>]</index></name><operator>.</operator><name>first_segment</name> <operator>+</operator>

<operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>frag_num</name></name> <operator>-</operator> <name>fragments_accum</name> <operator>)</operator> <operator>/</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>segment_runs</name><index>[<expr><name>srun_entry</name></expr>]</index></name><operator>.</operator><name>fragments_per_segment</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>srun_entry</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>segment_run_count</name></name> <operator>||</operator>

<name><name>hds_stream</name><operator>-&gt;</operator><name>segment_runs</name><index>[<expr><name>srun_entry</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first_segment</name> <operator>&gt;</operator> <name>segment</name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fragments_accum</name> <operator>+=</operator> <operator>(</operator>

<operator>(</operator><name><name>hds_stream</name><operator>-&gt;</operator><name>segment_runs</name><index>[<expr><name>srun_entry</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first_segment</name> <operator>-</operator>

<name><name>hds_stream</name><operator>-&gt;</operator><name>segment_runs</name><index>[<expr><name>srun_entry</name></expr>]</index></name><operator>.</operator><name>first_segment</name><operator>)</operator> <operator>*</operator>

<name><name>hds_stream</name><operator>-&gt;</operator><name>segment_runs</name><index>[<expr><name>srun_entry</name></expr>]</index></name><operator>.</operator><name>fragments_per_segment</name> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>seg_num</name></name> <operator>=</operator> <name>segment</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>frun_entry</name></name> <operator>=</operator> <name>frun_entry</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>sys</name><operator>-&gt;</operator><name>live</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>duration</name></name><operator>)</operator> <operator>/</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>afrt_timescale</name></name> <operator>&gt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>duration_seconds</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>chunk</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>maintain_live_chunks</name><parameter_list>(

<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>,

<parameter><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>hds_stream</name></decl></parameter>

)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_head</name></name> <operator>=</operator> <call><name>generate_new_chunk</name><argument_list>(

<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hds_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_livereadpos</name></name> <operator>=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>chunk</name> <init>= <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dl</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>chunk</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>chunk</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>hds_stream</name><operator>-&gt;</operator><name>timescale</name></name><operator>)</operator> <operator>)</operator>

<operator>/</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>hds_stream</name><operator>-&gt;</operator><name>afrt_timescale</name></name><operator>)</operator>

<operator>&lt;=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>live_current_time</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>generate_new_chunk</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>hds_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dl</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>dl</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>dl_cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>chunk</name> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_pos</name></name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>next_chunk</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>chunk_free</name><argument_list>( <argument><expr><name>chunk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name>next_chunk</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_livereadpos</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_livereadpos</name></name> <operator>=</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>chunks_head</name></name> <operator>=</operator> <name>chunk</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>live_thread</name><parameter_list>( <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name> <init>= <expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name><modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hds_streams</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>hds_stream</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>hds_streams</name><operator>.</operator><name>pp_elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>abst_url</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>hds_stream</name><operator>-&gt;</operator><name>abst_url</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <call><name>isFQUrl</name><argument_list>( <argument><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>abst_url</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>abst_url</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>abst_url</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>server_base</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>base_url</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>&gt;</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>abst_url</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>,

<argument><expr><name>server_base</name></expr></argument>,

<argument><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>abst_url</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_dl_start_time</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator> <name><name>sys</name><operator>-&gt;</operator><name>closed</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>last_dl_start_time</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>download_stream</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>abst_url</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>download_stream</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Failed to download abst %s"</literal></expr></argument>, <argument><expr><name>abst_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name>download_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>read</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>download_stream</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,

<argument><expr><name>size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>read</name> <operator>&lt;</operator> <name>size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Requested %"</literal><name>PRIi64</name><literal type="string">" bytes, "</literal> \

<literal type="string">"but only got %d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>abst_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parse_BootstrapData</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>hds_stream</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>hds_stream</name><operator>-&gt;</operator><name>abst_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>maintain_live_chunks</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>hds_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>download_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_tick_wait</name><argument_list>( <argument><expr><name>last_dl_start_time</name> <operator>+</operator>

<call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_runs</name><index>[<expr><name><name>hds_stream</name><operator>-&gt;</operator><name>fragment_run_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>fragment_duration</name></expr></argument>,

<argument><expr><name><name>hds_stream</name><operator>-&gt;</operator><name>afrt_timescale</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>abst_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_Manifest</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>manifest_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>m</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>vlc_reader</name></name> <operator>=</operator> <call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>st</name></expr></argument>, <argument><expr><name>st</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>vlc_reader</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Failed to open source for parsing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanup_Manifest</name><parameter_list>( <parameter><decl><type><name>manifest_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_XML_DEPTH</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>element_stack</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_MEDIA_ELEMENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stream_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>media_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bootstrap_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>metadata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_BOOTSTRAP_INFO</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>bootstraps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>bootstraps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>bootstraps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>bootstraps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>profile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>m</name><operator>-&gt;</operator><name>vlc_reader</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name><name>m</name><operator>-&gt;</operator><name>vlc_reader</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_int_24</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>=</operator> <operator>(</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_int_32</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <operator>(</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF000000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>=</operator> <operator>(</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <operator>(</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">3</literal> <operator>)</operator> <operator>=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>write_flv_header_and_metadata</name><parameter_list>(

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_metadata_payload</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>metadata_payload_len</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>metadata_packet_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>metadata_payload_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_metadata_payload</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>metadata_packet_len</name> <operator>=</operator> <name>FLV_TAG_HEADER_LEN</name> <operator>+</operator> <name>metadata_payload_len</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>metadata_packet_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>data_len</name> <init>= <expr><name>FLV_FILE_HEADER_LEN</name> <operator>+</operator> <name>metadata_packet_len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <operator>*</operator><name>pp_buffer</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>*</operator><name>pp_buffer</name></expr></argument>, <argument><expr><name>flv_header_bytes</name></expr></argument>, <argument><expr><name>FLV_FILE_HEADER_LEN</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>metadata_packet_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>*</operator><name>pp_buffer</name> <operator>+</operator> <name>FLV_FILE_HEADER_LEN</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>SCRIPT_TAG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_int_24</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>metadata_payload_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>p_metadata_payload</name></expr></argument>, <argument><expr><name>metadata_payload_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>metadata_payload_len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_int_32</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>metadata_packet_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>data_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initialize_header_and_metadata</name><parameter_list>( <parameter><decl><type><name>stream_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl></parameter>, <parameter><decl><type><name>hds_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flv_header_len</name></name> <operator>=</operator>

<call><name>write_flv_header_and_metadata</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flv_header</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>,

<argument><expr><name><name>stream</name><operator>-&gt;</operator><name>metadata_len</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_Manifest</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>manifest_t</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Manifest parsing\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>duration_seconds</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bootstrap_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>media_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>current_element_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>current_element</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>attr_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>attr_value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>element_stack</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>element_stack</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bootstrap_info</name> <modifier>*</modifier></type><name>bootstraps</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>bootstraps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>media_info</name> <modifier>*</modifier></type><name>medias</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>medias</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>vlc_reader</name> <init>= <expr><name><name>m</name><operator>-&gt;</operator><name>vlc_reader</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>media_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMESCALE</name></cpp:macro> <cpp:value>10000000</cpp:value></cpp:define>

<while>while<condition>( <expr><operator>(</operator><name>type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>vlc_reader</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>node</name></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>current_element_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>element_stack</name><index>[<expr><name>current_element_idx</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>element_stack</name><index>[<expr><name>current_element_idx</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator> <name><name>element_stack</name><index>[<expr><operator>++</operator><name>current_element_idx</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>current_element</name> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>current_element</name></expr></argument>, <argument><expr><literal type="string">"bootstrapInfo"</literal></expr></argument>)</argument_list></call></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>bootstrap_idx</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>MAX_BOOTSTRAP_INFO</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"Too many bootstraps, ignoring"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bootstrap_idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>current_element</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_element</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>element_stack</name><index>[<expr><name>current_element_idx</name><operator>--</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>element_stack</name><index>[<expr><name>current_element_idx</name></expr>]</index></name></expr> )</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_element</name> <operator>=</operator> <name><name>element_stack</name><index>[<expr><name>current_element_idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>type</name> <operator>==</operator> <name>XML_READER_STARTELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>current_element</name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>media_idx</name> <operator>==</operator> <name>MAX_MEDIA_ELEMENTS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"Too many media elements, quitting"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>attr_name</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>vlc_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_value</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>, <argument><expr><literal type="string">"streamId"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>medias</name><index>[<expr><name>media_idx</name></expr>]</index></name><operator>.</operator><name>stream_id</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>attr_value</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>medias</name><index>[<expr><name>media_idx</name></expr>]</index></name><operator>.</operator><name>media_url</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>attr_value</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>, <argument><expr><literal type="string">"bootstrapInfoId"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>medias</name><index>[<expr><name>media_idx</name></expr>]</index></name><operator>.</operator><name>bootstrap_id</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>attr_value</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>, <argument><expr><literal type="string">"bitrate"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>medias</name><index>[<expr><name>media_idx</name></expr>]</index></name><operator>.</operator><name>bitrate</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>attr_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>media_idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>type</name> <operator>==</operator> <name>XML_READER_STARTELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>current_element</name></expr></argument>, <argument><expr><literal type="string">"bootstrapInfo"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><operator>(</operator> <name>attr_name</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>vlc_reader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>attr_value</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>, <argument><expr><literal type="string">"url"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>bootstraps</name><index>[<expr><name>bootstrap_idx</name></expr>]</index></name><operator>.</operator><name>url</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>attr_value</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>bootstraps</name><index>[<expr><name>bootstrap_idx</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>attr_value</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>attr_name</name></expr></argument>, <argument><expr><literal type="string">"profile"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>bootstraps</name><index>[<expr><name>bootstrap_idx</name></expr>]</index></name><operator>.</operator><name>profile</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>attr_value</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>type</name> <operator>==</operator> <name>XML_READER_TEXT</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>current_element</name></expr></argument>, <argument><expr><literal type="string">"bootstrapInfo"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>whitespace_substr</name><argument_list>( <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bootstraps</name><index>[<expr><name>bootstrap_idx</name></expr>]</index></name><operator>.</operator><name>data_len</name> <operator>=</operator>

<call><name>vlc_b64_decode_binary</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>bootstraps</name><index>[<expr><name>bootstrap_idx</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>, <argument><expr><name>start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>bootstraps</name><index>[<expr><name>bootstrap_idx</name></expr>]</index></name><operator>.</operator><name>data</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><literal type="string">"Couldn't decode bootstrap info"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>current_element</name></expr></argument>, <argument><expr><literal type="string">"duration"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>shutup_gcc</name> <init>= <expr><call><name>atof</name><argument_list>( <argument><expr><name>node</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>duration_seconds</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>shutup_gcc</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>current_element</name></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>element_stack</name><index>[<expr><name>current_element_idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"manifest"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>media_id</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>node</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name>current_element</name></expr></argument>, <argument><expr><literal type="string">"metadata"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>element_stack</name><index>[<expr><name>current_element_idx</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"media"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>media_idx</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mi</name> <init>= <expr><name>media_idx</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>medias</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>metadata</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>start</name> <init>= <expr><name>node</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>end</name> <init>= <expr><name>start</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>whitespace_substr</name><argument_list>( <argument><expr><operator>&amp;</operator><name>start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>medias</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>metadata_len</name> <operator>=</operator>

<call><name>vlc_b64_decode_binary</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>medias</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>metadata</name></expr></argument>, <argument><expr><name>start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>medias</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>metadata</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end_marker</name> <init>=

<expr><name><name>medias</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>metadata</name> <operator>+</operator> <name><name>medias</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>metadata_len</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>amf_object_end</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>end_marker</name> <operator>&lt;</operator> <name><name>medias</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>metadata</name> <operator>)</operator> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>end_marker</name></expr></argument>, <argument><expr><name>amf_object_end</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>amf_object_end</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"Ignoring invalid metadata packet on stream %d"</literal></expr></argument>, <argument><expr><name>mi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>medias</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>metadata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>medias</name><index>[<expr><name>mi</name></expr>]</index></name><operator>.</operator><name>metadata_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>media_idx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bootstrap_idx</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator> <name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bootstrap_id</name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>bootstraps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bootstrap_id</name> <operator>&amp;&amp;</operator> <name><name>bootstraps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>&amp;&amp;</operator>

<operator>!</operator> <call><name>strcmp</name><argument_list>( <argument><expr><name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bootstrap_id</name></expr></argument>, <argument><expr><name><name>bootstraps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>new_stream</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hds_stream_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>new_stream</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>media_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>new_stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hds_stream_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>new_stream</name><operator>-&gt;</operator><name>abst_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>new_stream</name><operator>-&gt;</operator><name>dl_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>new_stream</name><operator>-&gt;</operator><name>dl_cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>duration_seconds</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>live</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>live</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>media_url</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>new_stream</name><operator>-&gt;</operator><name>url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>media_url</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>media_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>new_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>metadata</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>new_stream</name><operator>-&gt;</operator><name>metadata</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>metadata_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>new_stream</name><operator>-&gt;</operator><name>metadata</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>new_stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>media_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>new_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>new_stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument>, <argument><expr><name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>metadata</name></expr></argument>, <argument><expr><name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>metadata_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_stream</name><operator>-&gt;</operator><name>metadata_len</name></name> <operator>=</operator> <name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>metadata_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>sys</name><operator>-&gt;</operator><name>live</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>parse_BootstrapData</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>,

<argument><expr><name>new_stream</name></expr></argument>,

<argument><expr><name><name>bootstraps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>,

<argument><expr><name><name>bootstraps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name><name>bootstraps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>data_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_stream</name><operator>-&gt;</operator><name>download_leadtime</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_stream</name><operator>-&gt;</operator><name>chunks_head</name></name> <operator>=</operator> <call><name>generate_new_chunk</name><argument_list>(

<argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>new_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>chunk</name> <init>= <expr><name><name>new_stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_duration</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>duration</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>chunk</name> <operator>&amp;&amp;</operator> <name>total_duration</name><operator>/</operator><name><name>new_stream</name><operator>-&gt;</operator><name>afrt_timescale</name></name> <operator>&lt;</operator> <name><name>new_stream</name><operator>-&gt;</operator><name>download_leadtime</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>generate_new_chunk</name><argument_list>(

<argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator> <name>s</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>new_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>chunk</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>total_duration</name> <operator>+=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>new_stream</name><operator>-&gt;</operator><name>abst_url</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>bootstraps</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>url</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>new_stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>new_stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>media_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>new_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>new_stream</name><operator>-&gt;</operator><name>bitrate</name></name> <operator>=</operator> <name><name>medias</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bitrate</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_append_or_abort</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>hds_streams</name></name></expr></argument>, <argument><expr><name>new_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"New track with quality_segment(%s), bitrate(%u), timescale(%u), movie_id(%s), segment_run_count(%d), fragment_run_count(%u)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>new_stream</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr>?</condition><then><expr><name><name>new_stream</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>new_stream</name><operator>-&gt;</operator><name>bitrate</name></name></expr></argument>, <argument><expr><name><name>new_stream</name><operator>-&gt;</operator><name>timescale</name></name></expr></argument>,

<argument><expr><name><name>new_stream</name><operator>-&gt;</operator><name>movie_id</name></name></expr></argument>, <argument><expr><name><name>new_stream</name><operator>-&gt;</operator><name>segment_run_count</name></name></expr></argument>, <argument><expr><name><name>new_stream</name><operator>-&gt;</operator><name>fragment_run_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>media_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cleanup_Manifest</name><argument_list>( <argument><expr><name>m</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hds_free</name><parameter_list>( <parameter><decl><type><name>hds_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>quality_segment_modifier</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>abst_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>metadata</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>movie_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>server_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>server_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>chunk</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>chunk</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>chunk_free</name><argument_list>( <argument><expr><name>chunk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SysCleanup</name><parameter_list>( <parameter><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name><operator>.</operator><name>i_count</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hds_free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name><operator>.</operator><name>pp_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_array_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>base_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>isHDS</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"HTTP Dynamic Streaming (%s)"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri_without_query</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>,

<argument><expr><call><name>strcspn</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>uri_without_query</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><call><name>strrchr</name><argument_list>( <argument><expr><name>uri_without_query</name></expr></argument>, <argument><expr><literal type="char">'/'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>pos</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>uri_without_query</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pos</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>base_url</name></name> <operator>=</operator> <name>uri_without_query</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flv_header_bytes_sent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_array_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>manifest_t</name></type> <name>m</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>init_Manifest</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>parse_Manifest</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cleanup_Manifest</name><argument_list>( <argument><expr><operator>&amp;</operator><name>m</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_read</name></name> <operator>=</operator> <name>Read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_seek</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dl_thread</name></name></expr></argument>, <argument><expr><name>download_thread</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>live</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Live stream detected"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>live_thread</name></name></expr></argument>, <argument><expr><name>live_thread</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_INPUT</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>SysCleanup</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hds_stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><ternary><condition><expr><call><name>vlc_array_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name><operator>.</operator><name>pp_elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>closed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>stream</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>dl_cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>dl_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>live</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>live_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SysCleanup</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>send_flv_header</name><parameter_list>( <parameter><decl><type><name>hds_stream_t</name> <modifier>*</modifier></type><name>stream</name></decl></parameter>, <parameter><decl><type><name>stream_sys_t</name><modifier>*</modifier></type> <name>p_sys</name></decl></parameter>,

<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_read</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>flv_header</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>initialize_header_and_metadata</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>to_be_read</name> <init>= <expr><name>i_read</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>header_remaining</name> <init>=

<expr><name><name>p_sys</name><operator>-&gt;</operator><name>flv_header_len</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>flv_header_bytes_sent</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>to_be_read</name> <operator>&gt;</operator> <name>header_remaining</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>to_be_read</name> <operator>=</operator> <name>header_remaining</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flv_header</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>flv_header_bytes_sent</name></name></expr></argument>, <argument><expr><name>to_be_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>flv_header_bytes_sent</name></name> <operator>+=</operator> <name>to_be_read</name></expr>;</expr_stmt>

<return>return <expr><name>to_be_read</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>read_chunk_data</name><parameter_list>(

<parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>read_len</name></decl></parameter>,

<parameter><decl><type><name>hds_stream_t</name><modifier>*</modifier></type> <name>stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><operator>(</operator><name>stream_t</name><operator>*</operator><operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_sys_t</name><modifier>*</modifier></type> <name>sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>chunk</name> <init>= <expr><name><name>stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buffer_start</name> <init>= <expr><name>buffer</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>dl</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>chunk</name> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_pos</name></name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name>chunk</name> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>read_len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_pos</name></name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>chunk_t</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>chunk</name><operator>-&gt;</operator><name>mdat_pos</name></name> <operator>&lt;</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>cp_len</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name> <operator>-</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>cp_len</name> <operator>&gt;</operator> <name>read_len</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cp_len</name> <operator>=</operator> <name>read_len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>mdat_data</name></name> <operator>+</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_pos</name></name></expr></argument>,

<argument><expr><name>cp_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>read_len</name> <operator>-=</operator> <name>cp_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>cp_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>mdat_pos</name></name> <operator>+=</operator> <name>cp_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>sys</name><operator>-&gt;</operator><name>live</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>mdat_pos</name></name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name> <operator>||</operator> <name><name>chunk</name><operator>-&gt;</operator><name>failed</name></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>chunk</name><operator>-&gt;</operator><name>eof</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>generate_new_chunk</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dl</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>chunk</name><operator>-&gt;</operator><name>eof</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>chunk_free</name><argument_list>( <argument><expr><name>chunk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>chunks_head</name></name> <operator>=</operator> <name>chunk</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>live</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>chunk</name><operator>-&gt;</operator><name>mdat_pos</name></name> <operator>&gt;=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>mdat_len</name></name> <operator>||</operator> <name><name>chunk</name><operator>-&gt;</operator><name>failed</name></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>live</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>stream</name><operator>-&gt;</operator><name>chunks_livereadpos</name></name> <operator>=</operator> <name>chunk</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>sys</name><operator>-&gt;</operator><name>live</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>stream</name><operator>-&gt;</operator><name>chunks_head</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>chunk</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>total_duration</name> <init>= <expr><name><name>chunk</name><operator>-&gt;</operator><name>duration</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>chunk</name> <operator>&amp;&amp;</operator> <name>total_duration</name><operator>/</operator><name><name>stream</name><operator>-&gt;</operator><name>afrt_timescale</name></name> <operator>&lt;</operator> <name><name>stream</name><operator>-&gt;</operator><name>download_leadtime</name></name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>chunk</name><operator>-&gt;</operator><name>eof</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name> <operator>&amp;&amp;</operator> <operator>!</operator> <name><name>chunk</name><operator>-&gt;</operator><name>eof</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>chunk</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>generate_new_chunk</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>chunk</name></expr></argument>, <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dl</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>chunk</name><operator>-&gt;</operator><name>eof</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>chunk</name> <operator>=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>chunk</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>total_duration</name> <operator>+=</operator> <name><name>chunk</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>dl</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>( <argument><expr><operator>&amp;</operator> <name><name>stream</name><operator>-&gt;</operator><name>dl_cond</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>buffer</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>buffer_start</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>header_unfinished</name><parameter_list>( <parameter><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>flv_header_bytes_sent</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>flv_header_len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ssize_t</name></type> <name>Read</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_read</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_array_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_read</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>hds_stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hds_streams</name><operator>.</operator><name>pp_elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>header_unfinished</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>send_flv_header</name><argument_list>( <argument><expr><name>stream</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>read_chunk_data</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>, <argument><expr><name>stream</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>STREAM_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_CAN_FASTSEEK</name></expr>:</case>

<case>case <expr><name>STREAM_CAN_PAUSE</name></expr>:</case> 

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(

<argument><expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"network-caching"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>STREAM_GET_SIZE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>uint64_t</name> <operator>*</operator></expr></argument>)</argument_list></call><operator>)</operator> <operator>=</operator> <call><name>get_stream_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
