<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_splitter\wall.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_video_splitter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROW_MAX</name></cpp:macro> <cpp:value>(15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COL_MAX</name></cpp:macro> <cpp:value>(15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLS_TEXT</name></cpp:macro> <cpp:value>N_("Number of columns")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of horizontal windows in " "which to split the video.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWS_TEXT</name></cpp:macro> <cpp:value>N_("Number of rows")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROWS_LONGTEXT</name></cpp:macro> <cpp:value>N_("Number of vertical windows in " "which to split the video.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_TEXT</name></cpp:macro> <cpp:value>N_("Active windows")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACTIVE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Comma-separated list of active windows, " "defaults to all")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"wall-"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Wall video filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Image wall"</literal> )</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video splitter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_SPLITTER</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"cols"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument>COLS_TEXT</argument>, <argument>COLS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">1</literal></argument>, <argument>COL_MAX</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"rows"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument>ROWS_TEXT</argument>, <argument>ROWS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">1</literal></argument>, <argument>ROW_MAX</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"active"</literal></argument>, <argument>NULL</argument>, <argument>ACTIVE_TEXT</argument>, <argument>ACTIVE_LONGTEXT</argument>,

<argument>true</argument> )</argument_list></macro>

<macro><name>add_obsolete_string</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"element-aspect"</literal></argument> )</argument_list></macro> 

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"wall"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"cols"</literal></expr>, <expr><literal type="string">"rows"</literal></expr>, <expr><literal type="string">"active"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_active</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_top</name></decl>;</decl_stmt>

}</block></struct></type> <name>wall_output_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_col</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wall_output_t</name></type> <name><name>pp_output</name><index>[<expr><name>COL_MAX</name></expr>]</index><index>[<expr><name>ROW_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>video_splitter_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Filter</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pp_dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>vout_window_mouse_event_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name> <init>= <expr><operator>(</operator><name>video_splitter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_splitter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma</name> <init>=

<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_chroma</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,

<argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"cols"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>COL_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"rows"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ROW_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><literal type="string">"opening a %i x %i wall"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_state</name> <init>= <expr><call><name>var_CreateGetNonEmptyString</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"active"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>pb_active</name><index>[<expr><name>COL_MAX</name><operator>*</operator><name>ROW_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>COL_MAX</name><operator>*</operator><name>ROW_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pb_active</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>psz_state</name> <operator>==</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name> <init>= <expr><name>psz_state</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>psz_tmp</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_tmp</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_next</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psz_next</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_index</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>psz_tmp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_index</name> <operator>&lt;</operator> <name>COL_MAX</name><operator>*</operator><name>ROW_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pb_active</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <name>psz_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_state</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_active</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_height</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>-</operator> <name>i_top</name><operator>)</operator>

<operator>/</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name> <operator>-</operator> <name>y</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>wall_output_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_output</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_width</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>-</operator> <name>i_left</name><operator>)</operator>

<operator>/</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>-</operator> <name>x</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name> <operator>=</operator> <name><name>pb_active</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_output</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name>i_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name>i_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_left</name></name> <operator>=</operator> <name>i_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_top</name></name> <operator>=</operator> <name>i_top</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><literal type="string">"window %dx%d at %d:%d size %dx%d"</literal></expr></argument>, 

<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>i_left</name></expr></argument>, <argument><expr><name>i_top</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_active</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_left</name> <operator>+=</operator> <name>i_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_top</name> <operator>+=</operator> <name>i_height</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_active</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><literal type="string">"No active video output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name> <operator>=</operator> <name>i_active</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>i_output</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_output</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>wall_output_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_output</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_output</name></name> <operator>=</operator> <name>i_output</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_splitter_output_t</name> <modifier>*</modifier></type><name>p_cfg</name> <init>= <expr><operator>&amp;</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name><index>[<expr><name><name>p_output</name><operator>-&gt;</operator><name>i_output</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator>

<name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator>

<name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_splitter</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>psz_module</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>pf_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>mouse</name></name> <operator>=</operator> <name>Mouse</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name> <init>= <expr><operator>(</operator><name>video_splitter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_splitter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_output</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Filter</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>pp_dst</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_splitter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>video_splitter_NewPicture</name><argument_list>( <argument><expr><name>p_splitter</name></expr></argument>, <argument><expr><name>pp_dst</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>wall_output_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_output</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>pp_dst</name><index>[<expr><name><name>p_output</name><operator>-&gt;</operator><name>i_output</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>p_src</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tmp</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p0</name> <init>= <expr><operator>&amp;</operator><name><name>tmp</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>tmp</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_y</name> <init>= <expr><name><name>p_output</name><operator>-&gt;</operator><name>i_top</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>/</operator> <name><name>p0</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_x</name> <init>= <expr><name><name>p_output</name><operator>-&gt;</operator><name>i_left</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>/</operator> <name><name>p0</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+=</operator> <name>i_y</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <operator>(</operator> <name>i_x</name> <operator>-</operator> <operator>(</operator><name>i_x</name> <operator>%</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>video_splitter_t</name> <modifier>*</modifier></type><name>p_splitter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>,

<parameter><decl><type><name>vout_window_mouse_event_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>ev</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>video_splitter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_splitter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_row</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_col</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>wall_output_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_output</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_output</name><operator>-&gt;</operator><name>b_active</name></name> <operator>&amp;&amp;</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_output</name></name> <operator>==</operator> <name>i_index</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>x</name></name> <operator>+=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>y</name></name> <operator>+=</operator> <name><name>p_output</name><operator>-&gt;</operator><name>i_top</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

</unit>
