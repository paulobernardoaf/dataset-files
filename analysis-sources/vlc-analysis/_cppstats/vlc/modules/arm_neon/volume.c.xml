<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\arm_neon\volume.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout_volume.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Probe</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_AUDIO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_AUDIO_MISC</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"ARM NEON audio volume"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"audio volume"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>Probe</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AmplifyFloat</name><parameter_list>(<parameter><decl><type><name>audio_volume_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>float</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Probe</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>audio_volume_t</name> <modifier>*</modifier></type><name>volume</name> <init>= <expr><operator>(</operator><name>audio_volume_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_CPU_ARM_NEON</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>volume</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>VLC_CODEC_FL32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>volume</name><operator>-&gt;</operator><name>amplify</name></name> <operator>=</operator> <name>AmplifyFloat</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>amplify_float_arm_neon</name><argument_list>(<argument><expr><name>float</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>float</name> <operator>*</operator></expr></argument>, <argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>float</name></expr></argument>)</argument_list> <name>asm</name><argument_list>(<argument><expr><literal type="string">"amplify_float_arm_neon"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AmplifyFloat</name><parameter_list>(<parameter><decl><type><name>audio_volume_t</name> <modifier>*</modifier></type><name>volume</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>amp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>amp</name> <operator>==</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>buf</name> <operator>&amp;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>*=</operator> <name>amp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>length</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>length</name> <operator>&amp;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>length</name> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*=</operator> <name>amp</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>amplify_float_arm_neon</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>amp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>volume</name></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
