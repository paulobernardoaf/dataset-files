<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\logger\journal.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;systemd/sd-journal.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>priorities</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>VLC_MSG_INFO</name></expr>]</index> <operator>=</operator> <name>LOG_INFO</name></expr>,

<expr><index>[<expr><name>VLC_MSG_ERR</name></expr>]</index> <operator>=</operator> <name>LOG_ERR</name></expr>,

<expr><index>[<expr><name>VLC_MSG_WARN</name></expr>]</index> <operator>=</operator> <name>LOG_WARNING</name></expr>,

<expr><index>[<expr><name>VLC_MSG_DBG</name></expr>]</index> <operator>=</operator> <name>LOG_DEBUG</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>default_msg</name><index>[]</index></name> <init>= <expr><literal type="string">"message lost"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msg</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>default_msg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sd_journal_send</name><argument_list>(<argument><expr><literal type="string">"MESSAGE=%s"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>,

<argument><expr><literal type="string">"PRIORITY=%d"</literal></expr></argument>, <argument><expr><name><name>priorities</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="string">"CODE_FILE=%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>meta</name><operator>-&gt;</operator><name>file</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>meta</name><operator>-&gt;</operator><name>file</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"CODE_LINE=%u"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>line</name></name></expr></argument>,

<argument><expr><literal type="string">"CODE_FUNC=%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>meta</name><operator>-&gt;</operator><name>func</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>meta</name><operator>-&gt;</operator><name>func</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><literal type="string">"VLC_TID=%lu"</literal></expr></argument> , <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>tid</name></name></expr></argument>,

<argument><expr><literal type="string">"VLC_OBJECT_ID=%"</literal><name>PRIxPTR</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>i_object_id</name></name></expr></argument>,

<argument><expr><literal type="string">"VLC_OBJECT_TYPE=%s"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_object_type</name></name></expr></argument>,

<argument><expr><literal type="string">"VLC_MODULE=%s"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument>,

<argument><expr><literal type="string">"VLC_HEADER=%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>meta</name><operator>-&gt;</operator><name>psz_header</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>meta</name><operator>-&gt;</operator><name>psz_header</name></name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name> <operator>!=</operator> <name>default_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>opaque</name></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>ops</name> <init>= <expr><block>{ <expr><name>Log</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type><name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>sysp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"syslog"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>sysp</name></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>ops</name></expr>;</return>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Journal"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"SystemD journal logger"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"logger"</literal></argument>, <argument><literal type="number">30</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"journal"</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

</unit>
