<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\logger\syslog.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;syslog.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>priorities</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>VLC_MSG_INFO</name></expr>]</index> <operator>=</operator> <name>LOG_INFO</name></expr>,

<expr><index>[<expr><name>VLC_MSG_ERR</name></expr>]</index> <operator>=</operator> <name>LOG_ERR</name></expr>,

<expr><index>[<expr><name>VLC_MSG_WARN</name></expr>]</index> <operator>=</operator> <name>LOG_WARNING</name></expr>,

<expr><index>[<expr><name>VLC_MSG_DBG</name></expr>]</index> <operator>=</operator> <name>LOG_DEBUG</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Log</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>default_msg</name><index>[]</index></name> <init>= <expr><literal type="string">"message lost"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>priority</name> <init>= <expr><name><name>priorities</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>str</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>default_msg</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>meta</name><operator>-&gt;</operator><name>psz_header</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>priority</name></expr></argument>, <argument><expr><literal type="string">"[%s] %s: %s"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_header</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument>,

<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>syslog</name><argument_list>(<argument><expr><name>priority</name></expr></argument>, <argument><expr><literal type="string">"%s: %s"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>!=</operator> <name>default_msg</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>opaque</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_SYSLOG_FACILITY</name></cpp:macro> <cpp:value>DEF("user", LOG_USER), DEF("daemon", LOG_DAEMON), DEF("local0", LOG_LOCAL0), DEF("local1", LOG_LOCAL1), DEF("local2", LOG_LOCAL2), DEF("local3", LOG_LOCAL3), DEF("local4", LOG_LOCAL4), DEF("local5", LOG_LOCAL5), DEF("local6", LOG_LOCAL6), DEF("local7", LOG_LOCAL7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>fac_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>DEFINE_SYSLOG_FACILITY</name></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEF</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>b</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>fac_ids</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>DEFINE_SYSLOG_FACILITY</name></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEF</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>DEFINE_SYSLOG_FACILITY</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>var_InheritFacility</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>varname</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>varname</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>str</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>LOG_USER</name></expr>;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>fac_ids</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof <argument_list>(<argument><expr><name><name>fac_ids</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>fac_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>fac_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"unknown syslog facility \"%s\""</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LOG_USER</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>default_ident</name><index>[]</index></name> <init>= <expr><name>PACKAGE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ident</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>closelog</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ident</name> <operator>!=</operator> <name>default_ident</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ident</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>ops</name> <init>= <expr><block>{ <expr><name>Log</name></expr>, <expr><name>Close</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type><name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>sysp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"syslog"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ident</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"syslog-ident"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ident</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ident</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>default_ident</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>sysp</name> <operator>=</operator> <name>ident</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>facility</name> <init>= <expr><call><name>var_InheritFacility</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"syslog-facility"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>openlog</name><argument_list>(<argument><expr><name>ident</name></expr></argument>, <argument><expr><name>LOG_PID</name> <operator>|</operator> <name>LOG_NDELAY</name></expr></argument>, <argument><expr><name>facility</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><call><name>LOG_MASK</name><argument_list>(<argument><expr><name>LOG_ERR</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LOG_MASK</name><argument_list>(<argument><expr><name>LOG_WARNING</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>LOG_MASK</name><argument_list>(<argument><expr><name>LOG_INFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"syslog-debug"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mask</name> <operator>|=</operator> <call><name>LOG_MASK</name><argument_list>(<argument><expr><name>LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>setlogmask</name><argument_list>(<argument><expr><name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name>ops</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSLOG_TEXT</name></cpp:macro> <cpp:value>N_("System log (syslog)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSLOG_LONGTEXT</name></cpp:macro> <cpp:value>N_("Emit log messages through the POSIX system log.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSLOG_DEBUG_TEXT</name></cpp:macro> <cpp:value>N_("Debug messages")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSLOG_DEBUG_LONGTEXT</name></cpp:macro> <cpp:value>N_("Include debug messages in system log.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSLOG_IDENT_TEXT</name></cpp:macro> <cpp:value>N_("Identity")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSLOG_IDENT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Process identity in system log.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSLOG_FACILITY_TEXT</name></cpp:macro> <cpp:value>N_("Facility")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SYSLOG_FACILITY_LONGTEXT</name></cpp:macro> <cpp:value>N_("System logging facility.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_( <literal type="string">"syslog"</literal> )</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"System logger (syslog)"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"logger"</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"syslog"</literal></argument>, <argument>false</argument>, <argument>SYSLOG_TEXT</argument>, <argument>SYSLOG_LONGTEXT</argument>,

<argument>false</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"syslog-debug"</literal></argument>, <argument>false</argument>, <argument>SYSLOG_DEBUG_TEXT</argument>, <argument>SYSLOG_DEBUG_LONGTEXT</argument>,

<argument>false</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"syslog-ident"</literal></argument>, <argument>default_ident</argument>, <argument>SYSLOG_IDENT_TEXT</argument>,

<argument>SYSLOG_IDENT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"syslog-facility"</literal></argument>, <argument>fac_names[<literal type="number">0</literal>]</argument>, <argument>SYSLOG_FACILITY_TEXT</argument>,

<argument>SYSLOG_FACILITY_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>fac_names</argument>, <argument>fac_names</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

</unit>
