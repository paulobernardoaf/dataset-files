<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\logger\file.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>msg_type</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">" error"</literal></expr>, <expr><literal type="string">" warning"</literal></expr>, <expr><literal type="string">" debug"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>footer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>verbosity</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_logger_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_FILENAME</name></cpp:macro> <cpp:value>"vlc-log.txt"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_HEADER</name></cpp:macro> <cpp:value>"\xEF\xBB\xBF" "-- logger module started --\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_FOOTER</name></cpp:macro> <cpp:value>"-- logger module stopped --\n"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LogText</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_logger_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&lt;</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flockfile</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s%s: "</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument>, <argument><expr><name><name>msg_type</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>putc_unlocked</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>funlockfile</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_logger_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>footer</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>text_ops</name> <init>=

<expr><block>{

<expr><name>LogText</name></expr>,

<expr><name>Close</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTML_FILENAME</name></cpp:macro> <cpp:value>"vlc-log.html"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTML_HEADER</name></cpp:macro> <cpp:value>"&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n" " \"http://www.w3.org/TR/html4/strict.dtd\"&gt;\n" "&lt;html&gt;\n" " &lt;head&gt;\n" " &lt;title&gt;vlc log&lt;/title&gt;\n" " &lt;meta http-equiv=\"Content-Type\"" " content=\"text/html; charset=UTF-8\"&gt;\n" " &lt;/head&gt;\n" " &lt;body style=\"background-color: #000000; color: #aaaaaa;\"&gt;\n" " &lt;pre&gt;\n" " &lt;strong&gt;-- logger module started --&lt;/strong&gt;\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HTML_FOOTER</name></cpp:macro> <cpp:value>" &lt;strong&gt;-- logger module stopped --&lt;/strong&gt;\n" " &lt;/pre&gt;\n" " &lt;/body&gt;\n" "&lt;/html&gt;\n"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>LogHtml</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>meta</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xffffff</literal></expr>, <expr><literal type="number">0xff6666</literal></expr>, <expr><literal type="number">0xffff66</literal></expr>, <expr><literal type="number">0xaaaaaa</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_logger_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&lt;</operator> <name>type</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flockfile</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><literal type="string">"%s%s: &lt;span style=\"color: #%06x\"&gt;"</literal></expr></argument>,

<argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument>, <argument><expr><name><name>msg_type</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><literal type="string">"&lt;/span&gt;\n"</literal></expr></argument>, <argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>funlockfile</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>html_ops</name> <init>=

<expr><block>{

<expr><name>LogHtml</name></expr>,

<expr><name>Close</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type><name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>sysp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>var_InheritBool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"file-logging"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>verbosity</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"log-verbose"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>verbosity</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"verbose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>verbosity</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>verbosity</name> <operator>+=</operator> <name>VLC_MSG_ERR</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_logger_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name> <init>= <expr><name>TEXT_FILENAME</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><name>TEXT_HEADER</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name> <modifier>*</modifier></type><name>ops</name> <init>= <expr><operator>&amp;</operator><name>text_ops</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>footer</name></name> <operator>=</operator> <name>TEXT_FOOTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>=</operator> <name>verbosity</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>mode</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"logmode"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"html"</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>HTML_FILENAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <name>HTML_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ops</name> <operator>=</operator> <operator>&amp;</operator><name>html_ops</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>footer</name></name> <operator>=</operator> <name>HTML_FOOTER</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="string">"text"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"invalid log mode \"%s\""</literal></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"logfile"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>home</name> <init>= <expr><call><name>config_GetUserDir</name><argument_list>(<argument><expr><name>VLC_HOME_DIR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>home</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/Library/Logs/%s"</literal></expr></argument>, <argument><expr><name>home</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>home</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>filename</name> <operator>=</operator> <name>path</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"opening logfile `%s'"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <call><name>vlc_fopen</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"at"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><literal type="string">"error opening log file `%s': %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>_IOLBF</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>sysp</name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>ops</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>mode_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"text"</literal></expr>, <expr><literal type="string">"html"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>mode_list_text</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Text"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"HTML"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>verbosity_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><name>VLC_MSG_INFO</name></expr>,

<expr><name>VLC_MSG_ERR</name></expr>,

<expr><name>VLC_MSG_WARN</name></expr>,

<expr><name>VLC_MSG_DBG</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>verbosity_text</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Default"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Info"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Warning"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Debug"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LOG_TEXT</name></cpp:macro> <cpp:value>N_("Log to file")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LOG_LONGTEXT</name></cpp:macro> <cpp:value>N_("Log all VLC messages to a text file.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGFILE_NAME_TEXT</name></cpp:macro> <cpp:value>N_("Log filename")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGFILE_NAME_LONGTEXT</name></cpp:macro> <cpp:value>N_("Specify the log filename.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGMODE_TEXT</name></cpp:macro> <cpp:value>N_("Log format")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGMODE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Specify the logging format.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGVERBOSE_TEXT</name></cpp:macro> <cpp:value>N_("Verbosity")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOGVERBOSE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Select the logging verbosity or " "default to use the same verbosity given by --verbose.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Logger"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"File logger"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_ADVANCED</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_ADVANCED_MISC</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"logger"</literal></argument>, <argument><literal type="number">15</literal></argument>)</argument_list></macro>

<macro><name>set_callback</name><argument_list>(<argument>Open</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"file-logging"</literal></argument>, <argument>false</argument>, <argument>FILE_LOG_TEXT</argument>, <argument>FILE_LOG_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_savefile</name><argument_list>(<argument><literal type="string">"logfile"</literal></argument>, <argument>NULL</argument>, <argument>LOGFILE_NAME_TEXT</argument>, <argument>LOGFILE_NAME_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"logmode"</literal></argument>, <argument><literal type="string">"text"</literal></argument>, <argument>LOGMODE_TEXT</argument>, <argument>LOGMODE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_string_list</name><argument_list>(<argument>mode_list</argument>, <argument>mode_list_text</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"log-verbose"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>LOGVERBOSE_TEXT</argument>, <argument>LOGVERBOSE_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>(<argument>verbosity_values</argument>, <argument>verbosity_text</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
