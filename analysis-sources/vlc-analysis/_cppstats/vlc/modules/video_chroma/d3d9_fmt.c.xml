<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_chroma\d3d9_fmt.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_renderer_discoverer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc/libvlc_media_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initguid.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"d3d9_fmt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D3D9_PICCONTEXT_FROM_PICCTX</name><parameter_list>(<parameter><type><name>pic_ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_of((pic_ctx), struct d3d9_pic_context, s)</cpp:value></cpp:define>

<function><type><name>picture_sys_d3d9_t</name> <modifier>*</modifier></type><name>ActiveD3D9PictureSys</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d9_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>D3D9_PICCONTEXT_FROM_PICCTX</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name></name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_output_cleanup_cb</name></type> <name>cleanupDeviceCb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device_t</name></type> <name>dec_device</name></decl>;</decl_stmt>

}</block></struct></type> <name>d3d9_decoder_device</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillPresentationParameters</name><parameter_list>(<parameter><decl><type><name>D3DPRESENT_PARAMETERS</name> <modifier>*</modifier></type><name>d3dpp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><name>d3dpp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>D3DPRESENT_PARAMETERS</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>Flags</name></name> <operator>=</operator> <name>D3DPRESENTFLAG_VIDEO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>Windowed</name></name> <operator>=</operator> <name>TRUE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>MultiSampleType</name></name> <operator>=</operator> <name>D3DMULTISAMPLE_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>PresentationInterval</name></name> <operator>=</operator> <name>D3DPRESENT_INTERVAL_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>EnableAutoDepthStencil</name></name> <operator>=</operator> <name>FALSE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>hDeviceWindow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>SwapEffect</name></name> <operator>=</operator> <name>D3DSWAPEFFECT_COPY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>BackBufferCount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>BackBufferWidth</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CXVIRTUALSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>d3dpp</name><operator>-&gt;</operator><name>BackBufferHeight</name></name> <operator>=</operator> <call><name>GetSystemMetrics</name><argument_list>(<argument><expr><name>SM_CYVIRTUALSCREEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>D3D9_ResetDevice</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>dec_dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>D3DPRESENT_PARAMETERS</name></type> <name>d3dpp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FillPresentationParameters</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d3dpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec_dev</name><operator>-&gt;</operator><name>hd3d</name><operator>.</operator><name>use_ex</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9Ex_ResetEx</name><argument_list>(<argument><expr><name><name>dec_dev</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>devex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3dpp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDevice9_Reset</name><argument_list>(<argument><expr><name><name>dec_dev</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d3dpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"IDirect3DDevice9_Reset failed! (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>D3D9_Destroy</name><parameter_list>(<parameter><decl><type><name>d3d9_handle_t</name> <modifier>*</modifier></type><name>hd3d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IDirect3D9_Release</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>D3D9_Create</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>d3d9_handle_t</name> <modifier>*</modifier></type><name>hd3d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name> <operator>=</operator> <call><name>LoadLibrary</name><argument_list>(<argument><expr><call><name>TEXT</name><argument_list>(<argument><expr><literal type="string">"D3D9.DLL"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"cannot load d3d9.dll, aborting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>IDirect3D9</name> <modifier>*</modifier></type>(<name>WINAPI</name> <modifier>*</modifier><name>OurDirect3DCreate9</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>SDKVersion</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>OurDirect3DCreate9</name> <operator>=</operator>

<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name></expr></argument>, <argument><expr><literal type="string">"Direct3DCreate9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>OurDirect3DCreate9</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Cannot locate reference to Direct3DCreate9 ABI in DLL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<function_decl><type><name>HRESULT</name></type> (<name>WINAPI</name> <modifier>*</modifier><name>OurDirect3DCreate9Ex</name>)<parameter_list>(<parameter><decl><type><name>UINT</name></type> <name>SDKVersion</name></decl></parameter>, <parameter><decl><type><name>IDirect3D9Ex</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppD3D</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>OurDirect3DCreate9Ex</name> <operator>=</operator>

<operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name></expr></argument>, <argument><expr><literal type="string">"Direct3DCreate9Ex"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>use_ex</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>OurDirect3DCreate9Ex</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name> <init>= <expr><call><name>OurDirect3DCreate9Ex</name><argument_list>(<argument><expr><name>D3D_SDK_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hd3d</name><operator>-&gt;</operator><name>objex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Using Direct3D9 Extended API!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>use_ex</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <call><name>OurDirect3DCreate9</name><argument_list>(<argument><expr><name>D3D_SDK_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Could not create Direct3D9 instance."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>D3D9_Destroy</name><argument_list>( <argument><expr><name>hd3d</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>D3D9_CloneExternal</name><parameter_list>(<parameter><decl><type><name>d3d9_handle_t</name> <modifier>*</modifier></type><name>hd3d</name></decl></parameter>, <parameter><decl><type><name>IDirect3D9</name> <modifier>*</modifier></type><name>dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name> <operator>=</operator> <name>dev</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3D9_AddRef</name><argument_list>( <argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>hdll</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hd3d</name><operator>-&gt;</operator><name>use_ex</name></name> <operator>=</operator> <call><name>SUCCEEDED</name><argument_list>(<argument><expr><call><name>IDirect3D9_QueryInterface</name><argument_list>(<argument><expr><name>dev</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>IID_IDirect3D9Ex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hd3d</name><operator>-&gt;</operator><name>use_ex</name></name> <operator>&amp;&amp;</operator> <name>pv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDirect3D9Ex_Release</name><argument_list>(<argument><expr><operator>(</operator><name>IDirect3D9Ex</name><operator>*</operator><operator>)</operator> <name>pv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type>(<name>D3D9_CreateDevice</name>)<parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>D3DDEVTYPE</name></type> <name>DeviceType</name> <init>= <expr><name>D3DDEVTYPE_HAL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d9_decoder_device</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>d3d9_device_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name><operator>.</operator><name>d3ddev</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>d3d9_handle_t</name> <modifier>*</modifier></type><name>hd3d</name> <init>= <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name><operator>.</operator><name>hd3d</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>AdapterToUse</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cleanupDeviceCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_video_engine_t</name></type> <name>engineType</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-type"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>libvlc_video_output_setup_cb</name></type> <name>setupDeviceCb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>engineType</name> <operator>==</operator> <name>libvlc_video_engine_d3d9</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>setupDeviceCb</name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-setup"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>setupDeviceCb</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>libvlc_video_setup_device_info_t</name></type> <name>extern_out</name> <init>= <expr><block>{ <expr><operator>.</operator><name><name>d3d9</name><operator>.</operator><name>adapter</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-opaque"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>cleanupDeviceCb</name></name> <operator>=</operator> <call><name>var_InheritAddress</name><argument_list>( <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"vout-cb-cleanup"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>libvlc_video_setup_device_cfg_t</name></type> <name>cfg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>hardware_decoding</name> <operator>=</operator> <name>true</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>setupDeviceCb</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>extern_out</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>D3D9_CloneExternal</name><argument_list>( <argument><expr><name>hd3d</name></expr></argument>, <argument><expr><operator>(</operator><name>IDirect3D9</name> <operator>*</operator><operator>)</operator> <name><name>extern_out</name><operator>.</operator><name>d3d9</name><operator>.</operator><name>device</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>AdapterToUse</name> <operator>=</operator> <name><name>extern_out</name><operator>.</operator><name>d3d9</name><operator>.</operator><name>adapter</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>engineType</name> <operator>==</operator> <name>libvlc_video_engine_disable</name> <operator>||</operator>

<name>engineType</name> <operator>==</operator> <name>libvlc_video_engine_d3d9</name> <operator>||</operator>

<name>engineType</name> <operator>==</operator> <name>libvlc_video_engine_opengl</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>D3D9_Create</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>hd3d</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Direct3D9 could not be initialized"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>AdapterToUse</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>AdapterToUse</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>AdapterToUse</name> <operator>=</operator> <name>D3DADAPTER_DEFAULT</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><decl><type><name>UINT</name></type> <name>Adapter</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>Adapter</name><operator>&lt;</operator> <call><name>IDirect3D9_GetAdapterCount</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>Adapter</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>D3DADAPTER_IDENTIFIER9</name></type> <name>Identifier</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9_GetAdapterIdentifier</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>Adapter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>Identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name><name>Identifier</name><operator>.</operator><name>Description</name></name></expr></argument>,<argument><expr><literal type="string">"PerfHUD"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>AdapterToUse</name> <operator>=</operator> <name>Adapter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>DeviceType</name> <operator>=</operator> <name>D3DDEVTYPE_REF</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ZeroMemory</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>caps</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>caps</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9_GetDeviceCaps</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>AdapterToUse</name></expr></argument>, <argument><expr><name>DeviceType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>caps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Could not read adapter capabilities. (hr=0x%lX)"</literal></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"D3D9 device caps 0x%lX / 0x%lX"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>caps</name><operator>.</operator><name>DevCaps</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>caps</name><operator>.</operator><name>DevCaps2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>out</name><operator>-&gt;</operator><name>caps</name><operator>.</operator><name>DevCaps2</name></name> <operator>&amp;</operator> <name>D3DDEVCAPS2_CAN_STRETCHRECT_FROM_TEXTURES</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Device does not support stretching from textures."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>adapterId</name></name> <operator>=</operator> <name>AdapterToUse</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>D3DPRESENT_PARAMETERS</name></type> <name>d3dpp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FillPresentationParameters</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d3dpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><call><name>IDirect3D9_GetAdapterIdentifier</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>AdapterToUse</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>identifier</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"IDirect3D9_GetAdapterIdentifier failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"Direct3d9 Device: %s %lx %lx %lx"</literal></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>Description</name></name></expr></argument>,

<argument><expr><name><name>out</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>VendorId</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>DeviceId</name></name></expr></argument>, <argument><expr><name><name>out</name><operator>-&gt;</operator><name>identifier</name><operator>.</operator><name>Revision</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name><name>thread_modes</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>D3DCREATE_MULTITHREADED</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name><name>vertex_modes</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>D3DCREATE_HARDWARE_VERTEXPROCESSING</name> <operator>|</operator> <name>D3DCREATE_PUREDEVICE</name></expr>,

<expr><name>D3DCREATE_HARDWARE_VERTEXPROCESSING</name></expr>,

<expr><name>D3DCREATE_MIXED_VERTEXPROCESSING</name></expr>,

<expr><name>D3DCREATE_SOFTWARE_VERTEXPROCESSING</name></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>thread_modes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>vertex_modes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>DWORD</name></type> <name>creationFlags</name> <init>= <expr><name><name>thread_modes</name><index>[<expr><name>t</name></expr>]</index></name> <operator>|</operator> <name><name>vertex_modes</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hd3d</name><operator>-&gt;</operator><name>use_ex</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9Ex_CreateDeviceEx</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>objex</name></name></expr></argument>, <argument><expr><name>AdapterToUse</name></expr></argument>,

<argument><expr><name>DeviceType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>creationFlags</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>d3dpp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>devex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3D9_CreateDevice</name><argument_list>(<argument><expr><name><name>hd3d</name><operator>-&gt;</operator><name>obj</name></name></expr></argument>, <argument><expr><name>AdapterToUse</name></expr></argument>,

<argument><expr><name>DeviceType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>creationFlags</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>d3dpp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><operator>-&gt;</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<return>return <expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>dec_device</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><literal type="string">"failed to create the D3D9%s device %d/%d. (hr=0x%lX)"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>hd3d</name><operator>-&gt;</operator><name>use_ex</name></name></expr>?</condition><then><expr><literal type="string">"Ex"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>AdapterToUse</name></expr></argument>, <argument><expr><name>DeviceType</name></expr></argument>, <argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>cleanupDeviceCb</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>cleanupDeviceCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_obj_free</name><argument_list>( <argument><expr><name>o</name></expr></argument>, <argument><expr><name>sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>D3D9_ReleaseDevice</name><parameter_list>(<parameter><decl><type><name>d3d9_decoder_device_t</name> <modifier>*</modifier></type><name>dec_dev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>d3d9_decoder_device</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>dec_dev</name></expr></argument>, <argument><expr><name>d3d9_decoder_device</name></expr></argument>, <argument><expr><name>dec_device</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dec_dev</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDirect3DDevice9_Release</name><argument_list>(<argument><expr><name><name>dec_dev</name><operator>-&gt;</operator><name>d3ddev</name><operator>.</operator><name>dev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>D3D9_Destroy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>dec_dev</name><operator>-&gt;</operator><name>hd3d</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sys</name><operator>-&gt;</operator><name>cleanupDeviceCb</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>sys</name><operator>-&gt;</operator><name>cleanupDeviceCb</name></name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>opaque</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_video_context_operations</name></name></type> <name>d3d9_vctx_ops</name> <init>= <expr><block>{

<expr><name>NULL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>d3d9_pic_context_destroy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d9_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>D3D9_PICCONTEXT_FROM_PICCTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ReleaseD3D9PictureSys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pic_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>picture_context_t</name> <modifier>*</modifier></type><name>d3d9_pic_context_copy</name><parameter_list>(<parameter><decl><type><name>picture_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>d3d9_pic_context</name></name> <modifier>*</modifier></type><name>pic_ctx</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>pic_ctx</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pic_ctx</name> <operator>=</operator> <operator>*</operator><call><name>D3D9_PICCONTEXT_FROM_PICCTX</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_video_context_Hold</name><argument_list>(<argument><expr><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>vctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AcquireD3D9PictureSys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>picsys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>&amp;</operator><name><name>pic_ctx</name><operator>-&gt;</operator><name>s</name></name></expr>;</return>

</block_content>}</block></function>

</unit>
