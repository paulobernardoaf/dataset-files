<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_chroma\swscale.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libswscale/swscale.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libswscale/version.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;TargetConditionals.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../codec/avcodec/chroma.h"</cpp:file></cpp:include> 

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVPALETTE_SIZE</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVPALETTE_SIZE</name></cpp:macro> <cpp:value>(256 * sizeof(uint32_t))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenScaler</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CloseScaler</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALEMODE_TEXT</name></cpp:macro> <cpp:value>N_("Scaling mode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALEMODE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Scaling mode to use.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_mode_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_mode_descriptions</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Fast bilinear"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bilinear"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Bicubic (good quality)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Experimental"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Nearest neighbor (bad quality)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Area"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Luma bicubic / chroma bilinear"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Gauss"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"SincR"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Lanczos"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Bicubic spline"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Video scaling filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Swscale"</literal> )</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">150</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenScaler</argument>, <argument>CloseScaler</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"swscale-mode"</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument>SCALEMODE_TEXT</argument>, <argument>SCALEMODE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_mode_values</argument>, <argument>ppsz_mode_descriptions</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSWSCALE_VERSION_INT</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>+</operator><operator>(</operator><literal type="number">5</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>+</operator><literal type="number">0</literal><operator>)</operator></expr></cpp:if>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>SwsFilter</name> <modifier>*</modifier></type><name>p_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cpu_mask</name></decl>, <name>i_sws_flags</name>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>ctxA</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extend_factor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src_e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst_e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_add_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_swap_uvi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_swap_uvo</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Init</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Clean</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_fmti</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fmto</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_add_a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sws_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_swap_uvi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_swap_uvo</name></decl>;</decl_stmt>

}</block></struct></type> <name>ScalerConfiguration</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetParameters</name><parameter_list>( <parameter><decl><type><name>ScalerConfiguration</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmti</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmto</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_sws_flags_default</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetSwsCpuMask</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_YUVP</name></cpp:macro> <cpp:value>(false)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINIMUM_WIDTH</name></cpp:macro> <cpp:value>(32)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET_A</name></cpp:macro> <cpp:value>(3)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenScaler</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sws_mode</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetParameters</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cpu_mask</name></name> <operator>=</operator> <call><name>GetSwsCpuMask</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sws_mode</name> <operator>=</operator> <call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"swscale-mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_sws_mode</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_FAST_BILINEAR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_BILINEAR</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_BICUBIC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_X</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_POINT</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_AREA</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_BICUBLIN</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_GAUSS</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_SINC</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_LANCZOS</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_SPLINE</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>SWS_BICUBIC</name></expr>;</expr_stmt> <expr_stmt><expr><name>i_sws_mode</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Init</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_filter</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sws_freeFilter</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_filter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"%ix%i (%ix%i) chroma: %4.4s -&gt; %ix%i (%ix%i) chroma: %4.4s with scaling using %s"</literal></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,

<argument><expr><name><name>ppsz_mode_descriptions</name><index>[<expr><name>i_sws_mode</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseScaler</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Clean</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_filter</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sws_freeFilter</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_filter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetSwsCpuMask</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_sws_cpu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSWSCALE_VERSION_MAJOR</name> <operator>&lt;</operator> <literal type="number">4</literal></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><call><name>vlc_CPU_MMX</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sws_cpu</name> <operator>|=</operator> <name>SWS_CPU_CAPS_MMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>LIBSWSCALE_VERSION_INT</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>+</operator><operator>(</operator><literal type="number">5</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><call><name>vlc_CPU_MMXEXT</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sws_cpu</name> <operator>|=</operator> <name>SWS_CPU_CAPS_MMX2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>vlc_CPU_3dNOW</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sws_cpu</name> <operator>|=</operator> <name>SWS_CPU_CAPS_3DNOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ppc64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__powerpc__</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<if_stmt><if>if<condition>( <expr><call><name>vlc_CPU_ALTIVEC</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sws_cpu</name> <operator>|=</operator> <name>SWS_CPU_CAPS_ALTIVEC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>i_sws_cpu</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FixParameters</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_fmt</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_has_a</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_swap_uv</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>fmt</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_YUV422A</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_has_a</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_YUV420A</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_has_a</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_YUVA</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_has_a</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGBA</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_BGR32</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_has_a</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_ARGB</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_BGR32_1</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_has_a</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_BGRA</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_RGB32</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_has_a</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_swap_uv</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_YV9</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>pi_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_YUV410P</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_swap_uv</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GetParameters</name><parameter_list>( <parameter><decl><type><name>ScalerConfiguration</name> <modifier>*</modifier></type><name>p_cfg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmti</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmto</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_sws_flags_default</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_fmti</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fmto</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_ai</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_ao</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sws_flags</name> <init>= <expr><name>i_sws_flags_default</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_swap_uvi</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_swap_uvo</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetFfmpegChroma</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_fmti</name></expr></argument>, <argument><expr><name>p_fmti</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetFfmpegChroma</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_fmto</name></expr></argument>, <argument><expr><name>p_fmto</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YUVP</name> <operator>&amp;&amp;</operator> <name>ALLOW_YUVP</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_fmti</name> <operator>=</operator> <name>i_fmto</name> <operator>=</operator> <name>AV_PIX_FMT_GRAY8</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sws_flags</name> <operator>=</operator> <name>SWS_POINT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FixParameters</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_fmti</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_has_ai</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_swap_uvi</name></expr></argument>, <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FixParameters</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_fmto</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_has_ao</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_swap_uvo</name></expr></argument>, <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TARGET_OS_IPHONE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<switch>switch<condition>( <expr><name>i_fmto</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_ARGB</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_ABGR</name></expr>:</case>

<expr_stmt><expr><name>i_sws_flags</name> <operator>|=</operator> <name>SWS_ACCURATE_RND</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>p_cfg</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_fmti</name></name> <operator>=</operator> <name>i_fmti</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_fmto</name></name> <operator>=</operator> <name>i_fmto</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>b_has_a</name></name> <operator>=</operator> <name>b_has_ai</name> <operator>&amp;&amp;</operator> <name>b_has_ao</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>b_add_a</name></name> <operator>=</operator> <operator>(</operator><operator>!</operator><name>b_has_ai</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>b_has_ao</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>b_copy</name></name> <operator>=</operator> <name>i_fmti</name> <operator>==</operator> <name>i_fmto</name> <operator>&amp;&amp;</operator>

<name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>==</operator> <name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>&amp;&amp;</operator>

<name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>==</operator> <name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>b_swap_uvi</name></name> <operator>=</operator> <name>b_swap_uvi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>b_swap_uvo</name></name> <operator>=</operator> <name>b_swap_uvo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cfg</name><operator>-&gt;</operator><name>i_sws_flags</name></name> <operator>=</operator> <name>i_sws_flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_fmti</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_fmto</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Init</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmti</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmto</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmti</name><operator>-&gt;</operator><name>orientation</name></name> <operator>!=</operator> <name><name>p_fmto</name><operator>-&gt;</operator><name>orientation</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>video_format_IsSimilar</name><argument_list>( <argument><expr><name>p_fmti</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>video_format_IsSimilar</name><argument_list>( <argument><expr><name>p_fmto</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>Clean</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ScalerConfiguration</name></type> <name>cfg</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetParameters</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>p_fmti</name></expr></argument>, <argument><expr><name>p_fmto</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_sws_flags</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"format not supported '%4.4s' %ux%u -&gt; '%4.4s' %ux%u"</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmti</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"invalid scaling: %ix%i -&gt; %ix%i"</literal></expr></argument>,

<argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>desc_in</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>desc_out</name></name> <operator>=</operator> <call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>desc_in</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>desc_out</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_extend_factor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument> )</argument_list></call> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_extend_factor</name></name> <operator>&lt;</operator> <name>MINIMUM_WIDTH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_extend_factor</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_fmti_visible_width</name> <init>= <expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_extend_factor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_fmto_visible_width</name> <init>= <expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_extend_factor</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>cfg</name><operator>.</operator><name>b_has_a</name></name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_fmti</name> <init>= <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>cfg</name><operator>.</operator><name>i_fmti</name></name></expr> </then><else>: <expr><name>AV_PIX_FMT_GRAY8</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_fmto</name> <init>= <expr><ternary><condition><expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>cfg</name><operator>.</operator><name>i_fmto</name></name></expr> </then><else>: <expr><name>AV_PIX_FMT_GRAY8</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>sws_getContext</name><argument_list>( <argument><expr><name>i_fmti_visible_width</name></expr></argument>, <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><name>i_fmti</name></expr></argument>,

<argument><expr><name>i_fmto_visible_width</name></expr></argument>, <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><name>i_fmto</name></expr></argument>,

<argument><expr><name><name>cfg</name><operator>.</operator><name>i_sws_flags</name></name> <operator>|</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cpu_mask</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_filter</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctxA</name></name> <operator>=</operator> <name>ctx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctxA</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_a</name></name> <operator>=</operator> <call><name>picture_New</name><argument_list>( <argument><expr><name>VLC_CODEC_GREY</name></expr></argument>, <argument><expr><name>i_fmti_visible_width</name></expr></argument>, <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_a</name></name> <operator>=</operator> <call><name>picture_New</name><argument_list>( <argument><expr><name>VLC_CODEC_GREY</name></expr></argument>, <argument><expr><name>i_fmto_visible_width</name></expr></argument>, <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_extend_factor</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name></name> <operator>=</operator> <call><name>picture_New</name><argument_list>( <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name>i_fmti_visible_width</name></expr></argument>, <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name></name> <operator>=</operator> <call><name>picture_New</name><argument_list>( <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name>i_fmto_visible_width</name></expr></argument>, <argument><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name> <operator>||</operator>

<operator>(</operator> <name><name>cfg</name><operator>.</operator><name>b_has_a</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ctxA</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_a</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_a</name></name> <operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_extend_factor</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name></name> <operator>)</operator> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"could not init SwScaler and/or allocate memory"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Clean</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_filter</name><operator>-&gt;</operator><name>b_allow_fmt_out_change</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_sar_num</name> <init>= <expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>*</operator> <name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_sar_den</name> <init>= <expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*</operator> <name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_sar_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sar_den</name></expr></argument>, <argument><expr><name>i_sar_num</name></expr></argument>, <argument><expr><name>i_sar_den</name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sar_num</name> <operator>*=</operator> <name><name>p_fmto</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sar_den</name> <operator>*=</operator> <name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_sar_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sar_den</name></expr></argument>, <argument><expr><name>i_sar_num</name></expr></argument>, <argument><expr><name>i_sar_den</name></expr></argument>, <argument><expr><literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_sar_num</name></name> <operator>=</operator> <name>i_sar_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>=</operator> <name>i_sar_den</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_add_a</name></name> <operator>=</operator> <name><name>cfg</name><operator>.</operator><name>b_add_a</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_copy</name></name> <operator>=</operator> <name><name>cfg</name><operator>.</operator><name>b_copy</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_in</name></name> <operator>=</operator> <operator>*</operator><name>p_fmti</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt_out</name></name> <operator>=</operator> <operator>*</operator><name>p_fmto</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_swap_uvi</name></name> <operator>=</operator> <name><name>cfg</name><operator>.</operator><name>b_swap_uvi</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_swap_uvo</name></name> <operator>=</operator> <name><name>cfg</name><operator>.</operator><name>b_swap_uvo</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Clean</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_a</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_a</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_a</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_a</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctxA</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctxA</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sws_freeContext</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctxA</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_a</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_a</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetPixels</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>pp_pixel</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>pi_pitch</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>planes</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_swap_uv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>planes</name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>planes</name> <operator>=</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name>b_swap_uv</name> <operator>||</operator> <name>planes</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_swap_uv</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i</name><operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pp_pixel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name>

<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_x_offset</name></name> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <name><name>desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name><operator>)</operator>

<operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>*</operator> <name><name>desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name><operator>)</operator> <operator>/</operator> <name><name>desc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name><operator>)</operator>

<operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_pitch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pp_pixel</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_pitch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ExtractA</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_src</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>x</name><operator>+</operator><name>offset</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>InjectA</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>p_src</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>x</name><operator>+</operator><name>offset</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>+</operator><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillA</name><parameter_list>( <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name><name>d</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>d</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>i_pitch</name></name><operator>+</operator><name>x</name><operator>+</operator><name>i_offset</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CopyPad</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>p_dst</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>d</name> <init>= <expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>i_lines</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>d</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>d</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>i_pixel_pitch</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SwapUV</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>p_src</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Convert</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>SwsContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_plane_count</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_swap_uvi</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_swap_uvo</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>palette</name><index>[<expr><name>AVPALETTE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>dst</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>csrc</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>src_stride</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dst_stride</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPixels</name><argument_list>( <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>desc_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument>,

<argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_plane_count</name></expr></argument>, <argument><expr><name>b_swap_uvi</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGBP</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>palette</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>palette</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>palette</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>,

<argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>video_palette_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>palette</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src_stride</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>GetPixels</name><argument_list>( <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>desc_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>,

<argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>i_plane_count</name></expr></argument>, <argument><expr><name>b_swap_uvo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>csrc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>LIBSWSCALE_VERSION_INT</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator><operator>+</operator><operator>(</operator><literal type="number">5</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator><operator>+</operator><literal type="number">0</literal><operator>)</operator></expr></cpp:if>

<expr_stmt><expr><call><name>sws_scale</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>csrc</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_height</name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>sws_scale_ordered</name><argument_list>( <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>csrc</name></expr></argument>, <argument><expr><name>src_stride</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_height</name></expr></argument>,

<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_stride</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmti</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmto</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_dst</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Init</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_pic_dst</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic_dst</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name>p_pic</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name>p_pic_dst</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_extend_factor</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_src</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_src_e</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_e</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyPad</name><argument_list>( <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_copy</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_swap_uvi</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_swap_uvo</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_copy</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SwapUV</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n_planes</name> <init>= <expr><ternary><condition><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ctxA</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator>

<name><name>p_dst</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>==</operator> <literal type="number">4</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Convert</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><name>n_planes</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_swap_uvi</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_swap_uvo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctxA</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGBA</name> <operator>||</operator> <name><name>p_fmti</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_BGRA</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ExtractA</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_a</name></name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>OFFSET_A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_ARGB</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ExtractA</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_a</name></name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_a</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>p</name></name><operator>+</operator><name>A_PLANE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>Convert</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ctxA</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_a</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_src_a</name></name></expr></argument>,

<argument><expr><name><name>p_fmti</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGBA</name> <operator>||</operator> <name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_BGRA</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>InjectA</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_a</name></name></expr></argument>, <argument><expr><name>OFFSET_A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_ARGB</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>InjectA</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_a</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>p</name></name><operator>+</operator><name>A_PLANE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_dst_a</name><operator>-&gt;</operator><name>p</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_add_a</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGBA</name> <operator>||</operator> <name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_BGRA</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillA</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>OFFSET_A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_fmto</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_ARGB</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillA</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillA</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>A_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_extend_factor</name></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name>p_pic_dst</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name>p_pic_dst</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pic_dst</name></expr>;</return>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 

<function><type><name>int</name></type> <name>OpenScaler</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CloseScaler</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
