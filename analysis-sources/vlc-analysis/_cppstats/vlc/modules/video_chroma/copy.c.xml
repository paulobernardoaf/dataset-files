<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_chroma\copy.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COPY_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>NDEBUG</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"copy.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CopyPlane</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_PLANE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>assert(src[i]); assert(src_pitch[i])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_2PLANES</name></cpp:macro> <cpp:value>assert(dst); ASSERT_PLANE(0); ASSERT_PLANE(1); assert(height)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_3PLANES</name></cpp:macro> <cpp:value>ASSERT_2PLANES; ASSERT_PLANE(2)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>CopyInitCache</name><parameter_list>(<parameter><decl><type><name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">0x3f</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator> <literal type="number">0x3f</literal></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>aligned_alloc</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cache</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>width</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CopyCleanCache</name><parameter_list>(<parameter><decl><type><name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>aligned_free</name><argument_list>(<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY16_SHIFTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"psrlw "x", %%xmm1\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY16_SHIFTL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"psllw "x", %%xmm1\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY16_S</name><parameter_list>(<parameter><type><name>dstp</name></type></parameter>, <parameter><type><name>srcp</name></type></parameter>, <parameter><type><name>load</name></type></parameter>, <parameter><type><name>store</name></type></parameter>, <parameter><type><name>shiftstr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>asm volatile ( load " 0(%[src]), %%xmm1\n" shiftstr store " %%xmm1, 0(%[dst])\n" : : [dst]"r"(dstp), [src]"r"(srcp) : "memory", "xmm1")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY16</name><parameter_list>(<parameter><type><name>dstp</name></type></parameter>, <parameter><type><name>srcp</name></type></parameter>, <parameter><type><name>load</name></type></parameter>, <parameter><type><name>store</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COPY16_S(dstp, srcp, load, store, "")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY64_SHIFTR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"psrlw "x", %%xmm1\n" "psrlw "x", %%xmm2\n" "psrlw "x", %%xmm3\n" "psrlw "x", %%xmm4\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY64_SHIFTL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"psllw "x", %%xmm1\n" "psllw "x", %%xmm2\n" "psllw "x", %%xmm3\n" "psllw "x", %%xmm4\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY64_S</name><parameter_list>(<parameter><type><name>dstp</name></type></parameter>, <parameter><type><name>srcp</name></type></parameter>, <parameter><type><name>load</name></type></parameter>, <parameter><type><name>store</name></type></parameter>, <parameter><type><name>shiftstr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>asm volatile ( load " 0(%[src]), %%xmm1\n" load " 16(%[src]), %%xmm2\n" load " 32(%[src]), %%xmm3\n" load " 48(%[src]), %%xmm4\n" shiftstr store " %%xmm1, 0(%[dst])\n" store " %%xmm2, 16(%[dst])\n" store " %%xmm3, 32(%[dst])\n" store " %%xmm4, 48(%[dst])\n" : : [dst]"r"(dstp), [src]"r"(srcp) : "memory", "xmm1", "xmm2", "xmm3", "xmm4")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY64</name><parameter_list>(<parameter><type><name>dstp</name></type></parameter>, <parameter><type><name>srcp</name></type></parameter>, <parameter><type><name>load</name></type></parameter>, <parameter><type><name>store</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>COPY64_S(dstp, srcp, load, store, "")</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COPY_TEST_NOOPTIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_CPU_SSE4_1</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_SSE4_1</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_CPU_SSE3</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_SSE3</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_CPU_SSSE3</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_SSSE3</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_CPU_SSE2</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_SSE2</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(0)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>VLC_SSE</name>

<specifier>static</specifier> <name>void</name></type> <name>CopyFromUswc</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>dst</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>dst_pitch</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>asm <specifier>volatile</specifier> ("mfence");</asm>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSE_USWC_COPY</name><parameter_list>(<parameter><type><name>shiftstr16</name></type></parameter>, <parameter><type><name>shiftstr64</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (unsigned y = 0; y &lt; height; y++) { const unsigned unaligned = (-(uintptr_t)src) &amp; 0x0f; unsigned x = unaligned; if (vlc_CPU_SSE4_1()) { if (!unaligned) { for (; x+63 &lt; width; x += 64) COPY64_S(&amp;dst[x], &amp;src[x], "movntdqa", "movdqa", shiftstr64); } else { COPY16_S(dst, src, "movdqu", "movdqa", shiftstr16); for (; x+63 &lt; width; x += 64) COPY64_S(&amp;dst[x], &amp;src[x], "movntdqa", "movdqu", shiftstr64); } } else { if (!unaligned) { for (; x+63 &lt; width; x += 64) COPY64_S(&amp;dst[x], &amp;src[x], "movdqa", "movdqa", shiftstr64); } else { COPY16_S(dst, src, "movdqu", "movdqa", shiftstr16); for (; x+63 &lt; width; x += 64) COPY64_S(&amp;dst[x], &amp;src[x], "movdqa", "movdqu", shiftstr64); } } if (x &lt; width) CopyPlane(&amp;dst[x], dst_pitch - x, &amp;src[x], src_pitch - x, 1, bitshift); src += src_pitch; dst += dst_pitch; }</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>bitshift</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<macro><name>SSE_USWC_COPY</name><argument_list>(<argument><literal type="string">""</literal></argument>, <argument><literal type="string">""</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">6</literal></expr>:</case>

<macro><name>SSE_USWC_COPY</name><argument_list>(<argument>COPY16_SHIFTL(<literal type="string">"$6"</literal>)</argument>, <argument>COPY64_SHIFTL(<literal type="string">"$6"</literal>)</argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<macro><name>SSE_USWC_COPY</name><argument_list>(<argument>COPY16_SHIFTR(<literal type="string">"$6"</literal>)</argument>, <argument>COPY64_SHIFTR(<literal type="string">"$6"</literal>)</argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<macro><name>SSE_USWC_COPY</name><argument_list>(<argument>COPY16_SHIFTR(<literal type="string">"$2"</literal>)</argument>, <argument>COPY64_SHIFTR(<literal type="string">"$2"</literal>)</argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>

<macro><name>SSE_USWC_COPY</name><argument_list>(<argument>COPY16_SHIFTL(<literal type="string">"$2"</literal>)</argument>, <argument>COPY64_SHIFTL(<literal type="string">"$2"</literal>)</argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<macro><name>SSE_USWC_COPY</name><argument_list>(<argument>COPY16_SHIFTR(<literal type="string">"$4"</literal>)</argument>, <argument>COPY64_SHIFTR(<literal type="string">"$4"</literal>)</argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><operator>-</operator><literal type="number">4</literal></expr>:</case>

<macro><name>SSE_USWC_COPY</name><argument_list>(<argument>COPY16_SHIFTL(<literal type="string">"$2"</literal>)</argument>, <argument>COPY64_SHIFTL(<literal type="string">"$2"</literal>)</argument>)</argument_list></macro>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SSE_USWC_COPY</name></cpp:undef>

<asm>asm <specifier>volatile</specifier> ("mfence");</asm>

</block_content>}</block></function>

<function><type><name>VLC_SSE</name>

<specifier>static</specifier> <name>void</name></type> <name>Copy2d</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>src</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>src_pitch</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>unaligned</name> <init>= <expr><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>dst</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unaligned</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>x</name><operator>+</operator><literal type="number">63</literal> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COPY64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"movdqa"</literal></expr></argument>, <argument><expr><literal type="string">"movntdq"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>x</name><operator>+</operator><literal type="number">63</literal> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COPY64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"movdqa"</literal></expr></argument>, <argument><expr><literal type="string">"movdqu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>VLC_SSE</name>

<specifier>static</specifier> <name>void</name></type>

<name>SSE_InterleaveUV</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>srcu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcu_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>srcv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcv_pitch</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pixel_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>srcu</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>srcu_pitch</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>srcv</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>srcv_pitch</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>shuffle_8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">11</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">13</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>shuffle_16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>shuffle</name> <init>= <expr><ternary><condition><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>shuffle_8</name></expr> </then><else>: <expr><name>shuffle_16</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD2X32</name></cpp:macro> <cpp:value>"movhpd 0x00(%[src2]), %%xmm0\n" "movlpd 0x00(%[src1]), %%xmm0\n" "movhpd 0x08(%[src2]), %%xmm1\n" "movlpd 0x08(%[src1]), %%xmm1\n" "movhpd 0x10(%[src2]), %%xmm2\n" "movlpd 0x10(%[src1]), %%xmm2\n" "movhpd 0x18(%[src2]), %%xmm3\n" "movlpd 0x18(%[src1]), %%xmm3\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE64</name></cpp:macro> <cpp:value>"movdqu %%xmm0, 0x00(%[dst])\n" "movdqu %%xmm1, 0x10(%[dst])\n" "movdqu %%xmm2, 0x20(%[dst])\n" "movdqu %%xmm3, 0x30(%[dst])\n"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSSE3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSSE3</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">31</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control><block type="pseudo"><block_content>

<asm>asm <specifier>volatile</specifier>

(

"movdqu (%[shuffle]), %%xmm7\n"

LOAD2X32

"pshufb %%xmm7, %%xmm0\n"

"pshufb %%xmm7, %%xmm1\n"

"pshufb %%xmm7, %%xmm2\n"

"pshufb %%xmm7, %%xmm3\n"

STORE64

: : [dst]"r"(dst+2*x),

[src1]"r"(srcu+x), [src2]"r"(srcv+x),

[shuffle]"r"(shuffle)

: "memory", "xmm0", "xmm1", "xmm2", "xmm3", "xmm7"

);</asm></block_content></block></for></block_content></block></if>

<else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">31</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control><block type="pseudo"><block_content>

<asm>asm <specifier>volatile</specifier>

(

LOAD2X32

"movhlps %%xmm0, %%xmm4\n"

"punpcklbw %%xmm4, %%xmm0\n"

"movhlps %%xmm1, %%xmm4\n"

"punpcklbw %%xmm4, %%xmm1\n"

"movhlps %%xmm2, %%xmm4\n"

"punpcklbw %%xmm4, %%xmm2\n"

"movhlps %%xmm3, %%xmm4\n"

"punpcklbw %%xmm4, %%xmm3\n"

STORE64

: : [dst]"r"(dst+2*x),

[src1]"r"(srcu+x), [src2]"r"(srcv+x)

: "memory",

"xmm0", "xmm1", "xmm2", "xmm3", "xmm4", "xmm7"

);</asm></block_content></block></for>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD2X32</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STORE64</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>srcu</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>srcv</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>srcu</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>srcu</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>srcv</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>srcv</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>srcu</name> <operator>+=</operator> <name>srcu_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcv</name> <operator>+=</operator> <name>srcv_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>VLC_SSE</name>

<specifier>static</specifier> <name>void</name></type> <name>SSE_SplitUV</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstu_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstv_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pixel_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>pixel_size</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>src</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>src_pitch</name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD64</name></cpp:macro> <cpp:value>"movdqa 0(%[src]), %%xmm0\n" "movdqa 16(%[src]), %%xmm1\n" "movdqa 32(%[src]), %%xmm2\n" "movdqa 48(%[src]), %%xmm3\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE2X32</name></cpp:macro> <cpp:value>"movq %%xmm0, 0(%[dst1])\n" "movq %%xmm1, 8(%[dst1])\n" "movhpd %%xmm0, 0(%[dst2])\n" "movhpd %%xmm1, 8(%[dst2])\n" "movq %%xmm2, 16(%[dst1])\n" "movq %%xmm3, 24(%[dst1])\n" "movhpd %%xmm2, 16(%[dst2])\n" "movhpd %%xmm3, 24(%[dst2])\n"</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSSE3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSSE3</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>shuffle_8</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>shuffle_16</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>,

<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>shuffle</name> <init>= <expr><ternary><condition><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>shuffle_8</name></expr> </then><else>: <expr><name>shuffle_16</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">31</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>

<asm>asm <specifier>volatile</specifier> (

"movdqu (%[shuffle]), %%xmm7\n"

LOAD64

"pshufb %%xmm7, %%xmm0\n"

"pshufb %%xmm7, %%xmm1\n"

"pshufb %%xmm7, %%xmm2\n"

"pshufb %%xmm7, %%xmm3\n"

STORE2X32

: : [dst1]"r"(&amp;dstu[x]), [dst2]"r"(&amp;dstv[x]), [src]"r"(&amp;src[2*x]), [shuffle]"r"(shuffle) : "memory", "xmm0", "xmm1", "xmm2", "xmm3", "xmm7");</asm>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstu</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstv</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstu</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstu</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstv</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstv</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstu</name> <operator>+=</operator> <name>dstu_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstv</name> <operator>+=</operator> <name>dstv_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pixel_size</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>mask</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>width</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">31</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>

<asm>asm <specifier>volatile</specifier> (

"movdqu (%[mask]), %%xmm7\n"

LOAD64

"movdqa %%xmm0, %%xmm4\n"

"movdqa %%xmm1, %%xmm5\n"

"movdqa %%xmm2, %%xmm6\n"

"psrlw $8, %%xmm0\n"

"psrlw $8, %%xmm1\n"

"pand %%xmm7, %%xmm4\n"

"pand %%xmm7, %%xmm5\n"

"pand %%xmm7, %%xmm6\n"

"packuswb %%xmm4, %%xmm0\n"

"packuswb %%xmm5, %%xmm1\n"

"pand %%xmm3, %%xmm7\n"

"psrlw $8, %%xmm2\n"

"psrlw $8, %%xmm3\n"

"packuswb %%xmm6, %%xmm2\n"

"packuswb %%xmm7, %%xmm3\n"

STORE2X32

: : [dst2]"r"(&amp;dstu[x]), [dst1]"r"(&amp;dstv[x]), [src]"r"(&amp;src[2*x]), [mask]"r"(mask) : "memory", "xmm0", "xmm1", "xmm2", "xmm3", "xmm4", "xmm5", "xmm6", "xmm7");</asm>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dstu</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dstv</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstu</name> <operator>+=</operator> <name>dstu_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstv</name> <operator>+=</operator> <name>dstv_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>STORE2X32</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LOAD64</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SSE_CopyPlane</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cache_size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy_pitch</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>dst_pitch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>copy_pitch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>w16</name> <init>= <expr><operator>(</operator><name>copy_pitch</name><operator>+</operator><literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hstep</name> <init>= <expr><name>cache_size</name> <operator>/</operator> <name>w16</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>cache_width</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>cache_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hstep</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_CPU_SSE4_1</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>bitshift</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>src_pitch</name> <operator>==</operator> <name>dst_pitch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>copy_pitch</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>hstep</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hblock</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>hstep</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CopyFromUswc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>w16</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>cache_width</name></expr></argument>, <argument><expr><name>hblock</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Copy2d</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_pitch</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>w16</name></expr></argument>, <argument><expr><name>copy_pitch</name></expr></argument>, <argument><expr><name>hblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_pitch</name> <operator>*</operator> <name>hblock</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_pitch</name> <operator>*</operator> <name>hblock</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>SSE_InterleavePlanes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcu_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>srcv_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cache_size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pixel_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>srcu_pitch</name> <operator>==</operator> <name>srcv_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>copy_pitch</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>dst_pitch</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>srcu_pitch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>w16</name> <init>= <expr><operator>(</operator><name>srcu_pitch</name><operator>+</operator><literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>hstep</name> <init>= <expr><operator>(</operator><name>cache_size</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>w16</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>cacheu_width</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>srcu_pitch</name></expr></argument>, <argument><expr><name>cache_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>cachev_width</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>srcv_pitch</name></expr></argument>, <argument><expr><name>cache_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hstep</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>hstep</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <specifier>const</specifier></type> <name>hblock</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>hstep</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CopyFromUswc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>w16</name></expr></argument>, <argument><expr><name>srcu</name></expr></argument>, <argument><expr><name>srcu_pitch</name></expr></argument>, <argument><expr><name>cacheu_width</name></expr></argument>, <argument><expr><name>hblock</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyFromUswc</name><argument_list>(<argument><expr><name>cache</name><operator>+</operator><name>w16</name><operator>*</operator><name>hblock</name></expr></argument>, <argument><expr><name>w16</name></expr></argument>, <argument><expr><name>srcv</name></expr></argument>, <argument><expr><name>srcv_pitch</name></expr></argument>,

<argument><expr><name>cachev_width</name></expr></argument>, <argument><expr><name>hblock</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSE_InterleaveUV</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_pitch</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>, <argument><expr><name>w16</name></expr></argument>,

<argument><expr><name>cache</name> <operator>+</operator> <name>w16</name> <operator>*</operator> <name>hblock</name></expr></argument>, <argument><expr><name>w16</name></expr></argument>,

<argument><expr><name>copy_pitch</name></expr></argument>, <argument><expr><name>hblock</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>srcu</name> <operator>+=</operator> <name>hblock</name> <operator>*</operator> <name>srcu_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>srcv</name> <operator>+=</operator> <name>hblock</name> <operator>*</operator> <name>srcv_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>hblock</name> <operator>*</operator> <name>dst_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SSE_SplitPlanes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstu_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstv_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>cache_size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pixel_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>copy_pitch</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name>src_pitch</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>dstu_pitch</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dstv_pitch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>w16</name> <init>= <expr><operator>(</operator><name>src_pitch</name><operator>+</operator><literal type="number">15</literal><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hstep</name> <init>= <expr><name>cache_size</name> <operator>/</operator> <name>w16</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>cache_width</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>cache_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>hstep</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>hstep</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>hblock</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>hstep</name></expr></argument>, <argument><expr><name>height</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CopyFromUswc</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>w16</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>cache_width</name></expr></argument>, <argument><expr><name>hblock</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSE_SplitUV</name><argument_list>(<argument><expr><name>dstu</name></expr></argument>, <argument><expr><name>dstu_pitch</name></expr></argument>, <argument><expr><name>dstv</name></expr></argument>, <argument><expr><name>dstv_pitch</name></expr></argument>,

<argument><expr><name>cache</name></expr></argument>, <argument><expr><name>w16</name></expr></argument>, <argument><expr><name>copy_pitch</name></expr></argument>, <argument><expr><name>hblock</name></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_pitch</name> <operator>*</operator> <name>hblock</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstu</name> <operator>+=</operator> <name>dstu_pitch</name> <operator>*</operator> <name>hblock</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dstv</name> <operator>+=</operator> <name>dstv_pitch</name> <operator>*</operator> <name>hblock</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SSE_Copy420_P_to_P</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>d</name> <init>= <expr><ternary><condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SSE_CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>height</name><operator>+</operator><name>d</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<asm>asm <specifier>volatile</specifier> ("emms");</asm>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SSE_Copy420_SP_to_SP</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SSE_CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSE_CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>asm <specifier>volatile</specifier> ("emms");</asm>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>SSE_Copy420_SP_to_P</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>pixel_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SSE_CopyPlane</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSE_SplitPlanes</name><argument_list>(<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dest</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>asm <specifier>volatile</specifier> ("emms");</asm>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SSE_Copy420_P_to_SP</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>pixel_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SSE_CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SSE_InterleavePlanes</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>pixel_size</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<asm>asm <specifier>volatile</specifier> ("emms");</asm>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>COPY64</name></cpp:undef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>CopyPlane</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dst_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>copy_pitch</name> <init>= <expr><call><name>__MIN</name><argument_list>(<argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>dst_pitch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bitshift</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst16</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>src16</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>src</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bitshift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>copy_pitch</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst16</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src16</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>bitshift</name> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>copy_pitch</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst16</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>src16</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><operator>-</operator><name>bitshift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>src_pitch</name> <operator>==</operator> <name>dst_pitch</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>copy_pitch</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>copy_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>dst_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>CopyPacked</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>src_pitch</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSE4_1</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>SSE_CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>,

<argument><expr><name><name>cache</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cache</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>,

<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Copy420_SP_to_SP</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ASSERT_2PLANES</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>SSE_Copy420_SP_to_SP</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLIT_PLANES</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>pitch_den</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { size_t copy_pitch = __MIN(__MIN(src_pitch / pitch_den, dstu_pitch), dstv_pitch); for (unsigned y = 0; y &lt; height; y++) { for (unsigned x = 0; x &lt; copy_pitch; x++) { ((type *) dstu)[x] = ((const type *) src)[2*x+0]; ((type *) dstv)[x] = ((const type *) src)[2*x+1]; } src += src_pitch; dstu += dstu_pitch; dstv += dstv_pitch; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLIT_PLANES_SHIFTR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>pitch_den</name></type></parameter>, <parameter><type><name>bitshift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { size_t copy_pitch = __MIN(__MIN(src_pitch / pitch_den, dstu_pitch), dstv_pitch); for (unsigned y = 0; y &lt; height; y++) { for (unsigned x = 0; x &lt; copy_pitch; x++) { ((type *) dstu)[x] = (((const type *) src)[2*x+0]) &gt;&gt; (bitshift); ((type *) dstv)[x] = (((const type *) src)[2*x+1]) &gt;&gt; (bitshift); } src += src_pitch; dstu += dstu_pitch; dstv += dstv_pitch; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLIT_PLANES_SHIFTL</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>pitch_den</name></type></parameter>, <parameter><type><name>bitshift</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { size_t copy_pitch = __MIN(__MIN(src_pitch / pitch_den, dstu_pitch), dstv_pitch); for (unsigned y = 0; y &lt; height; y++) { for (unsigned x = 0; x &lt; copy_pitch; x++) { ((type *) dstu)[x] = (((const type *) src)[2*x+0]) &lt;&lt; (bitshift); ((type *) dstv)[x] = (((const type *) src)[2*x+1]) &lt;&lt; (bitshift); } src += src_pitch; dstu += dstu_pitch; dstv += dstv_pitch; } } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SplitPlanes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstu_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstv_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>SPLIT_PLANES</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SplitPlanes16</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstu</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstu_pitch</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstv</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>dstv_pitch</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>src_pitch</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bitshift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SPLIT_PLANES</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>bitshift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SPLIT_PLANES_SHIFTR</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>bitshift</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SPLIT_PLANES_SHIFTL</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><name>bitshift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Copy420_SP_to_P</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ASSERT_2PLANES</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>SSE_Copy420_SP_to_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SplitPlanes</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Copy420_16_SP_to_P</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ASSERT_2PLANES</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bitshift</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>bitshift</name> <operator>&lt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>bitshift</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE3</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSSE3</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>SSE_Copy420_SP_to_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SplitPlanes16</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLEAVE_UV</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { for ( unsigned int line = 0; line &lt; copy_lines; line++ ) { for ( unsigned int col = 0; col &lt; copy_pitch; col++ ) { *dstUV++ = *srcU++; *dstUV++ = *srcV++; } dstUV += i_extra_pitch_uv; srcU += i_extra_pitch_u; srcV += i_extra_pitch_v; } }while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLEAVE_UV_SHIFTR</name><parameter_list>(<parameter><type><name>bitshitf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for ( unsigned int line = 0; line &lt; copy_lines; line++ ) { for ( unsigned int col = 0; col &lt; copy_pitch; col++ ) { *dstUV++ = (*srcU++) &gt;&gt; (bitshitf); *dstUV++ = (*srcV++) &gt;&gt; (bitshitf); } dstUV += i_extra_pitch_uv; srcU += i_extra_pitch_u; srcV += i_extra_pitch_v; } }while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERLEAVE_UV_SHIFTL</name><parameter_list>(<parameter><type><name>bitshitf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for ( unsigned int line = 0; line &lt; copy_lines; line++ ) { for ( unsigned int col = 0; col &lt; copy_pitch; col++ ) { *dstUV++ = (*srcU++) &lt;&lt; (bitshitf); *dstUV++ = (*srcV++) &lt;&lt; (bitshitf); } dstUV += i_extra_pitch_uv; srcU += i_extra_pitch_u; srcV += i_extra_pitch_v; } }while(0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>Copy420_P_to_SP</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ASSERT_3PLANES</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>SSE_Copy420_P_to_SP</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>copy_lines</name> <init>= <expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>copy_pitch</name> <init>= <expr><name><name>src_pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>copy_pitch</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>copy_pitch</name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_extra_pitch_uv</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>copy_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_extra_pitch_u</name> <init>= <expr><name><name>src_pitch</name><index>[<expr><name>U_PLANE</name></expr>]</index></name> <operator>-</operator> <name>copy_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_extra_pitch_v</name> <init>= <expr><name><name>src_pitch</name><index>[<expr><name>V_PLANE</name></expr>]</index></name> <operator>-</operator> <name>copy_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dstUV</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcU</name> <init>= <expr><name><name>src</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>srcV</name> <init>= <expr><name><name>src</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INTERLEAVE_UV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Copy420_16_P_to_SP</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bitshift</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ASSERT_3PLANES</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>bitshift</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>bitshift</name> <operator>&lt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>bitshift</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSSE3</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>SSE_Copy420_P_to_SP</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bitshift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>copy_lines</name> <init>= <expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>copy_pitch</name> <init>= <expr><name><name>src_pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_extra_pitch_uv</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>copy_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_extra_pitch_u</name> <init>= <expr><name><name>src_pitch</name><index>[<expr><name>U_PLANE</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>copy_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_extra_pitch_v</name> <init>= <expr><name><name>src_pitch</name><index>[<expr><name>V_PLANE</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>copy_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dstUV</name> <init>= <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator> <name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcU</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>src</name><index>[<expr><name>U_PLANE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>srcV</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>src</name><index>[<expr><name>V_PLANE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bitshift</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>INTERLEAVE_UV</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>bitshift</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>INTERLEAVE_UV_SHIFTR</name><argument_list>(<argument><expr><name>bitshift</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>INTERLEAVE_UV_SHIFTL</name><argument_list>(<argument><expr><operator>(</operator><operator>-</operator><name>bitshift</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Copy420_P_to_P</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitch</name><index>[<expr><specifier>static</specifier> <literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type><name>cache</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>ASSERT_3PLANES</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>SSE_Copy420_P_to_P</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_pitch</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>cache</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>cache</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyPlane</name><argument_list>(<argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>,

<argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src_pitch</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>height</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>picture_UpdatePlanes</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>pitch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>&lt;=</operator> <name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>&lt;=</operator> <name><name>picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NV12</name> <operator>||</operator>

<name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_NV21</name> <operator>||</operator>

<name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_P010</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>*</operator> <name><name>o</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>=</operator> <name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name> <operator>&lt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>&lt;=</operator> <name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>vlc_fourcc_AreUVPlanesSwapped</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name>VLC_CODEC_NV12</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_I420</name> <operator>||</operator>

<name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_J420</name> <operator>||</operator>

<name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_YV12</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>picture</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>*</operator> <name><name>o</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>=</operator> <name>pitch</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>=</operator> <name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>vlc_fourcc_AreUVPlanesSwapped</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><name>VLC_CODEC_YV12</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_SwapUV</name><argument_list>( <argument><expr><name>picture</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>COPY_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<struct>struct <name>test_dst</name>

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitshift</name></decl>;</decl_stmt>

<union>union

<block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>conv</name>)<parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>uint8_t</name> <modifier>*</modifier><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>size_t</name> <index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>conv16</name>)<parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>uint8_t</name> <modifier>*</modifier><index>[]</index></name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>size_t</name> <index>[]</index></name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>copy_cache_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</union>

}</block>;</struct>

<struct>struct <name>test_conv</name>

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>src_chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>test_dst</name></name></type> <name><name>dsts</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>test_conv</name></name></type> <name><name>convs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>.</operator><name>src_chroma</name> <operator>=</operator> <name>VLC_CODEC_NV12</name></expr>,

<expr><operator>.</operator><name>dsts</name> <operator>=</operator> <block>{ <expr><block>{ <expr><name>VLC_CODEC_I420</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>conv</name> <operator>=</operator> <name>Copy420_SP_to_P</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_NV12</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>conv</name> <operator>=</operator> <name>Copy420_SP_to_SP</name></expr> }</block></expr> }</block></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>src_chroma</name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>,

<expr><operator>.</operator><name>dsts</name> <operator>=</operator> <block>{ <expr><block>{ <expr><name>VLC_CODEC_I420</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>conv</name> <operator>=</operator> <name>Copy420_P_to_P</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_NV12</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>.</operator><name>conv</name> <operator>=</operator> <name>Copy420_P_to_SP</name></expr> }</block></expr> }</block></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>src_chroma</name> <operator>=</operator> <name>VLC_CODEC_P010</name></expr>,

<expr><operator>.</operator><name>dsts</name> <operator>=</operator> <block>{ <expr><block>{ <expr><name>VLC_CODEC_I420_10L</name></expr>, <expr><literal type="number">6</literal></expr>, <expr><operator>.</operator><name>conv16</name> <operator>=</operator> <name>Copy420_16_SP_to_P</name></expr> }</block></expr> }</block></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>src_chroma</name> <operator>=</operator> <name>VLC_CODEC_I420_10L</name></expr>,

<expr><operator>.</operator><name>dsts</name> <operator>=</operator> <block>{ <expr><block>{ <expr><name>VLC_CODEC_P010</name></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><operator>.</operator><name>conv16</name> <operator>=</operator> <name>Copy420_16_P_to_SP</name></expr> }</block></expr> }</block></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_CONVS</name></cpp:macro> <cpp:value>ARRAY_SIZE(convs)</cpp:value></cpp:define>

<struct>struct <name>test_size</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_visible_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_visible_height</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>test_size</name></name></type> <name><name>sizes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">65</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">39</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">560</literal></expr>, <expr><literal type="number">369</literal></expr>, <expr><literal type="number">540</literal></expr>, <expr><literal type="number">350</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1274</literal></expr>, <expr><literal type="number">721</literal></expr>, <expr><literal type="number">1200</literal></expr>, <expr><literal type="number">720</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1088</literal></expr>, <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1080</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr>, <expr><literal type="number">3840</literal></expr>, <expr><literal type="number">2160</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

{ 8192, 8192, 8192, 8192 },

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_SIZES</name></cpp:macro> <cpp:value>ARRAY_SIZE(sizes)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>piccheck</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>dsc</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>init</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASSERT_COLOR</name><parameter_list>(<parameter><type><name>good</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { fprintf(stderr, "error: pixel doesn't match @ plane: %d: %d x %d: 0x%X vs 0x%X\n", i, x, y, *(--p), good); assert(!"error: pixel doesn't match"); } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICCHECK</name><parameter_list>(<parameter><type><name>type_u</name></type></parameter>, <parameter><type><name>type_uv</name></type></parameter>, <parameter><type><name>colors_P</name></type></parameter>, <parameter><type><name>color_UV</name></type></parameter>, <parameter><type><name>pitch_den</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { for (int i = 0; i &lt; pic-&gt;i_planes; ++i) { const struct plane_t *plane = &amp;pic-&gt;p[i]; for (int y = 0; y &lt; plane-&gt;i_visible_lines; ++y) { if (pic-&gt;i_planes == 2 &amp;&amp; i == 1) { type_uv *p = (type_uv *)&amp;plane-&gt;p_pixels[y * plane-&gt;i_pitch]; for (int x = 0; x &lt; plane-&gt;i_visible_pitch / 2 / pitch_den; ++x) if (init) *(p++) = color_UV; else if (*(p++) != color_UV) ASSERT_COLOR(color_UV); } else { type_u *p = (type_u *) &amp;plane-&gt;p_pixels[y * plane-&gt;i_pitch]; for (int x = 0; x &lt; plane-&gt;i_visible_pitch / pitch_den; ++x) if (init) *(p++) = colors_P[i]; else if (*(p++) != colors_P[i]) ASSERT_COLOR(colors_P[i]); } } } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>==</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>dsc</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>dsc</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dsc</name><operator>-&gt;</operator><name>pixel_size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>colors_8_P</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x36</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>color_8_UV</name> <init>= <expr><call><name>ntoh16</name><argument_list>(<argument><expr><literal type="number">0xF136</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PICCHECK</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>colors_8_P</name></expr></argument>, <argument><expr><name>color_8_UV</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>mask</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>dsc</name><operator>-&gt;</operator><name>pixel_bits</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>colors_16_P</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x1042</literal> <operator>&amp;</operator><name>mask</name></expr>, <expr><literal type="number">0xF114</literal> <operator>&amp;</operator><name>mask</name></expr>, <expr><literal type="number">0x3645</literal> <operator>&amp;</operator><name>mask</name></expr>}</block></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_P010</name></expr>:</case>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>colors_16_P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_I420_10L</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>color_16_UV</name> <init>= <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>colors_16_P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PICCHECK</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>colors_16_P</name></expr></argument>, <argument><expr><name>color_16_UV</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pic_rsc_destroy</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>pic_new_unaligned</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>dsc</name> <init>= <expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_resource_t</name></type> <name>rsc</name> <init>= <expr><block>{ <expr><operator>.</operator><name>pf_destroy</name> <operator>=</operator> <name>pic_rsc_destroy</name></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dsc</name><operator>-&gt;</operator><name>plane_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>+</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>den</name></name><operator>)</operator> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>h</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>+</operator> <operator>(</operator><name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>den</name></name><operator>)</operator> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>w</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>dsc</name><operator>-&gt;</operator><name>pixel_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>rsc</name><operator>.</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><call><name>picture_NewFromResource</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>alarm</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>COPY_TEST_NOOPTIM</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"WARNING: could not test SSE\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">77</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_CONVS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>test_conv</name></name> <modifier>*</modifier></type><name>conv</name> <init>= <expr><operator>&amp;</operator><name><name>convs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NB_SIZES</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>test_size</name></name> <modifier>*</modifier></type><name>size</name> <init>= <expr><operator>&amp;</operator><name><name>sizes</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>src_dsc</name> <init>=

<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>conv</name><operator>-&gt;</operator><name>src_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src_dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Setup</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name><name>conv</name><operator>-&gt;</operator><name>src_chroma</name></name></expr></argument>,

<argument><expr><name><name>size</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>,

<argument><expr><name><name>size</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>pic_new_unaligned</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>piccheck</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_dsc</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>copy_cache_t</name></type> <name>cache</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>CopyInitCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_width</name></name>

<operator>*</operator> <name><name>src_dsc</name><operator>-&gt;</operator><name>pixel_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>conv</name><operator>-&gt;</operator><name>dsts</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>chroma</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>++</operator><name>f</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>test_dst</name></name> <modifier>*</modifier></type><name>test_dst</name><init>= <expr><operator>&amp;</operator><name><name>conv</name><operator>-&gt;</operator><name>dsts</name><index>[<expr><name>f</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>dst_dsc</name> <init>=

<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>test_dst</name><operator>-&gt;</operator><name>chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst_dsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>test_dst</name><operator>-&gt;</operator><name>chroma</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>picture_NewFromFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name><name>src_planes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>,

<expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>,

<expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>src_pitches</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>,

<expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>,

<expr><name><name>src</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"testing: %u x %u (vis: %u x %u) %4.4s -&gt; %4.4s\n"</literal></expr></argument>,

<argument><expr><name><name>size</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>,

<argument><expr><name><name>size</name><operator>-&gt;</operator><name>i_visible_width</name></name></expr></argument>, <argument><expr><name><name>size</name><operator>-&gt;</operator><name>i_visible_height</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>test_dst</name><operator>-&gt;</operator><name>bitshift</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>test_dst</name><operator>-&gt;</operator><name>conv</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src_planes</name></expr></argument>, <argument><expr><name>src_pitches</name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>test_dst</name><operator>-&gt;</operator><name>conv16</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src_planes</name></expr></argument>, <argument><expr><name>src_pitches</name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>, <argument><expr><name><name>test_dst</name><operator>-&gt;</operator><name>bitshift</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>piccheck</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_dsc</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyCleanCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
