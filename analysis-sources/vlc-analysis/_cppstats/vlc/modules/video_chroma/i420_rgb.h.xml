<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_chroma\i420_rgb.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>SSE2</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name> <argument_list>(<argument><expr><name>MMX</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLAIN</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMAP_RGB2_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bytespp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p_offset</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_base</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_rgb8</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_rgb16</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_rgb32</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>p_rgb_r</name><index>[<expr><name>CMAP_RGB2_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>p_rgb_g</name><index>[<expr><name>CMAP_RGB2_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>p_rgb_b</name><index>[<expr><name>CMAP_RGB2_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>AllocateOrGrow</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_buffer</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>bytespp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>UINT_MAX</name> <operator>/</operator> <name>bytespp</name> <operator>&lt;</operator> <name>i_width</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_realloc</name> <init>= <expr><name>i_width</name> <operator>*</operator> <name>bytespp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pi_buffer</name> <operator>&gt;=</operator> <name>i_realloc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>pp_buffer</name></expr></argument>, <argument><expr><name>i_realloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_realloc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_buffer</name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_buffer</name> <operator>=</operator> <name>i_realloc</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>void</name></type> <name>I420_RGB8</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>I420_RGB16</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>I420_RGB32</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><name>void</name></type> <name>I420_R5G5B5</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>I420_R5G6B5</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>I420_A8R8G8B8</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>I420_R8G8B8A8</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>I420_B8G8R8A8</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>I420_A8B8G8R8</name> <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_Y_PIXEL</name><parameter_list>( <parameter><type><name>BPP</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>p_ybase = p_yuv + *p_y++; *p_buffer++ = p_ybase[RED_OFFSET-((V_RED_COEF*128)&gt;&gt;SHIFT) + i_red] | p_ybase[GREEN_OFFSET-(((U_GREEN_COEF+V_GREEN_COEF)*128)&gt;&gt;SHIFT) + i_green ] | p_ybase[BLUE_OFFSET-((U_BLUE_COEF*128)&gt;&gt;SHIFT) + i_blue];</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_YUV_PIXEL</name><parameter_list>( <parameter><type><name>BPP</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>i_uval = *p_u++; i_vval = *p_v++; i_red = (V_RED_COEF * i_vval) &gt;&gt; SHIFT; i_green = (U_GREEN_COEF * i_uval + V_GREEN_COEF * i_vval) &gt;&gt; SHIFT; i_blue = (U_BLUE_COEF * i_uval) &gt;&gt; SHIFT; CONVERT_Y_PIXEL( BPP )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_Y_PIXEL_DITHER</name><parameter_list>( <parameter><type><name>BPP</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>p_ybase = p_yuv + *p_y++; *p_buffer++ = p_ybase[RED_OFFSET-((V_RED_COEF*128+p_dither[i_real_y])&gt;&gt;SHIFT) + i_red] | p_ybase[GREEN_OFFSET-(((U_GREEN_COEF+V_GREEN_COEF)*128+p_dither[i_real_y])&gt;&gt;SHIFT) + i_green ] | p_ybase[BLUE_OFFSET-((U_BLUE_COEF*128+p_dither[i_real_y])&gt;&gt;SHIFT) + i_blue];</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_YUV_PIXEL_DITHER</name><parameter_list>( <parameter><type><name>BPP</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>i_uval = *p_u++; i_vval = *p_v++; i_red = (V_RED_COEF * i_vval) &gt;&gt; SHIFT; i_green = (U_GREEN_COEF * i_uval + V_GREEN_COEF * i_vval) &gt;&gt; SHIFT; i_blue = (U_BLUE_COEF * i_uval) &gt;&gt; SHIFT; CONVERT_Y_PIXEL_DITHER( BPP )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_4YUV_PIXEL</name><parameter_list>( <parameter><type><name>CHROMA</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>*p_pic++ = p_lookup[ (((*p_y++ + dither10[i_real_y]) &gt;&gt; 4) &lt;&lt; 7) + ((*p_u + dither20[i_real_y]) &gt;&gt; 5) * 9 + ((*p_v + dither20[i_real_y]) &gt;&gt; 5) ]; *p_pic++ = p_lookup[ (((*p_y++ + dither11[i_real_y]) &gt;&gt; 4) &lt;&lt; 7) + ((*p_u++ + dither21[i_real_y]) &gt;&gt; 5) * 9 + ((*p_v++ + dither21[i_real_y]) &gt;&gt; 5) ]; *p_pic++ = p_lookup[ (((*p_y++ + dither12[i_real_y]) &gt;&gt; 4) &lt;&lt; 7) + ((*p_u + dither22[i_real_y]) &gt;&gt; 5) * 9 + ((*p_v + dither22[i_real_y]) &gt;&gt; 5) ]; *p_pic++ = p_lookup[ (((*p_y++ + dither13[i_real_y]) &gt;&gt; 4) &lt;&lt; 7) + ((*p_u++ + dither23[i_real_y]) &gt;&gt; 5) * 9 + ((*p_v++ + dither23[i_real_y]) &gt;&gt; 5) ];</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONVERT_4YUV_PIXEL_SCALE</name><parameter_list>( <parameter><type><name>CHROMA</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>*p_pic++ = p_lookup[ ( ((*p_y + dither10[i_real_y]) &gt;&gt; 4) &lt;&lt; 7) + ((*p_u + dither20[i_real_y]) &gt;&gt; 5) * 9 + ((*p_v + dither20[i_real_y]) &gt;&gt; 5) ]; p_y += *p_offset++; p_u += *p_offset; p_v += *p_offset++; *p_pic++ = p_lookup[ ( ((*p_y + dither11[i_real_y]) &gt;&gt; 4) &lt;&lt; 7) + ((*p_u + dither21[i_real_y]) &gt;&gt; 5) * 9 + ((*p_v + dither21[i_real_y]) &gt;&gt; 5) ]; p_y += *p_offset++; p_u += *p_offset; p_v += *p_offset++; *p_pic++ = p_lookup[ ( ((*p_y + dither12[i_real_y]) &gt;&gt; 4) &lt;&lt; 7) + ((*p_u + dither22[i_real_y]) &gt;&gt; 5) * 9 + ((*p_v + dither22[i_real_y]) &gt;&gt; 5) ]; p_y += *p_offset++; p_u += *p_offset; p_v += *p_offset++; *p_pic++ = p_lookup[ ( ((*p_y + dither13[i_real_y]) &gt;&gt; 4) &lt;&lt; 7) + ((*p_u + dither23[i_real_y]) &gt;&gt; 5) * 9 + ((*p_v + dither23[i_real_y]) &gt;&gt; 5) ]; p_y += *p_offset++; p_u += *p_offset; p_v += *p_offset++;</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_WIDTH</name></cpp:macro> <cpp:value>if( b_hscale ) { p_buffer = p_buffer_start; p_offset = p_offset_start; for( i_x = (p_filter-&gt;fmt_out.video.i_x_offset + p_filter-&gt;fmt_out.video.i_visible_width) / 16; i_x--; ) { *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; *p_pic++ = *p_buffer; p_buffer += *p_offset++; } for( i_x = (p_filter-&gt;fmt_out.video.i_x_offset + p_filter-&gt;fmt_out.video.i_visible_width) &amp; 15; i_x--; ) { *p_pic++ = *p_buffer; p_buffer += *p_offset++; } p_pic = (void*)((uint8_t*)p_pic + i_right_margin ); } else { p_pic = (void*)((uint8_t*)p_pic + p_dest-&gt;p-&gt;i_pitch ); }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_WIDTH_DITHER</name><parameter_list>( <parameter><type><name>CHROMA</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( b_hscale ) { p_offset = p_offset_start; for( i_x = (p_filter-&gt;fmt_out.video.i_x_offset + p_filter-&gt;fmt_out.video.i_visible_width) / 16; i_x--; ) { CONVERT_4YUV_PIXEL_SCALE( CHROMA ) CONVERT_4YUV_PIXEL_SCALE( CHROMA ) CONVERT_4YUV_PIXEL_SCALE( CHROMA ) CONVERT_4YUV_PIXEL_SCALE( CHROMA ) } } else { for( i_x = (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width) / 16; i_x--; ) { CONVERT_4YUV_PIXEL( CHROMA ) CONVERT_4YUV_PIXEL( CHROMA ) CONVERT_4YUV_PIXEL( CHROMA ) CONVERT_4YUV_PIXEL( CHROMA ) } } p_pic = (void*)((uint8_t*)p_pic + i_right_margin ); i_real_y = (i_real_y + 1) &amp; 0x3;</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_HEIGHT</name><parameter_list>( <parameter><type><name>CHROMA</name></type></parameter>, <parameter><type><name>BPP</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( ((CHROMA == 420) || (CHROMA == 422)) &amp;&amp; !(i_y &amp; 0x1) ) { p_u -= i_chroma_width; p_v -= i_chroma_width; } switch( i_vscale ) { case -1: while( (i_scale_count -= (p_filter-&gt;fmt_out.video.i_y_offset + p_filter-&gt;fmt_out.video.i_visible_height)) &gt; 0 ) { p_y += (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width); i_y++; if( (CHROMA == 420) || (CHROMA == 422) ) { if( i_y &amp; 0x1 ) { p_u += i_chroma_width; p_v += i_chroma_width; } } else if( CHROMA == 444 ) { p_u += (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width); p_v += (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width); } } i_scale_count += (p_filter-&gt;fmt_in.video.i_y_offset + p_filter-&gt;fmt_in.video.i_visible_height); break; case 1: while( (i_scale_count -= (p_filter-&gt;fmt_in.video.i_y_offset + p_filter-&gt;fmt_in.video.i_visible_height)) &gt; 0 ) { memcpy( p_pic, p_pic_start, (p_filter-&gt;fmt_out.video.i_x_offset + p_filter-&gt;fmt_out.video.i_visible_width) * BPP ); p_pic = (void*)((uint8_t*)p_pic + p_dest-&gt;p-&gt;i_pitch ); } i_scale_count += (p_filter-&gt;fmt_out.video.i_y_offset + p_filter-&gt;fmt_out.video.i_visible_height); break; }</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_HEIGHT_DITHER</name><parameter_list>( <parameter><type><name>CHROMA</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( ((CHROMA == 420) || (CHROMA == 422)) &amp;&amp; !(i_y &amp; 0x1) ) { p_u -= i_chroma_width; p_v -= i_chroma_width; } switch( i_vscale ) { case -1: while( (i_scale_count -= (p_filter-&gt;fmt_out.video.i_y_offset + p_filter-&gt;fmt_out.video.i_visible_height)) &gt; 0 ) { p_y += (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width); i_y++; if( (CHROMA == 420) || (CHROMA == 422) ) { if( i_y &amp; 0x1 ) { p_u += i_chroma_width; p_v += i_chroma_width; } } else if( CHROMA == 444 ) { p_u += (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width); p_v += (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width); } } i_scale_count += (p_filter-&gt;fmt_in.video.i_y_offset + p_filter-&gt;fmt_in.video.i_visible_height); break; case 1: while( (i_scale_count -= (p_filter-&gt;fmt_in.video.i_y_offset + p_filter-&gt;fmt_in.video.i_visible_height)) &gt; 0 ) { p_y -= (p_filter-&gt;fmt_in.video.i_x_offset + p_filter-&gt;fmt_in.video.i_visible_width); p_u -= i_chroma_width; p_v -= i_chroma_width; SCALE_WIDTH_DITHER( CHROMA ); } i_scale_count += (p_filter-&gt;fmt_out.video.i_y_offset + p_filter-&gt;fmt_out.video.i_visible_height); break; }</cpp:value></cpp:define> 

</unit>
