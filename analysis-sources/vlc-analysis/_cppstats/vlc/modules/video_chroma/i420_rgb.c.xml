<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_chroma\i420_rgb.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"i420_rgb.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"i420_rgb_c.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_RGB8_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_RGB16_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_RGB32_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SetYUV</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Set8bppPalette</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_R5G5B5_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_R5G6B5_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_A8R8G8B8_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_R8G8B8A8_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_B8G8R8A8_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>I420_A8B8G8R8_Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB2PIXEL</name><parameter_list>( <parameter><type><name>p_filter</name></type></parameter>, <parameter><type><name>i_r</name></type></parameter>, <parameter><type><name>i_g</name></type></parameter>, <parameter><type><name>i_b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>((((i_r) &gt;&gt; i_rrshift) &lt;&lt; i_lrshift) | (((i_g) &gt;&gt; i_rgshift) &lt;&lt; i_lgshift) | (((i_b) &gt;&gt; i_rbshift) &lt;&lt; i_lbshift))</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Activate</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Deactivate</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"SSE2 I420,IYUV,YV12 to "</literal>

<literal type="string">"RV15,RV16,RV24,RV32 conversions"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">120</literal></argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_capable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>vlc_CPU_SSE2()</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>MMX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"MMX I420,IYUV,YV12 to "</literal>

<literal type="string">"RV15,RV16,RV24,RV32 conversions"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_capable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>vlc_CPU_MMX()</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"I420,IYUV,YV12 to "</literal>

<literal type="string">"RGB8,RV15,RV16,RV24,RV32 conversions"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">80</literal></argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_CPU_capable</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(true)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>set_callbacks</name><argument_list>( <argument>Activate</argument>, <argument>Deactivate</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Activate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>i_tables_size</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_CPU_capable</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&amp;</operator> <literal type="number">1</literal>

<operator>||</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>==</operator> <literal type="number">0x7c00</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>==</operator> <literal type="number">0x03e0</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>==</operator> <literal type="number">0x001f</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"RGB pixel format is R5G5B5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_R5G5B5_Filter</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>==</operator> <literal type="number">0xf800</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>==</operator> <literal type="number">0x07e0</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>==</operator> <literal type="number">0x001f</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"RGB pixel format is R5G6B5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_R5G6B5_Filter</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>==</operator> <literal type="number">0x00ff0000</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>==</operator> <literal type="number">0x0000ff00</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>==</operator> <literal type="number">0x000000ff</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"RGB pixel format is A8R8G8B8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_A8R8G8B8_Filter</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>==</operator> <literal type="number">0xff000000</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>==</operator> <literal type="number">0x00ff0000</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>==</operator> <literal type="number">0x0000ff00</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"RGB pixel format is R8G8B8A8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_R8G8B8A8_Filter</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>==</operator> <literal type="number">0x0000ff00</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>==</operator> <literal type="number">0x00ff0000</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>==</operator> <literal type="number">0xff000000</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"RGB pixel format is B8G8R8A8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_B8G8R8A8_Filter</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>==</operator> <literal type="number">0x000000ff</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>==</operator> <literal type="number">0x0000ff00</literal>

<operator>&amp;&amp;</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>==</operator> <literal type="number">0x00ff0000</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"RGB pixel format is A8B8G8R8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_A8B8G8R8_Filter</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<break>break;</break>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<case>case <expr><name>VLC_CODEC_RGB8</name></expr>:</case>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_RGB8_Filter</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_RGB16_Filter</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>I420_RGB32_Filter</name></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>VLC_CODEC_RGB8</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bytespp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bytespp</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bytespp</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_offset</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name>

<operator>*</operator> <operator>(</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name>

<operator>==</operator> <name>VLC_CODEC_RGB8</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary> <operator>)</operator>

<operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>int</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_offset</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_RGB8</name></expr>:</case>

<expr_stmt><expr><name>i_tables_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint8_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>PALETTE_TABLE_SIZE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>

<expr_stmt><expr><name>i_tables_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint16_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>RGB_TABLE_SIZE</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default> 

<expr_stmt><expr><name>i_tables_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint32_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>RGB_TABLE_SIZE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_base</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_tables_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_base</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>vfmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vfmt</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vfmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>vfmt</name><operator>.</operator><name>i_bmask</name></name> <operator>||</operator> <operator>!</operator><name><name>vfmt</name><operator>.</operator><name>i_gmask</name></name> <operator>||</operator> <operator>!</operator><name><name>vfmt</name><operator>.</operator><name>i_bmask</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"source did not set proper target RGB masks, using default"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>video_format_FixRgb</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vfmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetYUV</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vfmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>vfmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Deactivate</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>PLAIN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_R5G5B5</argument> )</argument_list></macro>

<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_R5G6B5</argument> )</argument_list></macro>

<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_A8R8G8B8</argument> )</argument_list></macro>

<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_R8G8B8A8</argument> )</argument_list></macro>

<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_B8G8R8A8</argument> )</argument_list></macro>

<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_A8B8G8R8</argument> )</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_RGB8</argument> )</argument_list></macro>

<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_RGB16</argument> )</argument_list></macro>

<macro><name>VIDEO_FILTER_WRAPPER</name><argument_list>( <argument>I420_RGB32</argument> )</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetYUV</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>vfmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_lrshift</name> <init>= <expr><call><name>ctz</name><argument_list>(<argument><expr><name><name>vfmt</name><operator>-&gt;</operator><name>i_rmask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_lgshift</name> <init>= <expr><call><name>ctz</name><argument_list>(<argument><expr><name><name>vfmt</name><operator>-&gt;</operator><name>i_gmask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_lbshift</name> <init>= <expr><call><name>ctz</name><argument_list>(<argument><expr><name><name>vfmt</name><operator>-&gt;</operator><name>i_bmask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_rrshift</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>vfmt</name><operator>-&gt;</operator><name>i_rmask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_rgshift</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>vfmt</name><operator>-&gt;</operator><name>i_gmask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_rbshift</name> <init>= <expr><literal type="number">8</literal> <operator>-</operator> <call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>vfmt</name><operator>-&gt;</operator><name>i_bmask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_RGB8</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb8</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_base</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Set8bppPalette</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb8</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB15</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_RGB16</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_base</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>RED_MARGIN</name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name><index>[<expr><name>RED_OFFSET</name> <operator>-</operator> <name>RED_MARGIN</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name><index>[<expr><name>RED_OFFSET</name> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>GREEN_MARGIN</name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name><index>[<expr><name>GREEN_OFFSET</name> <operator>-</operator> <name>GREEN_MARGIN</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name><index>[<expr><name>GREEN_OFFSET</name> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>BLUE_MARGIN</name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name><index>[<expr><name>BLUE_OFFSET</name> <operator>-</operator> <name>BLUE_MARGIN</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name><index>[<expr><name>BLUE_OFFSET</name> <operator>+</operator> <name>BLUE_MARGIN</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name><index>[<expr><name>RED_OFFSET</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name><index>[<expr><name>GREEN_OFFSET</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb16</name><index>[<expr><name>BLUE_OFFSET</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_RGB32</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_base</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>RED_MARGIN</name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name><index>[<expr><name>RED_OFFSET</name> <operator>-</operator> <name>RED_MARGIN</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name><index>[<expr><name>RED_OFFSET</name> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>GREEN_MARGIN</name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name><index>[<expr><name>GREEN_OFFSET</name> <operator>-</operator> <name>GREEN_MARGIN</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name><index>[<expr><name>GREEN_OFFSET</name> <operator>+</operator> <literal type="number">256</literal> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>BLUE_MARGIN</name></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name><index>[<expr><name>BLUE_OFFSET</name> <operator>-</operator> <name>BLUE_MARGIN</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name><index>[<expr><name>BLUE_OFFSET</name> <operator>+</operator> <name>BLUE_MARGIN</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name><index>[<expr><name>RED_OFFSET</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name><index>[<expr><name>GREEN_OFFSET</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb32</name><index>[<expr><name>BLUE_OFFSET</name> <operator>+</operator> <name>i_index</name></expr>]</index></name> <operator>=</operator> <call><name>RGB2PIXEL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Set8bppPalette</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_rgb8</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLIP</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ((x &lt; 0) ? 0 : (x &gt; 255) ? 255 : x) &lt;&lt; 8 )</cpp:value></cpp:define>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_cmap_r</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb_r</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_cmap_g</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb_g</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_cmap_b</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rgb_b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>p_lookup</name><index>[<expr><name>PALETTE_TABLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>i</name> <operator>+=</operator> <literal type="number">128</literal> <operator>-</operator> <literal type="number">81</literal></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>u</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>v</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>V_RED_COEF</name><operator>*</operator><operator>(</operator><name>v</name><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>SHIFT</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>U_GREEN_COEF</name><operator>*</operator><operator>(</operator><name>u</name><operator>-</operator><literal type="number">128</literal><operator>)</operator>

<operator>+</operator> <name>V_GREEN_COEF</name><operator>*</operator><operator>(</operator><name>v</name><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>SHIFT</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>y</name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>U_BLUE_COEF</name><operator>*</operator><operator>(</operator><name>u</name><operator>-</operator><literal type="number">128</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>SHIFT</name> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>&gt;=</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <literal type="number">0x00</literal>

<operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;=</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>&lt;=</operator> <literal type="number">0xff</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>j</name> <operator>==</operator> <literal type="number">256</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"no colors left in palette"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cmap_r</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>( <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmap_g</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>( <argument><expr><name>g</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmap_b</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <call><name>CLIP</name><argument_list>( <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

printf("+++Alloc RGB cmap %d (%d, %d, %d)\n", j,

p_cmap_r[ j ] &gt;&gt;8, p_cmap_g[ j ] &gt;&gt;8,

p_cmap_b[ j ] &gt;&gt;8);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_lookup</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgb8</name><index>[ <expr><name>i</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_lookup</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgb8</name><index>[ <expr><name>i</name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

p_vout-&gt;i_white_pixel = 0xff;

p_vout-&gt;i_black_pixel = 0x00;

p_vout-&gt;i_gray_pixel = 0x44;

p_vout-&gt;i_blue_pixel = 0x3b;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>i</name> <operator>+=</operator> <literal type="number">128</literal> <operator>-</operator> <literal type="number">81</literal></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>u</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>v</name> <operator>+=</operator> <literal type="number">32</literal></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>u2</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>, <decl><type ref="prev"/><name>dist</name></decl>, <decl><type ref="prev"/><name>mindist</name> <init>= <expr><literal type="number">100000000</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_lookup</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>||</operator> <name>y</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>u2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>u2</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>u2</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>v2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>v2</name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>v2</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>u2</name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator><operator>*</operator><literal type="number">9</literal> <operator>+</operator> <operator>(</operator><name>v2</name><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <operator>(</operator><name>u</name><operator>-</operator><name>u2</name><operator>)</operator><operator>*</operator><operator>(</operator><name>u</name><operator>-</operator><name>u2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>v</name><operator>-</operator><name>v2</name><operator>)</operator><operator>*</operator><operator>(</operator><name>v</name><operator>-</operator><name>v2</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_lookup</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>&amp;&amp;</operator> <name>dist</name> <operator>&lt;</operator> <name>mindist</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_rgb8</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>p_rgb8</name><index>[ <expr><name>j</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mindist</name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>j</name> <operator>-=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_lookup</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>&amp;&amp;</operator> <name>dist</name> <operator>+</operator> <literal type="number">128</literal> <operator>&lt;</operator> <name>mindist</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_rgb8</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>p_rgb8</name><index>[ <expr><name>j</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mindist</name> <operator>=</operator> <name>dist</name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
