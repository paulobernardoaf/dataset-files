<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\visualization\glspectrum.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_opengl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;OpenGL/gl.h&gt;</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;GL/gl.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"visual/fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"visual/window.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_TEXT</name></cpp:macro> <cpp:value>N_("Video width")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_LONGTEXT</name></cpp:macro> <cpp:value>N_("The width of the visualization window, in pixels.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_TEXT</name></cpp:macro> <cpp:value>N_("Video height")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_("The height of the visualization window, in pixels.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"glSpectrum"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"3D OpenGL spectrum visualization"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"visualization"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_AUDIO</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_AUDIO_VISUAL</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"glspectrum-width"</literal></argument>, <argument><literal type="number">400</literal></argument>, <argument>WIDTH_TEXT</argument>, <argument>WIDTH_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"glspectrum-height"</literal></argument>, <argument><literal type="number">300</literal></argument>, <argument>HEIGHT_TEXT</argument>, <argument>HEIGHT_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"glspectrum"</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_prev_nb_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_prev_s16_buff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_rotationAngle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_rotationIncrement</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>window_param</name></type> <name>wind_param</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPECTRUM_WIDTH</name></cpp:macro> <cpp:value>4.f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_BANDS</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATION_INCREMENT</name></cpp:macro> <cpp:value>.1f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAR_DECREMENT</name></cpp:macro> <cpp:value>.075f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATION_MAX</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name></type> <name><name>lightZeroColor</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>, <expr><literal type="number">1.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name></type> <name><name>lightZeroPosition</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0.0f</literal></expr>, <expr><literal type="number">3.0f</literal></expr>, <expr><literal type="number">10.0f</literal></expr>, <expr><literal type="number">0.0f</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>filter_sys_t</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_prev_nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rotationAngle</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rotationIncrement</name></name> <operator>=</operator> <name>ROTATION_INCREMENT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>window_get_param</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wind_param</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vout_window_cfg_t</name></type> <name>cfg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>width</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"glspectrum-width"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>height</name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"glspectrum-height"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>gl</name></name> <operator>=</operator> <call><name>vlc_gl_surface_Create</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>gl</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Thread</name></expr></argument>, <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><name>VLC_THREAD_PRIORITY_VIDEO</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_gl_surface_Destroy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>gl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>(<argument><expr><name>p_in_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>(<argument><expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_in_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initOpenGLScene</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_CULL_FACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_DEPTH_TEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDepthMask</name><argument_list>(<argument><expr><name>GL_TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_PROJECTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glFrustum</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">1.0f</literal></expr></argument>, <argument><expr><literal type="number">0.5f</literal></expr></argument>, <argument><expr><literal type="number">10.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glMatrixMode</name><argument_list>(<argument><expr><name>GL_MODELVIEW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTranslatef</name><argument_list>(<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_LIGHTING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glColorMaterial</name><argument_list>(<argument><expr><name>GL_FRONT</name></expr></argument>, <argument><expr><name>GL_AMBIENT_AND_DIFFUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_COLOR_MATERIAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_LIGHT0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glLightfv</name><argument_list>(<argument><expr><name>GL_LIGHT0</name></expr></argument>, <argument><expr><name>GL_DIFFUSE</name></expr></argument>, <argument><expr><name>lightZeroColor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glLightfv</name><argument_list>(<argument><expr><name>GL_LIGHT0</name></expr></argument>, <argument><expr><name>GL_POSITION</name></expr></argument>, <argument><expr><name>lightZeroPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glShadeModel</name><argument_list>(<argument><expr><name>GL_SMOOTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnable</name><argument_list>(<argument><expr><name>GL_BLEND</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glBlendFunc</name><argument_list>(<argument><expr><name>GL_SRC_ALPHA</name></expr></argument>, <argument><expr><name>GL_ONE_MINUS_SRC_ALPHA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawBar</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>w</name> <init>= <expr><name>SPECTRUM_WIDTH</name> <operator>/</operator> <name>NB_BANDS</name> <operator>-</operator> <literal type="number">0.05f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name></type> <name><name>vertexCoords</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>w</name></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>, <expr><name>w</name></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><name>w</name></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>, <expr><name>w</name></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>,

<expr><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>, <expr><name>w</name></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>, <expr><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>w</name></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>w</name></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><name>w</name></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><operator>-</operator><name>w</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>GLfloat</name></type> <name><name>normals</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><operator>-</operator><literal type="number">1.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

<expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>, <expr><literal type="number">1.f</literal></expr>, <expr><literal type="number">0.f</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>glVertexPointer</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vertexCoords</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glNormalPointer</name><argument_list>(<argument><expr><name>GL_FLOAT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>normals</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDrawArrays</name><argument_list>(<argument><expr><name>GL_TRIANGLES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setBarColor</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>f_height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BAR_MAX_HEIGHT</name></cpp:macro> <cpp:value>4.2f</cpp:value></cpp:define>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>-</operator><literal type="number">1.f</literal> <operator>+</operator> <literal type="number">2</literal> <operator>/</operator> <name>BAR_MAX_HEIGHT</name> <operator>*</operator> <name>f_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">2.f</literal> <operator>-</operator> <literal type="number">2</literal> <operator>/</operator> <name>BAR_MAX_HEIGHT</name> <operator>*</operator> <name>f_height</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BAR_MAX_HEIGHT</name></cpp:undef>

<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><name>r</name> <operator>&gt;</operator> <literal type="number">1.f</literal></expr> ?</condition><then> <expr><literal type="number">1.f</literal></expr> </then><else>: <expr><name>r</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><name>b</name> <operator>&gt;</operator> <literal type="number">1.f</literal></expr> ?</condition><then> <expr><literal type="number">1.f</literal></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <ternary><condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr> ?</condition><then> <expr><literal type="number">0.f</literal></expr> </then><else>: <expr><name>r</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">0.f</literal></expr> ?</condition><then> <expr><literal type="number">0.f</literal></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glColor4f</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawBars</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>heights</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>glPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTranslatef</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">2.f</literal></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glEnableClientState</name><argument_list>(<argument><expr><name>GL_NORMAL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>w</name> <init>= <expr><name>SPECTRUM_WIDTH</name> <operator>/</operator> <name>NB_BANDS</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_BANDS</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>glPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glScalef</name><argument_list>(<argument><expr><literal type="number">1.f</literal></expr></argument>, <argument><expr><name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setBarColor</name><argument_list>(<argument><expr><name><name>heights</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawBar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glTranslatef</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_VERTEX_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glDisableClientState</name><argument_list>(<argument><expr><name>GL_NORMAL_ARRAY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_gl_t</name> <modifier>*</modifier></type><name>gl</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>gl</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_gl_MakeCurrent</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Can't attach gl context"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>initOpenGLScene</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_gl_ReleaseCurrent</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>height</name><index>[<expr><name>NB_BANDS</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_FifoGet</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>win_width</name></decl>, <decl><type ref="prev"/><name>win_height</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_gl_MakeCurrent</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_gl_surface_CheckSize</name><argument_list>(<argument><expr><name>gl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_width</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>win_height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>glViewport</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>win_width</name></expr></argument>, <argument><expr><name>win_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name><name>xscale</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">8</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">27</literal></expr>,

<expr><literal type="number">36</literal></expr>,<expr><literal type="number">47</literal></expr>,<expr><literal type="number">62</literal></expr>,<expr><literal type="number">82</literal></expr>,<expr><literal type="number">107</literal></expr>,<expr><literal type="number">141</literal></expr>,<expr><literal type="number">184</literal></expr>,<expr><literal type="number">255</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>fft_state</name> <modifier>*</modifier></type><name>p_state</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>DEFINE_WIND_CONTEXT</name><argument_list>(<argument><expr><name>wind_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>p_output</name><index>[<expr><name>FFT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>p_buffer1</name><index>[<expr><name>FFT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>p_dest</name><index>[<expr><name>FFT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>p_buffl</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_buffs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>p_s16_buff</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"no samples yet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>release</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_prev_nb_samples</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>release</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_prev_nb_samples</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_buffs</name> <operator>=</operator> <name>p_s16_buff</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_prev_s16_buff</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</init> <condition><expr><name>i</name><operator>--</operator></expr>;</condition><incr/>)</control>

<block>{<block_content>

<union>union <block>{<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>}</block> <decl><name>u</name></decl>;</union>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>f</name></name> <operator>=</operator> <operator>*</operator><name>p_buffl</name> <operator>+</operator> <literal type="number">384.f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&gt;</operator> <literal type="number">0x43c07fff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_buffs</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&lt;</operator> <literal type="number">0x43bf8000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_buffs</name> <operator>=</operator> <operator>-</operator><literal type="number">32768</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_buffs</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>i</name></name> <operator>-</operator> <literal type="number">0x43c00000</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_buffl</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p_buffs</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_state</name> <operator>=</operator> <call><name>visual_fft_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_state</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>,<argument><expr><literal type="string">"unable to initialize FFT transform"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>release</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>window_init</name><argument_list>(<argument><expr><name>FFT_BUFFER_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>wind_param</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wind_ctx</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>,<argument><expr><literal type="string">"unable to initialize FFT window"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>release</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_buffs</name> <operator>=</operator> <name>p_s16_buff</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_buffer1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>p_buffs</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_buffs</name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_buffs</name> <operator>&gt;=</operator> <operator>&amp;</operator><name><name>p_s16_buff</name><index>[<expr><name><name>block</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channels</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_buffs</name> <operator>=</operator> <name>p_s16_buff</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>window_scale_in_place</name> <argument_list>(<argument><expr><name>p_buffer1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wind_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fft_perform</name> <argument_list>(<argument><expr><name>p_buffer1</name></expr></argument>, <argument><expr><name>p_output</name></expr></argument>, <argument><expr><name>p_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>FFT_BUFFER_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dest</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>^</operator> <literal type="number">16</literal><operator>)</operator>

<operator>/</operator> <operator>(</operator><operator>(</operator><name>FFT_BUFFER_SIZE</name> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">32768</literal><operator>)</operator> <operator>^</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_BANDS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>BAR_DECREMENT</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>xscale</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>xscale</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_dest</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>y</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>p_dest</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>float</name></type> <name>new_height</name> <init>= <expr><ternary><condition><expr><name>y</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>logf</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.4f</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>new_height</name> <operator>&gt;</operator> <name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr>

?</condition><then> <expr><name>new_height</name></expr> </then><else>: <expr><name><name>height</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rotationAngle</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_rotationIncrement</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rotationAngle</name></name> <operator>&lt;=</operator> <operator>-</operator><name>ROTATION_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rotationIncrement</name></name> <operator>=</operator> <name>ROTATION_INCREMENT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rotationAngle</name></name> <operator>&gt;=</operator> <name>ROTATION_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rotationIncrement</name></name> <operator>=</operator> <operator>-</operator><name>ROTATION_INCREMENT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>glClear</name><argument_list>(<argument><expr><name>GL_COLOR_BUFFER_BIT</name> <operator>|</operator> <name>GL_DEPTH_BUFFER_BIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPushMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glRotatef</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rotationAngle</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawBars</name><argument_list>(<argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>glPopMatrix</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_tick_wait</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <operator>(</operator><name><name>block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_gl_Swap</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>release</name>:</label>

<expr_stmt><expr><call><name>window_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wind_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fft_close</name><argument_list>(<argument><expr><name>p_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_gl_ReleaseCurrent</name><argument_list>(<argument><expr><name>gl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>(<argument><expr><name>canc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
