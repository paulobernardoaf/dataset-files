<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\visualization\cyclic_buffer.h"><decl_stmt><decl><type><name>class</name></type> <name>block_holder</name>

<block>{<block_content>

<label><name>public</name>:</label>

<decl_stmt><decl><type><name>float</name></type> <name><name>data</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl>;</decl_stmt> 

<macro><name>block_holder</name><argument_list>()</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>pts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CYCLIC_BUFFER_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<decl_stmt><decl><type><name>class</name></type> <name>cyclic_block_queue</name>

<block>{<block_content>

<decl_stmt><decl><type><name>block_holder</name></type> <name><name>cycl_buffer</name><index>[<expr><name>CYCLIC_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>consumer_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>insertion_pos</name></decl>;</decl_stmt>

<label><name>public</name>:</label>

<macro><name>cyclic_block_queue</name><argument_list>()</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><name>consumer_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>insertion_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block>

<function><type><name>block_holder</name><modifier>*</modifier></type> <name>consume</name><parameter_list>()</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>cur_machine_time</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>steps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(

<expr><operator>(</operator><name><name>cycl_buffer</name><index>[<expr><name>consumer_pos</name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>&lt;</operator> <name>cur_machine_time</name><operator>)</operator>

<operator>&amp;&amp;</operator>

<operator>(</operator><name>steps</name><operator>++</operator> <operator>&lt;</operator> <name>CYCLIC_BUFFER_SIZE</name><operator>)</operator></expr>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>consumer_pos</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>consumer_pos</name> <operator>==</operator> <name>CYCLIC_BUFFER_SIZE</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>consumer_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><operator>&amp;</operator><name><name>cycl_buffer</name><index>[<expr><name>consumer_pos</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>block_holder</name><modifier>*</modifier></type> <name>get_insertion_object</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>insertion_pos</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>insertion_pos</name> <operator>==</operator> <name>CYCLIC_BUFFER_SIZE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>insertion_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>cycl_buffer</name><index>[<expr><name>insertion_pos</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>reset</name><parameter_list>()</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CYCLIC_BUFFER_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>cycl_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pts</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>consumer_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>insertion_pos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CYCLIC_BUFFER_SIZE</name></cpp:undef>

</unit>
