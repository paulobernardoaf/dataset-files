<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\visualization\visual\visual.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"visual.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"window_presets.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELIST_TEXT</name></cpp:macro> <cpp:value>N_( "Effects list" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ELIST_LONGTEXT</name></cpp:macro> <cpp:value>N_( "A list of visual effect, separated by commas.\n" "Current effects include: dummy, scope, spectrum, ""spectrometer and vuMeter." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_TEXT</name></cpp:macro> <cpp:value>N_( "Video width" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The width of the effects video window, in pixels." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_TEXT</name></cpp:macro> <cpp:value>N_( "Video height" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The height of the effects video window, in pixels." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_WINDOW_TEXT</name></cpp:macro> <cpp:value>N_( "FFT window" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFT_WINDOW_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The type of FFT window to use for spectrum-based visualizations." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KAISER_PARAMETER_TEXT</name></cpp:macro> <cpp:value>N_( "Kaiser window parameter" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KAISER_PARAMETER_LONGTEXT</name></cpp:macro> <cpp:value>N_( "The parameter alpha for the Kaiser window. Increasing alpha " "increases the main-lobe width and decreases the side-lobe amplitude." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NBBANDS_TEXT</name></cpp:macro> <cpp:value>N_( "Show 80 bands instead of 20" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPNBBANDS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "More bands for the spectrometer: 80 if enabled, else 20." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEPAR_TEXT</name></cpp:macro> <cpp:value>N_( "Number of blank pixels between bands.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMP_TEXT</name></cpp:macro> <cpp:value>N_( "Amplification" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMP_LONGTEXT</name></cpp:macro> <cpp:value>N_( "This is a coefficient that modifies the height of the bands.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEAKS_TEXT</name></cpp:macro> <cpp:value>N_( "Draw peaks in the analyzer" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIG_TEXT</name></cpp:macro> <cpp:value>N_( "Enable original graphic spectrum" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORIG_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enable the \"flat\" spectrum analyzer in the spectrometer." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BANDS_TEXT</name></cpp:macro> <cpp:value>N_( "Draw bands in the spectrometer" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_TEXT</name></cpp:macro> <cpp:value>N_( "Draw the base of the bands" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADIUS_TEXT</name></cpp:macro> <cpp:value>N_( "Base pixel radius" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RADIUS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Defines radius size in pixels, of base of bands(beginning)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSECT_TEXT</name></cpp:macro> <cpp:value>N_( "Spectral sections" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSECT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Determines how many sections of spectrum will exist." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEAK_HEIGHT_TEXT</name></cpp:macro> <cpp:value>N_( "Peak height" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEAK_HEIGHT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Total pixel height of the peak items." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEAK_WIDTH_TEXT</name></cpp:macro> <cpp:value>N_( "Peak extra width" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PEAK_WIDTH_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Additions or subtractions of pixels on the peak width." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR1_TEXT</name></cpp:macro> <cpp:value>N_( "V-plane color" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR1_LONGTEXT</name></cpp:macro> <cpp:value>N_( "YUV-Color cube shifting across the V-plane ( 0 - 127 )." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOUT_WIDTH</name></cpp:macro> <cpp:value>800</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VOUT_HEIGHT</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Visualizer"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_AUDIO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_AUDIO_VISUAL</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Visualizer filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_( <literal type="string">"General"</literal>)</argument> , <argument>NULL</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"effect-list"</literal></argument>, <argument><literal type="string">"spectrum"</literal></argument>,

<argument>ELIST_TEXT</argument>, <argument>ELIST_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"effect-width"</literal></argument>,<argument>VOUT_WIDTH</argument>,

<argument>WIDTH_TEXT</argument>, <argument>WIDTH_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"effect-height"</literal></argument> , <argument>VOUT_HEIGHT</argument> ,

<argument>HEIGHT_TEXT</argument>, <argument>HEIGHT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"effect-fft-window"</literal></argument>, <argument><literal type="string">"flat"</literal></argument>,

<argument>FFT_WINDOW_TEXT</argument>, <argument>FFT_WINDOW_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>window_list</argument>, <argument>window_list_text</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"effect-kaiser-param"</literal></argument>, <argument><literal type="number">3.0f</literal></argument>,

<argument>KAISER_PARAMETER_TEXT</argument>, <argument>KAISER_PARAMETER_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Spectrum analyser"</literal>)</argument> , <argument>NULL</argument> )</argument_list></macro>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"visual-nbbands"</literal></argument> )</argument_list></macro> 

<expr_stmt><expr><call><name>add_bool</name><argument_list>(<argument><expr><literal type="string">"visual-80-bands"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>NBBANDS_TEXT</name></expr></argument>, <argument><expr><name>NBBANDS_TEXT</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"visual-separ"</literal></argument> )</argument_list></macro> 

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"visual-amp"</literal></argument> )</argument_list></macro> 

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"visual-peaks"</literal></argument>, <argument>true</argument>,

<argument>PEAKS_TEXT</argument>, <argument>PEAKS_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_section</name><argument_list>( <argument>N_(<literal type="string">"Spectrometer"</literal>)</argument> , <argument>NULL</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"spect-show-original"</literal></argument>, <argument>false</argument>,

<argument>ORIG_TEXT</argument>, <argument>ORIG_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"spect-show-base"</literal></argument>, <argument>true</argument>,

<argument>BASE_TEXT</argument>, <argument>BASE_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"spect-radius"</literal></argument>, <argument><literal type="number">42</literal></argument>,

<argument>RADIUS_TEXT</argument>, <argument>RADIUS_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>(<argument><literal type="string">"spect-sections"</literal></argument>, <argument><literal type="number">3</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>INT_MAX</argument>,

<argument>SSECT_TEXT</argument>, <argument>SSECT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"spect-color"</literal></argument>, <argument><literal type="number">80</literal></argument>,

<argument>COLOR1_TEXT</argument>, <argument>COLOR1_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>add_bool</name><argument_list>(<argument><expr><literal type="string">"spect-show-bands"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>BANDS_TEXT</name></expr></argument>, <argument><expr><name>BANDS_TEXT</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"spect-nbbands"</literal></argument> )</argument_list></macro> 

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"spect-80-bands"</literal></argument>, <argument>true</argument>,

<argument>NBBANDS_TEXT</argument>, <argument>NBBANDS_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"spect-separ"</literal></argument>, <argument><literal type="number">1</literal></argument>,

<argument>SEPAR_TEXT</argument>, <argument>SEPAR_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"spect-amp"</literal></argument>, <argument><literal type="number">8</literal></argument>,

<argument>AMP_TEXT</argument>, <argument>AMP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"spect-show-peaks"</literal></argument>, <argument>true</argument>,

<argument>PEAKS_TEXT</argument>, <argument>PEAKS_TEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"spect-peak-width"</literal></argument>, <argument><literal type="number">61</literal></argument>,

<argument>PEAK_WIDTH_TEXT</argument>, <argument>PEAK_WIDTH_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"spect-peak-height"</literal></argument>, <argument><literal type="number">1</literal></argument>,

<argument>PEAK_HEIGHT_TEXT</argument>, <argument>PEAK_HEIGHT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"visualization"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"visualizer"</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>block_fifo_t</name> <modifier>*</modifier></type><name>fifo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vout_thread_t</name> <modifier>*</modifier></type><name>p_vout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>visual_effect_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_effect</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_effects</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_parser</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name> <argument_list>(<argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> , <argument><expr><literal type="string">"effect-width"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> , <argument><expr><literal type="string">"effect-width"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>width</name> <operator>&lt;</operator> <literal type="number">532</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">532</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>width</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>height</name> <operator>&lt;</operator> <literal type="number">400</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <literal type="number">400</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>height</name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_effect</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>effect</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <name>psz_effects</name> <operator>=</operator> <call><name>var_CreateGetString</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"effect-list"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>psz_parser</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_parser</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>visual_effect_t</name> <modifier>*</modifier></type><name>p_effect</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_effect</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>visual_effect_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_effect</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name> <operator>=</operator> <call><name>aout_FormatNbChannels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_idx_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_idx_right</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_effect</name><operator>-&gt;</operator><name>i_nb_chans</name></name><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>pf_run</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>effectc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><name><name>effectv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>effectv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>pf_run</name></name> <operator>=</operator> <name><name>effectv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>run_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_effect</name><operator>-&gt;</operator><name>pf_free</name></name> <operator>=</operator> <name><name>effectv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>free_cb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_parser</name> <operator>+=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>effectv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_effect</name><operator>-&gt;</operator><name>pf_run</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_parser</name> <operator>==</operator> <literal type="char">'{'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_eoa</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_parser</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>psz_eoa</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">'}'</literal></expr></argument>)</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"unable to parse effect list. Aborting"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_effect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_effect</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>effect</name></name></expr></argument>, <argument><expr><name>p_effect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"unknown visual effect: %s"</literal></expr></argument>, <argument><expr><name>psz_parser</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_effect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_parser</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_parser</name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_effects</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_effect</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"no effects found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name> <init>= <expr><block>{

<expr><operator>.</operator><name>i_chroma</name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>,

<expr><operator>.</operator><name>i_width</name> <operator>=</operator> <name>width</name></expr>,

<expr><operator>.</operator><name>i_height</name> <operator>=</operator> <name>height</name></expr>,

<expr><operator>.</operator><name>i_visible_width</name> <operator>=</operator> <name>width</name></expr>,

<expr><operator>.</operator><name>i_visible_height</name> <operator>=</operator> <name>height</name></expr>,

<expr><operator>.</operator><name>i_sar_num</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>i_sar_den</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>transfer</name> <operator>=</operator> <name>TRANSFER_FUNC_SRGB</name></expr>,

<expr><operator>.</operator><name>primaries</name> <operator>=</operator> <name>COLOR_PRIMARIES_SRGB</name></expr>,

<expr><operator>.</operator><name>space</name> <operator>=</operator> <name>COLOR_SPACE_SRGB</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>=</operator> <call><name>aout_filter_GetVout</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vout</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"no suitable vout module"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name> <operator>=</operator> <call><name>block_FifoNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vout_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_clone</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Thread</name></expr></argument>, <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><name>VLC_THREAD_PRIORITY_VIDEO</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name>VLC_CODEC_FL32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>audio</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_audio_filter</name></name> <operator>=</operator> <name>DoWork</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_effect</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>effect</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>effect</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoRealWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name> <init>= <expr><call><name>vout_GetPicture</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>b_progressive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_outpic</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_in_buf</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x80</literal></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_effect</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_effect</name></cpp:macro> <cpp:value>p_sys-&gt;effect[i]</cpp:value></cpp:define>

<if_stmt><if>if<condition>( <expr><name><name>p_effect</name><operator>-&gt;</operator><name>pf_run</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>p_effect</name><operator>-&gt;</operator><name>pf_run</name></name><argument_list>( <argument><expr><name>p_effect</name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>p_in_buf</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>p_effect</name></cpp:undef>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name><name>p_in_buf</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <operator>(</operator><name><name>p_in_buf</name><operator>-&gt;</operator><name>i_length</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_PutPicture</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_in_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Thread</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_FifoGet</name><argument_list>( <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>canc</name> <init>= <expr><call><name>vlc_savecancel</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><call><name>DoRealWork</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_restorecancel</name><argument_list>( <argument><expr><name>canc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>DoWork</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_in_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name>p_in_buf</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>block</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_FifoPut</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_in_buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vout_FlushAll</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type> <name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_cancel</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_FifoRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fifo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vout_Close</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_vout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_effect</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_effect</name></cpp:macro> <cpp:value>(p_sys-&gt;effect[i])</cpp:value></cpp:define>

<expr_stmt><expr><call><name><name>p_effect</name><operator>-&gt;</operator><name>pf_free</name></name><argument_list>( <argument><expr><name><name>p_effect</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_effect</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>p_effect</name></cpp:undef>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>effect</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
