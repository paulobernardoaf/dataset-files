<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\opencv_wrapper.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_modules.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opencv2/core/core_c.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;opencv2/core/types_c.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name><modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseImages</name><parameter_list>( <parameter><decl><type><name>filter_t</name><modifier>*</modifier></type> <name>p_filter</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>VlcPictureToIplImage</name><parameter_list>( <parameter><decl><type><name>filter_t</name><modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>p_in</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>chroma_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"input"</literal></expr>, <expr><literal type="string">"I420"</literal></expr>, <expr><literal type="string">"RGB32"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>chroma_list_text</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Use input chroma unaltered"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"I420 - first plane is grayscale"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"RGB32"</literal></argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>output_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><literal type="string">"input"</literal></expr>, <expr><literal type="string">"processed"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>output_list_text</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Don't display any video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Display the input video"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Display the processed video"</literal></argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"OpenCV video filter wrapper"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"OpenCV"</literal> )</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"opencv_wrapper"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"opencv-scale"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">0.1</literal></argument>, <argument><literal type="number">2.0</literal></argument>,

<argument>N_(<literal type="string">"Scale factor (0.1-2.0)"</literal>)</argument>,

<argument>N_(<literal type="string">"Amount by which to scale the picture before sending it to the internal OpenCV filter"</literal>)</argument>,

<argument>false</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>add_string</name><argument_list>( <argument><expr><literal type="string">"opencv-chroma"</literal></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"OpenCV filter chroma"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Chroma to convert picture to before sending it to the internal OpenCV filter"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>change_string_list</name><argument_list>( <argument>chroma_list</argument>, <argument>chroma_list_text</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>add_string</name><argument_list>( <argument><expr><literal type="string">"opencv-output"</literal></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Wrapper filter output"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Determines what (if any) video is displayed by the wrapper filter"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>change_string_list</name><argument_list>( <argument>output_list</argument>, <argument>output_list_text</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>add_string</name><argument_list>( <argument><expr><literal type="string">"opencv-filter-name"</literal></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"OpenCV internal filter name"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Name of internal OpenCV plugin filter to use"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_module_end</name> <argument_list>()</argument_list></call>

enum <name>wrapper_output_t</name>

<block>{

<expr><name>NONE</name></expr>,

<expr><name>VINPUT</name></expr>,

<expr><name>PROCESSED</name></expr>

}</block></expr>;</expr_stmt>

<enum>enum <name>internal_chroma_t</name>

<block>{

<decl><name>CINPUT</name></decl>,

<decl><name>GREY</name></decl>,

<decl><name>RGB</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cv_image_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_proc_image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_to_be_freed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_wrapper_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_internal_chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IplImage</name> <modifier>*</modifier></type><name><name>p_cv_image</name><index>[<expr><name>VOUT_MAX_PLANES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_opencv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_inner_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name></type> <name>hacked_pic</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name><modifier>*</modifier></type> <name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_chroma</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_output</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name></name> <operator>=</operator> <call><name>vlc_object_create</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>filter_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name></name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_inner_name</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"opencv-filter-name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_inner_name</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name><operator>-&gt;</operator><name>p_module</name></name> <operator>=</operator>

<call><name>module_need</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name></name></expr></argument>,

<argument><expr><literal type="string">"opencv internal filter"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_inner_name</name></name></expr></argument>,

<argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name><operator>-&gt;</operator><name>p_module</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't open internal opencv filter: %s"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_inner_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_inner_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMOD</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>=</operator> <call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VOUT_MAX_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cv_image</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_to_be_freed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cv_image_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_chroma</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"opencv-chroma"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_chroma</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"configuration variable %s empty, using 'grey'"</literal></expr></argument>,

<argument><expr><literal type="string">"opencv-chroma"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>=</operator> <name>GREY</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_chroma</name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>=</operator> <name>CINPUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_chroma</name></expr></argument>, <argument><expr><literal type="string">"I420"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>=</operator> <name>GREY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_chroma</name></expr></argument>, <argument><expr><literal type="string">"RGB32"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>=</operator> <name>RGB</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"no valid opencv-chroma provided, using 'grey'"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>=</operator> <name>GREY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_output</name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"opencv-output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_output</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"configuration variable %s empty, using 'input'"</literal></expr></argument>,

<argument><expr><literal type="string">"opencv-output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wrapper_output</name></name> <operator>=</operator> <name>VINPUT</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_output</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wrapper_output</name></name> <operator>=</operator> <name>NONE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_output</name></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wrapper_output</name></name> <operator>=</operator> <name>VINPUT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_output</name></expr></argument>, <argument><expr><literal type="string">"processed"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wrapper_output</name></name> <operator>=</operator> <name>PROCESSED</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"no valid opencv-output provided, using 'input'"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wrapper_output</name></name> <operator>=</operator> <name>VINPUT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_scale</name></name> <operator>=</operator>

<call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"opencv-scale"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Configuration: opencv-scale: %f, opencv-chroma: %d, "</literal>

<literal type="string">"opencv-output: %d, opencv-filter %s"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_scale</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wrapper_output</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>psz_inner_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"opencv_wrapper successfully started"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name><modifier>*</modifier></type> <name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ReleaseImages</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>module_unneed</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name><operator>-&gt;</operator><name>p_module</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_object_delete</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReleaseImages</name><parameter_list>( <parameter><decl><type><name>filter_t</name><modifier>*</modifier></type> <name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VOUT_MAX_PLANES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cv_image</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cvReleaseImageHeader</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_cv_image</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cv_image</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cv_image_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_to_be_freed</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_to_be_freed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_to_be_freed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"images released"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>VlcPictureToIplImage</name><parameter_list>( <parameter><decl><type><name>filter_t</name><modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>p_in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name> <init>= <expr><name><name>p_in</name><operator>-&gt;</operator><name>i_planes</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>CvSize</name></type> <name>sz</name> <init>= <expr><call><name>cvSize</name><argument_list>(<argument><expr><name><name>p_in</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_in</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>video_format_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_scale</name></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>!=</operator> <name>CINPUT</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>fmt_out</name> <operator>=</operator> <name><name>p_in</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_in</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_scale</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_in</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_height</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_scale</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>==</operator> <name>RGB</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>==</operator> <name>GREY</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name>VLC_CODEC_I420</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name> <operator>=</operator> <call><name>image_Convert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p_in</name><operator>-&gt;</operator><name>format</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't convert (unsupported formats?), aborting..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name></expr></argument>, <argument><expr><name>p_in</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_to_be_freed</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>planes</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cv_image_size</name></name> <operator>=</operator> <name>planes</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <call><name>cvSize</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>/</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cv_image</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cvCreateImageHeader</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>IPL_DEPTH_8U</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cvSetData</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_cv_image</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pixels</name><operator>)</operator></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hacked_pic</name><operator>.</operator><name>i_planes</name></name> <operator>=</operator> <name>planes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>hacked_pic</name><operator>.</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_chroma</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"VlcPictureToIplImageRgb() completed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name><modifier>*</modifier></type> <name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>p_outpic</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_outpic</name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"couldn't get a p_outpic!"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wrapper_output</name></name> <operator>==</operator> <name>VINPUT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VlcPictureToIplImage</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name><operator>-&gt;</operator><name>pf_video_filter</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_opencv</name></name></expr></argument>, <argument><expr><operator>(</operator><name>picture_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_cv_image</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wrapper_output</name></name> <operator>==</operator> <name>PROCESSED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>!=</operator> <name>CINPUT</name><operator>)</operator></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name><modifier>*</modifier></type> <name>p_outpic_tmp</name> <init>= <expr><call><name>image_Convert</name><argument_list>(

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name><operator>-&gt;</operator><name>format</name></name><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_outpic_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_outpic_tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_internal_chroma</name></name> <operator>==</operator> <name>CINPUT</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_proc_image</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ReleaseImages</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Filter() done"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_wrapper_output</name></name> <operator>!=</operator> <name>NONE</name></expr> )</condition> <block>{<block_content>

<return>return <expr><name>p_outpic</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
