<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\extract.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ExtractCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>make_projection_matrix</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_custom_from_yuv</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>get_custom_from_packedyuv422</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPONENT_TEXT</name></cpp:macro> <cpp:value>N_("RGB component to extract")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COMPONENT_LONGTEXT</name></cpp:macro> <cpp:value>N_("RGB component to extract. 0 for Red, 1 for Green and 2 for Blue.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_PREFIX</name></cpp:macro> <cpp:value>"extract-"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_component_values</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xFF0000</literal></expr>, <expr><literal type="number">0x00FF00</literal></expr>, <expr><literal type="number">0x0000FF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_component_descriptions</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Red"</literal></expr>, <expr><literal type="string">"Green"</literal></expr>, <expr><literal type="string">"Blue"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Extract RGB component video filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Extract"</literal> )</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"extract"</literal></argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"component"</literal></argument>, <argument><literal type="number">0xFF0000</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0xFFFFFF</literal></argument>,

<argument>COMPONENT_TEXT</argument>, <argument>COMPONENT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_component_values</argument>, <argument>ppsz_component_descriptions</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"component"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{ <decl><name>RED</name><init>=<expr><literal type="number">0xFF0000</literal></expr></init></decl>, <decl><name>GREEN</name><init>=<expr><literal type="number">0x00FF00</literal></expr></init></decl>, <decl><name>BLUE</name><init>=<expr><literal type="number">0x0000FF</literal></expr></init></decl> }</block>;</enum>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>projection_matrix</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_color</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I420_10L</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I420_10B</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_J420</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I422</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_J422</name></expr>:</case>

<macro><name>CASE_PACKED_YUV_422</name></macro>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>projection_matrix</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>int</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>projection_matrix</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_color</name></name> <operator>=</operator> <call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><name>FILTER_PREFIX</name> <literal type="string">"component"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_projection_matrix</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_color</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>projection_matrix</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"component"</literal></expr></argument>,

<argument><expr><name>ExtractCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"component"</literal></expr></argument>, <argument><expr><name>ExtractCallback</name></expr></argument>,

<argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>projection_matrix</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I420_10L</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I420_10B</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_J420</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_I422</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_J422</name></expr>:</case>

<expr_stmt><expr><call><name>get_custom_from_yuv</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>Y_PLANE</name></expr></argument>, <argument><expr><name>U_PLANE</name></expr></argument>, <argument><expr><name>V_PLANE</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>projection_matrix</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<decl_stmt><decl><type><name>CASE_PACKED_YUV_422</name></type>

<name>get_custom_from_packedyuv422</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>projection_matrix</name></name></expr></argument> )</argument_list></decl>;</decl_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U8</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V8</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>U10</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V10</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmult</name><parameter_list>( <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>b</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>res</name><index>[ <expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>res</name><index>[ <expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr> ]</index></name> <operator>+=</operator> <name><name>a</name><index>[ <expr><name>i</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>k</name></expr> ]</index></name> <operator>*</operator> <name><name>b</name><index>[ <expr><name>k</name><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <name>j</name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>make_projection_matrix</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name><name>left_matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><literal type="number">76.24500</literal></expr>, <expr><literal type="number">149.68500</literal></expr>, <expr><literal type="number">29.07000</literal></expr>,

<expr><operator>-</operator><literal type="number">43.02765</literal></expr>, <expr><operator>-</operator><literal type="number">84.47235</literal></expr>, <expr><literal type="number">127.50000</literal></expr>,

<expr><literal type="number">127.50000</literal></expr>, <expr><operator>-</operator><literal type="number">106.76534</literal></expr>, <expr><operator>-</operator><literal type="number">20.73466</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>right_matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><literal type="number">257.00392</literal></expr>, <expr><literal type="number">0.00000</literal></expr>, <expr><literal type="number">360.31950</literal></expr>,

<expr><literal type="number">257.00392</literal></expr>, <expr><operator>-</operator><literal type="number">88.44438</literal></expr>, <expr><operator>-</operator><literal type="number">183.53583</literal></expr>,

<expr><literal type="number">257.00392</literal></expr>, <expr><literal type="number">455.41095</literal></expr>, <expr><literal type="number">0.00000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>red</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator> <literal type="number">0xFF0000</literal> <operator>&amp;</operator> <name>color</name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>green</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><operator>(</operator> <literal type="number">0x00FF00</literal> <operator>&amp;</operator> <name>color</name> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>blue</name> <init>= <expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <literal type="number">0x0000FF</literal> <operator>&amp;</operator> <name>color</name> <operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">255.</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>norm</name> <init>= <expr><call><name>sqrt</name><argument_list>( <argument><expr><name>red</name><operator>*</operator><name>red</name> <operator>+</operator> <name>green</name><operator>*</operator><name>green</name> <operator>+</operator> <name>blue</name><operator>*</operator><name>blue</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>norm</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>red</name> <operator>/=</operator> <name>norm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>green</name> <operator>/=</operator> <name>norm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>blue</name> <operator>/=</operator> <name>norm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>rgb_matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><name>red</name><operator>*</operator><name>red</name></expr>, <expr><name>red</name><operator>*</operator><name>green</name></expr>, <expr><name>red</name><operator>*</operator><name>blue</name></expr>,

<expr><name>red</name><operator>*</operator><name>green</name></expr>, <expr><name>green</name><operator>*</operator><name>green</name></expr>, <expr><name>green</name><operator>*</operator><name>blue</name></expr>,

<expr><name>red</name><operator>*</operator><name>blue</name></expr>, <expr><name>green</name><operator>*</operator><name>blue</name></expr>, <expr><name>blue</name><operator>*</operator><name>blue</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>result1</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>result</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"red: %f"</literal></expr></argument>, <argument><expr><name>red</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"green: %f"</literal></expr></argument>, <argument><expr><name>green</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"blue: %f"</literal></expr></argument>, <argument><expr><name>blue</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mmult</name><argument_list>( <argument><expr><name>result1</name></expr></argument>, <argument><expr><name>rgb_matrix</name></expr></argument>, <argument><expr><name>right_matrix</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mmult</name><argument_list>( <argument><expr><name>result</name></expr></argument>, <argument><expr><name>left_matrix</name></expr></argument>, <argument><expr><name>result1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Projection matrix:"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"%6d %6d %6d"</literal></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"%6d %6d %6d"</literal></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"%6d %6d %6d"</literal></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_YUV_10BITS</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fmt == VLC_CODEC_I420_10L || fmt == VLC_CODEC_I420_10B)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_CUSTOM_PIX</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { val = (*y_in[0] * m[3] + (**u_in - u) * m[4] + (**v_in - v) * m[5]) / 65536 + u; *(*u_out)++ = VLC_CLIP( val, 0, maxval ); val = (*y_in[0] * m[6] + (**u_in - u) * m[7] + (**v_in - v) * m[8]) / 65536 + v; *(*v_out)++ = VLC_CLIP( val, 0, maxval ); val = (*y_in[0]++ * m[0] + (**u_in - u) * m[1] + (**v_in - v) * m[2]) / 65536; *y_out[0]++ = VLC_CLIP( val, 0, maxval ); val = (*y_in[0]++ * m[0] + (**u_in - u) * m[1] + (**v_in - v) * m[2]) / 65536; *y_out[0]++ = VLC_CLIP( val, 0, maxval ); val = (*y_in[1]++ * m[0] + (**u_in - u) * m[1] + (**v_in - v) * m[2]) / 65536; *y_out[1]++ = VLC_CLIP( val, 0, maxval ); val = (*y_in[1]++ * m[0] + (*(*u_in)++ - u) * m[1] + (*(*v_in)++ - v) * m[2]) / 65536; *y_out[1]++ = VLC_CLIP( val, 0, maxval ); } while (0);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>get_custom_pix_8b</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>y_in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>y_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>u_in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>u_out</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>v_in</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>v_out</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>v</name></decl></parameter>,

<parameter><decl><type><name>int</name> <specifier>const</specifier> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxval</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_CUSTOM_PIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type>

<name>get_custom_pix_10b</name><parameter_list>( <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>y_in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name><name>y_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>u_in</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>u_out</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>v_in</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>v_out</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <specifier>const</specifier></type> <name>v</name></decl></parameter>,

<parameter><decl><type><name>int</name> <specifier>const</specifier> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxval</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GET_CUSTOM_PIX</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>get_custom_from_yuv</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>yp</name></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>up</name></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier></type> <name>vp</name></decl></parameter>, <parameter><decl><type><name>int</name> <specifier>const</specifier> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>i_in_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>yp</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>i_out_pitch</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>yp</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>i_visible_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>yp</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>i_visible_lines</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>yp</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>i_uv_visible_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>up</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>y_in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>yp</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>u_in</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>up</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>v_in</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>vp</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>y_out</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>yp</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>u_out</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>up</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>v_out</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>vp</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>y_end</name> <init>= <expr><name><name>y_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i_visible_lines</name> <operator>*</operator> <name>i_in_pitch</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>y_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>y_end</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>y_in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>y_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i_in_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_out</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>y_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i_out_pitch</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>y_row_end</name> <init>= <expr><name><name>y_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i_visible_pitch</name></expr></init></decl>;</init> <condition><expr><name><name>y_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>y_row_end</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><ternary><condition><expr><operator>!</operator><call><name>IS_YUV_10BITS</name><argument_list>(<argument><expr><name><name>p_inpic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><call><name>get_custom_pix_8b</name><argument_list>(<argument><expr><name>y_in</name></expr></argument>, <argument><expr><name>y_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>u_out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_out</name></expr></argument>, <argument><expr><name>U8</name></expr></argument>,

<argument><expr><name>V8</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>get_custom_pix_10b</name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>y_in</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>y_out</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>u_in</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>u_out</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v_in</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>v_out</name></expr></argument>, <argument><expr><name>U10</name></expr></argument>,

<argument><expr><name>V10</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="number">1023</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>y_in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_in_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>y_out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_out_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_in</name> <operator>+=</operator> <name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>up</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name>i_uv_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>u_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>up</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name>i_uv_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_in</name> <operator>+=</operator> <name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>vp</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name>i_uv_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>vp</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name>i_uv_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_custom_from_packedyuv422</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>m</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_y_offset</name></decl>, <decl><type ref="prev"/><name>i_u_offset</name></decl>, <decl><type ref="prev"/><name>i_v_offset</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetPackedYuvOffsets</name><argument_list>( <argument><expr><name><name>p_inpic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y_offset</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_u_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_v_offset</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>yin</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_y_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>uin</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_u_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vin</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_v_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>yout</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_y_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>uout</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_u_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vout</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_v_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_in_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_out_pitch</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_lines</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>yend</name> <init>= <expr><name>yin</name> <operator>+</operator> <name>i_visible_lines</name> <operator>*</operator> <name>i_in_pitch</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>yin</name> <operator>&lt;</operator> <name>yend</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ylend</name> <init>= <expr><name>yin</name> <operator>+</operator> <name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>yin</name> <operator>&lt;</operator> <name>ylend</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>uout</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>yin</name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>uin</name><operator>-</operator><name>U8</name><operator>)</operator> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>vin</name><operator>-</operator><name>V8</name><operator>)</operator> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">65536</literal> <operator>+</operator> <name>U8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uout</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vout</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>yin</name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>uin</name><operator>-</operator><name>U8</name><operator>)</operator> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>vin</name><operator>-</operator><name>V8</name><operator>)</operator> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">65536</literal> <operator>+</operator> <name>V8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vout</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yout</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>yin</name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>uin</name><operator>-</operator><name>U8</name><operator>)</operator> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>vin</name><operator>-</operator><name>V8</name><operator>)</operator> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">65536</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yin</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yout</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>yout</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><operator>*</operator><name>yin</name> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>uin</name><operator>-</operator><name>U8</name><operator>)</operator> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>vin</name><operator>-</operator><name>V8</name><operator>)</operator> <operator>*</operator> <name><name>m</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">65536</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yin</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>yout</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uin</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>vin</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>yin</name> <operator>+=</operator> <name>i_in_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>yout</name> <operator>+=</operator> <name>i_out_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uin</name> <operator>+=</operator> <name>i_in_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uout</name> <operator>+=</operator> <name>i_out_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vin</name> <operator>+=</operator> <name>i_in_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vout</name> <operator>+=</operator> <name>i_out_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExtractCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"component"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_color</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>make_projection_matrix</name><argument_list>( <argument><expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_color</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>projection_matrix</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Unknown callback command."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
