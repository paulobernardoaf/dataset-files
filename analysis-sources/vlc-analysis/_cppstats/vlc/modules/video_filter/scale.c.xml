<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\scale.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Video scaling filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video converter"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>

<macro><name>set_callback</name><argument_list>( <argument>OpenFilter</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenFilter</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YUVP</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YUVA</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_I420</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YV12</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_RGB32</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_RGBA</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_ARGB</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_BGRA</name> <operator>)</operator> <operator>||</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:warning>#<cpp:directive>warning</cpp:directive> Converter cannot (really) change output format.</cpp:warning>

<expr_stmt><expr><call><name>video_format_ScaleCropAr</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"%ix%i -&gt; %ix%i"</literal></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_dst</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:warning>#<cpp:directive>warning</cpp:directive> Converter cannot (really) change output format.</cpp:warning>

<expr_stmt><expr><call><name>video_format_ScaleCropAr</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pic_dst</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic_dst</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_RGBA</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_ARGB</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_BGRA</name> <operator>&amp;&amp;</operator>

<name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_RGB32</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_dst</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_pic_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_height</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_width</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_height</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_width</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_visible_lines</name> <init>=

<expr><name><name>p_pic_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_visible_pitch</name> <init>=

<expr><name><name>p_pic_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_hidden_pitch</name> <init>= <expr><name>i_dst_pitch</name> <operator>-</operator> <name>i_dst_visible_pitch</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_height_coef</name> <init>= <expr><operator>(</operator> <name>i_src_height</name> <operator>&lt;&lt;</operator> <name>SHIFT_SIZE</name> <operator>)</operator>

<operator>/</operator> <name>i_dst_height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_width_coef</name> <init>= <expr><operator>(</operator> <name>i_src_width</name> <operator>&lt;&lt;</operator> <name>SHIFT_SIZE</name> <operator>)</operator>

<operator>/</operator> <name>i_dst_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_height_1</name> <init>= <expr><name>i_src_height</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_width_1</name> <init>= <expr><name>i_src_width</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_pic_dst</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dstendline</name> <init>= <expr><name>p_dst</name> <operator>+</operator> <name>i_dst_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_dstend</name> <init>= <expr><name>p_dst</name> <operator>+</operator> <name>i_dst_visible_lines</name><operator>*</operator><name>i_dst_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_shift_height</name> <init>= <expr><name>i_dst_height</name> <operator>/</operator> <name>i_src_height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_shift_width</name> <init>= <expr><name>i_dst_width</name> <operator>/</operator> <name>i_src_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>SHIFT_SIZE</name><operator>-</operator><name>i_shift_height</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_dst</name> <operator>&lt;</operator> <name>p_dstend</name></expr>;</condition>

<incr><expr><name>p_dst</name> <operator>+=</operator> <name>i_dst_hidden_pitch</name></expr><operator>,</operator>

<expr><name>p_dstendline</name> <operator>+=</operator> <name>i_dst_pitch</name></expr><operator>,</operator> <expr><name>l</name> <operator>+=</operator> <name>i_height_coef</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>SHIFT_SIZE</name><operator>-</operator><name>i_shift_width</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_srcl</name> <init>= <expr><name>p_src</name>

<operator>+</operator> <operator>(</operator><call><name>__MIN</name><argument_list>( <argument><expr><name>i_src_height_1</name></expr></argument>, <argument><expr><name>l</name> <operator>&gt;&gt;</operator> <name>SHIFT_SIZE</name></expr></argument> )</argument_list></call><operator>*</operator><name>i_src_pitch</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_dst</name> <operator>&lt;</operator> <name>p_dstendline</name></expr>;</condition> <incr><expr><name>p_dst</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <name>i_width_coef</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dst</name> <operator>=</operator> <name><name>p_srcl</name><index>[<expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_src_width_1</name></expr></argument>, <argument><expr><name>k</name> <operator>&gt;&gt;</operator> <name>SHIFT_SIZE</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_pic_dst</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_height</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_width</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_height</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_width</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_visible_lines</name> <init>=

<expr><name><name>p_pic_dst</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_visible_pitch</name> <init>=

<expr><name><name>p_pic_dst</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dst_hidden_pitch</name> <init>= <expr><name>i_dst_pitch</name> <operator>-</operator> <name>i_dst_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_height_coef</name> <init>= <expr><operator>(</operator> <name>i_src_height</name> <operator>&lt;&lt;</operator> <name>SHIFT_SIZE</name> <operator>)</operator>

<operator>/</operator> <name>i_dst_height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_width_coef</name> <init>= <expr><operator>(</operator> <name>i_src_width</name> <operator>&lt;&lt;</operator> <name>SHIFT_SIZE</name> <operator>)</operator>

<operator>/</operator> <name>i_dst_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_height_1</name> <init>= <expr><name>i_src_height</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_width_1</name> <init>= <expr><name>i_src_width</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>p_pic_dst</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_dstendline</name> <init>= <expr><name>p_dst</name> <operator>+</operator> <operator>(</operator><name>i_dst_visible_pitch</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>p_dstend</name> <init>= <expr><name>p_dst</name> <operator>+</operator> <name>i_dst_visible_lines</name><operator>*</operator><operator>(</operator><name>i_dst_pitch</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_shift_height</name> <init>= <expr><name>i_dst_height</name> <operator>/</operator> <name>i_src_height</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_shift_width</name> <init>= <expr><name>i_dst_width</name> <operator>/</operator> <name>i_src_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>SHIFT_SIZE</name><operator>-</operator><name>i_shift_height</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_dst</name> <operator>&lt;</operator> <name>p_dstend</name></expr>;</condition>

<incr><expr><name>p_dst</name> <operator>+=</operator> <operator>(</operator><name>i_dst_hidden_pitch</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>p_dstendline</name> <operator>+=</operator> <operator>(</operator><name>i_dst_pitch</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr><operator>,</operator>

<expr><name>l</name> <operator>+=</operator> <name>i_height_coef</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>SHIFT_SIZE</name><operator>-</operator><name>i_shift_width</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_srcl</name> <init>= <expr><name>p_src</name>

<operator>+</operator> <operator>(</operator><call><name>__MIN</name><argument_list>( <argument><expr><name>i_src_height_1</name></expr></argument>, <argument><expr><name>l</name> <operator>&gt;&gt;</operator> <name>SHIFT_SIZE</name></expr></argument> )</argument_list></call><operator>*</operator><operator>(</operator><name>i_src_pitch</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_dst</name> <operator>&lt;</operator> <name>p_dstendline</name></expr>;</condition> <incr><expr><name>p_dst</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name> <operator>+=</operator> <name>i_width_coef</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dst</name> <operator>=</operator> <name><name>p_srcl</name><index>[<expr><call><name>__MIN</name><argument_list>( <argument><expr><name>i_src_width_1</name></expr></argument>, <argument><expr><name>k</name> <operator>&gt;&gt;</operator> <name>SHIFT_SIZE</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name>p_pic_dst</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_pic_dst</name></expr>;</return>

</block_content>}</block></function>

</unit>
