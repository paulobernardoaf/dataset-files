<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\adjust.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adjust_sat_hue.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterPlanar</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterPacked</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THRES_TEXT</name></cpp:macro> <cpp:value>N_("Brightness threshold")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THRES_LONGTEXT</name></cpp:macro> <cpp:value>N_("When this mode is enabled, pixels will be " "shown as black or white. The threshold value will be the brightness " "defined below." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_TEXT</name></cpp:macro> <cpp:value>N_("Image contrast (0-2)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image contrast, between 0 and 2. Defaults to 1.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUE_TEXT</name></cpp:macro> <cpp:value>N_("Image hue (-180..180)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HUE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image hue, between -180 and 180. Defaults to 0.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAT_TEXT</name></cpp:macro> <cpp:value>N_("Image saturation (0-3)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image saturation, between 0 and 3. Defaults to 1.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUM_TEXT</name></cpp:macro> <cpp:value>N_("Image brightness (0-2)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LUM_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image brightness, between 0 and 2. Defaults to 1.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAMMA_TEXT</name></cpp:macro> <cpp:value>N_("Image gamma (0-10)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GAMMA_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the image gamma, between 0.01 and 10. Defaults to 1.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Image properties filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Image adjust"</literal> )</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"contrast"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>,

<argument>CONT_TEXT</argument>, <argument>CONT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"brightness"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">2.0</literal></argument>,

<argument>LUM_TEXT</argument>, <argument>LUM_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"hue"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">180.</literal></argument>, <argument>+<literal type="number">180.</literal></argument>,

<argument>HUE_TEXT</argument>, <argument>HUE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"saturation"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">3.0</literal></argument>,

<argument>SAT_TEXT</argument>, <argument>SAT_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"gamma"</literal></argument>, <argument><literal type="number">1.0</literal></argument>, <argument><literal type="number">0.01</literal></argument>, <argument><literal type="number">10.0</literal></argument>,

<argument>GAMMA_TEXT</argument>, <argument>GAMMA_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"brightness-threshold"</literal></argument>, <argument>false</argument>,

<argument>THRES_TEXT</argument>, <argument>THRES_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"adjust"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"contrast"</literal></expr>, <expr><literal type="string">"brightness"</literal></expr>, <expr><literal type="string">"hue"</literal></expr>, <expr><literal type="string">"saturation"</literal></expr>, <expr><literal type="string">"gamma"</literal></expr>,

<expr><literal type="string">"brightness-threshold"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>_Atomic</specifier> <name>float</name></type> <name>f_contrast</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>_Atomic</specifier> <name>float</name></type> <name>f_brightness</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>_Atomic</specifier> <name>float</name></type> <name>f_hue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>_Atomic</specifier> <name>float</name></type> <name>f_saturation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>_Atomic</specifier> <name>float</name></type> <name>f_gamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_bool</name></type> <name>b_brightness_threshold</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_process_sat_hue</name>)<parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,

<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_process_sat_hue_clip</name>)<parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,

<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FloatCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>varname</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>_Atomic</specifier> <name>float</name> <modifier>*</modifier></type><name>atom</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>( <argument><expr><name>atom</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>obj</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>varname</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>oldval</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>BoolCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>varname</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>atomic_bool</name> <modifier>*</modifier></type><name>atom</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>( <argument><expr><name>atom</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>obj</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>varname</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>oldval</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output chromas don't match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV</name></type>

<name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <init>= <expr><name>FilterPlanar</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue_clip</name></name> <operator>=</operator> <name>planar_sat_hue_clip_C</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue</name></name> <operator>=</operator> <name>planar_sat_hue_C</name></expr>;</expr_stmt>

<break>break;</break>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV10</name>

<name>CASE_PLANAR_YUV9</name></type>

<name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <init>= <expr><name>FilterPlanar</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue_clip</name></name> <operator>=</operator> <name>planar_sat_hue_clip_C_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue</name></name> <operator>=</operator> <name>planar_sat_hue_C_16</name></expr>;</expr_stmt>

<break>break;</break>

<decl_stmt><decl><type><name>CASE_PACKED_YUV_422</name></type>

<name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <init>= <expr><name>FilterPacked</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue_clip</name></name> <operator>=</operator> <name>packed_sat_hue_clip_C</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue</name></name> <operator>=</operator> <name>packed_sat_hue_C</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>, <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_contrast</name></name></expr></argument>,

<argument><expr><call><name>var_CreateGetFloatCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_brightness</name></name></expr></argument>,

<argument><expr><call><name>var_CreateGetFloatCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"brightness"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_hue</name></name></expr></argument>, <argument><expr><call><name>var_CreateGetFloatCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"hue"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_saturation</name></name></expr></argument>,

<argument><expr><call><name>var_CreateGetFloatCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"saturation"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_gamma</name></name></expr></argument>,

<argument><expr><call><name>var_CreateGetFloatCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"gamma"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_brightness_threshold</name></name></expr></argument>,

<argument><expr><call><name>var_CreateGetBoolCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"brightness-threshold"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_contrast</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"brightness"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_brightness</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"hue"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_hue</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"saturation"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_saturation</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"gamma"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_gamma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"brightness-threshold"</literal></expr></argument>, <argument><expr><name>BoolCallback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_brightness_threshold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"contrast"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_contrast</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"brightness"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_brightness</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"hue"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_hue</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"saturation"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_saturation</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"gamma"</literal></expr></argument>, <argument><expr><name>FloatCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_gamma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"brightness-threshold"</literal></expr></argument>, <argument><expr><name>BoolCallback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_brightness_threshold</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterPlanar</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>pi_luma</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pi_gamma</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_16bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_range</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV10</name></type>

<name>b_16bit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_range</name> <operator>=</operator> <literal type="number">1024.f</literal></expr>;</expr_stmt>

<break>break;</break>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV9</name></type>

<name>b_16bit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_range</name> <operator>=</operator> <literal type="number">512.f</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>b_16bit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_range</name> <operator>=</operator> <literal type="number">256.f</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>f_max</name> <init>= <expr><name>f_range</name> <operator>-</operator> <literal type="number">1.f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_max</name> <init>= <expr><name>f_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_range</name> <init>= <expr><name>f_range</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_size</name> <init>= <expr><name>i_range</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_mid</name> <init>= <expr><name>i_range</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_cont</name> <init>= <expr><call><name>lroundf</name><argument_list>( <argument><expr><call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_contrast</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>f_max</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_lum</name> <init>= <expr><call><name>lroundf</name><argument_list>( <argument><expr><operator>(</operator><call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_brightness</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1.f</literal><operator>)</operator> <operator>*</operator> <name>f_max</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_hue</name> <init>= <expr><call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_hue</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>M_PI</name> <operator>/</operator> <literal type="number">180.</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sat</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_saturation</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call> <operator>*</operator> <name>f_range</name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_gamma</name> <init>= <expr><literal type="number">1.f</literal> <operator>/</operator> <call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_gamma</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_brightness_threshold</name></name></expr></argument>,

<argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_lum</name> <operator>+=</operator> <name>i_mid</name> <operator>-</operator> <name>i_cont</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pi_gamma</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><call><name>powf</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <name>f_max</name></expr></argument>, <argument><expr><name>f_gamma</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f_max</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_max</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pi_luma</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>pi_gamma</name><index>[<expr><call><name>VLC_CLIP</name><argument_list>( <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>i_lum</name> <operator>+</operator> <name>i_cont</name> <operator>*</operator> <name>i</name> <operator>/</operator> <name>i_range</name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>i_max</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_range</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pi_luma</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>i_lum</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>i_max</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_sat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>b_16bit</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>

<operator>*</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>

<operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name><operator>++</operator></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sin</name> <init>= <expr><call><name>sinf</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cos</name> <init>= <expr><call><name>cosf</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f_max</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name> <init>= <expr><operator>(</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>*</operator> <name>f_range</name> <operator>*</operator> <name>i_mid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_y</name> <init>= <expr><operator>(</operator> <call><name>cosf</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>sinf</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>*</operator> <name>f_range</name> <operator>*</operator> <name>i_mid</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_sat</name> <operator>&gt;</operator> <name>i_range</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue_clip</name></name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>i_sin</name></expr></argument>, <argument><expr><name>i_cos</name></expr></argument>, <argument><expr><name>i_sat</name></expr></argument>,

<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue</name></name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>i_sin</name></expr></argument>, <argument><expr><name>i_cos</name></expr></argument>, <argument><expr><name>i_sat</name></expr></argument>,

<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterPacked</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>pi_luma</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pi_gamma</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_y_offset</name></decl>, <decl><type ref="prev"/><name>i_u_offset</name></decl>, <decl><type ref="prev"/><name>i_v_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pitch</name></decl>, <decl><type ref="prev"/><name>i_visible_pitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_hue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_gamma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_cont</name></decl>, <decl><type ref="prev"/><name>i_lum</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sat</name></decl>, <decl><type ref="prev"/><name>i_sin</name></decl>, <decl><type ref="prev"/><name>i_cos</name></decl>, <decl><type ref="prev"/><name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_pitch</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_visible_pitch</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetPackedYuvOffsets</name><argument_list>( <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y_offset</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_u_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_v_offset</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't get output picture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_cont</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_contrast</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">255</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_lum</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_brightness</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1.0</literal><operator>)</operator><operator>*</operator><literal type="number">255</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>f_hue</name> <operator>=</operator> <call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_hue</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>M_PI</name> <operator>/</operator> <literal type="number">180.</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sat</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_saturation</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">256</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>f_gamma</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_gamma</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>atomic_load_explicit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_brightness_threshold</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_lum</name> <operator>+=</operator> <literal type="number">128</literal> <operator>-</operator> <name>i_cont</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pi_gamma</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name>clip_uint8_vlc</name><argument_list>( <argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>i</name> <operator>/</operator> <literal type="number">255.0</literal></expr></argument>, <argument><expr><name>f_gamma</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">255.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pi_luma</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name><name>pi_gamma</name><index>[<expr><call><name>clip_uint8_vlc</name><argument_list>( <argument><expr><name>i_lum</name> <operator>+</operator> <name>i_cont</name> <operator>*</operator> <name>i</name> <operator>/</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pi_luma</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <name>i_lum</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_sat</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_y_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_y_offset</name></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name>i_visible_pitch</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name><name>pi_luma</name><index>[ <expr><operator>*</operator><name>p_in</name></expr> ]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_sin</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_cos</name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_x</name> <operator>=</operator> <operator>(</operator> <call><name>cos</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>*</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_y</name> <operator>=</operator> <operator>(</operator> <call><name>cos</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>sin</name><argument_list>(<argument><expr><name>f_hue</name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>*</operator> <literal type="number">32768</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_sat</name> <operator>&gt;</operator> <literal type="number">256</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue_clip</name></name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>i_sin</name></expr></argument>, <argument><expr><name>i_cos</name></expr></argument>, <argument><expr><name>i_sat</name></expr></argument>,

<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_process_sat_hue</name></name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>i_sin</name></expr></argument>, <argument><expr><name>i_cos</name></expr></argument>, <argument><expr><name>i_sat</name></expr></argument>,

<argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
