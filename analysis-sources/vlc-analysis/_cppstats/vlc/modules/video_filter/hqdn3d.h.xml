<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\hqdn3d.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM1_DEFAULT</name></cpp:macro> <cpp:value>4.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM2_DEFAULT</name></cpp:macro> <cpp:value>3.0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARAM3_DEFAULT</name></cpp:macro> <cpp:value>6.0</cpp:value></cpp:define>

<struct>struct <name>vf_priv_s</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name><name>Coefs</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">512</literal><operator>*</operator><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>Line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name><name>Frame</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>LowPassMul</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>PrevMul</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>CurrMul</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>Coef</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dMul</name><init>= <expr><name>PrevMul</name><operator>-</operator><name>CurrMul</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>d</name><init>=<expr><operator>(</operator><operator>(</operator><name>dMul</name><operator>+</operator><literal type="number">0x10007FF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name>CurrMul</name> <operator>+</operator> <name><name>Coef</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deNoiseTemporal</name><parameter_list>(

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>Frame</name></decl></parameter>, 

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>FrameDest</name></decl></parameter>, 

<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier></type><name>FrameAnt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>W</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dStride</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>Temporal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>PixelDst</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>Y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>Y</name> <operator>&lt;</operator> <name>H</name></expr>;</condition> <incr><expr><name>Y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for <control>(<init><decl><type><name>long</name></type> <name>X</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>X</name> <operator>&lt;</operator> <name>W</name></expr>;</condition> <incr><expr><name>X</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>PixelDst</name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name><name>FrameAnt</name><index>[<expr><name>X</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>Frame</name><index>[<expr><name>X</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>Temporal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameAnt</name><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x1000007F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameDest</name><index>[<expr><name>X</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x10007FFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>Frame</name> <operator>+=</operator> <name>sStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>FrameDest</name> <operator>+=</operator> <name>dStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>FrameAnt</name> <operator>+=</operator> <name>W</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deNoiseSpacial</name><parameter_list>(

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>Frame</name></decl></parameter>, 

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>FrameDest</name></decl></parameter>, 

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>LineAnt</name></decl></parameter>, 

<parameter><decl><type><name>int</name></type> <name>W</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dStride</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>Horizontal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>Vertical</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>sLineOffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dLineOffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>PixelAnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>PixelDst</name></decl>;</decl_stmt>

<expr_stmt><expr><name>PixelDst</name> <operator>=</operator> <name><name>LineAnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PixelAnt</name> <operator>=</operator> <name><name>Frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameDest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x10007FFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>X</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>X</name> <operator>&lt;</operator> <name>W</name></expr>;</condition> <incr><expr><name>X</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>PixelDst</name> <operator>=</operator> <name><name>LineAnt</name><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name><name>Frame</name><index>[<expr><name>X</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>Horizontal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameDest</name><index>[<expr><name>X</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x10007FFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>long</name></type> <name>Y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>Y</name> <operator>&lt;</operator> <name>H</name></expr>;</condition> <incr><expr><name>Y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>sLineOffs</name> <operator>+=</operator> <name>sStride</name></expr><operator>,</operator> <expr><name>dLineOffs</name> <operator>+=</operator> <name>dStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PixelAnt</name> <operator>=</operator> <name><name>Frame</name><index>[<expr><name>sLineOffs</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>PixelDst</name> <operator>=</operator> <name><name>LineAnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name><name>LineAnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name>Vertical</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameDest</name><index>[<expr><name>dLineOffs</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x10007FFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>X</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>X</name> <operator>&lt;</operator> <name>W</name></expr>;</condition> <incr><expr><name>X</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>PixelAnt</name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name><name>Frame</name><index>[<expr><name>sLineOffs</name><operator>+</operator><name>X</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>Horizontal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>PixelDst</name> <operator>=</operator> <name><name>LineAnt</name><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name><name>LineAnt</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name>Vertical</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameDest</name><index>[<expr><name>dLineOffs</name><operator>+</operator><name>X</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x10007FFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deNoise</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>Frame</name></decl></parameter>, 

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>FrameDest</name></decl></parameter>, 

<parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>LineAnt</name></decl></parameter>, 

<parameter><decl><type><name>unsigned</name> <name>short</name> <modifier>*</modifier><modifier>*</modifier></type><name>FrameAntPtr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>W</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sStride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dStride</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>Horizontal</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>Vertical</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>Temporal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>long</name></type> <name>sLineOffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dLineOffs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>PixelAnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>PixelDst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type> <name>FrameAnt</name><init>=<expr><operator>(</operator><operator>*</operator><name>FrameAntPtr</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>FrameAnt</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>FrameAntPtr</name><operator>)</operator><operator>=</operator><name>FrameAnt</name><operator>=</operator><call><name>malloc</name><argument_list>(<argument><expr><name>W</name><operator>*</operator><name>H</name><operator>*</operator>sizeof<operator>(</operator><name>unsigned</name> <name>short</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>FrameAnt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>Y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>Y</name> <operator>&lt;</operator> <name>H</name></expr>;</condition> <incr><expr><name>Y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type> <name>dst</name><init>=<expr><operator>&amp;</operator><name><name>FrameAnt</name><index>[<expr><name>Y</name><operator>*</operator><name>W</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name><modifier>*</modifier></type> <name>src</name><init>=<expr><name>Frame</name><operator>+</operator><name>Y</name><operator>*</operator><name>sStride</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>X</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>X</name> <operator>&lt;</operator> <name>W</name></expr>;</condition> <incr><expr><name>X</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>dst</name><index>[<expr><name>X</name></expr>]</index></name><operator>=</operator><name><name>src</name><index>[<expr><name>X</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>Horizontal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>Vertical</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>deNoiseTemporal</name><argument_list>(<argument><expr><name>Frame</name></expr></argument>, <argument><expr><name>FrameDest</name></expr></argument>, <argument><expr><name>FrameAnt</name></expr></argument>,

<argument><expr><name>W</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>sStride</name></expr></argument>, <argument><expr><name>dStride</name></expr></argument>, <argument><expr><name>Temporal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>Temporal</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>deNoiseSpacial</name><argument_list>(<argument><expr><name>Frame</name></expr></argument>, <argument><expr><name>FrameDest</name></expr></argument>, <argument><expr><name>LineAnt</name></expr></argument>,

<argument><expr><name>W</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>sStride</name></expr></argument>, <argument><expr><name>dStride</name></expr></argument>, <argument><expr><name>Horizontal</name></expr></argument>, <argument><expr><name>Vertical</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>LineAnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>PixelAnt</name> <operator>=</operator> <name><name>Frame</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>PixelDst</name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name><name>FrameAnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name>Temporal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameAnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x1000007F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameDest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x10007FFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>X</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>X</name> <operator>&lt;</operator> <name>W</name></expr>;</condition> <incr><expr><name>X</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>LineAnt</name><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <name>PixelAnt</name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name><name>Frame</name><index>[<expr><name>X</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>Horizontal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>PixelDst</name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name><name>FrameAnt</name><index>[<expr><name>X</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name>Temporal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameAnt</name><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x1000007F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameDest</name><index>[<expr><name>X</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x10007FFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>long</name></type> <name>Y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>Y</name> <operator>&lt;</operator> <name>H</name></expr>;</condition> <incr><expr><name>Y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name><modifier>*</modifier></type> <name>LinePrev</name><init>=<expr><operator>&amp;</operator><name><name>FrameAnt</name><index>[<expr><name>Y</name><operator>*</operator><name>W</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sLineOffs</name> <operator>+=</operator> <name>sStride</name></expr><operator>,</operator> <expr><name>dLineOffs</name> <operator>+=</operator> <name>dStride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PixelAnt</name> <operator>=</operator> <name><name>Frame</name><index>[<expr><name>sLineOffs</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LineAnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name><name>LineAnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name>Vertical</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>PixelDst</name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name><name>LinePrev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>LineAnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Temporal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LinePrev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x1000007F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameDest</name><index>[<expr><name>dLineOffs</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x10007FFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>long</name></type> <name>X</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>X</name> <operator>&lt;</operator> <name>W</name></expr>;</condition> <incr><expr><name>X</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>PixelAnt</name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name><name>Frame</name><index>[<expr><name>sLineOffs</name><operator>+</operator><name>X</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></argument>, <argument><expr><name>Horizontal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LineAnt</name><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name><name>LineAnt</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr><name>PixelAnt</name></expr></argument>, <argument><expr><name>Vertical</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>PixelDst</name> <operator>=</operator> <call><name>LowPassMul</name><argument_list>(<argument><expr><name><name>LinePrev</name><index>[<expr><name>X</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>LineAnt</name><index>[<expr><name>X</name></expr>]</index></name></expr></argument>, <argument><expr><name>Temporal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>LinePrev</name><index>[<expr><name>X</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x1000007F</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>FrameDest</name><index>[<expr><name>dLineOffs</name><operator>+</operator><name>X</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><name>PixelDst</name><operator>+</operator><literal type="number">0x10007FFF</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PrecalcCoefs</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>Ct</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>Dist25</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>Gamma</name></decl>, <decl><type ref="prev"/><name>Simil</name></decl>, <decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>

<expr_stmt><expr><name>Gamma</name> <operator>=</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">0.25</literal></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>log</name><argument_list>(<argument><expr><literal type="number">1.0</literal> <operator>-</operator> <name>Dist25</name><operator>/</operator><literal type="number">255.0</literal> <operator>-</operator> <literal type="number">0.00001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">255</literal><operator>*</operator><literal type="number">16</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">255</literal><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>Simil</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>-</operator> <call><name>abs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><literal type="number">16</literal><operator>*</operator><literal type="number">255.0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>C</name> <operator>=</operator> <call><name>pow</name><argument_list>(<argument><expr><name>Simil</name></expr></argument>, <argument><expr><name>Gamma</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">65536.0</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i</name> <operator>/</operator> <literal type="number">16.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>Ct</name><index>[<expr><literal type="number">16</literal><operator>*</operator><literal type="number">256</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>C</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>C</name><operator>-</operator><literal type="number">0.5</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>C</name><operator>+</operator><literal type="number">0.5</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>Ct</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Dist25</name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
