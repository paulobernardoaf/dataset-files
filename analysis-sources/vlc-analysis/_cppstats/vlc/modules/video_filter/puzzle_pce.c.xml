<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\puzzle_pce.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_bezier.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_lib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_pce.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHAPES_QTY</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIECE_TYPE_NBR</name></cpp:macro> <cpp:value>(4*2*(1+SHAPES_QTY))</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>puzzle_bake_pieces_shapes</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>puzzle_free_ps_pieces_shapes</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_shape_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>PIECE_TYPE_NBR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_piece</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_piece</name> <operator>&lt;</operator> <name>PIECE_TYPE_NBR</name></expr>;</condition> <incr><expr><name>i_piece</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_piece</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_shape_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_piece</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_piece</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_row_nbr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_piece</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>ps_piece_shape_row</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_currect_shape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_border</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">0</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_border</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_border</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_border</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">3</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_border</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">4</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_BTM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_border</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">5</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_BTM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_border</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">6</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_border</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">7</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_currect_shape</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_lines</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_shape</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_shape</name><operator>&lt;</operator><name>SHAPES_QTY</name></expr>;</condition> <incr><expr><name>i_shape</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_scale_pts_H</name> <init>= <expr><call><name>puzzle_scale_curve_H</name><argument_list>(<argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_lines</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_bezier_pts_H</name><index>[<expr><name>i_shape</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_shape_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_scale_pts_V</name> <init>= <expr><call><name>puzzle_H_2_scale_curve_V</name><argument_list>(<argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_lines</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_bezier_pts_H</name><index>[<expr><name>i_shape</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_shape_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_neg_pts_H</name> <init>= <expr><call><name>puzzle_curve_H_2_negative</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ps_scale_pts_H</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_neg_pts_V</name> <init>= <expr><call><name>puzzle_curve_V_2_negative</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ps_scale_pts_V</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ps_scale_pts_H</name> <operator>||</operator> <operator>!</operator><name>ps_scale_pts_V</name> <operator>||</operator> <operator>!</operator><name>ps_neg_pts_H</name> <operator>||</operator> <operator>!</operator><name>ps_neg_pts_V</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_scale_pts_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_scale_pts_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_neg_pts_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_neg_pts_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_bezier</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ps_scale_pts_V</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_bezier</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ps_neg_pts_V</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_bezier</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ps_scale_pts_H</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sect_bezier</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">3</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ps_neg_pts_H</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>puzzle_SHAPE_TOP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sectTop2Btm</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">4</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sectTop2Btm</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">5</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">3</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sectLeft2Right</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">6</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>puzzle_generate_sectLeft2Right</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">7</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>i_currect_shape</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_scale_pts_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_scale_pts_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_neg_pts_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_neg_pts_V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_currect_shape</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_shape_init</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_free_ps_pieces_shapes</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_piece_types</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_row_nbr</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>ps_piece_shape_row</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>ps_piece_shape_row</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_find_piece</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_except</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_current_piece</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator> <name><name>ps_current_piece</name><operator>-&gt;</operator><name>i_min_x</name></name> <operator>&lt;=</operator> <name>i_x</name> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>ps_current_piece</name><operator>-&gt;</operator><name>i_max_x</name></name> <operator>&gt;=</operator> <name>i_x</name> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>ps_current_piece</name><operator>-&gt;</operator><name>i_min_y</name></name> <operator>&lt;=</operator> <name>i_y</name> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>ps_current_piece</name><operator>-&gt;</operator><name>i_max_y</name></name> <operator>&gt;=</operator> <name>i_y</name> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>i</name> <operator>!=</operator> <name>i_except</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_calculate_corners</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_piece</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_angle</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_x</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_mirror</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_y</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_y</name></name> <operator>=</operator> <operator>-</operator><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_mirror</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_x</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_x</name></name> <operator>=</operator> <operator>-</operator><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_mirror</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_y</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_mirror</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_x</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator>

<name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>=</operator>

<name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_lines</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLy</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TRx</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>+</operator> <operator>(</operator> <name>i_width</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TRy</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLy</name></name> <operator>+</operator> <operator>(</operator> <name>i_width</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BRx</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>+</operator> <operator>(</operator> <name>i_width</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_x</name></name> <operator>+</operator> <operator>(</operator> <name>i_lines</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BRy</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLy</name></name> <operator>+</operator> <operator>(</operator> <name>i_width</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_y</name></name> <operator>+</operator> <operator>(</operator> <name>i_lines</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BLx</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLx</name></name> <operator>+</operator> <operator>(</operator> <name>i_lines</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BLy</name></name> <operator>=</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLy</name></name> <operator>+</operator> <operator>(</operator> <name>i_lines</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_max_x</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLx</name></name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TRx</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BLx</name></name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BRx</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_min_x</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLx</name></name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TRx</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BLx</name></name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BRx</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_max_y</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLy</name></name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TRy</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BLy</name></name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BRy</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_min_y</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TLy</name></name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_TRy</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BLy</name></name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_BRy</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_center_x</name></name> <operator>=</operator> <operator>(</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_max_x</name></name> <operator>+</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_min_x</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_center_y</name></name> <operator>=</operator> <operator>(</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_max_y</name></name> <operator>+</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_min_y</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>pce_overlap</name> <init>= <expr><call><name>puzzle_find_piece</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_center_x</name></name></expr></argument>, <argument><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_center_y</name></name></expr></argument>, <argument><expr><name>i_piece</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>pce_overlap</name> <operator>!=</operator> <name>NO_PCE</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pi_group_qty</name><index>[<expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_group_ID</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>b_overlap</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_rotate_pce</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_piece</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>i_rotate_mirror</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_center_x</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_center_y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_avoid_mirror</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_rotate_mirror</name> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>( <init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>abs</name><argument_list>( <argument><expr><name>i_rotate_mirror</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_tempx</name></decl>, <decl><type ref="prev"/><name>i_tempy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_rotate_mirror</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_angle</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_angle</name></name> <operator>&amp;=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tempx</name> <operator>=</operator> <operator>-</operator><operator>(</operator> <name>i_center_y</name> <operator>-</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>)</operator> <operator>+</operator> <name>i_center_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tempy</name> <operator>=</operator> <operator>+</operator><operator>(</operator> <name>i_center_x</name> <operator>-</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>)</operator> <operator>+</operator> <name>i_center_y</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_angle</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_angle</name></name> <operator>&amp;=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tempx</name> <operator>=</operator> <operator>+</operator><operator>(</operator> <name>i_center_y</name> <operator>-</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>)</operator> <operator>+</operator> <name>i_center_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_tempy</name> <operator>=</operator> <operator>-</operator><operator>(</operator> <name>i_center_x</name> <operator>-</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>)</operator> <operator>+</operator> <name>i_center_y</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator> <name>i_tempx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>=</operator> <name>i_tempy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_angle</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_rotate</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_avoid_mirror</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>i_center_x</name> <operator>-</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_mirror</name></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>puzzle_calculate_corners</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_piece</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_move_group</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_piece</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_dx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_dy</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_group_ID</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i_piece</name></expr>]</index></name><operator>.</operator><name>i_group_ID</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_group_ID</name></name> <operator>==</operator> <name>i_group_ID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>b_finished</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_x</name> <operator>+=</operator> <name>i_dx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_actual_y</name> <operator>+=</operator> <name>i_dy</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>puzzle_calculate_corners</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_drw_basic_pce_in_plane</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter>, <parameter><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ps_piece</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_width</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_width</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pixel_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_visible_lines</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_visible_lines</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_desk_start_x</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_desk_start_y</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pic_start_x</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pic_start_y</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_width</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_lines</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_ofs_x</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>__MAX</name><argument_list>(<argument><expr><operator>-</operator><name>i_desk_start_x</name></expr></argument>,<argument><expr><operator>-</operator><name>i_pic_start_x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_count_x</name> <init>= <expr><name>i_width</name> <operator>-</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>__MAX</name><argument_list>(<argument><expr><name>i_desk_start_x</name> <operator>+</operator> <name>i_width</name> <operator>-</operator> <name>i_dst_width</name></expr></argument>, <argument><expr><name>i_pic_start_x</name> <operator>+</operator> <name>i_width</name> <operator>-</operator> <name>i_src_width</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_ofs_y</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>__MAX</name><argument_list>(<argument><expr><operator>-</operator><name>i_desk_start_y</name></expr></argument>,<argument><expr><operator>-</operator><name>i_pic_start_y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_count_y</name> <init>= <expr><name>i_lines</name> <operator>-</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>__MAX</name><argument_list>(<argument><expr><name>i_desk_start_y</name> <operator>+</operator> <name>i_lines</name> <operator>-</operator> <name>i_dst_visible_lines</name></expr></argument>, <argument><expr><name>i_pic_start_y</name> <operator>+</operator> <name>i_lines</name> <operator>-</operator> <name>i_src_visible_lines</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><name>i_ofs_y</name></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_count_y</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name> <operator>+</operator> <operator>(</operator><name>i_desk_start_y</name> <operator>+</operator> <name>i_y</name><operator>)</operator> <operator>*</operator> <name>i_dst_pitch</name> <operator>+</operator> <operator>(</operator> <name>i_desk_start_x</name> <operator>+</operator> <name>i_ofs_x</name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument>,

<argument><expr><name>p_src</name> <operator>+</operator> <operator>(</operator><name>i_pic_start_y</name> <operator>+</operator> <name>i_y</name><operator>)</operator> <operator>*</operator> <name>i_src_pitch</name> <operator>+</operator> <operator>(</operator> <name>i_pic_start_x</name> <operator>+</operator> <name>i_ofs_x</name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument>,

<argument><expr><operator>(</operator> <name>i_count_x</name> <operator>-</operator> <name>i_ofs_x</name> <operator>)</operator> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_drw_adv_pce_in_plane</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter>, <parameter><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ps_piece</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_width</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_width</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pixel_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_visible_lines</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_visible_lines</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_desk_start_x</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_desk_start_y</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pic_start_x</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pic_start_y</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_width</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_lines</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_lines</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_current_src_y</name> <init>= <expr><name>i_pic_start_y</name> <operator>+</operator> <name>i_y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>i_current_src_y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_current_src_y</name> <operator>&lt;</operator> <name>i_src_visible_lines</name> <operator>)</operator></expr> )</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>i_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_current_dst_x</name> <init>= <expr><name>i_desk_start_x</name> <operator>+</operator> <name>i_x</name> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_x</name></name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_current_dst_y</name> <init>= <expr><name>i_desk_start_y</name> <operator>+</operator> <name>i_x</name> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_y</name></name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_current_src_x</name> <init>= <expr><name>i_pic_start_x</name> <operator>+</operator> <name>i_x</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>i_current_dst_x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_current_src_x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator> <name>i_current_dst_x</name> <operator>&lt;</operator> <name>i_dst_width</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_current_src_x</name> <operator>&lt;</operator> <name>i_src_width</name> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator> <name>i_current_dst_y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_current_dst_y</name> <operator>&lt;</operator> <name>i_dst_visible_lines</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name> <operator>+</operator> <name>i_current_dst_y</name> <operator>*</operator> <name>i_dst_pitch</name> <operator>+</operator> <name>i_current_dst_x</name> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument>,

<argument><expr><name>p_src</name> <operator>+</operator> <name>i_current_src_y</name> <operator>*</operator> <name>i_src_pitch</name> <operator>+</operator> <name>i_current_src_x</name> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument>,

<argument><expr><name>i_pixel_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_drw_complex_pce_in_plane</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter>, <parameter><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_pce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ps_piece</name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_width</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_width</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>/</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pixel_pitch</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_src_visible_lines</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_dst_visible_lines</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><name><name>p_pic_in</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><name><name>p_pic_out</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_desk_start_x</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_desk_start_y</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_actual_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pic_start_x</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_pic_start_y</name> <init>= <expr><name><name>ps_piece</name><operator>-&gt;</operator><name>ps_piece_in_plane</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_original_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_top_shape</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_top_shape</name></name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_btm_shape</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_btm_shape</name></name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_right_shape</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_right_shape</name></name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_left_shape</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name><index>[<expr><name><name>ps_piece</name><operator>-&gt;</operator><name>i_left_shape</name></name></expr>]</index><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_shape</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_min_y</name> <init>= <expr><name><name>ps_top_shape</name><operator>-&gt;</operator><name>i_first_row_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_max_y</name> <init>= <expr><name><name>ps_btm_shape</name><operator>-&gt;</operator><name>i_first_row_offset</name></name> <operator>+</operator> <name><name>ps_btm_shape</name><operator>-&gt;</operator><name>i_row_nbr</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><name>i_min_y</name></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;=</operator> <name>i_max_y</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_current_src_y</name> <init>= <expr><name>i_pic_start_y</name> <operator>+</operator> <name>i_y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator> <name>i_current_src_y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_current_src_y</name> <operator>&lt;</operator> <name>i_src_visible_lines</name> <operator>)</operator></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_sect_start_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i_shape</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_shape</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i_shape</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>( <expr><name>i_shape</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>ps_shape</name> <operator>=</operator> <name>ps_left_shape</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>ps_shape</name> <operator>=</operator> <name>ps_top_shape</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>ps_shape</name> <operator>=</operator> <name>ps_btm_shape</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>ps_shape</name> <operator>=</operator> <name>ps_right_shape</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_r</name> <init>= <expr><name>i_y</name> <operator>-</operator> <name><name>ps_shape</name><operator>-&gt;</operator><name>i_first_row_offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_r</name> <operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>i_r</name> <operator>&gt;=</operator> <name><name>ps_shape</name><operator>-&gt;</operator><name>i_row_nbr</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>piece_shape_row_t</name> <modifier>*</modifier></type><name>ps_piece_shape_row</name> <init>= <expr><operator>&amp;</operator><name><name>ps_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_s</name> <operator>&lt;</operator> <name><name>ps_piece_shape_row</name><operator>-&gt;</operator><name>i_section_nbr</name></name></expr>;</condition> <incr><expr><name>i_s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_type</name> <init>= <expr><name><name>ps_piece_shape_row</name><operator>-&gt;</operator><name>ps_row_section</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name> <init>= <expr><name><name>ps_piece_shape_row</name><operator>-&gt;</operator><name>ps_row_section</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>.</operator><name>i_width</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_x</name> <operator>&lt;</operator> <name>i_width</name></expr>;</condition> <incr><expr><name>i_x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_current_dst_x</name> <init>= <expr><name>i_desk_start_x</name> <operator>+</operator> <operator>(</operator><name>i_sect_start_x</name> <operator>+</operator> <name>i_x</name><operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_x</name></name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_current_dst_y</name> <init>= <expr><name>i_desk_start_y</name> <operator>+</operator> <operator>(</operator><name>i_sect_start_x</name> <operator>+</operator> <name>i_x</name><operator>)</operator> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_x_y</name></name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_step_y_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_current_src_x</name> <init>= <expr><name>i_pic_start_x</name> <operator>+</operator> <operator>(</operator><name>i_sect_start_x</name> <operator>+</operator> <name>i_x</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_current_dst_x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_current_dst_x</name> <operator>&gt;=</operator> <name>i_dst_width</name>

<operator>||</operator> <name>i_current_src_x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_current_src_x</name> <operator>&gt;=</operator> <name>i_src_width</name>

<operator>||</operator> <name>i_current_dst_y</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_current_dst_y</name> <operator>&gt;=</operator> <name>i_dst_visible_lines</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_dst</name> <operator>+</operator> <name>i_current_dst_y</name> <operator>*</operator> <name>i_dst_pitch</name> <operator>+</operator> <name>i_current_dst_x</name> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument>,

<argument><expr><name>p_src</name> <operator>+</operator> <name>i_current_src_y</name> <operator>*</operator> <name>i_src_pitch</name> <operator>+</operator> <name>i_current_src_x</name> <operator>*</operator> <name>i_pixel_pitch</name></expr></argument>,

<argument><expr><name>i_pixel_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_plane</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_x</name></name> <operator>==</operator> <name>i_current_dst_x</name> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_mouse_y</name></name> <operator>==</operator> <name>i_current_dst_y</name> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pointed_pce</name></name> <operator>=</operator> <name>i_pce</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_sect_start_x</name> <operator>+=</operator> <name>i_width</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_draw_pieces</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_in</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_puzzle_array</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_out</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<for>for <control>( <init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>s_allocated</name><operator>.</operator><name>i_pieces_nbr</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>piece_t</name> <modifier>*</modifier></type><name>ps_piece</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>b_advanced</name></name>

<operator>||</operator> <operator>(</operator><name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_mirror</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ps_piece</name><operator>-&gt;</operator><name>i_actual_angle</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_shape_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>puzzle_drw_basic_pce_in_plane</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>ps_piece</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>s_current_param</name><operator>.</operator><name>i_shape_size</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ps_pieces_shapes</name></name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_shape_init</name></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>puzzle_drw_adv_pce_in_plane</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>ps_piece</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>puzzle_drw_complex_pce_in_plane</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic_in</name></expr></argument>, <argument><expr><name>p_pic_out</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>ps_piece</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return;</return>

</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>puzzle_diagonal_limit</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_left</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b_left</name> <operator>^</operator> <operator>(</operator><name>i_y</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator> <name>i_y</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name><operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name> <operator>-</operator> <operator>(</operator> <operator>(</operator> <name>i_y</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name><operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SECT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>puzzle_generate_sect_border</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_piece_shape</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_border</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ps_piece_shape</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_lines</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_min_y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_border</name> <operator>!=</operator> <name>puzzle_SHAPE_BTM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>floor</name><argument_list>( <argument><expr><name>i_lines</name> <operator>/</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_nb_y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_border</name> <operator>!=</operator> <name>puzzle_SHAPE_TOP</name><operator>)</operator></expr>?</condition><then>

<expr><operator>(</operator><name>i_lines</name> <operator>-</operator> <name>i_min_y</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>i_lines</name> <operator>/</operator><literal type="number">2</literal> <operator>-</operator> <name>i_min_y</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>i_row_nbr</name></name> <operator>=</operator> <name>i_nb_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>i_first_row_offset</name></name> <operator>=</operator> <name>i_min_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_shape_row_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>i_nb_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><name>i_min_y</name></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_nb_y</name> <operator>+</operator> <name>i_min_y</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>pi_sects</name><index>[<expr><name>MAX_SECT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_row</name> <init>= <expr><name>i_y</name> <operator>-</operator> <name>i_min_y</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>i_border</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>puzzle_SHAPE_TOP</name></expr>:</case>

<case>case <expr><name>puzzle_SHAPE_BTM</name></expr>:</case>

<expr_stmt><expr><name><name>pi_sects</name><index>[<expr><name>i_sect</name></expr>]</index></name> <operator>=</operator> <call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal>

<operator>-</operator> <operator>(</operator><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>puzzle_SHAPE_RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>pi_sects</name><index>[<expr><name>i_sect</name></expr>]</index></name> <operator>=</operator> <name>i_width</name> <operator>-</operator> <call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>puzzle_SHAPE_LEFT</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name><name>pi_sects</name><index>[<expr><name>i_sect</name></expr>]</index></name> <operator>=</operator> <call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>i_sect</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>i_section_nbr</name> <operator>=</operator> <name>i_sect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>row_section_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_sect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_row</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_sect</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator> <name><name>pi_sects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_generate_sect_bezier</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_piece_shape</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_border</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>ps_pt</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>ps_piece_shape</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_lines</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_size_x_0</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_size_y_0</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_x_ratio</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>i_width</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>i_size_x_0</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_y_ratio</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>i_lines</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>i_size_y_0</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_min_curve_x</name></decl>, <decl><type ref="prev"/><name>f_min_curve_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>puzzle_get_min_bezier</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f_min_curve_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f_min_curve_y</name></expr></argument>, <argument><expr><name>f_x_ratio</name></expr></argument>, <argument><expr><name>f_y_ratio</name></expr></argument>, <argument><expr><name>ps_pt</name></expr></argument>, <argument><expr><name>i_pts_nbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f_min_curve_y</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name>floor</name><argument_list>(<argument><expr><name>f_min_curve_y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f_min_curve_x</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><call><name>floor</name><argument_list>(<argument><expr><name>f_min_curve_x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_min_y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_border</name><operator>==</operator><name>puzzle_SHAPE_TOP</name><operator>)</operator></expr>?</condition><then><expr><call><name>floor</name><argument_list>(<argument><expr><name>f_min_curve_y</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_nb_y</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_border</name><operator>==</operator><name>puzzle_SHAPE_TOP</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>i_lines</name> <operator>/</operator> <literal type="number">2</literal> <operator>-</operator> <name>i_min_y</name><operator>)</operator></expr></then><else>:<expr><name>i_lines</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>i_row_nbr</name></name> <operator>=</operator> <name>i_nb_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>i_first_row_offset</name></name> <operator>=</operator> <name>i_min_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_shape_row_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name><name>ps_piece_shape</name><operator>-&gt;</operator><name>i_row_nbr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>puzzle_generate_shape_lines</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>ps_piece_shape</name></expr></argument>, <argument><expr><name>i_min_y</name></expr></argument>, <argument><expr><name>i_nb_y</name></expr></argument>, <argument><expr><name>f_x_ratio</name></expr></argument>, <argument><expr><name>f_y_ratio</name></expr></argument>, <argument><expr><name>ps_pt</name></expr></argument>, <argument><expr><name>i_pts_nbr</name></expr></argument>, <argument><expr><name>i_border</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>puzzle_get_min_bezier</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f_min_curve_x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>f_min_curve_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_x_ratio</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_y_ratio</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>f_min_curve_y</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>*</operator> <name>f_y_ratio</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>f_min_curve_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_x_ratio</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>float</name></type> <name>f_t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f_t</name> <operator>&lt;=</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>f_t</name> <operator>+=</operator> <literal type="number">0.1</literal></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name>i_main_t</name> <init>= <expr><call><name>floor</name><argument_list>(<argument><expr><name>f_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_main_t</name> <operator>==</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_main_t</name> <operator>=</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_sub_t</name> <init>= <expr><name>f_t</name> <operator>-</operator> <name>i_main_t</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>f_min_curve_x</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><operator>*</operator><name>f_min_curve_x</name></expr></argument>,<argument><expr><call><name>bezier_val</name><argument_list>(<argument><expr><name>ps_pt</name></expr></argument>,<argument><expr><name>f_sub_t</name></expr></argument>,<argument><expr><name>i_main_t</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f_x_ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>f_min_curve_y</name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><operator>*</operator><name>f_min_curve_y</name></expr></argument>,<argument><expr><call><name>bezier_val</name><argument_list>(<argument><expr><name>ps_pt</name></expr></argument>,<argument><expr><name>f_sub_t</name></expr></argument>,<argument><expr><name>i_main_t</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f_y_ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_generate_shape_lines</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_piece_shape</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_min_y</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_nb_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_x_ratio</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_y_ratio</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_border</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><name>i_min_y</name></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_nb_y</name> <operator>+</operator> <name>i_min_y</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_row</name> <init>= <expr><name>i_y</name> <operator>-</operator> <name>i_min_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>pi_sects</name><index>[<expr><name>MAX_SECT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sect</name> <init>= <expr><call><name>puzzle_detect_curve</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>f_x_ratio</name></expr></argument>, <argument><expr><name>f_y_ratio</name></expr></argument>, <argument><expr><name>ps_pt</name></expr></argument>, <argument><expr><name>i_pts_nbr</name></expr></argument>, <argument><expr><name>i_border</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument>, <argument><expr><name>pi_sects</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>i_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_last_x</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_border</name><operator>==</operator><name>puzzle_SHAPE_TOP</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_y</name><operator>&gt;=</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator></expr>?</condition><then><expr><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i_s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_s</name><operator>&lt;</operator><name>i_sect</name></expr>;</condition> <incr><expr><name>i_s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_current_x</name> <init>= <expr><name><name>pi_sects</name><index>[<expr><name>i_s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_delta</name> <init>= <expr><name>i_current_x</name> <operator>-</operator> <name>i_last_x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pi_sects</name><index>[<expr><name>i_s</name></expr>]</index></name> <operator>=</operator> <name>i_delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_last_x</name> <operator>=</operator> <name>i_current_x</name></expr>;</expr_stmt>

</block_content>}</block></for>

<switch>switch <condition>(<expr><name>i_border</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>puzzle_SHAPE_TOP</name></expr>:</case>

<if_stmt><if>if <condition>( <expr><name>i_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>i_section_nbr</name> <operator>=</operator> <name>i_sect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>row_section_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_sect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_row</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_sect</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator> <name><name>pi_sects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>i_section_nbr</name> <operator>=</operator> <name>i_sect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>row_section_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_sect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_row</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_sect</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator> <name><name>pi_sects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>puzzle_SHAPE_LEFT</name></expr>:</case>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>i_section_nbr</name> <operator>=</operator> <name>i_sect</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>row_section_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_sect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_row</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_sect</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator> <name><name>pi_sects</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_detect_curve</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_x_ratio</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_y_ratio</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_border</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pi_sects</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name>i_main_t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_xd</name></decl>, <decl><type ref="prev"/><name>f_yd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_xo</name> <init>= <expr><name><name>ps_pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_x_ratio</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_yo</name> <init>= <expr><name><name>ps_pt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>*</operator> <name>f_y_ratio</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>i_sect</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>float</name></type> <name>f_t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f_t</name> <operator>&lt;=</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>f_t</name> <operator>+=</operator> <literal type="number">0.1</literal></expr></incr> )</control> <block>{<block_content>

<expr_stmt><expr><name>i_main_t</name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><name>f_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_main_t</name> <operator>==</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_main_t</name> <operator>=</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_sub_t</name> <init>= <expr><name>f_t</name> <operator>-</operator> <name>i_main_t</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_xd</name> <operator>=</operator> <call><name>bezier_val</name><argument_list>(<argument><expr><name>ps_pt</name></expr></argument>,<argument><expr><name>f_sub_t</name></expr></argument>,<argument><expr><name>i_main_t</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f_x_ratio</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_yd</name> <operator>=</operator> <call><name>bezier_val</name><argument_list>(<argument><expr><name>ps_pt</name></expr></argument>,<argument><expr><name>f_sub_t</name></expr></argument>,<argument><expr><name>i_main_t</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f_y_ratio</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>f_yo</name> <operator>&lt;</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_y</name><operator>+</operator><literal type="number">0.5</literal> <operator>&amp;&amp;</operator> <name>f_yd</name> <operator>&gt;=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_y</name><operator>+</operator><literal type="number">0.5</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>f_yo</name> <operator>&gt;</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_y</name><operator>+</operator><literal type="number">0.5</literal> <operator>&amp;&amp;</operator> <name>f_yd</name> <operator>&lt;=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_y</name><operator>+</operator><literal type="number">0.5</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pi_sects</name><index>[<expr><name>i_sect</name></expr>]</index></name> <operator>=</operator> <call><name>floor</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>i_y</name><operator>+</operator><literal type="number">0.5</literal> <operator>-</operator> <name>f_yo</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>f_xd</name> <operator>-</operator> <name>f_xo</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>f_yd</name> <operator>-</operator> <name>f_yo</name><operator>)</operator> <operator>+</operator> <name>f_xo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_sect</name> <operator>&lt;</operator> <name>MAX_SECT</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sect</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f_xo</name> <operator>=</operator> <name>f_xd</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_yo</name> <operator>=</operator> <name>f_yd</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>f_xd</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_pts_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_x_ratio</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_yd</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_pts_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>*</operator> <name>f_y_ratio</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pi_sects</name><index>[<expr><name>i_sect</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i_border</name><operator>==</operator><name>puzzle_SHAPE_TOP</name><operator>)</operator></expr>?</condition><then><expr><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr>

</then><else>:<expr><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_sect</name> <operator>&lt;</operator> <name>MAX_SECT</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sect</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i_s</name> <operator>&lt;</operator> <operator>(</operator><name>i_sect</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pi_sects</name><index>[<expr><name>i_s</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pi_sects</name><index>[<expr><name>i_s</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_temp</name> <init>= <expr><name><name>pi_sects</name><index>[<expr><name>i_s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pi_sects</name><index>[<expr><name>i_s</name></expr>]</index></name> <operator>=</operator> <name><name>pi_sects</name><index>[<expr><name>i_s</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_sects</name><index>[<expr><name>i_s</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>i_s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>i_sect</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_generate_sectLeft2Right</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_piece_shape</name></decl></parameter>, <parameter><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_left_piece_shape</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>ps_piece_shape</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>ps_left_piece_shape</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_min_y</name> <init>= <expr><name><name>ps_left_piece_shape</name><operator>-&gt;</operator><name>i_first_row_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_nb_y</name> <init>= <expr><name><name>ps_left_piece_shape</name><operator>-&gt;</operator><name>i_row_nbr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>i_row_nbr</name></name> <operator>=</operator> <name>i_nb_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>i_first_row_offset</name></name> <operator>=</operator> <name>i_min_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_shape_row_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>i_nb_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><name>i_min_y</name></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_nb_y</name> <operator>+</operator> <name>i_min_y</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_row</name> <init>= <expr><name>i_y</name> <operator>-</operator> <name>i_min_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_left_width</name> <init>= <expr><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_right_width</name> <init>= <expr><name>i_width</name> <operator>-</operator> <call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_section_nbr</name> <init>= <expr><name><name>ps_left_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>i_section_nbr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>i_section_nbr</name> <operator>=</operator> <name>i_section_nbr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>row_section_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_section_nbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_row</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator>

<name><name>ps_left_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator>

<name><name>ps_left_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>+</operator> <name>i_right_width</name> <operator>-</operator> <name>i_left_width</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i_s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_s</name><operator>&lt;</operator><name>i_section_nbr</name></expr>;</condition><incr><expr><name>i_s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator>

<name><name>ps_left_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i_section_nbr</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_s</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator>

<name><name>ps_left_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i_section_nbr</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>i_s</name></expr>]</index></name><operator>.</operator><name>i_width</name>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i_s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_right_width</name> <operator>-</operator> <name>i_left_width</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>puzzle_generate_sectTop2Btm</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_piece_shape</name></decl></parameter>, <parameter><decl><type><name>piece_shape_t</name> <modifier>*</modifier></type><name>ps_top_piece_shape</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_plane</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>ps_piece_shape</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>ps_top_piece_shape</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_top_min_y</name> <init>= <expr><name><name>ps_top_piece_shape</name><operator>-&gt;</operator><name>i_first_row_offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_top_nb_y</name> <init>= <expr><name><name>ps_top_piece_shape</name><operator>-&gt;</operator><name>i_row_nbr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_lines</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_max_y</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ps_desk_planes</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pce_max_lines</name> <operator>-</operator> <name>i_top_min_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_min_y</name> <init>= <expr><name>i_lines</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_nb_y</name> <init>= <expr><name>i_max_y</name> <operator>-</operator> <name>i_min_y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>i_row_nbr</name></name> <operator>=</operator> <name>i_nb_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>i_first_row_offset</name></name> <operator>=</operator> <name>i_min_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>piece_shape_row_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>i_nb_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i_y</name> <init>= <expr><name>i_min_y</name></expr></init></decl>;</init> <condition><expr><name>i_y</name> <operator>&lt;</operator> <name>i_nb_y</name> <operator>+</operator> <name>i_min_y</name></expr>;</condition> <incr><expr><name>i_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_top_y</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>i_min_y</name> <operator>-</operator> <name>i_y</name> <operator>+</operator> <operator>(</operator><name>i_nb_y</name> <operator>-</operator> <name>i_top_nb_y</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_row</name> <init>= <expr><name>i_y</name> <operator>-</operator> <name>i_min_y</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_top_row</name> <init>= <expr><name>i_top_y</name> <operator>-</operator> <name>i_top_min_y</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_top_row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_top_row</name> <operator>&gt;=</operator> <name>i_top_nb_y</name></expr> )</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>i_section_nbr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>row_section_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_row</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator>

<call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_top_width</name> <init>=

<expr><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_top_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_top_y</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name> <init>=

<expr><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><call><name>puzzle_diagonal_limit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>i_plane</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_left_adjust</name> <init>= <expr><operator>(</operator> <name>i_width</name> <operator>-</operator> <name>i_top_width</name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_right_adjust</name> <init>= <expr><operator>(</operator> <name>i_width</name> <operator>-</operator> <name>i_top_width</name> <operator>)</operator> <operator>-</operator> <name>i_left_adjust</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>i_section_nbr</name> <init>= <expr><name><name>ps_top_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_top_row</name></expr>]</index></name><operator>.</operator><name>i_section_nbr</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>i_section_nbr</name> <operator>=</operator> <name>i_section_nbr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name> <operator>=</operator> <call><name>malloc</name> <argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>row_section_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_section_nbr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_row</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ps_row_section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i_s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_s</name><operator>&lt;</operator><name>i_section_nbr</name></expr>;</condition> <incr><expr><name>i_s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>=</operator>

<name><name>ps_top_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_top_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>.</operator><name>i_width</name> <operator>=</operator>

<name><name>ps_top_piece_shape</name><operator>-&gt;</operator><name>ps_piece_shape_row</name><index>[<expr><name>i_top_row</name></expr>]</index></name><operator>.</operator><name><name>ps_row_section</name><index>[<expr><name>i_s</name></expr>]</index></name><operator>.</operator><name>i_width</name>

<operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i_s</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_left_adjust</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>i_s</name> <operator>==</operator> <name>i_section_nbr</name><operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>i_right_adjust</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
