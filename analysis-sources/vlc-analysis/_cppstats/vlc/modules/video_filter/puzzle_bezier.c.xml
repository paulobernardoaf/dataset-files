<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\puzzle_bezier.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_rand.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"puzzle_bezier.h"</cpp:file></cpp:include>

<function><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_scale_curve_H</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_lines</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_shape_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ps_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_x_ratio</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>i_width</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_y_ratio</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>i_lines</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_x_offset</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>i_width</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_y_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_bez_x</name></decl>, <decl><type ref="prev"/><name>f_bez_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_current_scale</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_last_pt</name> <init>= <expr><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i_pts_nbr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_new_pt</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>point_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>i_last_pt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps_new_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_fit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>b_fit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name>i_last_pt</name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_p</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_x_ratio</name> <operator>+</operator> <name>f_x_offset</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name>i_p</name> <operator>==</operator> <name>i_last_pt</name> <operator>-</operator> <literal type="number">2</literal> <operator>||</operator> <name>i_p</name> <operator>==</operator> <name>i_last_pt</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_x_ratio</name> <operator>+</operator> <name>f_x_offset</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_x_ratio</name> <operator>*</operator> <name>f_current_scale</name> <operator>+</operator> <name>f_x_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>*</operator> <name>f_y_ratio</name> <operator>*</operator> <name>f_current_scale</name> <operator>+</operator> <name>f_y_offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><decl><type><name>float</name></type> <name>f_t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f_t</name> <operator>&lt;=</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>f_t</name> <operator>+=</operator> <literal type="number">0.1</literal></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name></type> <name>i_main_t</name> <init>= <expr><call><name>floor</name><argument_list>(<argument><expr><name>f_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_main_t</name> <operator>==</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_main_t</name> <operator>=</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_sub_t</name> <init>= <expr><name>f_t</name> <operator>-</operator> <name>i_main_t</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_bez_x</name> <operator>=</operator> <call><name>bezier_val</name><argument_list>(<argument><expr><name>ps_new_pt</name></expr></argument>,<argument><expr><name>f_sub_t</name></expr></argument>,<argument><expr><name>i_main_t</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f_bez_y</name> <operator>=</operator> <call><name>bezier_val</name><argument_list>(<argument><expr><name>ps_new_pt</name></expr></argument>,<argument><expr><name>f_sub_t</name></expr></argument>,<argument><expr><name>i_main_t</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>f_bez_x</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator> <name>i_width</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>abs</name> <argument_list>( <argument><expr><name>f_bez_y</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>(</operator> <name>f_bez_x</name> <operator>*</operator> <operator>(</operator> <literal type="number">0.9</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>i_lines</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>i_width</name><operator>)</operator> <operator>)</operator> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_fit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>abs</name> <argument_list>( <argument><expr><name>f_bez_y</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>(</operator> <operator>(</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>i_width</name><operator>)</operator> <operator>-</operator> <name>f_bez_x</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <literal type="number">0.9</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>i_lines</name><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>i_width</name><operator>)</operator> <operator>)</operator> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_fit</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_fit</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>f_current_scale</name> <operator>=</operator> <name>f_current_scale</name> <operator>*</operator> <literal type="number">0.9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

while <condition>(<expr><operator>(</operator><operator>!</operator><name>b_fit</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>f_current_scale</name><operator>&gt;</operator><literal type="number">0.1</literal><operator>)</operator></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b_fit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_new_pt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>f_current_scale</name> <operator>=</operator> <name>f_current_scale</name> <operator>*</operator> <operator>(</operator><literal type="number">0.5</literal> <operator>+</operator> <literal type="number">0.5</literal><operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_shape_size</name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name>i_last_pt</name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_p</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_p</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_x_ratio</name> <operator>+</operator> <name>f_x_offset</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name>i_p</name> <operator>==</operator> <name>i_last_pt</name> <operator>-</operator> <literal type="number">2</literal> <operator>||</operator> <name>i_p</name> <operator>==</operator> <name>i_last_pt</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_x_ratio</name> <operator>+</operator> <name>f_x_offset</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_x_ratio</name> <operator>*</operator> <name>f_current_scale</name> <operator>+</operator> <name>f_x_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>*</operator> <name>f_y_ratio</name> <operator>*</operator> <name>f_current_scale</name> <operator>+</operator> <name>f_y_offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ps_new_pt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_H_2_scale_curve_V</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_lines</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>i_shape_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ps_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_bezier_scale_H</name> <init>= <expr><call><name>puzzle_scale_curve_H</name><argument_list>(<argument><expr><name>i_lines</name></expr></argument>, <argument><expr><name>i_width</name></expr></argument>, <argument><expr><name>i_pts_nbr</name></expr></argument>, <argument><expr><name>ps_pt</name></expr></argument>, <argument><expr><name>i_shape_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pts_V</name> <init>= <expr><call><name>puzzle_curve_H_2_V</name><argument_list>(<argument><expr><name>i_pts_nbr</name></expr></argument>, <argument><expr><name>ps_bezier_scale_H</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ps_bezier_scale_H</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ps_pts_V</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_curve_H_2_V</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ps_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_new_pt</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>point_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i_pts_nbr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps_new_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i_pts_nbr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ps_new_pt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_curve_H_2_negative</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ps_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_new_pt</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>point_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i_pts_nbr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps_new_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i_pts_nbr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>=</operator> <operator>-</operator><name><name>ps_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ps_new_pt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_curve_V_2_negative</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>, <parameter><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_pt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ps_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_new_pt</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>point_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i_pts_nbr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps_new_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i_pts_nbr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <operator>-</operator><name><name>ps_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ps_new_pt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>point_t</name> <modifier>*</modifier></type><name>puzzle_rand_bezier</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pts_nbr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NB_PRIM</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>point_t</name></type> <name><name>ps_pt</name><index>[<expr><name>NB_PRIM</name></expr>]</index><index>[<expr><literal type="number">19</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.708333333333333</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.375</literal></expr>, <expr><operator>-</operator><literal type="number">0.333333333333333</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.166666666666667</literal></expr>, <expr><literal type="number">0.0833333333333333</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.0833333333333334</literal></expr>, <expr><literal type="number">0.208333333333333</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.375</literal></expr>, <expr><literal type="number">0.416666666666667</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.4</literal></expr>, <expr><literal type="number">0.583333333333333</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.416666666666667</literal></expr>, <expr><literal type="number">0.833333333333333</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.25</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.25</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.416666666666667</literal></expr>, <expr><literal type="number">0.833333333333333</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.4</literal></expr>, <expr><literal type="number">0.583333333333333</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.375</literal></expr>, <expr><literal type="number">0.416666666666667</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.0833333333333334</literal></expr>, <expr><literal type="number">0.208333333333333</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.166666666666667</literal></expr>, <expr><literal type="number">0.0833333333333333</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.375</literal></expr>, <expr><operator>-</operator><literal type="number">0.333333333333333</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.708333333333333</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.708231074018077</literal></expr>, <expr><literal type="number">0.00464090724581488</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.323236452068492</literal></expr>, <expr><operator>-</operator><literal type="number">0.372786060362316</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.116455168200171</literal></expr>, <expr><literal type="number">0.044302770499351</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.0335691043909019</literal></expr>, <expr><literal type="number">0.211488362938889</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.437927544463254</literal></expr>, <expr><literal type="number">0.38719460194857</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.465325829944998</literal></expr>, <expr><literal type="number">0.551293871552922</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.483454564038933</literal></expr>, <expr><literal type="number">0.65987409733561</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.190232837055291</literal></expr>, <expr><literal type="number">0.93567381392124</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.0642797691187335</literal></expr>, <expr><literal type="number">0.936855546259066</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.313367868665637</literal></expr>, <expr><literal type="number">0.938012091966671</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.487146524283283</literal></expr>, <expr><literal type="number">0.816195130161918</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.469545566313243</literal></expr>, <expr><literal type="number">0.564387421486367</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.446892478470506</literal></expr>, <expr><literal type="number">0.24030153060388</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.207135456718658</literal></expr>, <expr><literal type="number">0.246041323358689</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.287851875888374</literal></expr>, <expr><literal type="number">0.122157561245575</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.492785457693622</literal></expr>, <expr><operator>-</operator><literal type="number">0.19237501290106</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.707786879710212</literal></expr>, <expr><literal type="number">0.000871347032899226</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.704537606957651</literal></expr>, <expr><literal type="number">0.00470344095405053</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.435930692234854</literal></expr>, <expr><operator>-</operator><literal type="number">0.352359270526667</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.228149843936683</literal></expr>, <expr><literal type="number">0.0679948519756222</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.146863413857337</literal></expr>, <expr><literal type="number">0.232442568245956</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.400774053301818</literal></expr>, <expr><literal type="number">0.353459760810654</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.422294600163745</literal></expr>, <expr><literal type="number">0.522585095895632</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.436816721748459</literal></expr>, <expr><literal type="number">0.636711316521778</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.139151386987432</literal></expr>, <expr><literal type="number">1.08020929564109</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.110882572064929</literal></expr>, <expr><literal type="number">1.08261729027387</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.36153850539327</literal></expr>, <expr><literal type="number">1.08503127493587</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.34588115345217</literal></expr>, <expr><literal type="number">0.865990116291394</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.329903557511847</literal></expr>, <expr><literal type="number">0.612892723601664</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.308148644342904</literal></expr>, <expr><literal type="number">0.26827818823501</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.127493141873546</literal></expr>, <expr><literal type="number">0.13002329074962</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.214157995034913</literal></expr>, <expr><literal type="number">0.0010516930680228</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.419298604696494</literal></expr>, <expr><operator>-</operator><literal type="number">0.304231373969182</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.710915592189813</literal></expr>, <expr><operator>-</operator><literal type="number">0.00442574861414977</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.712310641244798</literal></expr>, <expr><operator>-</operator><literal type="number">0.00176730760415818</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.493540738434648</literal></expr>, <expr><operator>-</operator><literal type="number">0.309260977632173</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.285884861158849</literal></expr>, <expr><literal type="number">0.102814242456153</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.204387117876255</literal></expr>, <expr><literal type="number">0.264539501285563</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.420693738052021</literal></expr>, <expr><literal type="number">0.397849004532357</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.441431505287778</literal></expr>, <expr><literal type="number">0.562611714939519</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.461628378308195</literal></expr>, <expr><literal type="number">0.723076990818189</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.237390284827422</literal></expr>, <expr><literal type="number">0.937205665156549</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.012635296180645</literal></expr>, <expr><literal type="number">0.941029970697368</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.262998571390198</literal></expr>, <expr><literal type="number">0.94485944149288</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.388416614305901</literal></expr>, <expr><literal type="number">0.85661645417048</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.371248440058972</literal></expr>, <expr><literal type="number">0.611257540385605</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.345208629600827</literal></expr>, <expr><literal type="number">0.239109662732447</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.0581354739284663</literal></expr>, <expr><literal type="number">0.176880217503811</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.136998743377185</literal></expr>, <expr><literal type="number">0.0517079719473858</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.348267592311711</literal></expr>, <expr><operator>-</operator><literal type="number">0.283619188873049</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.708090161530147</literal></expr>, <expr><literal type="number">0.000345266964160967</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.711243094744545</literal></expr>, <expr><operator>-</operator><literal type="number">0.00459592941542872</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.344045254972826</literal></expr>, <expr><operator>-</operator><literal type="number">0.249350550360079</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.133712969208732</literal></expr>, <expr><literal type="number">0.170729185550043</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.0464161071620253</literal></expr>, <expr><literal type="number">0.345080177938788</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.422103631801675</literal></expr>, <expr><literal type="number">0.334575981154338</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.450380528566562</literal></expr>, <expr><literal type="number">0.498555760394576</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.467099640727027</literal></expr>, <expr><literal type="number">0.595511106801977</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.207078052226595</literal></expr>, <expr><literal type="number">0.975846125373965</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.042159574981007</literal></expr>, <expr><literal type="number">0.973462055639965</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.287191021206139</literal></expr>, <expr><literal type="number">0.971118219914322</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.330852515542335</literal></expr>, <expr><literal type="number">0.808592956913444</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.310390322812144</literal></expr>, <expr><literal type="number">0.55585802623889</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.283433878730578</literal></expr>, <expr><literal type="number">0.222910569628582</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.164262943948071</literal></expr>, <expr><literal type="number">0.173598366742734</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.251741291720702</literal></expr>, <expr><literal type="number">0.049453960261478</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.457341230249114</literal></expr>, <expr><operator>-</operator><literal type="number">0.24232203906962</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.708383662881845</literal></expr>, <expr><literal type="number">0.00453591968074395</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.709563566764519</literal></expr>, <expr><literal type="number">0.000504612933340335</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.401784990268149</literal></expr>, <expr><operator>-</operator><literal type="number">0.401999124062464</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.193592021826356</literal></expr>, <expr><literal type="number">0.0146187796927396</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.111906932669809</literal></expr>, <expr><literal type="number">0.178079970851903</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.31875772800715</literal></expr>, <expr><literal type="number">0.350308507939804</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.348317101378293</literal></expr>, <expr><literal type="number">0.519642874263023</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.364751907373417</literal></expr>, <expr><literal type="number">0.613791604139223</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.261109769059908</literal></expr>, <expr><literal type="number">0.917602975781519</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.0140971269841824</literal></expr>, <expr><literal type="number">0.920487199482641</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.239116574515885</literal></expr>, <expr><literal type="number">0.923443829366756</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.464370661288271</literal></expr>, <expr><literal type="number">0.826483978760365</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.447638420230199</literal></expr>, <expr><literal type="number">0.579781906213412</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.422345781938457</literal></expr>, <expr><literal type="number">0.206864359478527</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.125463036793575</literal></expr>, <expr><literal type="number">0.196073913812856</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.210079852894537</literal></expr>, <expr><literal type="number">0.0665488867084866</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.418467910269307</literal></expr>, <expr><operator>-</operator><literal type="number">0.25243580242811</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.703900021885974</literal></expr>, <expr><literal type="number">0.00330911444674605</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.705550924110721</literal></expr>, <expr><literal type="number">0.00312677407583926</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.415041079490389</literal></expr>, <expr><operator>-</operator><literal type="number">0.256262603613135</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.206251758814373</literal></expr>, <expr><literal type="number">0.165228519752475</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.127460686840124</literal></expr>, <expr><literal type="number">0.324287121648782</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.353486555975517</literal></expr>, <expr><literal type="number">0.448219649272319</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.374301593332884</literal></expr>, <expr><literal type="number">0.615673871700604</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.394013085772568</literal></expr>, <expr><literal type="number">0.774250221227079</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.28341474824943</literal></expr>, <expr><literal type="number">1.03226208905838</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.0332682368974526</literal></expr>, <expr><literal type="number">1.03258310507818</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.21500235815775</literal></expr>, <expr><literal type="number">1.03290171371209</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.359673321091526</literal></expr>, <expr><literal type="number">0.870921326239785</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.339932613238046</literal></expr>, <expr><literal type="number">0.624982013252291</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.312186121753393</literal></expr>, <expr><literal type="number">0.279302764858672</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.115889225615101</literal></expr>, <expr><literal type="number">0.23413749518865</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.199563649684811</literal></expr>, <expr><literal type="number">0.112671061164123</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.404949947429742</literal></expr>, <expr><operator>-</operator><literal type="number">0.185479078044395</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.711077310890697</literal></expr>, <expr><operator>-</operator><literal type="number">0.00496397607736578</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.703393023950601</literal></expr>, <expr><literal type="number">0.00477096251262726</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.397655885794691</literal></expr>, <expr><operator>-</operator><literal type="number">0.396549402674607</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.188941722741602</literal></expr>, <expr><literal type="number">0.0154382717692692</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.108388702754651</literal></expr>, <expr><literal type="number">0.174444497740687</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.373390092271521</literal></expr>, <expr><literal type="number">0.482883861046198</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.40085845720332</literal></expr>, <expr><literal type="number">0.649893787354158</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.415216707820891</literal></expr>, <expr><literal type="number">0.73719313638733</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.207371750103189</literal></expr>, <expr><literal type="number">0.945376369116883</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.0450859051405016</literal></expr>, <expr><literal type="number">0.945770549381538</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.295681992651987</literal></expr>, <expr><literal type="number">0.946161823046823</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.436428045351514</literal></expr>, <expr><literal type="number">0.895032817250379</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.416214840162102</literal></expr>, <expr><literal type="number">0.640148265397975</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.392784984133714</literal></expr>, <expr><literal type="number">0.344702377534045</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.112552686103251</literal></expr>, <expr><literal type="number">0.228040049100136</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.197835182813393</literal></expr>, <expr><literal type="number">0.100734153702732</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.405083123585628</literal></expr>, <expr><operator>-</operator><literal type="number">0.208636299638369</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.710532321943806</literal></expr>, <expr><literal type="number">0.00118461271792703</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.708545258498605</literal></expr>, <expr><operator>-</operator><literal type="number">0.00125649641636185</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.337498620726249</literal></expr>, <expr><operator>-</operator><literal type="number">0.244893936731276</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.124910631945282</literal></expr>, <expr><literal type="number">0.17201407250253</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.0378099534640198</literal></expr>, <expr><literal type="number">0.342827911406433</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.388593443990334</literal></expr>, <expr><literal type="number">0.484174318751186</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.418161094500799</literal></expr>, <expr><literal type="number">0.649198946145559</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.437373248647437</literal></expr>, <expr><literal type="number">0.756426897124284</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.189109020838902</literal></expr>, <expr><literal type="number">0.919750563663455</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.0617320119458061</literal></expr>, <expr><literal type="number">0.92141119323056</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.31608889374516</literal></expr>, <expr><literal type="number">0.923095098586168</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.498311890876136</literal></expr>, <expr><literal type="number">0.848907293614162</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.486010157001842</literal></expr>, <expr><literal type="number">0.596632149071449</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.461260133020122</literal></expr>, <expr><literal type="number">0.0890763897591911</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.075676233826577</literal></expr>, <expr><literal type="number">0.15314863012444</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.155893607369245</literal></expr>, <expr><literal type="number">0.0261168678327565</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.366248653274704</literal></expr>, <expr><operator>-</operator><literal type="number">0.307000149194794</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.711164480468843</literal></expr>, <expr><literal type="number">0.00394203362859574</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.707183721193905</literal></expr>, <expr><literal type="number">0.00108263364450203</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.483784802307194</literal></expr>, <expr><operator>-</operator><literal type="number">0.278675576139177</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.276928949597787</literal></expr>, <expr><literal type="number">0.142419327760986</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.193170452053892</literal></expr>, <expr><literal type="number">0.312925871385917</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.451215340488792</literal></expr>, <expr><literal type="number">0.477259970702323</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.47460300367851</literal></expr>, <expr><literal type="number">0.643765731024187</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.494031809431451</literal></expr>, <expr><literal type="number">0.782086864170215</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.236790915210626</literal></expr>, <expr><literal type="number">0.959374429536679</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.0132927154237516</literal></expr>, <expr><literal type="number">0.955639549881874</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.267150847268955</literal></expr>, <expr><literal type="number">0.951848299853113</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.394360682972295</literal></expr>, <expr><literal type="number">0.847565361471232</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.378470732344786</literal></expr>, <expr><literal type="number">0.601630247482969</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.354536849929646</literal></expr>, <expr><literal type="number">0.231195987620713</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.0517827835992971</literal></expr>, <expr><literal type="number">0.214030018332778</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.131796334571256</literal></expr>, <expr><literal type="number">0.0912722226051247</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.336621017220957</literal></expr>, <expr><operator>-</operator><literal type="number">0.222972380306016</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.703679022364791</literal></expr>, <expr><operator>-</operator><literal type="number">0.00331356185794636</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.71248840208346</literal></expr>, <expr><operator>-</operator><literal type="number">0.000315316402810925</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.335615004340797</literal></expr>, <expr><operator>-</operator><literal type="number">0.24819255482402</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.131187942697538</literal></expr>, <expr><literal type="number">0.164054053482729</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.0493962500017139</literal></expr>, <expr><literal type="number">0.3289947791894</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.419381248020232</literal></expr>, <expr><literal type="number">0.390159881019368</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.441651048160997</literal></expr>, <expr><literal type="number">0.558451191050566</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.455822752006908</literal></expr>, <expr><literal type="number">0.665545758156122</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.233491027161151</literal></expr>, <expr><literal type="number">0.962685238392525</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.0133445688612305</literal></expr>, <expr><literal type="number">0.95860585518251</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.262151404887793</literal></expr>, <expr><literal type="number">0.954493893837471</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.353774477399895</literal></expr>, <expr><literal type="number">0.909561597589476</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.33709535778317</literal></expr>, <expr><literal type="number">0.660905314411181</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.31704981166686</literal></expr>, <expr><literal type="number">0.362061544110332</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.105412252277536</literal></expr>, <expr><literal type="number">0.191206346512902</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.186218651070473</literal></expr>, <expr><literal type="number">0.0649153599195794</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.398293919310497</literal></expr>, <expr><operator>-</operator><literal type="number">0.266533575537957</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.704071013216639</literal></expr>, <expr><literal type="number">0.00309631694609307</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.705056079463317</literal></expr>, <expr><literal type="number">0.00448211481221729</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.436957920272407</literal></expr>, <expr><operator>-</operator><literal type="number">0.370262236529651</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.229712063674328</literal></expr>, <expr><literal type="number">0.0431705143488563</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.148227797168837</literal></expr>, <expr><literal type="number">0.205722687925072</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.393257971601542</literal></expr>, <expr><literal type="number">0.424195267916701</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.413510880163265</literal></expr>, <expr><literal type="number">0.589027317989955</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.431898814144998</literal></expr>, <expr><literal type="number">0.738680926783159</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.283603628196569</literal></expr>, <expr><literal type="number">0.915912313032585</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.0357952161759055</literal></expr>, <expr><literal type="number">0.912250885919817</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.219122757016883</literal></expr>, <expr><literal type="number">0.908484413381742</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.443769349276008</literal></expr>, <expr><literal type="number">0.835076661704473</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.426106787792343</literal></expr>, <expr><literal type="number">0.583529647320461</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.400589787646949</literal></expr>, <expr><literal type="number">0.220121134430258</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.160593774137044</literal></expr>, <expr><literal type="number">0.15625323679053</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.245514983733696</literal></expr>, <expr><literal type="number">0.0314675787386357</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.452432214072397</literal></expr>, <expr><operator>-</operator><literal type="number">0.272582526914925</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.707859045957901</literal></expr>, <expr><operator>-</operator><literal type="number">0.00364987569003833</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>,

<expr><block>{ <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.707920686483174</literal></expr>, <expr><literal type="number">0.00318900911649754</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.434372174464315</literal></expr>, <expr><operator>-</operator><literal type="number">0.307446433658587</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.22207624254243</literal></expr>, <expr><literal type="number">0.109425261995917</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.137453117820789</literal></expr>, <expr><literal type="number">0.275594180895755</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.340508174095858</literal></expr>, <expr><literal type="number">0.364631782467402</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.369080584284576</literal></expr>, <expr><literal type="number">0.527714098008385</literal></expr>}</block></expr>, <expr><block>{ <expr><operator>-</operator><literal type="number">0.383671882476694</literal></expr>, <expr><literal type="number">0.610996631060469</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">0.233753076988816</literal></expr>, <expr><literal type="number">0.939761357928644</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0.0204626018463874</literal></expr>, <expr><literal type="number">0.936196353095824</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.268226367774715</literal></expr>, <expr><literal type="number">0.932721826949446</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.500766516589953</literal></expr>, <expr><literal type="number">0.908734435247741</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.488915515020803</literal></expr>, <expr><literal type="number">0.659928459184412</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.468202989215343</literal></expr>, <expr><literal type="number">0.225079120105809</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0.106186153956061</literal></expr>, <expr><literal type="number">0.298643666003939</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.184680334657865</literal></expr>, <expr><literal type="number">0.170455849778656</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0.39345790442032</literal></expr>, <expr><operator>-</operator><literal type="number">0.1704960590812</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0.713223372514099</literal></expr>, <expr><operator>-</operator><literal type="number">0.000707944210808817</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_pts_nbr</name> <operator>!=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_last_pt</name> <init>= <expr><operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>i_pts_nbr</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_item</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>)</operator> <call><name>vlc_mrand48</name><argument_list>()</argument_list></call><operator>)</operator> <operator>%</operator> <name>NB_PRIM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>point_t</name> <modifier>*</modifier></type><name>ps_new_pt</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>point_t</name></expr></argument> )</argument_list></sizeof> <operator>*</operator> <name>i_last_pt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps_new_pt</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_last_pt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_item</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_item</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_last_pt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_item</name></expr>]</index><index>[<expr><name>i_last_pt</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>.</operator><name>f_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>=</operator> <name><name>ps_pt</name><index>[<expr><name>i_item</name></expr>]</index><index>[<expr><name>i_last_pt</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>.</operator><name>f_y</name></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_current_scale</name> <init>= <expr><literal type="number">0.7</literal> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">1001</literal> <operator>)</operator> <operator>/</operator> <literal type="number">1000</literal> <operator>)</operator><operator>*</operator><literal type="number">0.3</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i_p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_p</name> <operator>&lt;</operator> <name>i_last_pt</name></expr>;</condition> <incr><expr><name>i_p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_p</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_p</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_p</name> <operator>!=</operator> <name>i_last_pt</name> <operator>-</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_p</name> <operator>!=</operator> <name>i_last_pt</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>=</operator> <name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>*</operator> <name>f_current_scale</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>=</operator> <name><name>ps_new_pt</name><index>[<expr><name>i_p</name></expr>]</index></name><operator>.</operator><name>f_y</name> <operator>*</operator> <name>f_current_scale</name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>float</name></type> <name>f_offset</name> <init>= <expr><operator>(</operator> <operator>(</operator> <operator>(</operator><name>float</name><operator>)</operator> <operator>(</operator><call><name>vlc_mrand48</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">1001</literal> <operator>)</operator> <operator>/</operator> <literal type="number">1000</literal> <operator>)</operator> <operator>-</operator> <literal type="number">0.5</literal> <operator>)</operator> <operator>*</operator> <literal type="number">0.2</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_pts_nbr</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>+=</operator> <name>f_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>+=</operator> <name>f_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps_new_pt</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>f_x</name> <operator>+=</operator> <name>f_offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ps_new_pt</name></expr>;</return>

</block_content>}</block></function>

</unit>
