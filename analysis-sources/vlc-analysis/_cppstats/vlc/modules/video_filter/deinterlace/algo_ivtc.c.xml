<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\deinterlace\algo_ivtc.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmx.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"deinterlace.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algo_ivtc.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{ <decl><name>IVTC_MODE_DETECTING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>IVTC_MODE_TELECINED_NTSC_HARD</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>IVTC_MODE_TELECINED_NTSC_SOFT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl> }</block></enum></type> <name>ivtc_mode</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{ <decl><name>FIELD_PAIR_TPBP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>FIELD_PAIR_TPBC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>FIELD_PAIR_TCBP</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><name>FIELD_PAIR_TCBC</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>FIELD_PAIR_TCBN</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><name>FIELD_PAIR_TNBC</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>FIELD_PAIR_TNBN</name> <init>= <expr><literal type="number">6</literal></expr></init></decl> }</block></enum></type> <name>ivtc_field_pair</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CADENCE_POS</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{ <decl><name>CADENCE_POS_INVALID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>CADENCE_POS_PROGRESSIVE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>CADENCE_POS_TFF_ABC</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>CADENCE_POS_TFF_BCD</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>CADENCE_POS_TFF_CDE</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>CADENCE_POS_TFF_EAB</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>CADENCE_POS_BFF_ABC</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>CADENCE_POS_BFF_BCD</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>CADENCE_POS_BFF_CDE</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>CADENCE_POS_BFF_EAB</name> <init>= <expr><literal type="number">8</literal></expr></init></decl> }</block></enum></type> <name>ivtc_cadence_pos</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CADENCE_POS_TFF_FIRST</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CADENCE_POS_TFF_END</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CADENCE_POS_BFF_FIRST</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CADENCE_POS_BFF_END</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>pi_detected_pos_to_bitmask</name><index>[<expr><name>NUM_CADENCE_POS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x0808</literal></expr>, 

<expr><literal type="number">0x0001</literal></expr>, 

<expr><literal type="number">0x0002</literal></expr>, 

<expr><literal type="number">0x0004</literal></expr>, 

<expr><literal type="number">0x0010</literal></expr>, 

<expr><literal type="number">0x0100</literal></expr>, 

<expr><literal type="number">0x0200</literal></expr>, 

<expr><literal type="number">0x0400</literal></expr>, 

<expr><literal type="number">0x1000</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEKTOR_CADENCE_POS_ALL</name></cpp:macro> <cpp:value>0x1F1F</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEKTOR_CADENCE_POS_TFF</name></cpp:macro> <cpp:value>0x00FF</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEKTOR_CADENCE_POS_BFF</name></cpp:macro> <cpp:value>0xFF00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEKTOR_CADENCE_POS_TFF_HIGH</name></cpp:macro> <cpp:value>0x0010</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEKTOR_CADENCE_POS_TFF_LOW</name></cpp:macro> <cpp:value>0x0001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEKTOR_CADENCE_POS_BFF_HIGH</name></cpp:macro> <cpp:value>0x1000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VEKTOR_CADENCE_POS_BFF_LOW</name></cpp:macro> <cpp:value>0x0100</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{ <decl><name>TFD_INVALID</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><name>TFD_TFF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>TFD_BFF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> }</block></enum></type> <name>ivtc_tfd</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ivtc_field_pair</name></type> <name><name>pi_best_field_pairs</name><index>[<expr><name>NUM_CADENCE_POS</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><name>FIELD_PAIR_TPBP</name></expr>, <expr><name>FIELD_PAIR_TCBC</name></expr>, <expr><name>FIELD_PAIR_TNBN</name></expr>}</block></expr>, 

<expr><block>{<expr><name>FIELD_PAIR_TPBP</name></expr>, <expr><name>FIELD_PAIR_TCBP</name></expr>, <expr><name>FIELD_PAIR_TNBC</name></expr>}</block></expr>, 

<expr><block>{<expr><name>FIELD_PAIR_TCBP</name></expr>, <expr><name>FIELD_PAIR_TNBC</name></expr>, <expr><name>FIELD_PAIR_TNBN</name></expr>}</block></expr>, 

<expr><block>{<expr><name>FIELD_PAIR_TCBP</name></expr>, <expr><name>FIELD_PAIR_TCBC</name></expr>, <expr><name>FIELD_PAIR_TNBN</name></expr>}</block></expr>, 

<expr><block>{<expr><name>FIELD_PAIR_TPBP</name></expr>, <expr><name>FIELD_PAIR_TCBC</name></expr>, <expr><name>FIELD_PAIR_TNBC</name></expr>}</block></expr>, 

<expr><block>{<expr><name>FIELD_PAIR_TPBP</name></expr>, <expr><name>FIELD_PAIR_TPBC</name></expr>, <expr><name>FIELD_PAIR_TCBN</name></expr>}</block></expr>, 

<expr><block>{<expr><name>FIELD_PAIR_TPBC</name></expr>, <expr><name>FIELD_PAIR_TCBN</name></expr>, <expr><name>FIELD_PAIR_TNBN</name></expr>}</block></expr>, 

<expr><block>{<expr><name>FIELD_PAIR_TPBC</name></expr>, <expr><name>FIELD_PAIR_TCBC</name></expr>, <expr><name>FIELD_PAIR_TNBN</name></expr>}</block></expr>, 

<expr><block>{<expr><name>FIELD_PAIR_TPBP</name></expr>, <expr><name>FIELD_PAIR_TCBC</name></expr>, <expr><name>FIELD_PAIR_TCBN</name></expr>}</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static const ivtc_field_pair pi_worst_field_pairs[NUM_CADENCE_POS][4] = {

{FIELD_PAIR_TPBC, FIELD_PAIR_TCBP,

FIELD_PAIR_TCBN, FIELD_PAIR_TNBC}, 

{FIELD_PAIR_TPBC, FIELD_PAIR_TCBC,

FIELD_PAIR_TCBN, FIELD_PAIR_TNBN}, 

{FIELD_PAIR_TPBP, FIELD_PAIR_TPBC,

FIELD_PAIR_TCBC, FIELD_PAIR_TCBN}, 

{FIELD_PAIR_TPBP, FIELD_PAIR_TPBC,

FIELD_PAIR_TCBN, FIELD_PAIR_TNBC}, 

{FIELD_PAIR_TPBC, FIELD_PAIR_TCBP,

FIELD_PAIR_TCBN, FIELD_PAIR_TNBN}, 

{FIELD_PAIR_TCBP, FIELD_PAIR_TCBC,

FIELD_PAIR_TNBC, FIELD_PAIR_TNBN}, 

{FIELD_PAIR_TPBP, FIELD_PAIR_TCBP,

FIELD_PAIR_TCBC, FIELD_PAIR_TNBC}, 

{FIELD_PAIR_TPBP, FIELD_PAIR_TCBP,

FIELD_PAIR_TNBC, FIELD_PAIR_TCBN}, 

{FIELD_PAIR_TCBP, FIELD_PAIR_TPBC,

FIELD_PAIR_TNBC, FIELD_PAIR_TNBN}, 

};

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_detected_pos_to_cadence_pos</name><index>[<expr><name>NUM_CADENCE_POS</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">3</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">1</literal></expr>, 

<expr><literal type="number">2</literal></expr>, 

<expr><literal type="number">4</literal></expr>, 

<expr><literal type="number">0</literal></expr>, 

<expr><literal type="number">1</literal></expr>, 

<expr><literal type="number">2</literal></expr>, 

<expr><literal type="number">4</literal></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_detected_pos_to_tfd</name><index>[<expr><name>NUM_CADENCE_POS</name></expr>]</index></name> <init>= <expr><block>{

<expr><name>TFD_INVALID</name></expr>, 

<expr><name>TFD_TFF</name></expr>, 

<expr><name>TFD_TFF</name></expr>, 

<expr><name>TFD_TFF</name></expr>, 

<expr><name>TFD_TFF</name></expr>, 

<expr><name>TFD_BFF</name></expr>, 

<expr><name>TFD_BFF</name></expr>, 

<expr><name>TFD_BFF</name></expr>, 

<expr><name>TFD_BFF</name></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><enum>enum <block>{ <decl><name>IVTC_OP_DROP_FRAME</name></decl>,

<decl><name>IVTC_OP_COPY_N</name></decl>,

<decl><name>IVTC_OP_COPY_C</name></decl>,

<decl><name>IVTC_OP_COMPOSE_TNBC</name></decl>,

<decl><name>IVTC_OP_COMPOSE_TCBN</name></decl> }</block></enum></type> <name>ivtc_op</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ivtc_op</name></type> <name><name>pi_reconstruction_ops</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ 

<expr><block>{<expr><name>IVTC_OP_COMPOSE_TNBC</name></expr>,

<expr><name>IVTC_OP_COPY_N</name></expr>,

<expr><name>IVTC_OP_COPY_N</name></expr>,

<expr><name>IVTC_OP_DROP_FRAME</name></expr>,

<expr><name>IVTC_OP_COMPOSE_TNBC</name></expr>}</block></expr>,

<expr><block>{<expr><name>IVTC_OP_COMPOSE_TCBN</name></expr>,

<expr><name>IVTC_OP_COPY_N</name></expr>,

<expr><name>IVTC_OP_COPY_N</name></expr>,

<expr><name>IVTC_OP_DROP_FRAME</name></expr>,

<expr><name>IVTC_OP_COMPOSE_TCBN</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_timestamp_deltas</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IVTCFrameInit</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_top_rep</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_top_rep</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_bot_rep</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_bot_rep</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_motion</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_motion</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_s_cadence_pos</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_s_cadence_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_s_reliable</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_s_reliable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_cadence_pos</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_cadence_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_raw</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_raw</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_v_reliable</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_v_reliable</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_all_progressives</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_all_progressives</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_s_cadence_pos</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>CADENCE_POS_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_s_reliable</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_cadence_pos</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>CADENCE_POS_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_raw</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>VEKTOR_CADENCE_POS_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_v_reliable</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>CADENCE_POS_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_top_rep</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_bot_rep</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_motion</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_all_progressives</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TPBP</name></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBC</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TPBC</name></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBP</name></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBC</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBC</name></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBN</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBC</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBN</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IVTCLowLevelDetect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_next</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBN</name></expr>]</index></name> <operator>=</operator> <call><name>CalculateInterlaceScore</name><argument_list>( <argument><expr><name>p_next</name></expr></argument>,

<argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBC</name></expr>]</index></name> <operator>=</operator> <call><name>CalculateInterlaceScore</name><argument_list>( <argument><expr><name>p_next</name></expr></argument>,

<argument><expr><name>p_curr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBN</name></expr>]</index></name> <operator>=</operator> <call><name>CalculateInterlaceScore</name><argument_list>( <argument><expr><name>p_curr</name></expr></argument>,

<argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_bot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_motion</name> <init>= <expr><call><name>EstimateNumBlocksWithMotion</name><argument_list>(<argument><expr><name>p_curr</name></expr></argument>, <argument><expr><name>p_next</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_motion</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>i_motion</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_top_rep</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_top</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>i_bot</name><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_bot_rep</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i_bot</name> <operator>&lt;=</operator> <literal type="number">2</literal><operator>*</operator><name>i_top</name><operator>/</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IVTCCadenceDetectAlgoScores</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_next</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pi_ivtc_scores</name><index>[<expr><name>NUM_CADENCE_POS</name></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_CADENCE_POS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pi_ivtc_scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[ <expr><name><name>pi_best_field_pairs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ]</index></name>

<operator>+</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[ <expr><name><name>pi_best_field_pairs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ]</index></name>

<operator>+</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[ <expr><name><name>pi_best_field_pairs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>CADENCE_POS_PROGRESSIVE</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>minscore</name> <init>= <expr><name><name>pi_ivtc_scores</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>imin</name> <init>= <expr><name>CADENCE_POS_TFF_FIRST</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>iend</name> <init>= <expr><name>CADENCE_POS_TFF_END</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_next</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>imin</name> <operator>=</operator> <name>CADENCE_POS_BFF_FIRST</name></expr>;</expr_stmt> 

<expr_stmt><expr><name>iend</name> <operator>=</operator> <name>CADENCE_POS_BFF_END</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>imin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pi_ivtc_scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>minscore</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>minscore</name> <operator>=</operator> <name><name>pi_ivtc_scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_s_cadence_pos</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mean</name> <init>= <expr><name><name>pi_ivtc_scores</name><index>[<expr><name>CADENCE_POS_PROGRESSIVE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mean_except_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>j</name> <operator>!=</operator> <name>CADENCE_POS_PROGRESSIVE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mean_except_min</name> <operator>=</operator> <name><name>pi_ivtc_scores</name><index>[<expr><name>CADENCE_POS_PROGRESSIVE</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>imin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>mean</name> <operator>+=</operator> <name><name>pi_ivtc_scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <name>j</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mean_except_min</name> <operator>+=</operator> <name><name>pi_ivtc_scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>mean</name> <operator>/=</operator> <operator>(</operator><name>iend</name> <operator>-</operator> <name>imin</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mean_except_min</name> <operator>/=</operator> <operator>(</operator><name>iend</name> <operator>-</operator> <name>imin</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>mean_ratio</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>mean_except_min</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>mean</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>pi_ivtc_scores</name><index>[<expr><name>CADENCE_POS_PROGRESSIVE</name></expr>]</index></name> <operator>-</operator> <name>mean</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>var</name> <init>= <expr><name>diff</name><operator>*</operator><name>diff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>var_except_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>j</name> <operator>!=</operator> <name>CADENCE_POS_PROGRESSIVE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>diff_exm</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>pi_ivtc_scores</name><index>[<expr><name>CADENCE_POS_PROGRESSIVE</name></expr>]</index></name>

<operator>-</operator> <name>mean_except_min</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>var_except_min</name> <operator>=</operator> <name>diff_exm</name><operator>*</operator><name>diff_exm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>imin</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>pi_ivtc_scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>mean</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>var</name> <operator>+=</operator> <operator>(</operator><name>diff</name><operator>*</operator><name>diff</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <name>j</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>diff_exm</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>pi_ivtc_scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>mean_except_min</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>var_except_min</name> <operator>+=</operator> <operator>(</operator><name>diff_exm</name><operator>*</operator><name>diff_exm</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>var</name> <operator>/=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>iend</name> <operator>-</operator> <name>imin</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>var_except_min</name> <operator>/=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>iend</name> <operator>-</operator> <name>imin</name><operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j_curr</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>IVTC_LATEST</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos_next</name> <init>= <expr><name><name>pi_detected_pos_to_cadence_pos</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_expected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>j_curr</name> <operator>!=</operator> <name>CADENCE_POS_INVALID</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos_curr</name> <init>= <expr><name><name>pi_detected_pos_to_cadence_pos</name><index>[<expr><name>j_curr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b_expected</name> <operator>=</operator> <operator>(</operator><name>pos_next</name> <operator>==</operator> <operator>(</operator><name>pos_curr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_blocks_with_motion</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_motion</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_result_reliable</name> <init>=

<expr><operator>(</operator> <name>i_blocks_with_motion</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>mean_ratio</name> <operator>&gt;</operator> <literal type="number">1.005</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>b_expected</name> <operator>||</operator> <operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator><name>var</name> <operator>&gt;</operator> <literal type="number">1.17</literal><operator>*</operator><operator>(</operator><name>double</name><operator>)</operator><name>var_except_min</name> <operator>)</operator> <operator>)</operator>

<operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_s_reliable</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>b_result_reliable</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IVTCCadenceDetectAlgoVektor</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_next</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>detected</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>detected</name> <operator>|=</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[ <expr><name>CADENCE_POS_PROGRESSIVE</name></expr> ]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_top_rep</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_top_rep</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bot_rep</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_bot_rep</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_old_top_rep</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_top_rep</name><index>[<expr><name>IVTC_LATEST</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_old_bot_rep</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_bot_rep</name><index>[<expr><name>IVTC_LATEST</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_top_rep</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>detected</name> <operator>|=</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[ <expr><name>CADENCE_POS_TFF_EAB</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>detected</name> <operator>|=</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[ <expr><name>CADENCE_POS_BFF_BCD</name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_old_top_rep</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>detected</name> <operator>|=</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[ <expr><name>CADENCE_POS_TFF_ABC</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>detected</name> <operator>|=</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[ <expr><name>CADENCE_POS_BFF_CDE</name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_bot_rep</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>detected</name> <operator>|=</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[ <expr><name>CADENCE_POS_TFF_BCD</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>detected</name> <operator>|=</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[ <expr><name>CADENCE_POS_BFF_EAB</name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_old_bot_rep</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>detected</name> <operator>|=</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[ <expr><name>CADENCE_POS_TFF_CDE</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>detected</name> <operator>|=</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[ <expr><name>CADENCE_POS_BFF_ABC</name></expr> ]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_tff</name> <init>= <expr><name><name>p_next</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_tff</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>detected</name> <operator>&amp;=</operator> <name>VEKTOR_CADENCE_POS_TFF</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>detected</name> <operator>&amp;=</operator> <name>VEKTOR_CADENCE_POS_BFF</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>predicted</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_raw</name><index>[<expr><name>IVTC_LATEST</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_wrap_tff</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_wrap_bff</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>predicted</name> <operator>&amp;</operator> <name>VEKTOR_CADENCE_POS_TFF_HIGH</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_wrap_tff</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>predicted</name> <operator>&amp;</operator> <name>VEKTOR_CADENCE_POS_BFF_HIGH</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_wrap_bff</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>predicted</name> <operator>=</operator> <operator>(</operator><name>predicted</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>VEKTOR_CADENCE_POS_ALL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_wrap_tff</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>predicted</name> <operator>|=</operator> <name>VEKTOR_CADENCE_POS_TFF_LOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_wrap_bff</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>predicted</name> <operator>|=</operator> <name>VEKTOR_CADENCE_POS_BFF_LOW</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>detected</name> <operator>&amp;</operator> <name>predicted</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>detected</name> <operator>=</operator> <name>detected</name> <operator>&amp;</operator> <name>predicted</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>detected</name> <operator>=</operator> <name>VEKTOR_CADENCE_POS_ALL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_raw</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>detected</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ivtc_cadence_pos</name></type> <name>exact</name> <init>= <expr><name>CADENCE_POS_INVALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>detected</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_CADENCE_POS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>detected</name> <operator>==</operator> <operator>(</operator><name>detected</name> <operator>&amp;</operator> <name><name>pi_detected_pos_to_bitmask</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>exact</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_cadence_pos</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>exact</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_v_reliable</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>exact</name> <operator>!=</operator> <name>CADENCE_POS_INVALID</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IVTCCadenceDetectFinalize</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name>CADENCE_POS_INVALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_v_reliable</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_cadence_pos</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_s_reliable</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_s_cadence_pos</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IVTCSoftTelecineDetect</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_prev</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_next</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_prev</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_soft_telecine_1</name> <init>= <expr><operator>(</operator><name><name>p_prev</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_curr</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_next</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_soft_telecine_2</name> <init>= <expr><operator>(</operator><name><name>p_prev</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_curr</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_next</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_soft_telecine_3</name> <init>= <expr><operator>(</operator><name><name>p_prev</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_curr</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_next</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_soft_telecine_1</name> <operator>||</operator> <name>b_soft_telecine_2</name> <operator>||</operator> <name>b_soft_telecine_3</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>!=</operator> <name>IVTC_MODE_TELECINED_NTSC_SOFT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"IVTC: 3:2 pulldown: NTSC soft telecine "</literal>\

<literal type="string">"detected."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_old_mode</name></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>IVTC_MODE_TELECINED_NTSC_SOFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>=</operator> <name>CADENCE_POS_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_tfd</name></name> <operator>=</operator> <name>TFD_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>==</operator> <name>IVTC_MODE_TELECINED_NTSC_SOFT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"IVTC: 3:2 pulldown: NTSC soft telecine ended. "</literal>\

<literal type="string">"Returning to previous mode."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>i_old_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_tfd</name></name> <operator>=</operator> <operator>!</operator><name><name>p_next</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IVTCCadenceAnalyze</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_prev</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_next</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_prev</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j_next</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j_curr</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>IVTC_LATEST</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j_prev</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>IVTC_LATEST</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_expected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>j_next</name> <operator>!=</operator> <name>CADENCE_POS_INVALID</name> <operator>&amp;&amp;</operator> <name>j_curr</name> <operator>!=</operator> <name>CADENCE_POS_INVALID</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos_next</name> <init>= <expr><name><name>pi_detected_pos_to_cadence_pos</name><index>[<expr><name>j_next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos_curr</name> <init>= <expr><name><name>pi_detected_pos_to_cadence_pos</name><index>[<expr><name>j_curr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b_expected</name> <operator>=</operator> <operator>(</operator><name>pos_next</name> <operator>==</operator> <operator>(</operator><name>pos_curr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_old_expected</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>j_curr</name> <operator>!=</operator> <name>CADENCE_POS_INVALID</name> <operator>&amp;&amp;</operator> <name>j_prev</name> <operator>!=</operator> <name>CADENCE_POS_INVALID</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pos_curr</name> <init>= <expr><name><name>pi_detected_pos_to_cadence_pos</name><index>[<expr><name>j_curr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos_prev</name> <init>= <expr><name><name>pi_detected_pos_to_cadence_pos</name><index>[<expr><name>j_prev</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b_old_expected</name> <operator>=</operator> <operator>(</operator><name>pos_curr</name> <operator>==</operator> <operator>(</operator><name>pos_prev</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_motion</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_motion</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_old_motion</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_motion</name><index>[<expr><name>IVTC_LATEST</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_prev_valid</name> <init>= <expr><operator>(</operator><name><name>p_prev</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_curr_valid</name> <init>= <expr><operator>(</operator><name><name>p_curr</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>i_old_motion</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b_old_expected</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_next_valid</name> <init>= <expr><operator>(</operator><name><name>p_next</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>i_motion</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b_expected</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_no_invalids</name> <init>= <expr><operator>(</operator><name>b_prev_valid</name> <operator>&amp;&amp;</operator> <name>b_curr_valid</name> <operator>&amp;&amp;</operator> <name>b_next_valid</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_no_invalids</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_detected_pos</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_detected_pos</name> <operator>==</operator> <name>CADENCE_POS_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_no_invalids</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>b_sequence_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>b_no_invalids</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>pi_tfd</name><index>[<expr><name>IVTC_DETECTION_HISTORY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>pi_pos</name><index>[<expr><name>IVTC_DETECTION_HISTORY_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_detected_pos</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pi_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pi_detected_pos_to_cadence_pos</name><index>[<expr><name>i_detected_pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pi_tfd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pi_detected_pos_to_tfd</name><index>[<expr><name>i_detected_pos</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>b_sequence_valid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_all_progressive</name> <init>= <expr><operator>(</operator><name><name>pi_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>pi_pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pi_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><operator>++</operator><name>j</name> <operator>%</operator> <literal type="number">5</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>b_sequence_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pi_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_all_progressive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_all_progressives</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>b_all_progressive</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>b_sequence_valid</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_vote_invalid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_vote_tff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_vote_bff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pi_tfd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TFD_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_vote_invalid</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>pi_tfd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TFD_TFF</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_vote_tff</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>pi_tfd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TFD_BFF</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_vote_bff</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>i_telecine_field_dominance</name> <init>= <expr><name>TFD_INVALID</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_vote_tff</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_telecine_field_dominance</name> <operator>=</operator> <name>TFD_TFF</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_vote_bff</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_telecine_field_dominance</name> <operator>=</operator> <name>TFD_BFF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_telecine_field_dominance</name> <operator>==</operator> <name>TFD_TFF</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>!=</operator> <name>IVTC_MODE_TELECINED_NTSC_HARD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"IVTC: 3:2 pulldown: NTSC TFF "</literal>\

<literal type="string">"hard telecine detected."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>IVTC_MODE_TELECINED_NTSC_HARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>=</operator> <name><name>pi_pos</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_tfd</name></name> <operator>=</operator> <name>TFD_TFF</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_telecine_field_dominance</name> <operator>==</operator> <name>TFD_BFF</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>!=</operator> <name>IVTC_MODE_TELECINED_NTSC_HARD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"IVTC: 3:2 pulldown: NTSC BFF "</literal>\

<literal type="string">"hard telecine detected."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>IVTC_MODE_TELECINED_NTSC_HARD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>=</operator> <name><name>pi_pos</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_tfd</name></name> <operator>=</operator> <name>TFD_BFF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>b_all_progressive</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_really_all_progressive</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_all_progressives</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>false</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_really_all_progressive</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_really_all_progressive</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>==</operator> <name>IVTC_MODE_TELECINED_NTSC_HARD</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"IVTC: 3:2 pulldown: progressive "</literal>\

<literal type="string">"signal detected."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>IVTC_MODE_DETECTING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>=</operator> <name>CADENCE_POS_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_tfd</name></name> <operator>=</operator> <name>TFD_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IVTCOutputOrDropFrame</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_dst</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>t_final</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_next</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result_score</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>==</operator> <name>IVTC_MODE_TELECINED_NTSC_HARD</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>b_sequence_valid</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>!=</operator> <name>CADENCE_POS_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_tfd</name></name> <operator>!=</operator> <name>TFD_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name><name>pi_reconstruction_ops</name><index>[<expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_tfd</name></name></expr>]</index><index>[<expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>op</name> <operator>==</operator> <name>IVTC_OP_DROP_FRAME</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>=</operator> <operator>(</operator><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>op</name> <operator>==</operator> <name>IVTC_OP_COPY_N</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>op</name> <operator>==</operator> <name>IVTC_OP_COPY_C</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBC</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>op</name> <operator>==</operator> <name>IVTC_OP_COMPOSE_TNBC</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBC</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>op</name> <operator>==</operator> <name>IVTC_OP_COMPOSE_TCBN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBN</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_avg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_avg</name> <operator>+=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_final_scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i_avg</name> <operator>/=</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_result_score</name> <operator>&gt;</operator> <literal type="number">1000</literal> <operator>&amp;&amp;</operator> <name>i_result_score</name> <operator>&gt;</operator> <literal type="number">2</literal><operator>*</operator><name>i_avg</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>b_sequence_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Rejected cadence-based frame "</literal>\

<literal type="string">"construction: interlace score %d "</literal>\

<literal type="string">"(running average %d)"</literal></expr></argument>,

<argument><expr><name>i_result_score</name></expr></argument>, <argument><expr><name>i_avg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_raw</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>VEKTOR_CADENCE_POS_ALL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ivtc</name><operator>-&gt;</operator><name>b_sequence_valid</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tnbn</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBN</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tnbc</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBC</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tcbn</name> <init>= <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBN</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_next</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>tnbn</name> <operator>&lt;=</operator> <name>tnbc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>IVTC_OP_COPY_N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name>tnbn</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>IVTC_OP_COMPOSE_TNBC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name>tnbc</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>tnbn</name> <operator>&lt;=</operator> <name>tcbn</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>IVTC_OP_COPY_N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name>tnbn</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>IVTC_OP_COMPOSE_TCBN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name>tcbn</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>b_sequence_valid</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_timestamp_delta</name> <init>= <expr><name><name>pi_timestamp_deltas</name><index>[<expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_timestamp_delta</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t_final</name> <operator>=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>date</name></name>

<operator>+</operator> <operator>(</operator><name><name>p_next</name><operator>-&gt;</operator><name>date</name></name> <operator>-</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>date</name></name><operator>)</operator><operator>*</operator><name>i_timestamp_delta</name><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>t_final</name> <operator>=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>=</operator> <operator>(</operator><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>==</operator> <name>IVTC_MODE_TELECINED_NTSC_SOFT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>IVTC_OP_COPY_C</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TCBC</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_curr</name><operator>-&gt;</operator><name>i_nb_fields</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_half_field_dur</name> <init>= <expr><operator>(</operator> <operator>(</operator><name><name>p_next</name><operator>-&gt;</operator><name>date</name></name> <operator>-</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>date</name></name><operator>)</operator><operator>/</operator><literal type="number">3</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>t_final</name> <operator>=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>date</name></name> <operator>+</operator> <name>i_half_field_dur</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>t_final</name> <operator>=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>op</name> <operator>=</operator> <name>IVTC_OP_COPY_N</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_result_score</name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t_final</name> <operator>=</operator> <name><name>p_next</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>op</name> <operator>!=</operator> <name>IVTC_OP_DROP_FRAME</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>op</name> <operator>==</operator> <name>IVTC_OP_COPY_N</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>op</name> <operator>==</operator> <name>IVTC_OP_COPY_C</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_curr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>op</name> <operator>==</operator> <name>IVTC_OP_COMPOSE_TNBC</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ComposeFrame</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_next</name></expr></argument>, <argument><expr><name>p_curr</name></expr></argument>, <argument><expr><name>CC_ALTLINE</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>op</name> <operator>==</operator> <name>IVTC_OP_COMPOSE_TCBN</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ComposeFrame</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_curr</name></expr></argument>, <argument><expr><name>p_next</name></expr></argument>, <argument><expr><name>CC_ALTLINE</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_final_scores</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_final_scores</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_final_scores</name><index>[<expr><name>IVTC_LATEST</name></expr>]</index></name> <operator>=</operator> <name>i_result_score</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>t_final</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>date</name></name> <operator>=</operator> <name>t_final</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>RenderIVTC</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_dst</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_prev</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_curr</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>context</name><operator>.</operator><name>pp_history</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_next</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>IVTCFrameInit</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_prev</name> <operator>&amp;&amp;</operator> <name>p_curr</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IVTCLowLevelDetect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IVTCSoftTelecineDetect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IVTCCadenceDetectAlgoScores</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IVTCCadenceDetectAlgoVektor</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IVTCCadenceDetectFinalize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>IVTCCadenceAnalyze</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_have_output_frame</name> <init>= <expr><call><name>IVTCOutputOrDropFrame</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_have_output_frame</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name>p_prev</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_curr</name></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_score</name> <init>= <expr><call><name>CalculateInterlaceScore</name><argument_list>( <argument><expr><name>p_next</name></expr></argument>, <argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBN</name></expr>]</index></name> <operator>=</operator> <name>i_score</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_final_scores</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_score</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_curr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_prev</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IVTCLowLevelDetect</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_final_scores</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>FIELD_PAIR_TNBN</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>IVTCClearState</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_filter</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ivtc_sys_t</name> <modifier>*</modifier></type><name>p_ivtc</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>ivtc</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_cadence_pos</name></name> <operator>=</operator> <name>CADENCE_POS_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_tfd</name></name> <operator>=</operator> <name>TFD_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>b_sequence_valid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name>IVTC_MODE_DETECTING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>i_old_mode</name></name> <operator>=</operator> <name>IVTC_MODE_DETECTING</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_NUM_FIELD_PAIRS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>IVTC_DETECTION_HISTORY_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_cadence_pos_history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CADENCE_POS_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_s_cadence_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CADENCE_POS_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_s_reliable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_cadence_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>CADENCE_POS_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_v_reliable</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_v_raw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>VEKTOR_CADENCE_POS_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_top_rep</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_bot_rep</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_motion</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pb_all_progressives</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ivtc</name><operator>-&gt;</operator><name>pi_final_scores</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
