<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\deinterlace\merge.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"merge.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmx.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ALTIVEC_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;altivec.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>Merge8BitGeneric</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_p_dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>_p_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s1</name> <init>= <expr><name>_p_s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s2</name> <init>= <expr><name>_p_s2</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_bytes</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_s1</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>p_s2</name><operator>++</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>Merge16BitGeneric</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_p_dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>_p_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_s1</name> <init>= <expr><name>_p_s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_s2</name> <init>= <expr><name>_p_s2</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i_words</name> <init>= <expr><name>i_bytes</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i_words</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_words</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_s1</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>p_s2</name><operator>++</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>VLC_MMX</name>

<name>void</name></type> <name>MergeMMXEXT</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_p_dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s2</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>_p_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s1</name> <init>= <expr><name>_p_s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s2</name> <init>= <expr><name>_p_s2</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_bytes</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i_bytes</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control>

<block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>( "movq %2,%%mm1;"

"pavgb %1, %%mm1;"

"movq %%mm1, %0" :"=m" (*p_dest):

"m" (*p_s1),

"m" (*p_s2) : "mm1" );</asm>

<expr_stmt><expr><name>p_dest</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s1</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>i_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_bytes</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_s1</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>p_s2</name><operator>++</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_3DNOW</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>VLC_MMX</name>

<name>void</name></type> <name>Merge3DNow</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_p_dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s2</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>_p_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s1</name> <init>= <expr><name>_p_s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s2</name> <init>= <expr><name>_p_s2</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_bytes</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i_bytes</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control>

<block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>( "movq %2,%%mm1;"

"pavgusb %1, %%mm1;"

"movq %%mm1, %0" :"=m" (*p_dest):

"m" (*p_s1),

"m" (*p_s2) : "mm1" );</asm>

<expr_stmt><expr><name>p_dest</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s1</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>i_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_bytes</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_s1</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>p_s2</name><operator>++</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>VLC_SSE</name>

<name>void</name></type> <name>Merge8BitSSE2</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_p_dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s2</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>_p_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s1</name> <init>= <expr><name>_p_s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s2</name> <init>= <expr><name>_p_s2</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p_s1</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i_bytes</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_s1</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>p_s2</name><operator>++</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init>;</init> <condition><expr><name>i_bytes</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i_bytes</name> <operator>-=</operator> <literal type="number">16</literal></expr></incr> )</control>

<block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>( "movdqu %2,%%xmm1;"

"pavgb %1, %%xmm1;"

"movdqu %%xmm1, %0" :"=m" (*p_dest):

"m" (*p_s1),

"m" (*p_s2) : "xmm1" );</asm>

<expr_stmt><expr><name>p_dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s1</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s2</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>i_bytes</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_bytes</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_s1</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>p_s2</name><operator>++</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>VLC_SSE</name>

<name>void</name></type> <name>Merge16BitSSE2</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_p_dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s2</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>_p_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_s1</name> <init>= <expr><name>_p_s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>p_s2</name> <init>= <expr><name>_p_s2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_words</name> <init>= <expr><name>i_bytes</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i_words</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p_s1</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i_words</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_s1</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>p_s2</name><operator>++</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init>;</init> <condition><expr><name>i_words</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i_words</name> <operator>-=</operator> <literal type="number">8</literal></expr></incr> )</control>

<block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>( "movdqu %2,%%xmm1;"

"pavgw %1, %%xmm1;"

"movdqu %%xmm1, %0" :"=m" (*p_dest):

"m" (*p_s1),

"m" (*p_s2) : "xmm1" );</asm>

<expr_stmt><expr><name>p_dest</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s1</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s2</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>i_words</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i_words</name><operator>--</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_s1</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>p_s2</name><operator>++</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_C_ALTIVEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>MergeAltivec</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_p_dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>_p_s2</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>_p_dest</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s1</name> <init>= <expr><name>_p_s1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_s2</name> <init>= <expr><name>_p_s2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><name>p_dest</name> <operator>+</operator> <name>i_bytes</name> <operator>-</operator> <literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>p_dest</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p_s1</name><operator>++</operator><operator>)</operator> <operator>+</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><operator>*</operator><name>p_s2</name><operator>++</operator><operator>)</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_s1</name> <operator>&amp;</operator> <literal type="number">0xF</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <operator>(</operator><name>int</name><operator>)</operator><name>p_s2</name> <operator>&amp;</operator> <literal type="number">0xF</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>s1v</name></decl>, <decl><type ref="prev"/><name>s2v</name></decl>, <decl><type ref="prev"/><name>destv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>s1oldv</name></decl>, <decl><type ref="prev"/><name>s2oldv</name></decl>, <decl><type ref="prev"/><name>s1newv</name></decl>, <decl><type ref="prev"/><name>s2newv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>perm1v</name></decl>, <decl><type ref="prev"/><name>perm2v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>perm1v</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>perm2v</name> <operator>=</operator> <call><name>vec_lvsl</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s1oldv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2oldv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_dest</name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>s1newv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>p_s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2newv</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>p_s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s1v</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>( <argument><expr><name>s1oldv</name></expr></argument>, <argument><expr><name>s1newv</name></expr></argument>, <argument><expr><name>perm1v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2v</name> <operator>=</operator> <call><name>vec_perm</name><argument_list>( <argument><expr><name>s2oldv</name></expr></argument>, <argument><expr><name>s2newv</name></expr></argument>, <argument><expr><name>perm2v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s1oldv</name> <operator>=</operator> <name>s1newv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s2oldv</name> <operator>=</operator> <name>s2newv</name></expr>;</expr_stmt>

<expr_stmt><expr><name>destv</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>( <argument><expr><name>s1v</name></expr></argument>, <argument><expr><name>s2v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>( <argument><expr><name>destv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s1</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s2</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>vector</name> <name>unsigned</name> <name>char</name></type> <name>s1v</name></decl>, <decl><type ref="prev"/><name>s2v</name></decl>, <decl><type ref="prev"/><name>destv</name></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_dest</name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>s1v</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2v</name> <operator>=</operator> <call><name>vec_ld</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>destv</name> <operator>=</operator> <call><name>vec_avg</name><argument_list>( <argument><expr><name>s1v</name></expr></argument>, <argument><expr><name>s2v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vec_st</name><argument_list>( <argument><expr><name>destv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>p_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s1</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_s2</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dest</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_end</name> <operator>+=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_dest</name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_dest</name><operator>++</operator> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_s1</name><operator>++</operator> <operator>+</operator> <operator>*</operator><name>p_s2</name><operator>++</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type> <name>EndMMX</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>( "emms" :: );</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_3DNOW</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>void</name></type> <name>End3DNow</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<asm>__asm__ <specifier>__volatile__</specifier>( "femms" :: );</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
