<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\deinterlace\common.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>InitDeinterlacingContext</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>deinterlace_ctx</name></name> <modifier>*</modifier></type><name>p_context</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_double_rate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_half_height</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_use_frame_history</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_custom_pts</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pi_date</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pi_nb_fields</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pb_top_field_first</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>METADATA_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>i_frame_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HISTORY_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>FlushDeinterlacing</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>deinterlace_ctx</name></name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pi_date</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pi_nb_fields</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pb_top_field_first</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>METADATA_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>i_frame_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HISTORY_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>GetFieldDuration</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>deinterlace_ctx</name></name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_field_dur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iend</name> <init>= <expr><name>METADATA_SIZE</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_date</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <name>iend</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_fields_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>iend</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_fields_total</name> <operator>+=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pi_nb_fields</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i_field_dur</name> <operator>=</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name> <operator>-</operator> <name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_date</name><operator>)</operator> <operator>/</operator> <name>i_fields_total</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_field_dur</name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate_base</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_frame_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_field_dur</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>GetDeinterlacingOutput</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>deinterlace_ctx</name></name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>,

<parameter><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_dst</name> <operator>=</operator> <operator>*</operator><name>p_src</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_half_height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_sar_den</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_double_rate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_frame_rate</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUSTOM_PTS</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<function><type><name>picture_t</name> <modifier>*</modifier></type><name>DoDeinterlacing</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>deinterlace_ctx</name></name> <modifier>*</modifier></type><name>p_context</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name><name>p_dst</name><index>[<expr><name>DEINTERLACE_DST_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_double_rate_alloc_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_meta_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_top_field_first</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AllocPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name><name>p_dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DEINTERLACE_DST_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_use_frame_history</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>picture_Hold</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>HISTORY_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><name>HISTORY_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>p_dup</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>METADATA_SIZE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>METADATA_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pi_date</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>date</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>METADATA_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pi_nb_fields</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>METADATA_SIZE</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pb_top_field_first</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_frame_offset</name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>i_frame_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_meta_idx</name> <operator>=</operator> <operator>(</operator><name>METADATA_SIZE</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>i_frame_offset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_nb_fields</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_frame_offset</name> <operator>!=</operator> <name>CUSTOM_PTS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_top_field_first</name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i_meta_idx</name></expr>]</index></name><operator>.</operator><name>pb_top_field_first</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_nb_fields</name> <operator>=</operator> <name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i_meta_idx</name></expr>]</index></name><operator>.</operator><name>pi_nb_fields</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_double_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_top_field_first</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>b_top_field_first</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>i_nb_fields</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_nb_fields</name></name></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_double_rate_alloc_end</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_double_rate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_double_rate_alloc_end</name> <operator>=</operator> <name>i_nb_fields</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nb_fields</name> <operator>&gt;</operator> <name>DEINTERLACE_DST_SIZE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Framerate doubler: output buffer too small; "</literal>\

<literal type="string">"fields = %d, buffer size = %d. Dropping the "</literal>\

<literal type="string">"remaining fields."</literal></expr></argument>,

<argument><expr><name>i_nb_fields</name></expr></argument>, <argument><expr><name>DEINTERLACE_DST_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_double_rate_alloc_end</name> <operator>=</operator> <name>DEINTERLACE_DST_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_double_rate_alloc_end</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>p_next</name> <operator>=</operator>

<name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AllocPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Framerate doubler: could not allocate "</literal>\

<literal type="string">"output frame %d"</literal></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_double_rate_alloc_end</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 

<break>break;</break> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_double_rate</name></name> <operator>||</operator> <name><name>p_dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_nb_fields</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>p_dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_double_rate</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name><name>p_context</name><operator>-&gt;</operator><name>pf_render_single_pic</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name><name>p_context</name><operator>-&gt;</operator><name>pf_render_ordered</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>!</operator><name>b_top_field_first</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>drop</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_context</name><operator>-&gt;</operator><name>pf_render_ordered</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>b_top_field_first</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_context</name><operator>-&gt;</operator><name>pf_render_ordered</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>!</operator><name>b_top_field_first</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_custom_pts</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_use_frame_history</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>i_frame_offset</name></name> <operator>=</operator> <name>CUSTOM_PTS</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_context</name><operator>-&gt;</operator><name>pp_history</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition> 

<block>{<block_content>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name><name>p_context</name><operator>-&gt;</operator><name>i_frame_offset</name></name> <operator>=</operator> <name>CUSTOM_PTS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_frame_offset</name> <operator>&lt;=</operator> <name>METADATA_SIZE</name> <operator>||</operator>

<name>i_frame_offset</name> <operator>==</operator> <name>CUSTOM_PTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_frame_offset</name> <operator>!=</operator> <name>CUSTOM_PTS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_base_pts</name> <init>= <expr><name><name>p_context</name><operator>-&gt;</operator><name>meta</name><index>[<expr><name>i_meta_idx</name></expr>]</index></name><operator>.</operator><name>pi_date</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>date</name> <operator>=</operator> <name>i_base_pts</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_context</name><operator>-&gt;</operator><name>settings</name><operator>.</operator><name>b_double_rate</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_field_dur</name> <init>= <expr><call><name>GetFieldDuration</name><argument_list>( <argument><expr><name>p_context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_double_rate_alloc_end</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_base_pts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>date</name> <operator>=</operator> <name>i_base_pts</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>i_field_dur</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>date</name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DEINTERLACE_DST_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>b_progressive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_nb_fields</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

<label><name>drop</name>:</label>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DEINTERLACE_DST_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name>p_pic</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

</unit>
