<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\deinterlace\helpers.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdalign.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"deinterlace.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"merge.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"helpers.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FieldFromPlane</name><parameter_list>( <parameter><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_field</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_dst</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_src</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_field</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>p_dst</name><operator>)</operator> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p_src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_lines</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_field</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TestForMotionInBlock</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix_p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix_c</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_pitch_prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pitch_curr</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pi_top</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pi_bot</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_motion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_top_motion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_bot_motion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pc</name> <init>= <expr><name>p_pix_c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name>p_pix_p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int_fast16_t</name></type> <name>C</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>pc</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>*</operator><name>pp</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>C</name> <operator>&gt;</operator> <name>T</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>score</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>pc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>pp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_motion</name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>y</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_top_motion</name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bot_motion</name> <operator>+=</operator> <name>score</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>p_pix_c</name> <operator>+=</operator> <name>i_pitch_curr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pix_p</name> <operator>+=</operator> <name>i_pitch_prev</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_top</name><operator>)</operator> <operator>=</operator> <operator>(</operator> <name>i_top_motion</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_bot</name><operator>)</operator> <operator>=</operator> <operator>(</operator> <name>i_bot_motion</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>i_motion</name> <operator>&gt;=</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>VLC_MMX</name>

<specifier>static</specifier> <name>int</name></type> <name>TestForMotionInBlockMMX</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix_p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix_c</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_pitch_prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pitch_curr</name></decl></parameter>,

<parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pi_top</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>pi_bot</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_motion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_top_motion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_bot_motion</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>alignas</name> <argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <specifier>const</specifier> <name>mmx_t</name> <name>bT</name> <operator>=</operator> <block>{ <expr><operator>.</operator><name>ub</name> <operator>=</operator> <block>{ <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr> }</block></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><name>bT</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>y</name><operator>+=</operator><literal type="number">2</literal></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p_pix_c</name><operator>)</operator></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p_pix_p</name><operator>)</operator></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubusb_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubusb_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcmpgtb_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcmpgtb_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psadbw_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psadbw_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_pix_c</name> <operator>+=</operator> <name>i_pitch_curr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pix_p</name> <operator>+=</operator> <name>i_pitch_prev</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p_pix_c</name><operator>)</operator></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p_pix_p</name><operator>)</operator></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubusb_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubusb_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcmpgtb_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcmpgtb_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psadbw_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psadbw_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_pix_c</name> <operator>+=</operator> <name>i_pitch_curr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pix_p</name> <operator>+=</operator> <name>i_pitch_prev</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>movq_r2r</name><argument_list>( <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>i_top_motion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>i_bot_motion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>i_motion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_top_motion</name> <operator>/=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bot_motion</name> <operator>/=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_motion</name> <operator>/=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_top</name><operator>)</operator> <operator>=</operator> <operator>(</operator> <name>i_top_motion</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_bot</name><operator>)</operator> <operator>=</operator> <operator>(</operator> <name>i_bot_motion</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><name>i_motion</name> <operator>&gt;=</operator> <literal type="number">8</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>

<function><type><name>void</name></type> <name>ComposeFrame</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic_top</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic_bottom</name></decl></parameter>,

<parameter><decl><type><name>compose_chroma_t</name></type> <name>i_output_chroma</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>swapped_uv_conversion</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_outpic</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_inpic_top</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_inpic_bottom</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_output_chroma</name> <operator>==</operator> <name>CC_ALTLINE</name> <operator>||</operator>

<name>i_output_chroma</name> <operator>==</operator> <name>CC_UPCONVERT</name> <operator>||</operator>

<name>i_output_chroma</name> <operator>==</operator> <name>CC_SOURCE_TOP</name> <operator>||</operator>

<name>i_output_chroma</name> <operator>==</operator> <name>CC_SOURCE_BOTTOM</name> <operator>||</operator>

<name>i_output_chroma</name> <operator>==</operator> <name>CC_MERGE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_upconvert_chroma</name> <init>= <expr><name>i_output_chroma</name> <operator>==</operator> <name>CC_UPCONVERT</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_inpic_top</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_chroma_plane</name> <init>= <expr><operator>(</operator> <name>i_plane</name> <operator>==</operator> <name>U_PLANE</name> <operator>||</operator> <name>i_plane</name> <operator>==</operator> <name>V_PLANE</name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_out_plane</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_is_chroma_plane</name> <operator>&amp;&amp;</operator> <name>b_upconvert_chroma</name> <operator>&amp;&amp;</operator> <name>swapped_uv_conversion</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_plane</name> <operator>==</operator> <name>U_PLANE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_out_plane</name> <operator>=</operator> <name>V_PLANE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_out_plane</name> <operator>=</operator> <name>U_PLANE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_out_plane</name> <operator>=</operator> <name>i_plane</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_is_chroma_plane</name> <operator>||</operator> <name>i_output_chroma</name> <operator>==</operator> <name>CC_ALTLINE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>plane_t</name></type> <name>dst_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name></type> <name>dst_bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name></type> <name>src_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name></type> <name>src_bottom</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FieldFromPlane</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dst_top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FieldFromPlane</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dst_bottom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FieldFromPlane</name><argument_list>( <argument><expr><operator>&amp;</operator><name>src_top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FieldFromPlane</name><argument_list>( <argument><expr><operator>&amp;</operator><name>src_bottom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic_bottom</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dst_top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_top</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dst_bottom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>src_bottom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_output_chroma</name> <operator>==</operator> <name>CC_UPCONVERT</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>plane_t</name></type> <name>dst_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name></type> <name>dst_bottom</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FieldFromPlane</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dst_top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FieldFromPlane</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dst_bottom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dst_top</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dst_bottom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_inpic_bottom</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_output_chroma</name> <operator>==</operator> <name>CC_SOURCE_TOP</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_inpic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_output_chroma</name> <operator>==</operator> <name>CC_SOURCE_BOTTOM</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>plane_CopyPixels</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_inpic_bottom</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in_top</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_bottom</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in_top</name> <operator>=</operator> <name><name>p_inpic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_bottom</name> <operator>=</operator> <name><name>p_inpic_bottom</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_end</name> <operator>=</operator> <name>p_out</name> <operator>+</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>FFMIN3</name><argument_list>( <argument><expr><name><name>p_inpic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>,

<argument><expr><name><name>p_inpic_bottom</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>,

<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_out</name> <operator>&lt;</operator> <name>p_out_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>Merge</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_in_top</name></expr></argument>, <argument><expr><name>p_in_bottom</name></expr></argument>, <argument><expr><name>w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_out_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_top</name> <operator>+=</operator> <name><name>p_inpic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_bottom</name> <operator>+=</operator> <name><name>p_inpic_bottom</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>EndMerge</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>EstimateNumBlocksWithMotion</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>p_prev</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>p_curr</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_top</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_bot</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_prev</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_curr</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_score_top</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_score_bot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_prev</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>!=</operator> <name><name>p_curr</name><operator>-&gt;</operator><name>i_planes</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>motion_in_block</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> , <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>=

<expr><name>TestForMotionInBlock</name></expr></init>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_MMXEXT</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>motion_in_block</name> <operator>=</operator> <name>TestForMotionInBlockMMX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>i_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_prev</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_prev</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>!=</operator>

<name><name>p_curr</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_pitch_prev</name> <init>= <expr><name><name>p_prev</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_pitch_curr</name> <init>= <expr><name><name>p_curr</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mby</name> <init>= <expr><name><name>p_prev</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><call><name>FFMIN</name><argument_list>( <argument><expr><name><name>p_prev</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>,

<argument><expr><name><name>p_curr</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mbx</name> <init>= <expr><name>w</name> <operator>/</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>by</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>i_mby</name></expr>;</condition> <incr><expr><operator>++</operator><name>by</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix_p</name> <init>= <expr><operator>&amp;</operator><name><name>p_prev</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pitch_prev</name><operator>*</operator><literal type="number">8</literal><operator>*</operator><name>by</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix_c</name> <init>= <expr><operator>&amp;</operator><name><name>p_curr</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pitch_curr</name><operator>*</operator><literal type="number">8</literal><operator>*</operator><name>by</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>bx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>i_mbx</name></expr>;</condition> <incr><expr><operator>++</operator><name>bx</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_top_temp</name></decl>, <decl><type ref="prev"/><name>i_bot_temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_score</name> <operator>+=</operator> <call><name>motion_in_block</name><argument_list>( <argument><expr><name>p_pix_p</name></expr></argument>, <argument><expr><name>p_pix_c</name></expr></argument>,

<argument><expr><name>i_pitch_prev</name></expr></argument>, <argument><expr><name>i_pitch_curr</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_top_temp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bot_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_score_top</name> <operator>+=</operator> <name>i_top_temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_score_bot</name> <operator>+=</operator> <name>i_bot_temp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pix_p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pix_c</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>pi_top</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_top</name><operator>)</operator> <operator>=</operator> <name>i_score_top</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_bot</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_bot</name><operator>)</operator> <operator>=</operator> <name>i_score_bot</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_score</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>VLC_MMX</name>

<specifier>static</specifier> <name>int</name></type> <name>CalculateInterlaceScoreMMX</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>p_pic_top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>p_pic_bot</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_pic_top</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>==</operator> <name><name>p_pic_bot</name><operator>-&gt;</operator><name>i_planes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_score_mmx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_score_c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_top</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i_plane</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>!=</operator>

<name><name>p_pic_bot</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_lasty</name> <init>= <expr><name><name>p_pic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><call><name>FFMIN</name><argument_list>( <argument><expr><name><name>p_pic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>,

<argument><expr><name><name>p_pic_bot</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>wm8</name> <init>= <expr><name>w</name> <operator>%</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w8</name> <init>= <expr><name>w</name> <operator>-</operator> <name>wm8</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>p_pic_bot</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ngh</name> <init>= <expr><name>p_pic_top</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wc</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wn</name> <init>= <expr><name><name>ngh</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_lasty</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_c</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name>wc</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_p</name> <init>= <expr><operator>&amp;</operator><name><name>ngh</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>wn</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_n</name> <init>= <expr><operator>&amp;</operator><name><name>ngh</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>wn</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>alignas</name> <argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <specifier>const</specifier> <name>mmx_t</name> <name>b0</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>uq</name> <operator>=</operator> <literal type="number">0x0000000000000000ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>alignas</name> <argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <specifier>const</specifier> <name>mmx_t</name> <name>b128</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>uq</name> <operator>=</operator> <literal type="number">0x8080808080808080ULL</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>alignas</name> <argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro> <specifier>const</specifier> <name>mmx_t</name> <name>bT</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>ub</name> <operator>=</operator> <block>{ <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr>, <expr><name>T</name></expr> }</block></expr> }</block></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w8</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>p_c</name><operator>)</operator></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>p_p</name><operator>)</operator></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>movq_m2r</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>p_n</name><operator>)</operator></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubb_m2r</name><argument_list>( <argument><expr><name>b128</name></expr></argument>, <argument><expr><name>mm0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubb_m2r</name><argument_list>( <argument><expr><name>b128</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubb_m2r</name><argument_list>( <argument><expr><name>b128</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubsb_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psubsb_r2r</name><argument_list>( <argument><expr><name>mm0</name></expr></argument>, <argument><expr><name>mm2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pxor_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>punpcklbw_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>punpcklbw_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>punpckhbw_r2r</name><argument_list>( <argument><expr><name>mm1</name></expr></argument>, <argument><expr><name>mm5</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>punpckhbw_r2r</name><argument_list>( <argument><expr><name>mm2</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pmulhw_r2r</name><argument_list>( <argument><expr><name>mm3</name></expr></argument>, <argument><expr><name>mm4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pmulhw_r2r</name><argument_list>( <argument><expr><name>mm5</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>packsswb_r2r</name><argument_list>(<argument><expr><name>mm4</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pcmpgtb_m2r</name><argument_list>( <argument><expr><name>bT</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>psadbw_m2r</name><argument_list>( <argument><expr><name>b0</name></expr></argument>, <argument><expr><name>mm6</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>paddd_r2r</name><argument_list>( <argument><expr><name>mm6</name></expr></argument>, <argument><expr><name>mm7</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_c</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_p</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_n</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>C</name> <init>= <expr><operator>*</operator><name>p_c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>P</name> <init>= <expr><operator>*</operator><name>p_p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>N</name> <init>= <expr><operator>*</operator><name>p_n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>comb</name> <init>= <expr><operator>(</operator><name>P</name> <operator>-</operator> <name>C</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>N</name> <operator>-</operator> <name>C</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>comb</name> <operator>&gt;</operator> <name>T</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>i_score_c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p_p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p_n</name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>cur</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>ngh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ngh</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_pitch</name> <init>= <expr><name>wc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>wn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <name>tmp_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>movd_r2m</name><argument_list>( <argument><expr><name>mm7</name></expr></argument>, <argument><expr><name>i_score_mmx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_score_mmx</name><operator>/</operator><literal type="number">255</literal> <operator>+</operator> <name>i_score_c</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>CalculateInterlaceScore</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>p_pic_top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>picture_t</name><modifier>*</modifier></type> <name>p_pic_bot</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_pic_top</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_pic_bot</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pic_top</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>!=</operator> <name><name>p_pic_bot</name><operator>-&gt;</operator><name>i_planes</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_MMXEXT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_MMXEXT</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>CalculateInterlaceScoreMMX</name><argument_list>( <argument><expr><name>p_pic_top</name></expr></argument>, <argument><expr><name>p_pic_bot</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic_top</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i_plane</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>!=</operator>

<name><name>p_pic_bot</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_lasty</name> <init>= <expr><name><name>p_pic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>w</name> <init>= <expr><call><name>FFMIN</name><argument_list>( <argument><expr><name><name>p_pic_top</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument>,

<argument><expr><name><name>p_pic_bot</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name>p_pic_bot</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>ngh</name> <init>= <expr><name>p_pic_top</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wc</name> <init>= <expr><name><name>cur</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wn</name> <init>= <expr><name><name>ngh</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_lasty</name></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_c</name> <init>= <expr><operator>&amp;</operator><name><name>cur</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name>wc</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_p</name> <init>= <expr><operator>&amp;</operator><name><name>ngh</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>wn</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_n</name> <init>= <expr><operator>&amp;</operator><name><name>ngh</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>wn</name></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>C</name> <init>= <expr><operator>*</operator><name>p_c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>P</name> <init>= <expr><operator>*</operator><name>p_p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>N</name> <init>= <expr><operator>*</operator><name>p_n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int_fast32_t</name></type> <name>comb</name> <init>= <expr><operator>(</operator><name>P</name> <operator>-</operator> <name>C</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>N</name> <operator>-</operator> <name>C</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>comb</name> <operator>&gt;</operator> <name>T</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>i_score</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>p_c</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p_p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p_n</name></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>cur</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>ngh</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ngh</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp_pitch</name> <init>= <expr><name>wc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>wc</name> <operator>=</operator> <name>wn</name></expr>;</expr_stmt>

<expr_stmt><expr><name>wn</name> <operator>=</operator> <name>tmp_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>i_score</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>T</name></cpp:undef>

</unit>
