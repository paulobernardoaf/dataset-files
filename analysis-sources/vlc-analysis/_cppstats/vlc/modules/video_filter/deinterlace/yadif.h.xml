<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\deinterlace\yadif.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFABS</name></cpp:macro> <cpp:value>abs</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>(<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>score = FFABS(cur[mrefs-1+(j)] - cur[prefs-1-(j)])+ FFABS(cur[mrefs +(j)] - cur[prefs -(j)])+ FFABS(cur[mrefs+1+(j)] - cur[prefs+1-(j)]);if (score &lt; spatial_score) {spatial_score= score;spatial_pred= (cur[mrefs +(j)] + cur[prefs -(j)])&gt;&gt;1;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER</name></cpp:macro> <cpp:value>for (x = 0; x &lt; w; x++) { int c = cur[mrefs]; int d = (prev2[0] + next2[0])&gt;&gt;1; int e = cur[prefs]; int temporal_diff0 = FFABS(prev2[0] - next2[0]); int temporal_diff1 =(FFABS(prev[mrefs] - c) + FFABS(prev[prefs] - e) )&gt;&gt;1; int temporal_diff2 =(FFABS(next[mrefs] - c) + FFABS(next[prefs] - e) )&gt;&gt;1; int diff = FFMAX3(temporal_diff0&gt;&gt;1, temporal_diff1, temporal_diff2); int spatial_pred = (c+e)&gt;&gt;1; int spatial_score = FFABS(cur[mrefs-1] - cur[prefs-1]) + FFABS(c-e) + FFABS(cur[mrefs+1] - cur[prefs+1]) - 1; int score; CHECK(-1) CHECK(-2) }} CHECK( 1) CHECK( 2) }} if (mode &lt; 2) { int b = (prev2[2*mrefs] + next2[2*mrefs])&gt;&gt;1; int f = (prev2[2*prefs] + next2[2*prefs])&gt;&gt;1; int max = FFMAX3(d-e, d-c, FFMIN(b-c, f-e)); int min = FFMIN3(d-e, d-c, FFMAX(b-c, f-e)); diff = FFMAX3(diff, min, -max); } if (spatial_pred &gt; d + diff) spatial_pred = d + diff; else if (spatial_pred &lt; d - diff) spatial_pred = d - diff; dst[0] = spatial_pred; dst++; cur++; prev++; next++; prev2++; next2++; }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yadif_filter_line_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev2</name><init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>prev</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next2</name><init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>cur</name></expr> </then><else>: <expr><name>next</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>FILTER</name></expr></expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>yadif_filter_line_c_16bit</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst8</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev8</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur8</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next8</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>prev8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>cur8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>next</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>next8</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>prev2</name><init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>prev</name></expr> </then><else>: <expr><name>cur</name></expr></else></ternary></expr></init></decl> ;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>next2</name><init>= <expr><ternary><condition><expr><name>parity</name></expr> ?</condition><then> <expr><name>cur</name></expr> </then><else>: <expr><name>next</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>mrefs</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prefs</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>FILTER</name></expr></expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>vlcpriv_yadif_filter_line_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>vlcpriv_yadif_filter_line_sse2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function_decl><type><name>void</name></type> <name>vlcpriv_yadif_filter_line_mmxext</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>next</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mrefs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parity</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
