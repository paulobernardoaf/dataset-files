<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\wave.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Wave video filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Wave"</literal> )</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"wave"</literal></argument> )</argument_list></macro>

<macro><name>set_callback</name><argument_list>( <argument>Create</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>double</name></type> <name>f_angle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>last_date</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>p_chroma</name> <init>=

<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_chroma</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_chroma</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator>

<call><name>vlc_obj_malloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_angle</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_angle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>new_date</name> <init>= <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_angle</name></name> <operator>+=</operator> <literal type="number">5.0f</literal> <operator>*</operator> <call><name>secf_from_vlc_tick</name><argument_list>(<argument><expr><name>new_date</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>last_date</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>last_date</name></name> <operator>=</operator> <name>new_date</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_angle</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_angle</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_num_lines</name></decl>, <decl><type ref="prev"/><name>i_visible_pitch</name></decl>, <decl><type ref="prev"/><name>i_pixel_pitch</name></decl>, <decl><type ref="prev"/><name>i_offset</name></decl>,

<decl><type ref="prev"/><name>i_visible_pixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>black_pixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_num_lines</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_visible_pitch</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pixel_pitch</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV10</name></type>

<name>black_pixel</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_index</name> <operator>==</operator> <name>Y_PLANE</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x00</literal></expr>

</then><else>: <expr><literal type="number">0x200</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<break>break;</break>

<expr_stmt><expr><name>CASE_PACKED_YUV_422</name>

<name>i_pixel_pitch</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV</name></type>

<name>black_pixel</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_index</name> <operator>==</operator> <name>Y_PLANE</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x00</literal></expr>

</then><else>: <expr><literal type="number">0x80</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>black_pixel</name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>i_visible_pixels</name> <operator>=</operator> <name>i_visible_pitch</name><operator>/</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_num_lines</name></expr> ;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i_visible_pixels</name><operator>)</operator>

<operator>*</operator> <call><name>sin</name><argument_list>( <argument><expr><name>f_angle</name> <operator>+</operator> <literal type="number">10.0</literal> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_line</name>

<operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_num_lines</name></expr></argument> )</argument_list></call>

<operator>/</operator> <literal type="number">20.0</literal> <operator>)</operator><operator>*</operator><name>i_pixel_pitch</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_black_out</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_in</name> <operator>-</operator> <name>i_offset</name></expr></argument>,

<argument><expr><name>i_visible_pitch</name> <operator>+</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_black_out</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_out</name><index>[<expr><name>i_visible_pitch</name> <operator>+</operator> <name>i_offset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <operator>-</operator><name>i_offset</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name> <operator>+</operator> <name>i_offset</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>,

<argument><expr><name>i_visible_pitch</name> <operator>-</operator> <name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_black_out</name> <operator>=</operator> <name>p_out</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>black_pixel</name> <operator>&gt;</operator> <literal type="number">0xFF</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_out16</name> <init>= <expr><name>p_black_out</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_offset</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_out16</name><operator>++</operator> <operator>=</operator> <name>black_pixel</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_black_out</name></expr></argument>, <argument><expr><name>black_pixel</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_out</name></expr></argument>, <argument><expr><name>p_in</name></expr></argument>, <argument><expr><name>i_visible_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
