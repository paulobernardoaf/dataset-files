<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\rotate.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../control/motionlib.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterPacked</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>RotateCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANGLE_TEXT</name></cpp:macro> <cpp:value>N_("Angle in degrees")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANGLE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Angle in degrees (0 to 359)")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOTION_TEXT</name></cpp:macro> <cpp:value>N_("Use motion sensors")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOTION_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use HDAPS, AMS, APPLESMC or UNIMOTION motion " "sensors to rotate the video")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_PREFIX</name></cpp:macro> <cpp:value>"rotate-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Rotate video filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Rotate"</literal> )</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"angle"</literal></argument>, <argument><literal type="number">30.</literal></argument>, <argument>ANGLE_TEXT</argument>, <argument>ANGLE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"use-motion"</literal></argument>, <argument>false</argument>, <argument>MOTION_TEXT</argument>,

<argument>MOTION_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"rotate"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"angle"</literal></expr>, <expr><literal type="string">"use-motion"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>atomic_uint_fast32_t</name></type> <name>sincos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>motion_sensors_t</name> <modifier>*</modifier></type><name>p_motion</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<typedef>typedef <type><union>union <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>sin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>cos</name></decl>;</decl_stmt>

}</block>;</struct>

}</block></union></type> <name>sincos_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_trigo</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>f_angle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sincos_t</name></type> <name>sincos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f_angle</name> <operator>*=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>M_PI</name> <operator>/</operator> <literal type="number">180.</literal><operator>)</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>sincos</name><operator>.</operator><name>sin</name></name> <operator>=</operator> <call><name>lroundf</name><argument_list>(<argument><expr><call><name>sinf</name><argument_list>(<argument><expr><name>f_angle</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4096.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sincos</name><operator>.</operator><name>cos</name></name> <operator>=</operator> <call><name>lroundf</name><argument_list>(<argument><expr><call><name>cosf</name><argument_list>(<argument><expr><name>f_angle</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">4096.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>sincos</name></name></expr></argument>, <argument><expr><name><name>sincos</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fetch_trigo</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_sin</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_cos</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sincos_t</name></type> <name>sincos</name> <init>= <expr><block>{ <expr><operator>.</operator><name>u</name> <operator>=</operator> <macro><name>atomic_load</name><argument_list>(<argument>&amp;sys-&gt;sincos</argument>)</argument_list></macro></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>i_sin</name> <operator>=</operator> <name><name>sincos</name><operator>.</operator><name>sin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_cos</name> <operator>=</operator> <name><name>sincos</name><operator>.</operator><name>cos</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output chromas don't match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV</name></type>

<name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <init>= <expr><name>Filter</name></expr></init></decl>;</decl_stmt>

<break>break;</break>

<decl_stmt><decl><type><name>CASE_PACKED_YUV_422</name></type>

<name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <init>= <expr><name>FilterPacked</name></expr></init></decl>;</decl_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"use-motion"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_motion</name></name> <operator>=</operator> <call><name>motion_create</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_motion</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f_angle</name> <init>= <expr><call><name>var_CreateGetFloatCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><name>FILTER_PREFIX</name> <literal type="string">"angle"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>store_trigo</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>f_angle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"angle"</literal></expr></argument>,

<argument><expr><name>RotateCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_motion</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_motion</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>motion_destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_motion</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"angle"</literal></expr></argument>,

<argument><expr><name>RotateCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_motion</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_angle</name> <init>= <expr><call><name>motion_get_angle</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_motion</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>store_trigo</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_angle</name> <operator>/</operator> <literal type="number">20.f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sin</name></decl>, <decl><type ref="prev"/><name>i_cos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fetch_trigo</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_cos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr> ;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_srcp</name> <init>= <expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_dstp</name> <init>= <expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_lines</name> <init>= <expr><name><name>p_srcp</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_pitch</name> <init>= <expr><name><name>p_srcp</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_aspect</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <name>i_visible_lines</name> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>)</operator> <operator>/</operator> <operator>(</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>*</operator> <name>i_visible_pitch</name> <operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_line_center</name> <init>= <expr><name>i_visible_lines</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_col_center</name> <init>= <expr><name>i_visible_pitch</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>black_pixel</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>i_plane</name> <operator>==</operator> <name>Y_PLANE</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x00</literal></expr> </then><else>: <expr><literal type="number">0x80</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_line_next</name> <init>= <expr><name>i_cos</name> <operator>/</operator> <name>i_aspect</name> <operator>-</operator><name>i_sin</name><operator>*</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_col_next</name> <init>= <expr><operator>-</operator><name>i_sin</name> <operator>/</operator> <name>i_aspect</name> <operator>-</operator><name>i_cos</name><operator>*</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_line_orig0</name> <init>= <expr><operator>(</operator> <operator>-</operator> <name>i_cos</name> <operator>*</operator> <name>i_line_center</name> <operator>/</operator> <name>i_aspect</name>

<operator>-</operator> <name>i_sin</name> <operator>*</operator> <name>i_col_center</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">11</literal><operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_col_orig0</name> <init>= <expr><name>i_sin</name> <operator>*</operator> <name>i_line_center</name> <operator>/</operator> <name>i_aspect</name>

<operator>-</operator> <name>i_cos</name> <operator>*</operator> <name>i_col_center</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">11</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_visible_lines</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><operator>&amp;</operator><name><name>p_dstp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>p_dstp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_visible_pitch</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>p_out</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_line_orig</name> <init>= <expr><operator>(</operator><name>i_line_orig0</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator><operator>*</operator><name>i_aspect</name> <operator>+</operator> <name>i_line_center</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_col_orig</name> <init>= <expr><operator>(</operator><name>i_col_orig0</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator> <operator>+</operator> <name>i_col_center</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_orig_offset</name> <init>= <expr><operator>&amp;</operator><name><name>p_srcp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>i_line_orig</name> <operator>*</operator> <name><name>p_srcp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_col_orig</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_line_percent</name> <init>= <expr><operator>(</operator><name>i_line_orig0</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_col_percent</name> <init>= <expr><operator>(</operator><name>i_col_orig0</name> <operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>-</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>i_line_orig</name> <operator>&amp;&amp;</operator> <name>i_line_orig</name> <operator>&lt;</operator> <name>i_visible_lines</name>

<operator>&amp;&amp;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;=</operator> <name>i_col_orig</name> <operator>&amp;&amp;</operator> <name>i_col_orig</name> <operator>&lt;</operator> <name>i_visible_pitch</name></expr> )</condition>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>test</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_col_orig</name> <operator>&gt;</operator> <name>i_visible_pitch</name><operator>/</operator><literal type="number">2</literal> <operator>)</operator></expr> )</condition>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_curpix</name> <init>= <expr><name>black_pixel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_colpix</name> <init>= <expr><name>black_pixel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_linpix</name> <init>= <expr><name>black_pixel</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_nexpix</name> <init>= <expr><name>black_pixel</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>i_line_orig</name> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>i_col_orig</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_curpix</name> <operator>=</operator> <operator>*</operator><name>p_orig_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_orig_offset</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_col_orig</name> <operator>&lt;</operator> <name>i_visible_pitch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator> <name>i_line_orig</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_colpix</name> <operator>=</operator> <operator>*</operator><name>p_orig_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_orig_offset</name> <operator>+=</operator> <name><name>p_srcp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_line_orig</name> <operator>&lt;</operator> <name>i_visible_lines</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator> <name>i_col_orig</name> <operator>&lt;</operator> <name>i_visible_pitch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_nexpix</name> <operator>=</operator> <operator>*</operator><name>p_orig_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_orig_offset</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_line_orig</name> <operator>&lt;</operator> <name>i_visible_lines</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator> <name>i_col_orig</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_linpix</name> <operator>=</operator> <operator>*</operator><name>p_orig_offset</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name><operator>+=</operator> <name>i_curpix</name> <operator>*</operator>

<operator>(</operator><literal type="number">256</literal> <operator>-</operator> <name>i_line_percent</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <literal type="number">256</literal> <operator>-</operator> <name>i_col_percent</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name><operator>+=</operator> <name>i_linpix</name> <operator>*</operator>

<name>i_line_percent</name> <operator>*</operator> <operator>(</operator><literal type="number">256</literal> <operator>-</operator> <name>i_col_percent</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name><operator>+=</operator> <name>i_nexpix</name> <operator>*</operator>

<operator>(</operator> <name>i_col_percent</name><operator>)</operator> <operator>*</operator> <operator>(</operator> <name>i_line_percent</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>temp</name><operator>+=</operator> <name>i_colpix</name> <operator>*</operator>

<name>i_col_percent</name> <operator>*</operator> <operator>(</operator><literal type="number">256</literal> <operator>-</operator> <name>i_line_percent</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name>temp</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>test</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if type="elseif">else if <condition>(<expr><name>i_col_orig</name> <operator>==</operator> <name>i_visible_pitch</name><operator>/</operator><literal type="number">2</literal></expr> )</condition>

<block>{<block_content> <expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name>black_pixel</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <operator>*</operator><name>p_orig_offset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>test</name></cpp:undef>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name> <operator>=</operator> <name>black_pixel</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_line_orig0</name> <operator>+=</operator> <name>i_sin</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_col_orig0</name> <operator>+=</operator> <name>i_cos</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_line_orig0</name> <operator>+=</operator> <name>i_line_next</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_col_orig0</name> <operator>+=</operator> <name>i_col_next</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>FilterPacked</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_u_offset</name></decl>, <decl><type ref="prev"/><name>i_v_offset</name></decl>, <decl><type ref="prev"/><name>i_y_offset</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetPackedYuvOffsets</name><argument_list>( <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y_offset</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_u_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_v_offset</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visible_lines</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name><operator>+</operator><name>i_y_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_in_u</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name><operator>+</operator><name>i_u_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_in_v</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name><operator>+</operator><name>i_v_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_in_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name><operator>+</operator><name>i_y_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out_u</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name><operator>+</operator><name>i_u_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out_v</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name><operator>+</operator><name>i_v_offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_out_pitch</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_line_center</name> <init>= <expr><name>i_visible_lines</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_col_center</name> <init>= <expr><name>i_visible_pitch</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_motion</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_angle</name> <init>= <expr><call><name>motion_get_angle</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_motion</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>store_trigo</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_angle</name> <operator>/</operator> <literal type="number">20.f</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_sin</name></decl>, <decl><type ref="prev"/><name>i_cos</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fetch_trigo</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_cos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_line</name> <operator>&lt;</operator> <name>i_visible_lines</name></expr>;</condition> <incr><expr><name>i_line</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_col</name> <operator>&lt;</operator> <name>i_visible_pitch</name></expr>;</condition> <incr><expr><name>i_col</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_line_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_col_orig</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_line_orig</name> <operator>=</operator> <name>i_line_center</name> <operator>+</operator>

<operator>(</operator> <operator>(</operator> <name>i_sin</name> <operator>*</operator> <operator>(</operator> <name>i_col</name> <operator>-</operator> <name>i_col_center</name> <operator>)</operator>

<operator>+</operator> <name>i_cos</name> <operator>*</operator> <operator>(</operator> <name>i_line</name> <operator>-</operator> <name>i_line_center</name> <operator>)</operator> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_col_orig</name> <operator>=</operator> <name>i_col_center</name> <operator>+</operator>

<operator>(</operator> <operator>(</operator> <name>i_cos</name> <operator>*</operator> <operator>(</operator> <name>i_col</name> <operator>-</operator> <name>i_col_center</name> <operator>)</operator>

<operator>-</operator> <name>i_sin</name> <operator>*</operator> <operator>(</operator> <name>i_line</name> <operator>-</operator> <name>i_line_center</name> <operator>)</operator> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i_col_orig</name> <operator>&amp;&amp;</operator> <name>i_col_orig</name> <operator>&lt;</operator> <name>i_visible_pitch</name>

<operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>i_line_orig</name> <operator>&amp;&amp;</operator> <name>i_line_orig</name> <operator>&lt;</operator> <name>i_visible_lines</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <name><name>p_in</name><index>[<expr><name>i_line_orig</name><operator>*</operator><name>i_in_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col_orig</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_col_orig</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_u</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <name><name>p_in_u</name><index>[<expr><name>i_line_orig</name><operator>*</operator><name>i_in_pitch</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i_col_orig</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_v</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <name><name>p_in_v</name><index>[<expr><name>i_line_orig</name><operator>*</operator><name>i_in_pitch</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i_col_orig</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_u</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out_v</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_col</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_col</name> <operator>&gt;=</operator> <name>i_visible_pitch</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_line_orig</name> <operator>=</operator> <name>i_line_center</name> <operator>+</operator>

<operator>(</operator> <operator>(</operator> <name>i_sin</name> <operator>*</operator> <operator>(</operator> <name>i_col</name> <operator>-</operator> <name>i_col_center</name> <operator>)</operator>

<operator>+</operator> <name>i_cos</name> <operator>*</operator> <operator>(</operator> <name>i_line</name> <operator>-</operator> <name>i_line_center</name> <operator>)</operator> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_col_orig</name> <operator>=</operator> <name>i_col_center</name> <operator>+</operator>

<operator>(</operator> <operator>(</operator> <name>i_cos</name> <operator>*</operator> <operator>(</operator> <name>i_col</name> <operator>-</operator> <name>i_col_center</name> <operator>)</operator>

<operator>-</operator> <name>i_sin</name> <operator>*</operator> <operator>(</operator> <name>i_line</name> <operator>-</operator> <name>i_line_center</name> <operator>)</operator> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>&lt;=</operator> <name>i_col_orig</name> <operator>&amp;&amp;</operator> <name>i_col_orig</name> <operator>&lt;</operator> <name>i_visible_pitch</name>

<operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>&lt;=</operator> <name>i_line_orig</name> <operator>&amp;&amp;</operator> <name>i_line_orig</name> <operator>&lt;</operator> <name>i_visible_lines</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <name><name>p_in</name><index>[<expr><name>i_line_orig</name><operator>*</operator><name>i_in_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col_orig</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_line</name><operator>*</operator><name>i_out_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i_col</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RotateCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>store_trigo</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>f_float</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_this</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>psz_var</name></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>oldval</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
