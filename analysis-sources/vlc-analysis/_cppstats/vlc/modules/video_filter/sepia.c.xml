<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\sepia.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_cpu.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RVSepia</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PlanarI420Sepia</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PackedYUVSepia</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"intensity"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEPIA_INTENSITY_TEXT</name></cpp:macro> <cpp:value>N_("Sepia intensity")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEPIA_INTENSITY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Intensity of sepia effect" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"sepia-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Sepia video filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Sepia"</literal> )</argument> )</argument_list></macro>

<macro><name>set_help</name><argument_list>( <argument>N_(<literal type="string">"Gives video a warmer tone by applying sepia effect"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"intensity"</literal></argument>, <argument><literal type="number">120</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>SEPIA_INTENSITY_TEXT</argument>, <argument>SEPIA_INTENSITY_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FilterCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>SepiaFunction</name>)<parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SepiaFunction</name></type> <name>pf_sepia</name></decl>;</decl_stmt>

}</block> <decl><name><name>p_sepia_cfg</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_I420</name></expr>, <expr><name>PlanarI420Sepia</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RGB24</name></expr>, <expr><name>RVSepia</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_RGB32</name></expr>, <expr><name>RVSepia</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_UYVY</name></expr>, <expr><name>PackedYUVSepia</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_VYUY</name></expr>, <expr><name>PackedYUVSepia</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_YUYV</name></expr>, <expr><name>PackedYUVSepia</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_YVYU</name></expr>, <expr><name>PackedYUVSepia</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>SepiaFunction</name></type> <name>pf_sepia</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_int</name></type> <name>i_intensity</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_sepia</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_sepia_cfg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sepia_cfg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chroma</name> <operator>!=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_sepia</name></name> <operator>=</operator> <name><name>p_sepia_cfg</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pf_sepia</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_sepia</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_intensity</name></name></expr></argument>,

<argument><expr><call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"intensity"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"intensity"</literal></expr></argument>, <argument><expr><name>FilterCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"intensity"</literal></expr></argument>, <argument><expr><name>FilterCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intensity</name> <init>= <expr><call><name>atomic_load</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_intensity</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"can't get output picture"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_sepia</name></name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>intensity</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<function><type><name>VLC_SSE</name>

<specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>Sepia8ySSE2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_intensity_shifted_pair</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> (

"movq (%1), %%xmm1\n"

"punpcklbw %%xmm7, %%xmm1\n" 

"movdqa %%xmm1, %%xmm2\n" 

"movd %2, %%xmm3\n"

"pshufd $0, %%xmm3, %%xmm3\n"

"psrlw $2, %%xmm2\n" 

"psubusb %%xmm2, %%xmm1\n"

"paddusb %%xmm3, %%xmm1\n"

"packuswb %%xmm1, %%xmm1\n" 

"movq %%xmm1, (%0) \n"

:

:"r" (dst), "r"(src), "r"(i_intensity_shifted_pair)

:"memory", "xmm1", "xmm2", "xmm3");</asm>

</block_content>}</block></function>

<function><type><name>VLC_SSE</name>

<specifier>static</specifier> <name>void</name></type> <name>PlanarI420SepiaSSE</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_intensity</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>filling_const_8u</name> <init>= <expr><literal type="number">128</literal> <operator>-</operator> <name>i_intensity</name> <operator>/</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>filling_const_8v</name> <init>= <expr><literal type="number">128</literal> <operator>+</operator> <name>i_intensity</name> <operator>/</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_intensity_shifted_pair</name> <init>= <expr><literal type="number">0x10001</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>i_intensity</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<asm>__asm__ <specifier>volatile</specifier>("pxor %%xmm7, %%xmm7\n" ::: "xmm7");</asm>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dy_line1_start</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dy_line2_start</name> <init>= <expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_du_line_start</name> <init>= <expr><operator>(</operator><name>y</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dv_line_start</name> <init>= <expr><operator>(</operator><name>y</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>-</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>Sepia8ySSE2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>,

<argument><expr><name>i_intensity_shifted_pair</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Sepia8ySSE2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>,

<argument><expr><name>i_intensity_shifted_pair</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Sepia8ySSE2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>i_intensity_shifted_pair</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Sepia8ySSE2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>i_intensity_shifted_pair</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_du_line_start</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr></argument>,

<argument><expr><name>filling_const_8u</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dv_line_start</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name></expr></argument>,

<argument><expr><name>filling_const_8v</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>( <init>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_du_line_start</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>

<name>filling_const_8u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dv_line_start</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>

<name>filling_const_8v</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlanarI420Sepia</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_intensity</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>CAN_COMPILE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><call><name>vlc_CPU_SSE2</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>PlanarI420SepiaSSE</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>i_intensity</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>filling_const_8u</name> <init>= <expr><literal type="number">128</literal> <operator>-</operator> <name>i_intensity</name> <operator>/</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>filling_const_8v</name> <init>= <expr><literal type="number">128</literal> <operator>+</operator> <name>i_intensity</name> <operator>/</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dy_line1_start</name> <init>= <expr><name>y</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dy_line2_start</name> <init>= <expr><operator>(</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_du_line_start</name> <init>= <expr><operator>(</operator><name>y</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dv_line_start</name> <init>= <expr><operator>(</operator><name>y</name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_picture_size_limit</name> <init>= <expr><ternary><condition><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name>

<operator>&lt;</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>

?</condition><then> <expr><operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>:

<expr><operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_picture_size_limit</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line1_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator>

<operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dy_line2_start</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_du_line_start</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>

<name>filling_const_8u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_dv_line_start</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>]</index></name> <operator>=</operator>

<name>filling_const_8v</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PackedYUVSepia</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_intensity</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_yindex</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_uindex</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_vindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPackedYuvOffsets</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_yindex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_uindex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_vindex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>filling_const_8u</name> <init>= <expr><literal type="number">128</literal> <operator>-</operator> <name>i_intensity</name> <operator>/</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>filling_const_8v</name> <init>= <expr><literal type="number">128</literal> <operator>+</operator> <name>i_intensity</name> <operator>/</operator> <literal type="number">14</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>

<operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<block>{<block_content>

<while>while<condition>( <expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_yindex</name></expr>]</index></name> <operator>=</operator>

<name><name>p_in</name><index>[<expr><name>i_yindex</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p_in</name><index>[<expr><name>i_yindex</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_yindex</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>p_in</name><index>[<expr><name>i_yindex</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>p_in</name><index>[<expr><name>i_yindex</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_uindex</name></expr>]</index></name> <operator>=</operator> <name>filling_const_8u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_vindex</name></expr>]</index></name> <operator>=</operator> <name>filling_const_8v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RVSepia</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_intensity</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALEBITS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_HALF</name></cpp:macro> <cpp:value>(1 &lt;&lt; (SCALEBITS - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) ((x) * (1&lt;&lt;SCALEBITS) + 0.5))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_isRV32</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB32</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rindex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_gindex</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_bindex</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetPackedRgbIndexes</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_rindex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_gindex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bindex</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>

<operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>r_intensity</name> <init>= <expr><operator>(</operator><operator>(</operator> <call><name>FIX</name><argument_list>( <argument><expr><literal type="number">1.40200</literal> <operator>*</operator> <literal type="number">255.0</literal> <operator>/</operator> <literal type="number">224.0</literal></expr></argument> )</argument_list></call> <operator>*</operator> <operator>(</operator><name>i_intensity</name> <operator>*</operator> <literal type="number">14</literal><operator>)</operator>

<operator>+</operator> <name>ONE_HALF</name> <operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>g_intensity</name> <init>= <expr><operator>(</operator><operator>(</operator> <operator>-</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.34414</literal><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator> <operator>-</operator> <name>i_intensity</name> <operator>/</operator> <literal type="number">6</literal> <operator>)</operator>

<operator>-</operator> <call><name>FIX</name><argument_list>( <argument><expr><literal type="number">0.71414</literal> <operator>*</operator> <literal type="number">255.0</literal> <operator>/</operator> <literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator> <name>i_intensity</name> <operator>*</operator> <literal type="number">14</literal> <operator>)</operator>

<operator>+</operator> <name>ONE_HALF</name> <operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b_intensity</name> <init>= <expr><operator>(</operator><operator>(</operator> <call><name>FIX</name><argument_list>( <argument><expr><literal type="number">1.77200</literal> <operator>*</operator> <literal type="number">255.0</literal> <operator>/</operator> <literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator> <operator>-</operator> <name>i_intensity</name> <operator>/</operator> <literal type="number">6</literal> <operator>)</operator>

<operator>+</operator> <name>ONE_HALF</name> <operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_y</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator> <literal type="number">66</literal> <operator>*</operator> <name><name>p_in</name><index>[<expr><name>i_rindex</name></expr>]</index></name> <operator>+</operator> <literal type="number">129</literal> <operator>*</operator> <name><name>p_in</name><index>[<expr><name>i_gindex</name></expr>]</index></name> <operator>+</operator> <literal type="number">25</literal>

<operator>*</operator> <name><name>p_in</name><index>[<expr><name>i_bindex</name></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>*</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">255.0</literal><operator>/</operator><literal type="number">219.0</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator> <literal type="number">66</literal> <operator>*</operator> <name><name>p_in</name><index>[<expr><name>i_rindex</name></expr>]</index></name> <operator>+</operator> <literal type="number">129</literal> <operator>*</operator> <name><name>p_in</name><index>[<expr><name>i_gindex</name></expr>]</index></name> <operator>+</operator> <literal type="number">25</literal>

<operator>*</operator> <name><name>p_in</name><index>[<expr><name>i_bindex</name></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator>

<operator>*</operator> <call><name>FIX</name><argument_list>( <argument><expr><literal type="number">255.0</literal> <operator>/</operator> <literal type="number">219.0</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name>i_intensity</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_rindex</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>(<argument><expr><name>i_y</name> <operator>+</operator> <name>r_intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_gindex</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>(<argument><expr><name>i_y</name> <operator>+</operator> <name>g_intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_bindex</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>(<argument><expr><name>i_y</name> <operator>+</operator> <name>b_intensity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_isRV32</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_out</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p_in</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCALEBITS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONE_HALF</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIX</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FilterCallback</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_intensity</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
