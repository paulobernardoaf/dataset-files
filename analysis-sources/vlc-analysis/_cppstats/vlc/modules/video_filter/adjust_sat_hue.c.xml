<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\adjust_sat_hue.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adjust_sat_hue.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_RANGE</name><parameter_list>( <parameter><type><name>i_bpp</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(1 &lt;&lt; i_bpp)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_MAX</name><parameter_list>( <parameter><type><name>i_bpp</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(I_RANGE( i_bpp ) - 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I_MID</name><parameter_list>( <parameter><type><name>i_bpp</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(I_RANGE( i_bpp ) &gt;&gt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR_WRITE_UV_CLIP</name><parameter_list>( <parameter><type><name>i_bpp</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>i_u = *p_in++ ; i_v = *p_in_v++ ; *p_out++ = VLC_CLIP( ((( (((i_u * i_cos + i_v * i_sin - i_x) + I_MID( i_bpp )) &gt;&gt; i_bpp) * i_sat) + I_MID( i_bpp )) &gt;&gt; i_bpp) + I_MID( i_bpp ), 0, I_MAX( i_bpp ) ); *p_out_v++ = VLC_CLIP( ((( (((i_v * i_cos - i_u * i_sin - i_y) + I_MID( i_bpp )) &gt;&gt; i_bpp) * i_sat) + I_MID( i_bpp )) &gt;&gt; i_bpp) + I_MID( i_bpp ), 0, I_MAX( i_bpp ) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR_WRITE_UV</name><parameter_list>( <parameter><type><name>i_bpp</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>i_u = *p_in++ ; i_v = *p_in_v++ ; *p_out++ = ((( (((i_u * i_cos + i_v * i_sin - i_x) + I_MID( i_bpp )) &gt;&gt; i_bpp) * i_sat) + I_MID( i_bpp )) &gt;&gt; i_bpp) + I_MID( i_bpp ); *p_out_v++ = ((( (((i_v * i_cos - i_u * i_sin - i_y) + I_MID( i_bpp )) &gt;&gt; i_bpp) * i_sat) + I_MID( i_bpp )) &gt;&gt; i_bpp) + I_MID( i_bpp )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKED_WRITE_UV_CLIP</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>i_u = *p_in; p_in += 4; i_v = *p_in_v; p_in_v += 4; *p_out = clip_uint8_vlc( ((( (((i_u * i_cos + i_v * i_sin - i_x) + I_MID( 8 )) &gt;&gt; 8) * i_sat) + I_MID( 8 )) &gt;&gt; 8) + 128); p_out += 4; *p_out_v = clip_uint8_vlc( ((( (((i_v * i_cos - i_u * i_sin - i_y) + I_MID( 8 )) &gt;&gt; 8) * i_sat) + I_MID( 8 )) &gt;&gt; 8) + 128); p_out_v += 4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PACKED_WRITE_UV</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>i_u = *p_in; p_in += 4; i_v = *p_in_v; p_in_v += 4; *p_out = ((( (((i_u * i_cos + i_v * i_sin - i_x) + I_MID( 8 )) &gt;&gt; 8) * i_sat) + I_MID( 8 )) &gt;&gt; 8) + 128; p_out += 4; *p_out_v = ((( (((i_v * i_cos - i_u * i_sin - i_y) + I_MID( 8 )) &gt;&gt; 8) * i_sat) + I_MID( 8 )) &gt;&gt; 8) + 128; p_out_v += 4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ADJUST_8_TIMES</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x; x; x; x; x; x; x; x</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>planar_sat_hue_clip_C</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_sat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>

<operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_u</name></decl>, <decl><type ref="prev"/><name>i_v</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ADJUST_8_TIMES</name><argument_list>( <argument><expr><call><name>PLANAR_WRITE_UV_CLIP</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>PLANAR_WRITE_UV_CLIP</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>planar_sat_hue_C</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_sat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>

<operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_u</name></decl>, <decl><type ref="prev"/><name>i_v</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ADJUST_8_TIMES</name><argument_list>( <argument><expr><call><name>PLANAR_WRITE_UV</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>PLANAR_WRITE_UV</name><argument_list>( <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>+=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>+=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>-</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>planar_sat_hue_clip_C_16</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_sat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bpp</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV10</name></type>

<name>i_bpp</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<break>break;</break>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV9</name></type>

<name>i_bpp</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>

<operator>*</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_u</name></decl>, <decl><type ref="prev"/><name>i_v</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ADJUST_8_TIMES</name><argument_list>( <argument><expr><call><name>PLANAR_WRITE_UV_CLIP</name><argument_list>( <argument><expr><name>i_bpp</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>PLANAR_WRITE_UV_CLIP</name><argument_list>( <argument><expr><name>i_bpp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>+=</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>+=</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>planar_sat_hue_C_16</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_sat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bpp</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV10</name></type>

<name>i_bpp</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<break>break;</break>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV9</name></type>

<name>i_bpp</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>p_in</name> <operator>+</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name>

<operator>*</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_u</name></decl>, <decl><type ref="prev"/><name>i_v</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ADJUST_8_TIMES</name><argument_list>( <argument><expr><call><name>PLANAR_WRITE_UV</name><argument_list>( <argument><expr><name>i_bpp</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>PLANAR_WRITE_UV</name><argument_list>( <argument><expr><name>i_bpp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>+=</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>+=</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator>

<operator>-</operator> <operator>(</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>packed_sat_hue_clip_C</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_cos</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_sat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_y_offset</name></decl>, <decl><type ref="prev"/><name>i_u_offset</name></decl>, <decl><type ref="prev"/><name>i_v_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_visible_lines</name></decl>, <decl><type ref="prev"/><name>i_pitch</name></decl>, <decl><type ref="prev"/><name>i_visible_pitch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>GetPackedYuvOffsets</name><argument_list>( <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y_offset</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_u_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_v_offset</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_visible_lines</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pitch</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_visible_pitch</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_u_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_v_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name>i_visible_lines</name> <operator>*</operator> <name>i_pitch</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_u_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_v_offset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_u</name></decl>, <decl><type ref="prev"/><name>i_v</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name>i_visible_pitch</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ADJUST_8_TIMES</name><argument_list>( <argument><expr><call><name>PACKED_WRITE_UV_CLIP</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>PACKED_WRITE_UV_CLIP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>packed_sat_hue_C</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_pic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type> <name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sin</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_cos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_sat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_v</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_in_end</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_line_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_out_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_y_offset</name></decl>, <decl><type ref="prev"/><name>i_u_offset</name></decl>, <decl><type ref="prev"/><name>i_v_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_visible_lines</name></decl>, <decl><type ref="prev"/><name>i_pitch</name></decl>, <decl><type ref="prev"/><name>i_visible_pitch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>GetPackedYuvOffsets</name><argument_list>( <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y_offset</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_u_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_v_offset</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_visible_lines</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pitch</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_visible_pitch</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_u_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_v_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name>i_visible_lines</name> <operator>*</operator> <name>i_pitch</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_u_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>=</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>i_v_offset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_u</name></decl>, <decl><type ref="prev"/><name>i_v</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_in_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_line_end</name> <operator>=</operator> <name>p_in</name> <operator>+</operator> <name>i_visible_pitch</name> <operator>-</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ADJUST_8_TIMES</name><argument_list>( <argument><expr><call><name>PACKED_WRITE_UV</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_line_end</name> <operator>+=</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_in</name> <operator>&lt;</operator> <name>p_line_end</name></expr> ;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>PACKED_WRITE_UV</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_in</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_in_v</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out_v</name> <operator>+=</operator> <name>i_pitch</name> <operator>-</operator> <name>i_visible_pitch</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
