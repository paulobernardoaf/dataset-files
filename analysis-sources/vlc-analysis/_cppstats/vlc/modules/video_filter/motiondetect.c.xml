<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\motiondetect.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_PREFIX</name></cpp:macro> <cpp:value>"motiondetect-"</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Motion detect video filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Motion Detect"</literal> )</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"motion"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GaussianConvolution</name><parameter_list>( <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FindShapes</name><parameter_list>( <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Draw</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pix_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pix_size</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_COLORS</name></cpp:macro> <cpp:value>(5000)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>is_yuv_planar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_old</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_buf2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_colors</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>colors</name><index>[<expr><name>NUM_COLORS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>color_x_min</name><index>[<expr><name>NUM_COLORS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>color_x_max</name><index>[<expr><name>NUM_COLORS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>color_y_min</name><index>[<expr><name>NUM_COLORS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>color_y_max</name><index>[<expr><name>NUM_COLORS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_yuv_planar</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>CASE_PLANAR_YUV</name></type>

<name>is_yuv_planar</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<break>break;</break>

<decl_stmt><decl><type><name>CASE_PACKED_YUV_422</name></type>

<name>is_yuv_planar</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>is_yuv_planar</name></name> <operator>=</operator> <name>is_yuv_planar</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf2</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf2</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PreparePlanar</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_oldpix</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_old_pitch</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_inpix</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf2</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>p_oldpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_old_pitch</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>i_chroma_dx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_chroma_dy</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_J420</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_YV12</name></expr>:</case>

<expr_stmt><expr><name>i_chroma_dx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_chroma_dy</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_I422</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_J422</name></expr>:</case>

<expr_stmt><expr><name>i_chroma_dx</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_chroma_dy</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Not taking chroma into account"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_inpix_u</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_inpix_v</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch_u</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch_v</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_oldpix_u</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_oldpix_v</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_old_pitch_u</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>U_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_old_pitch_v</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>V_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_height</name></name><operator>/</operator><name>i_chroma_dy</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name><operator>/</operator><name>i_chroma_dx</name></expr>;</condition> <incr><expr><name>x</name> <operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d</name> <init>= <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_inpix_u</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch_u</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>p_oldpix_u</name><index>[<expr><name>y</name><operator>*</operator><name>i_old_pitch_u</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>+</operator>

<call><name>abs</name><argument_list>( <argument><expr><name><name>p_inpix_v</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch_v</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>p_oldpix_v</name><index>[<expr><name>y</name><operator>*</operator><name>i_old_pitch_v</name><operator>+</operator><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_chroma_dy</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_chroma_dx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf2</name><index>[<expr><name>i_chroma_dy</name><operator>*</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name><operator>*</operator><name>j</name> <operator>+</operator> <name>i_chroma_dx</name><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PreparePacked</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_pix_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_y_offset</name></decl>, <decl><type ref="prev"/><name>i_u_offset</name></decl>, <decl><type ref="prev"/><name>i_v_offset</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetPackedYuvOffsets</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_y_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_u_offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_v_offset</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_pix_offset</name> <operator>=</operator> <name>i_y_offset</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_oldpix</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_old_pitch</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_inpix</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>+=</operator><literal type="number">2</literal></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><name>i_u_offset</name></expr>]</index></name> <operator>-</operator> <name><name>p_oldpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_old_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><name>i_u_offset</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>+</operator>

<call><name>abs</name><argument_list>( <argument><expr><name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><name>i_v_offset</name></expr>]</index></name> <operator>-</operator> <name><name>p_oldpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_old_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><name>i_v_offset</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf2</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name><operator>+</operator><name>x</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>abs</name><argument_list>( <argument><expr><name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>x</name><operator>+</operator><name>i</name><operator>)</operator><operator>+</operator><name>i_y_offset</name></expr>]</index></name> <operator>-</operator> <name><name>p_oldpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_old_pitch</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>x</name><operator>+</operator><name>i</name><operator>)</operator><operator>+</operator><name>i_y_offset</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <name>d</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_inpic</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name> <init>= <expr><call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_inpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>picture_Copy</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_inpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name></name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>( <argument><expr><name>p_inpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>exit</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pix_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pix_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>is_yuv_planar</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PreparePlanar</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_inpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pix_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pix_size</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>PreparePacked</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_inpic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pix_offset</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_pix_size</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_colors</name></name> <operator>=</operator> <call><name>FindShapes</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf2</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>colors</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>color_x_min</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>color_x_max</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>color_y_min</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>color_y_max</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Draw</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_pix_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument>, <argument><expr><name>i_pix_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_old</name></name> <operator>=</operator> <call><name>picture_Hold</name><argument_list>( <argument><expr><name>p_inpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>exit</name>:</label>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_inpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_outpic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GaussianConvolution</name><parameter_list>( <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_inpix</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_smooth</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_src_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_num_lines</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_src_visible</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_smooth</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_smooth</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_src_pitch</name> <operator>*</operator> <name>i_num_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_num_lines</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_src_visible</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>

<operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>

<operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr> ;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FindShapes</name><parameter_list>( <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_diff</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_smooth</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_visible</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_lines</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>colors</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color_x_min</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color_x_max</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color_y_min</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>color_y_max</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GaussianConvolution</name><argument_list>( <argument><expr><name>p_diff</name></expr></argument>, <argument><expr><name>p_smooth</name></expr></argument>, <argument><expr><name>i_pitch</name></expr></argument>, <argument><expr><name>i_lines</name></expr></argument>, <argument><expr><name>i_visible</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_pitch</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>i_lines</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_lines</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_pitch</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">15</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_smooth</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>last</name> <operator>&lt;</operator> <name>NUM_COLORS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colors</name><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <name>last</name></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK</name><parameter_list>( <parameter><type><name>A</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( p_smooth[A] &amp;&amp; p_smooth[A] != p_smooth[i*i_pitch+j] ) { if( p_smooth[A] &lt; p_smooth[i*i_pitch+j] ) colors[p_smooth[i*i_pitch+j]] = p_smooth[A]; else colors[p_smooth[A]] = p_smooth[i*i_pitch+j]; }</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>( <argument><expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CHECK</name></cpp:undef>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>color_x_min</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_x_max</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_y_min</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_y_max</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_pitch</name> <operator>*</operator> <name>i_lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><name><name>colors</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>colors</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name><name>color_x_min</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>color_x_min</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>color_x_max</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>%</operator> <name>i_pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_y_min</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>color_y_max</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>/</operator> <name>i_pitch</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>i</name> <operator>%</operator> <name>i_pitch</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>i</name> <operator>/</operator> <name>i_pitch</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>x</name> <operator>&lt;</operator> <name><name>color_x_min</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>color_x_min</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>x</name> <operator>&gt;</operator> <name><name>color_x_max</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>color_x_max</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>y</name> <operator>&lt;</operator> <name><name>color_y_min</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>color_y_min</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>y</name> <operator>&gt;</operator> <name><name>color_y_max</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>color_y_max</name><index>[<expr><name><name>p_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>colors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>color_x_min</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>last</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>colors</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>j</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>color_x_min</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>color_x_min</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color_x_min</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>color_x_max</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color_x_max</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>__MAX</name><argument_list>( <argument><expr><name><name>color_y_min</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color_y_min</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>color_y_max</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color_y_max</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>color_x_min</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>color_x_min</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color_x_min</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_x_max</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>color_x_max</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color_x_max</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_y_min</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>color_y_min</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color_y_min</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_y_max</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>color_y_max</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>color_y_max</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>color_x_min</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>last</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Draw</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pix_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pix_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_colors</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>colors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color_x_min</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>color_x_min</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color_x_max</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>color_x_max</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color_y_min</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>color_y_min</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>color_y_max</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>color_y_max</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>color_x_min</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>color_y_max</name> <operator>-</operator> <name>color_y_min</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>color_x_max</name> <operator>-</operator> <name>color_x_min</name> <operator>)</operator> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>color_y_min</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <name>color_x_min</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>color_x_max</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pix</name><index>[<expr><name>y</name><operator>*</operator><name>i_pix_pitch</name><operator>+</operator><name>x</name><operator>*</operator><name>i_pix_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>color_y_max</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <name>color_x_min</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>color_x_max</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pix</name><index>[<expr><name>y</name><operator>*</operator><name>i_pix_pitch</name><operator>+</operator><name>x</name><operator>*</operator><name>i_pix_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>color_x_min</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <name>color_y_min</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>color_y_max</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pix</name><index>[<expr><name>y</name><operator>*</operator><name>i_pix_pitch</name><operator>+</operator><name>x</name><operator>*</operator><name>i_pix_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>color_x_max</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <name>color_y_min</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;=</operator> <name>color_y_max</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pix</name><index>[<expr><name>y</name><operator>*</operator><name>i_pix_pitch</name><operator>+</operator><name>x</name><operator>*</operator><name>i_pix_size</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Counted %d moving shapes."</literal></expr></argument>, <argument><expr><name>j</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
