<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\bluescreen.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUESCREEN_HELP</name></cpp:macro> <cpp:value>N_( "This effect, also known as \"greenscreen\" or \"chroma key\" blends " "the \"blue parts\" of the foreground image of the mosaic on the " "background (like weather forecasts). You can choose the \"key\" " "color for blending (blue by default)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUESCREENU_TEXT</name></cpp:macro> <cpp:value>N_("Bluescreen U value")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUESCREENU_LONGTEXT</name></cpp:macro> <cpp:value>N_( "\"U\" value for the bluescreen key color " "(in YUV values). From 0 to 255. Defaults to 120 for blue." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUESCREENV_TEXT</name></cpp:macro> <cpp:value>N_("Bluescreen V value")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUESCREENV_LONGTEXT</name></cpp:macro> <cpp:value>N_( "\"V\" value for the bluescreen key color " "(in YUV values). From 0 to 255. Defaults to 90 for blue." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUESCREENUTOL_TEXT</name></cpp:macro> <cpp:value>N_("Bluescreen U tolerance")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUESCREENUTOL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Tolerance of the bluescreen blender " "on color variations for the U plane. A value between 10 and 20 " "seems sensible." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUESCREENVTOL_TEXT</name></cpp:macro> <cpp:value>N_("Bluescreen V tolerance")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLUESCREENVTOL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Tolerance of the bluescreen blender " "on color variations for the V plane. A value between 10 and 20 " "seems sensible." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFG_PREFIX</name></cpp:macro> <cpp:value>"bluescreen-"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>BluescreenCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Bluescreen video filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Bluescreen"</literal> )</argument>)</argument_list></macro>

<macro><name>set_help</name><argument_list>( <argument>BLUESCREEN_HELP</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"bluescreen"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"u"</literal></argument>, <argument><literal type="number">120</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>BLUESCREENU_TEXT</argument>, <argument>BLUESCREENU_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"v"</literal></argument>, <argument><literal type="number">90</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>BLUESCREENV_TEXT</argument>, <argument>BLUESCREENV_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"ut"</literal></argument>, <argument><literal type="number">17</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>BLUESCREENUTOL_TEXT</argument>, <argument>BLUESCREENUTOL_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>CFG_PREFIX <literal type="string">"vt"</literal></argument>, <argument><literal type="number">17</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>BLUESCREENVTOL_TEXT</argument>, <argument>BLUESCREENVTOL_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"u"</literal></expr>, <expr><literal type="string">"v"</literal></expr>, <expr><literal type="string">"ut"</literal></expr>, <expr><literal type="string">"vt"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_u</name></decl>, <name>i_v</name>, <name>i_ut</name>, <name>i_vt</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_at</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YUVA</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported input chroma \"%4.4s\". "</literal>

<literal type="string">"Bluescreen can only use \"YUVA\"."</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_VAR</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>min</name></type></parameter>, <parameter><type><name>max</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>val = var_CreateGetIntegerCommand( p_filter, CFG_PREFIX #name ); p_sys-&gt;i_##name = VLC_CLIP( val, min, max ); var_AddCallback( p_filter, CFG_PREFIX #name, BluescreenCallback, p_sys );</cpp:value></cpp:define>

<expr_stmt><expr><call><name>GET_VAR</name><argument_list>( <argument><expr><name>u</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VAR</name><argument_list>( <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VAR</name><argument_list>( <argument><expr><name>ut</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GET_VAR</name><argument_list>( <argument><expr><name>vt</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_at</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>GET_VAR</name></cpp:undef>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"u"</literal></expr></argument>, <argument><expr><name>BluescreenCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"v"</literal></expr></argument>, <argument><expr><name>BluescreenCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"ut"</literal></expr></argument>, <argument><expr><name>BluescreenCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>CFG_PREFIX</name> <literal type="string">"vt"</literal></expr></argument>, <argument><expr><name>BluescreenCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_at</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_lines</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>A_PLANE</name></expr> ]</index></name><operator>.</operator><name>i_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pitch</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>A_PLANE</name></expr> ]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_a</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>A_PLANE</name></expr> ]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_at</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>U_PLANE</name></expr> ]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[ <expr><name>V_PLANE</name></expr> ]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>umin</name></decl>, <decl><type ref="prev"/><name>umax</name></decl>, <decl><type ref="prev"/><name>vmin</name></decl>, <decl><type ref="prev"/><name>vmax</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_YUVA</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported input chroma \"%4.4s\". "</literal>

<literal type="string">"Bluescreen can only use \"YUVA\"."</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name><operator>.</operator><name>i_chroma</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_at</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_at</name></name></expr></argument>,

<argument><expr><name>i_lines</name> <operator>*</operator> <name>i_pitch</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>uint8_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_at</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_at</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>umin</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_u</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ut</name></name> <operator>&gt;=</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_u</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ut</name></name></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>umax</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_u</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ut</name></name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_u</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ut</name></name></expr> </then><else>: <expr><literal type="number">0xff</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>vmin</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_v</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_vt</name></name> <operator>&gt;=</operator> <literal type="number">0x00</literal></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_v</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_vt</name></name></expr> </then><else>: <expr><literal type="number">0x00</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>vmax</name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_v</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_vt</name></name> <operator>&lt;=</operator> <literal type="number">0xff</literal></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_v</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_vt</name></name></expr> </then><else>: <expr><literal type="number">0xff</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_lines</name><operator>*</operator><name>i_pitch</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_u</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>umax</name> <operator>&amp;&amp;</operator> <name><name>p_u</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>umin</name>

<operator>&amp;&amp;</operator> <name><name>p_v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>vmax</name> <operator>&amp;&amp;</operator> <name><name>p_v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>vmin</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_at</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_at</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_lines</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_a</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_a</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_pitch</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_a</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><operator>(</operator>

<operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name><operator>*</operator><literal type="number">12</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">12</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">4</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">12</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name><operator>*</operator><literal type="number">12</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_at</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>)</operator><operator>/</operator><literal type="number">152</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_a</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0xbf</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_a</name><index>[<expr><name>i</name><operator>*</operator><name>i_pitch</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>p_pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>BluescreenCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR_IS</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>!strcmp( psz_var, CFG_PREFIX a )</cpp:value></cpp:define>

<if_stmt><if>if<condition>( <expr><call><name>VAR_IS</name><argument_list>( <argument><expr><literal type="string">"u"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_u</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>VAR_IS</name><argument_list>( <argument><expr><literal type="string">"v"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_v</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>VAR_IS</name><argument_list>( <argument><expr><literal type="string">"ut"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ut</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>VAR_IS</name><argument_list>( <argument><expr><literal type="string">"vt"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_vt</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>newval</name><operator>.</operator><name>i_int</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
