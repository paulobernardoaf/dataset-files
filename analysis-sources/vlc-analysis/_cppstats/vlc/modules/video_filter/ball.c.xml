<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\ball.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<enum>enum <block>{ <decl><name>RED</name></decl>, <decl><name>GREEN</name></decl>, <decl><name>BLUE</name></decl>, <decl><name>WHITE</name></decl> }</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLORS_RGB</name></cpp:macro> <cpp:value>p_sys-&gt;colorList[RED].comp1 = 255; p_sys-&gt;colorList[RED].comp2 = 0; p_sys-&gt;colorList[RED].comp3 = 0; p_sys-&gt;colorList[GREEN].comp1 = 0; p_sys-&gt;colorList[GREEN].comp2 = 255; p_sys-&gt;colorList[GREEN].comp3 = 0; p_sys-&gt;colorList[BLUE].comp1 = 0; p_sys-&gt;colorList[BLUE].comp2 = 0; p_sys-&gt;colorList[BLUE].comp3 = 255; p_sys-&gt;colorList[WHITE].comp1 = 255; p_sys-&gt;colorList[WHITE].comp2 = 255; p_sys-&gt;colorList[WHITE].comp3 = 255;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLORS_YUV</name></cpp:macro> <cpp:value>p_sys-&gt;colorList[RED].comp1 = 82; p_sys-&gt;colorList[RED].comp2 = 240; p_sys-&gt;colorList[RED].comp3 = 90; p_sys-&gt;colorList[GREEN].comp1 = 145; p_sys-&gt;colorList[GREEN].comp2 = 34; p_sys-&gt;colorList[GREEN].comp3 = 54 ; p_sys-&gt;colorList[BLUE].comp1 = 41; p_sys-&gt;colorList[BLUE].comp2 = 146; p_sys-&gt;colorList[BLUE].comp3 = 240; p_sys-&gt;colorList[WHITE].comp1 = 255; p_sys-&gt;colorList[WHITE].comp2 = 128; p_sys-&gt;colorList[WHITE].comp3 = 128;</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>filter_sys_t</name></name></type> <name>filter_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>drawBall</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>drawPixelRGB24</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>G</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>B</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_skip</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>drawPixelI420</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>V</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_skip</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>drawPixelPacked</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>V</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_skip</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>FilterBall</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ballCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>getBallColor</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_newval</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BALL_COLOR_TEXT</name></cpp:macro> <cpp:value>N_("Ball color")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDGE_VISIBLE_TEXT</name></cpp:macro> <cpp:value>N_("Edge visible")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDGE_VISIBLE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set edge visibility.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BALL_SPEED_TEXT</name></cpp:macro> <cpp:value>N_("Ball speed")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BALL_SPEED_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set ball speed, the displacement value " "in number of pixels by frame.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BALL_SIZE_TEXT</name></cpp:macro> <cpp:value>N_("Ball size")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BALL_SIZE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set ball size giving its radius in number " "of pixels")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAD_THRESH_TEXT</name></cpp:macro> <cpp:value>N_("Gradient threshold")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAD_THRESH_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set gradient threshold for edge computation.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BALL_HELP</name></cpp:macro> <cpp:value>N_("Augmented reality ball game")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILTER_PREFIX</name></cpp:macro> <cpp:value>"ball-"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>mode_list</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"red"</literal></expr>, <expr><literal type="string">"green"</literal></expr>, <expr><literal type="string">"blue"</literal></expr>, <expr><literal type="string">"white"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>mode_list_text</name><index>[]</index></name> <init>= <expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Red"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Green"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Blue"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"White"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Ball video filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Ball"</literal> )</argument>)</argument_list></macro>

<macro><name>set_help</name><argument_list>(<argument>BALL_HELP</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"color"</literal></argument>, <argument><literal type="string">"red"</literal></argument>,

<argument>BALL_COLOR_TEXT</argument>, <argument>BALL_COLOR_TEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>mode_list</argument>, <argument>mode_list_text</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"speed"</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">15</literal></argument>,

<argument>BALL_SPEED_TEXT</argument>, <argument>BALL_SPEED_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"size"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">30</literal></argument>,

<argument>BALL_SIZE_TEXT</argument>, <argument>BALL_SIZE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"gradient-threshold"</literal></argument>, <argument><literal type="number">40</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">200</literal></argument>,

<argument>GRAD_THRESH_TEXT</argument>, <argument>GRAD_THRESH_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument>FILTER_PREFIX <literal type="string">"edge-visible"</literal></argument>, <argument>true</argument>,

<argument>EDGE_VISIBLE_TEXT</argument>, <argument>EDGE_VISIBLE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"ball"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_filter_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"speed"</literal></expr>, <expr><literal type="string">"size"</literal></expr>,

<expr><literal type="string">"gradient-threshold"</literal></expr>, <expr><literal type="string">"edge-visible"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>filter_sys_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ballColor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ball_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ball_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ballSpeed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ballSize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_edgeVisible</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_y_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_u_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_v_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_smooth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>p_grad_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>p_grad_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_gradThresh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_lastVect_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_lastVect_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_newVect_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_newVect_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_contVect_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_contVect_y</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> ( <modifier>*</modifier><name>drawingPixelFunction</name> )<parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>,

<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>comp1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>comp2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>comp3</name></decl>;</decl_stmt>

}</block> <decl><name><name>colorList</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</struct>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>filter_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_I420</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_J420</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>drawingPixelFunction</name></name> <operator>=</operator> <name>drawPixelI420</name></expr>;</expr_stmt>

<macro><name>COLORS_YUV</name></macro>

<break>break;</break>

<decl_stmt><decl><type><name>CASE_PACKED_YUV_422</name></type>

<name><name>p_sys</name><operator>-&gt;</operator><name>drawingPixelFunction</name></name> <init>= <expr><name>drawPixelPacked</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>COLORS_YUV</name></type>

<name>GetPackedYuvOffsets</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_y_offset</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_u_offset</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_v_offset</name></name></expr></argument> )</argument_list></decl>;</decl_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>drawingPixelFunction</name></name> <operator>=</operator> <name>drawPixelRGB24</name></expr>;</expr_stmt>

<macro><name>COLORS_RGB</name></macro>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported input chroma (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>=</operator> <call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>config_ChainParse</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name></expr></argument>, <argument><expr><name>ppsz_filter_options</name></expr></argument>,

<argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_cfg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>psz_method</name> <operator>=</operator>

<call><name>var_CreateGetNonEmptyStringCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><name>FILTER_PREFIX</name> <literal type="string">"color"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"configuration variable "</literal>

<name>FILTER_PREFIX</name> <literal type="string">"color empty"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ballColor</name></name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ballColor</name></name> <operator>=</operator> <call><name>getBallColor</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name>psz_method</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_method</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name> <operator>=</operator>

<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"size"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSpeed</name></name> <operator>=</operator>

<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"speed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_edgeVisible</name></name> <operator>=</operator>

<call><name>var_CreateGetBoolCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"edge-visible"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_gradThresh</name></name> <operator>=</operator>

<call><name>var_CreateGetIntegerCommand</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"gradient-threshold"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"color"</literal></expr></argument>,

<argument><expr><name>ballCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"size"</literal></expr></argument>,

<argument><expr><name>ballCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"speed"</literal></expr></argument>,

<argument><expr><name>ballCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"edge-visible"</literal></expr></argument>,

<argument><expr><name>ballCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_smooth</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_x</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_y</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_x</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_y</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_lastVect_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_lastVect_y</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"color"</literal></expr></argument>,

<argument><expr><name>ballCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"size"</literal></expr></argument>,

<argument><expr><name>ballCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"speed"</literal></expr></argument>,

<argument><expr><name>ballCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"edge-visible"</literal></expr></argument>,

<argument><expr><name>ballCallback</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_smooth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_x</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_y</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FilterBall</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawBall</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_width</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_height</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>y</name> <operator>-</operator> <name>size</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>y</name> <operator>+</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_skip</name> <init>= <expr><operator>(</operator> <name>x</name> <operator>-</operator> <name>size</name> <operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>x</name> <operator>-</operator> <name>size</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>x</name> <operator>+</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i</name> <operator>-</operator> <name>x</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>i</name> <operator>-</operator> <name>x</name> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name>j</name> <operator>-</operator> <name>y</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>j</name> <operator>-</operator> <name>y</name> <operator>)</operator> <operator>&lt;=</operator> <name>size</name> <operator>*</operator> <name>size</name>

<operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>i_width</name>

<operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>i_height</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call>( <modifier>*</modifier><name><name>p_sys</name><operator>-&gt;</operator><name>drawingPixelFunction</name></name> )<argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>colorList</name><index>[ <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ballColor</name></name></expr> ]</index></name><operator>.</operator><name>comp1</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>colorList</name><index>[ <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ballColor</name></name></expr> ]</index></name><operator>.</operator><name>comp2</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>colorList</name><index>[ <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ballColor</name></name></expr> ]</index></name><operator>.</operator><name>comp3</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>b_skip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_skip</name> <operator>=</operator> <operator>!</operator><name>b_skip</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawPixelRGB24</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>R</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>G</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>B</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_skip</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>b_skip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pixel</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name>

<operator>+</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>*</operator> <name>x</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p_pixel</name> <operator>=</operator> <name>B</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>++</operator><name>p_pixel</name> <operator>=</operator> <name>G</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>++</operator><name>p_pixel</name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawPixelI420</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>V</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_skip</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>)</operator> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_skip</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>*</operator> <operator>(</operator> <name>y</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <name>U</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name>

<operator>*</operator> <operator>(</operator> <name>y</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>+</operator> <name>x</name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator> <operator>=</operator> <name>V</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>drawPixelPacked</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>Y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>U</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>V</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_skip</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pixel</name> <init>= <expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name>

<operator>+</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name>y</name> <operator>+</operator> <name>x</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name>p_pixel</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_y_offset</name></name> <operator>)</operator> <operator>=</operator> <name>Y</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_skip</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name>p_pixel</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_u_offset</name></name> <operator>)</operator> <operator>=</operator> <name>U</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator> <name>p_pixel</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_v_offset</name></name> <operator>)</operator> <operator>=</operator> <name>V</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>NormalizeVector</name><parameter_list>( <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vect_x</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>vect_y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>norm</name> <init>= <expr><call><name>sqrt</name><argument_list>( <argument><expr><operator>*</operator><name>vect_x</name> <operator>*</operator> <operator>*</operator><name>vect_x</name> <operator>+</operator> <operator>*</operator><name>vect_y</name> <operator>*</operator> <operator>*</operator><name>vect_y</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>vect_x</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><name>vect_y</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>vect_x</name> <operator>/=</operator> <name>norm</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vect_y</name> <operator>/=</operator> <name>norm</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GaussianConvolution</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_smooth</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_inpix</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_pitch</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_src_visible</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_numLines</name> <init>= <expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>i_numLines</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>i_src_visible</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_smooth</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_visible</name><operator>+</operator><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator>

<operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><name>y</name><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name><operator>*</operator><literal type="number">3</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name></expr>]</index></name>

<operator>+</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_inpix</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>i_src_pitch</name><operator>+</operator><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>)</operator>

<operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr> ;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FilterBall</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_smooth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>p_grad_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>p_grad_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_converted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_comp</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>

<decl_stmt><decl><type><name>CASE_PACKED_YUV_422</name></type>

<name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_comp</name></expr></argument>, <argument><expr><name>VLC_CODEC_GREY</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt_comp</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_comp</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_comp</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt_comp</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_comp</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>fmt_comp</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_converted</name> <operator>=</operator> <call><name>image_Convert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument>, <argument><expr><name>p_inpic</name></expr></argument>,

<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name><operator>)</operator></expr></argument>,

<argument><expr><operator>&amp;</operator><name>fmt_comp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt_comp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_converted</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>p_converted</name> <operator>=</operator> <name>p_inpic</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_numCols</name> <init>= <expr><name><name>p_converted</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_numLines</name> <init>= <expr><name><name>p_converted</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_smooth</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_smooth</name></name> <operator>=</operator>

<operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_numLines</name> <operator>*</operator> <name>i_numCols</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_smooth</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_smooth</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_x</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_x</name></name> <operator>=</operator>

<operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_numLines</name> <operator>*</operator> <name>i_numCols</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_grad_x</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_x</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_y</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_y</name></name> <operator>=</operator>

<operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_numLines</name> <operator>*</operator> <name>i_numCols</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_grad_y</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_grad_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_smooth</name> <operator>||</operator> <operator>!</operator><name>p_grad_x</name> <operator>||</operator> <operator>!</operator><name>p_grad_y</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>,

<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>,

<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name><name>p_inpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>,

<argument><expr><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GaussianConvolution</name><argument_list>( <argument><expr><name>p_converted</name></expr></argument>, <argument><expr><name>p_smooth</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>i_numLines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>i_numCols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_grad_x</name><index>[ <expr><name>line</name> <operator>*</operator> <name>i_numCols</name> <operator>+</operator> <name>col</name></expr> ]</index></name> <operator>=</operator>

<operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name></expr>]</index></name>

<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name></expr>]</index></name> <operator>)</operator> <operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name>

<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_grad_y</name><index>[ <expr><name>line</name> <operator>*</operator> <name>i_numCols</name> <operator>+</operator> <name>col</name></expr> ]</index></name> <operator>=</operator>

<operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <operator>(</operator> <name><name>p_smooth</name><index>[<expr><name>line</name><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>-</operator> <name><name>p_smooth</name><index>[<expr><name>line</name><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>&lt;&lt;</operator><literal type="number">1</literal> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name>

<operator>-</operator> <name><name>p_smooth</name><index>[<expr><operator>(</operator><name>line</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>i_numCols</name><operator>+</operator><name>col</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_edgeVisible</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>line</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>line</name> <operator>&lt;</operator> <name>i_numLines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>line</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>i_numCols</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_grad_x</name><index>[ <expr><name>line</name> <operator>*</operator> <name>i_numCols</name> <operator>+</operator> <name>col</name></expr> ]</index></name></expr></argument> )</argument_list></call>

<operator>+</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>p_grad_y</name><index>[ <expr><name>line</name> <operator>*</operator> <name>i_numCols</name> <operator>+</operator> <name>col</name></expr> ]</index></name></expr></argument> )</argument_list></call>

<operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_gradThresh</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call>( <modifier>*</modifier><name><name>p_sys</name><operator>-&gt;</operator><name>drawingPixelFunction</name></name> )<argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>colorList</name><index>[ <expr><name>WHITE</name></expr> ]</index></name><operator>.</operator><name>comp1</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>colorList</name><index>[ <expr><name>WHITE</name></expr> ]</index></name><operator>.</operator><name>comp2</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>colorList</name><index>[ <expr><name>WHITE</name></expr> ]</index></name><operator>.</operator><name>comp3</name></expr></argument>,

<argument><expr><name>col</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_motion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_lastVect_x</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_lastVect_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf_lastVect_y</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f_lastVect_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_newVect_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_newVect_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_contVect_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_contVect_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_collisions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>bounce</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><expr><name>i_motion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_motion</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSpeed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>bounce</name></expr>;</condition> <incr><expr><name>i_motion</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>roundf</name><argument_list>( <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_x</name></name>

<operator>+</operator> <operator>*</operator><name>pf_lastVect_x</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_motion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>roundf</name><argument_list>( <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_y</name></name>

<operator>+</operator> <operator>*</operator><name>pf_lastVect_y</name> <operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i_motion</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>x</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>x</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>y</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name></expr></init></decl>;</init>

<condition><expr><name>j</name> <operator>&lt;=</operator> <name>y</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i</name> <operator>-</operator> <name>x</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>i</name> <operator>-</operator> <name>x</name> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name>j</name> <operator>-</operator> <name>y</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>j</name> <operator>-</operator> <name>y</name> <operator>)</operator>

<operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name>

<operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name>i_numLines</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name>i_numCols</name> <operator>-</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_contVect_x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_contVect_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bounce</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_collisions</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>endLoop</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>j</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_contVect_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f_contVect_y</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bounce</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_collisions</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>endLoop</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>j</name> <operator>&gt;=</operator> <name>i_numLines</name> <operator>-</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_contVect_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>f_contVect_y</name> <operator>=</operator> <name>y</name> <operator>-</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bounce</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_collisions</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>endLoop</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&gt;=</operator> <name>i_numCols</name> <operator>-</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_contVect_x</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_contVect_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bounce</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_collisions</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>endLoop</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_grad_x</name><index>[ <expr><name>j</name> <operator>*</operator> <name>i_numCols</name> <operator>+</operator> <name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call>

<operator>+</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>p_grad_y</name><index>[ <expr><name>j</name> <operator>*</operator> <name>i_numCols</name> <operator>+</operator> <name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call>

<operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_gradThresh</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_contVect_x</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_contVect_y</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_collisions</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bounce</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<label><name>endLoop</name>:</label>

<if_stmt><if>if<condition>( <expr><name>bounce</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>f_contVect_x</name> <operator>/=</operator> <name>nb_collisions</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_contVect_y</name> <operator>/=</operator> <name>nb_collisions</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NormalizeVector</name><argument_list>( <argument><expr><operator>&amp;</operator><name>f_contVect_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f_contVect_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cosinus</name> <init>= <expr><operator>*</operator><name>pf_lastVect_x</name> <operator>*</operator> <name>f_contVect_x</name>

<operator>+</operator> <operator>*</operator><name>pf_lastVect_y</name> <operator>*</operator> <name>f_contVect_y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_newVect_x</name> <operator>=</operator> <operator>*</operator><name>pf_lastVect_x</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>cosinus</name> <operator>*</operator> <name>f_contVect_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_newVect_y</name> <operator>=</operator> <operator>*</operator><name>pf_lastVect_y</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name>cosinus</name> <operator>*</operator> <name>f_contVect_y</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>NormalizeVector</name><argument_list>( <argument><expr><operator>&amp;</operator><name>f_newVect_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f_newVect_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pf_lastVect_x</name> <operator>=</operator> <name>f_newVect_x</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pf_lastVect_y</name> <operator>=</operator> <name>f_newVect_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_x</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>roundf</name><argument_list>( <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>x</name> <operator>+</operator> <operator>*</operator><name>pf_lastVect_x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>roundf</name><argument_list>( <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>y</name> <operator>+</operator> <operator>*</operator><name>pf_lastVect_y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>x</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name> <operator>&lt;</operator> <literal type="number">2</literal>

<operator>||</operator> <name>x</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name> <operator>&gt;</operator> <name>i_numCols</name> <operator>-</operator> <literal type="number">3</literal>

<operator>||</operator> <name>y</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name> <operator>&lt;</operator> <literal type="number">2</literal>

<operator>||</operator> <name>y</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name> <operator>&gt;</operator> <name>i_numLines</name> <operator>-</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf_lastVect_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pf_lastVect_y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_motion</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSpeed</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_motion</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_x</name></name> <operator>=</operator> <call><name>roundf</name><argument_list>( <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_x</name></name> <operator>+</operator> <operator>*</operator><name>pf_lastVect_x</name>

<operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSpeed</name></name> <operator>-</operator> <name>i_motion</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_y</name></name> <operator>=</operator> <call><name>roundf</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ball_y</name></name> <operator>+</operator> <operator>*</operator><name>pf_lastVect_y</name>

<operator>*</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSpeed</name></name> <operator>-</operator> <name>i_motion</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>drawBall</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_outpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_RGB24</name></expr>:</case>

<decl_stmt><decl><type><name>CASE_PACKED_YUV_422</name></type>

<name>picture_Release</name><argument_list>( <argument><expr><name>p_converted</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ballCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_var</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><operator>(</operator><name>filter_sys_t</name> <operator>*</operator><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"Test"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"color"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ballColor</name></name> <operator>=</operator> <call><name>getBallColor</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"size"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSize</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"speed"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ballSpeed</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"edge-visible"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_edgeVisible</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>b_bool</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_var</name></expr></argument>, <argument><expr><name>FILTER_PREFIX</name> <literal type="string">"gradient-threshold"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_gradThresh</name></name> <operator>=</operator> <name><name>newval</name><operator>.</operator><name>i_int</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getBallColor</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_newval</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_newval</name></expr></argument>, <argument><expr><literal type="string">"red"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_newval</name></expr></argument>, <argument><expr><literal type="string">"blue"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>BLUE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_newval</name></expr></argument>, <argument><expr><literal type="string">"green"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>GREEN</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_newval</name></expr></argument>, <argument><expr><literal type="string">"white"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>WHITE</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><literal type="string">"no valid ball color provided (%s)"</literal></expr></argument>, <argument><expr><name>psz_newval</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>RED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
