

























#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <limits.h>

#include <vlc_common.h>
#include <vlc_plugin.h>
#include <vlc_filter.h>
#include <vlc_picture.h>




static int Activate( vlc_object_t * );
static void Destroy( vlc_object_t * );
static picture_t *Filter( filter_t *, picture_t * );






































#define WIDTH_TEXT N_( "Output width" )
#define WIDTH_LONGTEXT N_( "Output (canvas) image width" )

#define HEIGHT_TEXT N_( "Output height" )
#define HEIGHT_LONGTEXT N_( "Output (canvas) image height" )

#define ASPECT_TEXT N_( "Output picture aspect ratio" )
#define ASPECT_LONGTEXT N_( "Set the canvas' picture aspect ratio. " "If omitted, the canvas is assumed to have the same SAR as the input." )


#define PADD_TEXT N_( "Pad video" )
#define PADD_LONGTEXT N_( "If enabled, video will be padded to fit in canvas after scaling. " "Otherwise, video will be cropped to fix in canvas after scaling." )


#define CANVAS_HELP N_( "Automatically resize and pad a video" )

#define CFG_PREFIX "canvas-"




vlc_module_begin ()
set_shortname( N_("Canvas") )
set_description( N_("Canvas video filter") )
set_capability( "video filter", 0 )
set_help( CANVAS_HELP )
set_callbacks( Activate, Destroy )

set_category( CAT_VIDEO )
set_subcategory( SUBCAT_VIDEO_VFILTER )

add_integer_with_range( CFG_PREFIX "width", 0, 0, INT_MAX,
WIDTH_TEXT, WIDTH_LONGTEXT, false )
add_integer_with_range( CFG_PREFIX "height", 0, 0, INT_MAX,
HEIGHT_TEXT, HEIGHT_LONGTEXT, false )

add_string( CFG_PREFIX "aspect", NULL,
ASPECT_TEXT, ASPECT_LONGTEXT, false )

add_bool( CFG_PREFIX "padd", true,
PADD_TEXT, PADD_LONGTEXT, false )
vlc_module_end ()

static const char *const ppsz_filter_options[] = {
"width", "height", "aspect", "padd", NULL
};

typedef struct
{
filter_chain_t *p_chain;
} filter_sys_t;

static picture_t *video_chain_new( filter_t *p_filter )
{
filter_t *p_chain_parent = p_filter->owner.sys;


return filter_NewPicture( p_chain_parent );
}

static const struct filter_video_callbacks canvas_cbs =
{
video_chain_new, NULL,
};




static int Activate( vlc_object_t *p_this )
{
filter_t *p_filter = (filter_t *)p_this;
unsigned i_canvas_width; 
unsigned i_canvas_height; 
unsigned i_canvas_aspect; 
es_format_t fmt; 
char psz_croppadd[100];
int i_padd,i_offset;
char *psz_aspect, *psz_parser;
bool b_padd;
unsigned i_fmt_in_aspect;

if( !p_filter->b_allow_fmt_out_change )
{
msg_Err( p_filter, "Picture format change isn't allowed" );
return VLC_EGENERIC;
}

if( p_filter->fmt_in.video.i_chroma != p_filter->fmt_out.video.i_chroma )
{
msg_Err( p_filter, "Input and output chromas don't match" );
return VLC_EGENERIC;
}

config_ChainParse( p_filter, CFG_PREFIX, ppsz_filter_options,
p_filter->p_cfg );

i_canvas_width = var_CreateGetInteger( p_filter, CFG_PREFIX "width" );
i_canvas_height = var_CreateGetInteger( p_filter, CFG_PREFIX "height" );

if( i_canvas_width == 0 || i_canvas_height == 0 )
{
msg_Err( p_filter, "Width and height options must be set" );
return VLC_EGENERIC;
}

if( i_canvas_width & 1 || i_canvas_height & 1 )
{


msg_Err( p_filter, "Width and height options must be even integers" );
return VLC_EGENERIC;
}

if( p_filter->fmt_in.video.i_sar_num )
i_fmt_in_aspect = (int64_t)p_filter->fmt_in.video.i_sar_num *
p_filter->fmt_in.video.i_visible_width *
VOUT_ASPECT_FACTOR /
p_filter->fmt_in.video.i_sar_den /
p_filter->fmt_in.video.i_visible_height;
else
i_fmt_in_aspect = (int64_t)p_filter->fmt_in.video.i_visible_width *
VOUT_ASPECT_FACTOR /
p_filter->fmt_in.video.i_visible_height;

psz_aspect = var_CreateGetNonEmptyString( p_filter, CFG_PREFIX "aspect" );
if( psz_aspect )
{
psz_parser = strchr( psz_aspect, ':' );
int numerator = atoi( psz_aspect );
int denominator = psz_parser ? atoi( psz_parser+1 ) : 0;
denominator = denominator == 0 ? 1 : denominator;
i_canvas_aspect = numerator * VOUT_ASPECT_FACTOR / denominator;
free( psz_aspect );

if( numerator <= 0 || denominator < 0 )
{
msg_Err( p_filter, "Aspect ratio must be strictly positive" );
return VLC_EGENERIC;
}
}
else
{




i_canvas_aspect = (uint64_t) p_filter->fmt_in.video.i_visible_height
* i_fmt_in_aspect
* i_canvas_width
/ (i_canvas_height * p_filter->fmt_in.video.i_visible_width);
}

b_padd = var_CreateGetBool( p_filter, CFG_PREFIX "padd" );

filter_sys_t *p_sys = (filter_sys_t *)malloc( sizeof( filter_sys_t ) );
if( !p_sys )
return VLC_ENOMEM;
p_filter->p_sys = p_sys;

filter_owner_t owner = {
.video = &canvas_cbs,
.sys = p_filter,
};

p_sys->p_chain = filter_chain_NewVideo( p_filter, true, &owner );
if( !p_sys->p_chain )
{
msg_Err( p_filter, "Could not allocate filter chain" );
free( p_sys );
return VLC_EGENERIC;
}

es_format_Copy( &fmt, &p_filter->fmt_in );


fmt.video.i_visible_width = i_canvas_width;
fmt.video.i_visible_height = i_canvas_height;

if( b_padd )
{

if( i_canvas_aspect > i_fmt_in_aspect )
{






fmt.video.i_visible_width = i_canvas_width
* i_fmt_in_aspect
/ i_canvas_aspect;
if( fmt.video.i_visible_width & 1 ) fmt.video.i_visible_width -= 1;

i_padd = (i_canvas_width - fmt.video.i_visible_width) / 2;
i_offset = (i_padd & 1);
snprintf( psz_croppadd, 100, "croppadd{paddleft=%d,paddright=%d}",
i_padd - i_offset, i_padd + i_offset );
}
else
{


fmt.video.i_visible_height = i_canvas_height
* i_canvas_aspect
/ i_fmt_in_aspect;
if( fmt.video.i_visible_height & 1 ) fmt.video.i_visible_height -= 1;

i_padd = (i_canvas_height - fmt.video.i_visible_height ) / 2;
i_offset = (i_padd & 1);
snprintf( psz_croppadd, 100, "croppadd{paddtop=%d,paddbottom=%d}",
i_padd - i_offset, i_padd + i_offset );
}
}
else
{

if( i_canvas_aspect < i_fmt_in_aspect )
{


fmt.video.i_visible_width = i_canvas_width
* i_fmt_in_aspect
/ i_canvas_aspect;
if( fmt.video.i_visible_width & 1 ) fmt.video.i_visible_width -= 1;

i_padd = (fmt.video.i_visible_width - i_canvas_width) / 2;
i_offset = (i_padd & 1);
snprintf( psz_croppadd, 100, "croppadd{cropleft=%d,cropright=%d}",
i_padd - i_offset, i_padd + i_offset );
}
else
{


fmt.video.i_visible_height = i_canvas_height
* i_canvas_aspect
/ i_fmt_in_aspect;
if( fmt.video.i_visible_height & 1 ) fmt.video.i_visible_height -= 1;

i_padd = (fmt.video.i_visible_height - i_canvas_height) / 2;
i_offset = (i_padd & 1);
snprintf( psz_croppadd, 100, "croppadd{croptop=%d,cropbottom=%d}",
i_padd - i_offset, i_padd + i_offset );
}
}





fmt.video.i_width = p_filter->fmt_in.video.i_width * fmt.video.i_visible_width / p_filter->fmt_in.video.i_visible_width;
fmt.video.i_height = p_filter->fmt_in.video.i_height * fmt.video.i_visible_height / p_filter->fmt_in.video.i_visible_height;

filter_chain_Reset( p_sys->p_chain, &p_filter->fmt_in, p_filter->vctx_in, &fmt );

if ( filter_chain_AppendConverter( p_sys->p_chain, NULL ) )
{
msg_Err( p_filter, "Could not append scaling filter" );
free( p_sys );
return VLC_EGENERIC;
}


if( i_padd > 0 )
{
if ( !filter_chain_AppendFromString( p_sys->p_chain, psz_croppadd ) )
{
msg_Err( p_filter, "Could not append croppadd filter" );
filter_chain_Delete( p_sys->p_chain );
free( p_sys );
return VLC_EGENERIC;
}
}

es_format_Copy( &p_filter->fmt_out,
filter_chain_GetFmtOut( p_sys->p_chain ) );

vlc_ureduce( &p_filter->fmt_out.video.i_sar_num,
&p_filter->fmt_out.video.i_sar_den,
i_canvas_aspect * p_filter->fmt_out.video.i_visible_height,
VOUT_ASPECT_FACTOR * p_filter->fmt_out.video.i_visible_width,
0);

if( p_filter->fmt_out.video.i_visible_width != i_canvas_width
|| p_filter->fmt_out.video.i_visible_height != i_canvas_height )
{
msg_Warn( p_filter, "Looks like something went wrong. "
"Output size is %dx%d while we asked for %dx%d",
p_filter->fmt_out.video.i_visible_width,
p_filter->fmt_out.video.i_visible_height,
i_canvas_width, i_canvas_height );
}

p_filter->pf_video_filter = Filter;

return VLC_SUCCESS;
}




static void Destroy( vlc_object_t *p_this )
{
filter_t *p_filter = (filter_t *)p_this;
filter_sys_t *p_sys = p_filter->p_sys;
filter_chain_Delete( p_sys->p_chain );
free( p_sys );
}




static picture_t *Filter( filter_t *p_filter, picture_t *p_pic )
{
filter_sys_t *p_sys = p_filter->p_sys;
return filter_chain_VideoFilter( p_sys->p_chain, p_pic );
}
