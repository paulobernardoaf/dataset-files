<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\magnify.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_mouse.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"filter_picture.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Magnify/Zoom interactive video filter"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_( <literal type="string">"Magnify"</literal> )</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"video filter"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_VFILTER</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawZoomStatus</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_offset_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_offset_y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_visible</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangle</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_h</name></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>p_image</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_hide_timeout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_zoom</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_x</name></decl>, <name>i_y</name>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_visible</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_last_activity</name></decl>;</decl_stmt>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIS_ZOOM</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZOOM_FACTOR</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<macro><name>CASE_PLANAR_YUV</name></macro>

<case>case <expr><name>VLC_CODEC_GREY</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Unsupported chroma %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>es_format_IsSimilar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Input and output format does not match"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name> <operator>=</operator> <call><name>image_HandlerCreate</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_zoom</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>ZOOM_FACTOR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_visible</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_activity</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_hide_timeout</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"mouse-hide-timeout"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_filter</name></name> <operator>=</operator> <name>Filter</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_video_mouse</name></name> <operator>=</operator> <name>Mouse</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>Filter</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v_w</name></decl>, <decl><type ref="prev"/><name>v_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_converted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name> <modifier>*</modifier></type><name>p_oyp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_outpic</name> <operator>=</operator> <call><name>filter_NewPicture</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_outpic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_visible</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_visible</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>o_x</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>o_y</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_y</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>o_zoom</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_zoom</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>o_zoom</name> <operator>!=</operator> <name>ZOOM_FACTOR</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>plane_t</name></type> <name><name>orig_planes</name><index>[<expr><name>PICTURE_PLANE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>orig_planes</name></expr></argument>, <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><sizeof>sizeof <name>orig_planes</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_plane</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_plane</name> <operator>&lt;</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i_plane</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>o_yp</name> <init>= <expr><name>o_y</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name> <operator>/</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>o_xp</name> <init>= <expr><name>o_x</name> <operator>*</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name> <operator>/</operator> <name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>p_pixels</name> <operator>+=</operator> <name>o_yp</name> <operator>*</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i_plane</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <name>o_xp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>fmt_in</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt_in</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <operator>(</operator><name><name>fmt_in</name><operator>.</operator><name>i_visible_width</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name>o_zoom</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_in</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt_in</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <operator>(</operator><name><name>fmt_in</name><operator>.</operator><name>i_visible_height</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name>o_zoom</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>fmt_out</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_converted</name> <operator>=</operator> <call><name>image_Convert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_in</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name>orig_planes</name></expr></argument>, <argument><expr><sizeof>sizeof <name>orig_planes</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_converted</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_converted</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_oyp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_outpic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>Y_PLANE</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_visible</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt_out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fmt_out</name> <operator>=</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <operator>(</operator><name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name> <operator>/</operator><name>VIS_ZOOM</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt_out</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <operator>(</operator><name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name><operator>/</operator><name>VIS_ZOOM</name><operator>)</operator> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_converted</name> <operator>=</operator> <call><name>image_Convert</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_image</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_CopyPixels</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_converted</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_converted</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_w</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name>o_zoom</name></expr></argument>, <argument><expr><name><name>fmt_out</name><operator>.</operator><name>i_visible_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_h</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name>o_zoom</name></expr></argument>, <argument><expr><name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawRectangle</name><argument_list>( <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>, <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>,

<argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument>, <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></argument>,

<argument><expr><name>o_x</name><operator>/</operator><name>VIS_ZOOM</name></expr></argument>, <argument><expr><name>o_y</name><operator>/</operator><name>VIS_ZOOM</name></expr></argument>,

<argument><expr><name>v_w</name></expr></argument>, <argument><expr><name>v_h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v_h</name> <operator>=</operator> <name><name>fmt_out</name><operator>.</operator><name>i_visible_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>v_h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_visible</name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_last_activity</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_hide_timeout</name></name> <operator>&gt;</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DrawZoomStatus</name><argument_list>( <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>, <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>, <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument>, <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>i_lines</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>v_h</name></expr></argument>, <argument><expr><name>b_visible</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_visible</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <operator>(</operator><name>v_h</name><operator>+</operator><literal type="number">9</literal><operator>)</operator><operator>*</operator><name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">41</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>v_h</name> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>v_h</name> <operator>+</operator> <literal type="number">90</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_width</name> <init>= <expr><name>v_h</name> <operator>+</operator> <literal type="number">90</literal> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <name>i_width</name> <operator>*</operator> <name>i_width</name> <operator>/</operator> <literal type="number">160</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><literal type="number">80</literal> <operator>-</operator> <name>y</name> <operator>+</operator> <name>v_h</name><operator>)</operator><operator>*</operator><name>ZOOM_FACTOR</name><operator>/</operator><literal type="number">10</literal> <operator>&lt;</operator> <name>o_zoom</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name></name> <operator>+</operator> <name>y</name><operator>*</operator><name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>i_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_oyp</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name><operator>*</operator><name><name>p_oyp</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>i_width</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>CopyInfoAndRelease</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawZoomStatus</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pb_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_offset_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_offset_y</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_visible</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_hide</name> <init>=

<expr><literal type="string">"X X XXXXX XXXX XXXXX XXXXX XXX XXX XX XXL"</literal>

<literal type="string">"X X X X X X X X X X X X X XL"</literal>

<literal type="string">"XXXXX X X X XXXX X X X X X X XL"</literal>

<literal type="string">"X X X X X X X X X X X X XL"</literal>

<literal type="string">"X X XXXXX XXXX XXXXX XXXXX XXX XXX X XL"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_show</name> <init>=

<expr><literal type="string">" XXXX X X XXX X X XXXXX XXX XXX XX XXL"</literal>

<literal type="string">"X X X X X X X X X X X X X X XL"</literal>

<literal type="string">" XXX XXXXX X X X X X X X X X X X XL"</literal>

<literal type="string">" X X X X X X X X X X X X X X XL"</literal>

<literal type="string">"XXXX X X XXX X X XXXXX XXX XXX X XL"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_draw</name> <init>= <expr><ternary><condition><expr><name>b_visible</name></expr> ?</condition><then> <expr><name>p_hide</name></expr> </then><else>: <expr><name>p_show</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><name>i_offset_x</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>i_offset_y</name></expr></init></decl>;</init> <condition><expr><name><name>p_draw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_draw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>x</name> <operator>&lt;</operator> <name>i_width</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>i_height</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pb_dst</name><index>[<expr><name>y</name><operator>*</operator><name>i_pitch</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_draw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_draw</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'L'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>i_offset_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawRectangle</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pb_dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pitch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>x</name> <operator>+</operator> <name>i_w</name> <operator>&gt;</operator> <name>i_width</name> <operator>||</operator> <name>y</name> <operator>+</operator> <name>i_h</name> <operator>&gt;</operator> <name>i_height</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pb_dst</name><index>[<expr><name>y</name> <operator>*</operator> <name>i_pitch</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>i_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>dy</name> <operator>&lt;</operator> <name>i_h</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>pb_dst</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><name>dy</name><operator>)</operator> <operator>*</operator> <name>i_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pb_dst</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><name>dy</name><operator>)</operator> <operator>*</operator> <name>i_pitch</name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>i_w</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pb_dst</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><name>i_h</name><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>i_pitch</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><name>i_w</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Mouse</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_mouse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_old</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_mouse_t</name> <modifier>*</modifier></type><name>p_new</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_click</name> <init>= <expr><call><name>vlc_mouse_HasPressed</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>MOUSE_BUTTON_LEFT</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_pressed</name> <init>= <expr><call><name>vlc_mouse_IsLeftPressed</name><argument_list>( <argument><expr><name>p_new</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_grab</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_visible</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visu_width</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>/</operator> <name>VIS_ZOOM</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_visu_height</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>/</operator> <name>VIS_ZOOM</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <name>i_visu_width</name> <operator>&amp;&amp;</operator>

<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;</operator> <name>i_visu_height</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_pressed</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v_w</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_zoom</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v_h</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_zoom</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>*</operator> <name>VIS_ZOOM</name> <operator>-</operator> <name>v_w</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>-</operator> <name>v_w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>*</operator> <name>VIS_ZOOM</name> <operator>-</operator> <name>v_h</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>-</operator> <name>v_h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_grab</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>&amp;&amp;</operator>

<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;=</operator> <name>i_visu_height</name> <operator>&amp;&amp;</operator>

<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;</operator> <name>i_visu_height</name> <operator>+</operator> <literal type="number">9</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_click</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_visible</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_grab</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;=</operator> <operator>(</operator> <name>i_visu_height</name> <operator>+</operator> <literal type="number">90</literal> <operator>-</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>)</operator> <operator>*</operator>

<operator>(</operator> <name>i_visu_height</name> <operator>+</operator> <literal type="number">90</literal> <operator>-</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">160</literal> <operator>&amp;&amp;</operator>

<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;=</operator> <name>i_visu_height</name> <operator>+</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator>

<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;=</operator> <name>i_visu_height</name> <operator>+</operator> <literal type="number">90</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_pressed</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_zoom</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>ZOOM_FACTOR</name></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">80</literal> <operator>+</operator> <name>i_visu_height</name> <operator>-</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator>

<name>ZOOM_FACTOR</name> <operator>/</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v_w</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_zoom</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>v_h</name> <init>= <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_zoom</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_x</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_width</name></name> <operator>-</operator> <name>v_w</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_y</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_visible_height</name></name> <operator>-</operator> <name>v_h</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_grab</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <literal type="number">80</literal> <operator>&amp;&amp;</operator>

<name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_click</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_visible</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_grab</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_mouse_HasMoved</name><argument_list>( <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_activity</name></name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_grab</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_mouse</name> <operator>=</operator> <operator>*</operator><name>p_new</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_x</name></name> <operator>+</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_x</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_zoom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mouse</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_y</name></name> <operator>+</operator> <name><name>p_new</name><operator>-&gt;</operator><name>i_y</name></name> <operator>*</operator> <name>ZOOM_FACTOR</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_zoom</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
