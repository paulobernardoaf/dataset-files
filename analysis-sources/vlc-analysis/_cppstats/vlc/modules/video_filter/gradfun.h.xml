<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\gradfun.h"><struct>struct <name>vf_priv_s</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>thresh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>radius</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>filter_line</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dithers</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>blur_line</name>)<parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>

}</block>;</struct>

<expr_stmt><expr><specifier>static</specifier> <macro><name>alignas</name> <argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <specifier>const</specifier> <name>uint16_t</name> <name><name>pw_7f</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">127</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">127</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>alignas</name> <argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <specifier>const</specifier> <name>uint16_t</name> <name><name>pw_ff</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>,<expr><literal type="number">255</literal></expr>}</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>alignas</name> <argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro> <specifier>const</specifier> <name>uint16_t</name> <name><name>dither</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">24</literal></expr>,<expr><literal type="number">120</literal></expr>, <expr><literal type="number">6</literal></expr>,<expr><literal type="number">102</literal></expr>, <expr><literal type="number">30</literal></expr>,<expr><literal type="number">126</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">62</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>,<expr><literal type="number">112</literal></expr>, <expr><literal type="number">8</literal></expr>,<expr><literal type="number">104</literal></expr>, <expr><literal type="number">22</literal></expr>,<expr><literal type="number">118</literal></expr>, <expr><literal type="number">14</literal></expr>,<expr><literal type="number">110</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">80</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">46</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">100</literal></expr>, <expr><literal type="number">28</literal></expr>,<expr><literal type="number">124</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">26</literal></expr>,<expr><literal type="number">122</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">68</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">58</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">20</literal></expr>,<expr><literal type="number">116</literal></expr>, <expr><literal type="number">12</literal></expr>,<expr><literal type="number">108</literal></expr>, <expr><literal type="number">18</literal></expr>,<expr><literal type="number">114</literal></expr>, <expr><literal type="number">10</literal></expr>,<expr><literal type="number">106</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">84</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">42</literal></expr> }</block></expr>,

}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_line_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dithers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>dc</name> <operator>+=</operator> <name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pix</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>pix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>thresh</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">127</literal><operator>-</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>m</name><operator>*</operator><name>m</name><operator>*</operator><name>delta</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>m</name> <operator>+</operator> <name><name>dithers</name><index>[<expr><name>x</name><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>pix</name><operator>&gt;&gt;</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>blur_line_c</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>buf1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><name>sstride</name></expr>]</index></name> <operator>+</operator>

<name><name>src</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>sstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old</name> <init>= <expr><name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>-</operator> <name>old</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX2</name></expr></cpp:if>

<function><type><name>VLC_MMX</name>

<specifier>static</specifier> <name>void</name></type> <name>filter_line_mmx2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dithers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name><operator>&amp;</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>width</name><operator>&amp;</operator><operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_line_c</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><name>dc</name><operator>+</operator><name>x</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name><operator>-</operator><name>x</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>dithers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>width</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"movd %4, %%mm5 \n"

"pxor %%mm7, %%mm7 \n"

"pshufw $0, %%mm5, %%mm5 \n"

"movq %6, %%mm6 \n"

"movq %5, %%mm4 \n"

"1: \n"

"movd (%2,%0), %%mm0 \n"

"movd (%3,%0), %%mm1 \n"

"punpcklbw %%mm7, %%mm0 \n"

"punpcklwd %%mm1, %%mm1 \n"

"psllw $7, %%mm0 \n"

"pxor %%mm2, %%mm2 \n"

"psubw %%mm0, %%mm1 \n" 

"psubw %%mm1, %%mm2 \n"

"pmaxsw %%mm1, %%mm2 \n"

"pmulhuw %%mm5, %%mm2 \n" 

"psubw %%mm6, %%mm2 \n"

"pminsw %%mm7, %%mm2 \n" 

"pmullw %%mm2, %%mm2 \n"

"paddw %%mm4, %%mm0 \n" 

"pmulhw %%mm2, %%mm1 \n"

"psllw $2, %%mm1 \n" 

"paddw %%mm1, %%mm0 \n" 

"psraw $7, %%mm0 \n"

"packuswb %%mm0, %%mm0 \n"

"movd %%mm0, (%1,%0) \n" 

"add $4, %0 \n"

"jl 1b \n"

"emms \n"

:"+r"(x)

:"r"(dst+width), "r"(src+width), "r"(dc+width/2),

"rm"(thresh), "m"(*dithers), "m"(*pw_7f)

:"mm0", "mm1", "mm2", "mm4", "mm5", "mm6", "memory"

);</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSSE3</name></expr></cpp:if>

<function><type><name>VLC_SSE</name>

<specifier>static</specifier> <name>void</name></type> <name>filter_line_ssse3</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>thresh</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>dithers</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intptr_t</name></type> <name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name><operator>&amp;</operator><literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>width</name><operator>&amp;</operator><operator>~</operator><literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_line_c</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>x</name></expr></argument>, <argument><expr><name>dc</name><operator>+</operator><name>x</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name><operator>-</operator><name>x</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name>dithers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>width</name></expr>;</expr_stmt>

<asm>__asm__ <specifier>volatile</specifier>(

"movd %4, %%xmm5 \n"

"pxor %%xmm7, %%xmm7 \n"

"pshuflw $0,%%xmm5, %%xmm5 \n"

"movdqa %6, %%xmm6 \n"

"punpcklqdq %%xmm5, %%xmm5 \n"

"movdqa %5, %%xmm4 \n"

"1: \n"

"movq (%2,%0), %%xmm0 \n"

"movq (%3,%0), %%xmm1 \n"

"punpcklbw %%xmm7, %%xmm0 \n"

"punpcklwd %%xmm1, %%xmm1 \n"

"psllw $7, %%xmm0 \n"

"psubw %%xmm0, %%xmm1 \n" 

"pabsw %%xmm1, %%xmm2 \n"

"pmulhuw %%xmm5, %%xmm2 \n" 

"psubw %%xmm6, %%xmm2 \n"

"pminsw %%xmm7, %%xmm2 \n" 

"pmullw %%xmm2, %%xmm2 \n"

"psllw $1, %%xmm2 \n"

"paddw %%xmm4, %%xmm0 \n" 

"pmulhrsw %%xmm2, %%xmm1 \n" 

"paddw %%xmm1, %%xmm0 \n" 

"psraw $7, %%xmm0 \n"

"packuswb %%xmm0, %%xmm0 \n"

"movq %%xmm0, (%1,%0) \n" 

"add $8, %0 \n"

"jl 1b \n"

:"+&amp;r"(x)

:"r"(dst+width), "r"(src+width), "r"(dc+width/2),

"rm"(thresh), "m"(*dithers), "m"(*pw_7f)

:"xmm0", "xmm1", "xmm2", "xmm4", "xmm5", "xmm6", "xmm7", "memory"

);</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SSE2</name> <operator>&amp;&amp;</operator> <name>HAVE_6REGS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLURV</name><parameter_list>(<parameter><type><name>load</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>intptr_t x = -2*width;__asm__ volatile("movdqa %6, %%xmm7 \n""1: \n"load" (%4,%0), %%xmm0 \n"load" (%5,%0), %%xmm1 \n""movdqa %%xmm0, %%xmm2 \n""movdqa %%xmm1, %%xmm3 \n""psrlw $8, %%xmm0 \n""psrlw $8, %%xmm1 \n""pand %%xmm7, %%xmm2 \n""pand %%xmm7, %%xmm3 \n""paddw %%xmm1, %%xmm0 \n""paddw %%xmm3, %%xmm2 \n""paddw %%xmm2, %%xmm0 \n""paddw (%2,%0), %%xmm0 \n""movdqa (%1,%0), %%xmm1 \n""movdqa %%xmm0, (%1,%0) \n""psubw %%xmm1, %%xmm0 \n""movdqa %%xmm0, (%3,%0) \n""add $16, %0 \n""jl 1b \n":"+&amp;r"(x):"r"(buf+width),"r"(buf1+width),"r"(dc+width),"r"(src+width*2),"r"(src+width*2+sstride),"m"(*pw_ff):"xmm0", "xmm1", "xmm2", "xmm3", "xmm7", "memory");</cpp:value></cpp:define>

<function><type><name>VLC_SSE</name>

<specifier>static</specifier> <name>void</name></type> <name>blur_line_sse2</name><parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf1</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>src</name><operator>|</operator><name>sstride</name><operator>)</operator><operator>&amp;</operator><literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>BLURV</name><argument_list>(<argument><expr><literal type="string">"movdqu"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>BLURV</name><argument_list>(<argument><expr><literal type="string">"movdqa"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_plane</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>vf_priv_s</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sstride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bstride</name> <init>= <expr><operator>(</operator><operator>(</operator><name>width</name><operator>+</operator><literal type="number">15</literal><operator>)</operator><operator>&amp;</operator><operator>~</operator><literal type="number">15</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>dc_factor</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">21</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>r</name><operator>*</operator><name>r</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dc</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>buf</name></name><operator>+</operator><name>bstride</name><operator>+</operator><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>thresh</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>thresh</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>bstride</name><operator>+</operator><literal type="number">16</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>r</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>blur_line</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><name>y</name><operator>*</operator><name>bstride</name></expr></argument>, <argument><expr><name>buf</name><operator>+</operator><operator>(</operator><name>y</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>bstride</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>y</name><operator>*</operator><name>sstride</name></expr></argument>, <argument><expr><name>sstride</name></expr></argument>, <argument><expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>height</name><operator>-</operator><name>r</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><name>r</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name>buf</name><operator>+</operator><name>mod</name><operator>*</operator><name>bstride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>buf</name><operator>+</operator><operator>(</operator><ternary><condition><expr><name>mod</name></expr>?</condition><then><expr><name>mod</name><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>*</operator><name>bstride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>blur_line</name></name><argument_list>(<argument><expr><name>dc</name></expr></argument>, <argument><expr><name>buf0</name></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><operator>(</operator><name>y</name><operator>+</operator><name>r</name><operator>)</operator><operator>*</operator><name>sstride</name></expr></argument>, <argument><expr><name>sstride</name></expr></argument>, <argument><expr><name>width</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><name>v</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>r</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>dc</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>width</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>dc</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>dc</name><index>[<expr><name>x</name><operator>-</operator><name>r</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><name>x</name><operator>-</operator><name>r</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>dc_factor</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>x</name><operator>&lt;</operator><operator>(</operator><name>width</name><operator>+</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dc</name><index>[<expr><name>x</name><operator>-</operator><name>r</name></expr>]</index></name> <operator>=</operator> <name>v</name> <operator>*</operator> <name>dc_factor</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><operator>-</operator><name>r</name><operator>/</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dc</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>r</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>r</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>y</name><operator>*</operator><name>dstride</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>y</name><operator>*</operator><name>sstride</name></expr></argument>, <argument><expr><name>dc</name><operator>-</operator><name>r</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name><name>dither</name><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>y</name><operator>*</operator><name>dstride</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>y</name><operator>*</operator><name>sstride</name></expr></argument>, <argument><expr><name>dc</name><operator>-</operator><name>r</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name><name>dither</name><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>y</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>filter_line</name></name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>y</name><operator>*</operator><name>dstride</name></expr></argument>, <argument><expr><name>src</name><operator>+</operator><name>y</name><operator>*</operator><name>sstride</name></expr></argument>, <argument><expr><name>dc</name><operator>-</operator><name>r</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>thresh</name></expr></argument>, <argument><expr><name><name>dither</name><index>[<expr><name>y</name><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>y</name> <operator>&gt;=</operator> <name>height</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
