<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\video_filter\filter_picture.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_PLANAR_YUV_SQUARE</name></cpp:macro> <cpp:value>case VLC_CODEC_I420: case VLC_CODEC_J420: case VLC_CODEC_YV12: case VLC_CODEC_I411: case VLC_CODEC_I410: case VLC_CODEC_I444: case VLC_CODEC_J444: case VLC_CODEC_YUVA:</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_PLANAR_YUV_NONSQUARE</name></cpp:macro> <cpp:value>case VLC_CODEC_I422: case VLC_CODEC_J422:</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_PLANAR_YUV10</name></cpp:macro> <cpp:value>case VLC_CODEC_I420_10L: case VLC_CODEC_I420_10B: case VLC_CODEC_I444_10L: case VLC_CODEC_I444_10B:</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_PLANAR_YUV9</name></cpp:macro> <cpp:value>case VLC_CODEC_I420_9L: case VLC_CODEC_I420_9B: case VLC_CODEC_I444_9L: case VLC_CODEC_I444_9B:</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_PLANAR_YUV</name></cpp:macro> <cpp:value>CASE_PLANAR_YUV_SQUARE CASE_PLANAR_YUV_NONSQUARE</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CASE_PACKED_YUV_422</name></cpp:macro> <cpp:value>case VLC_CODEC_UYVY: case VLC_CODEC_YUYV: case VLC_CODEC_YVYU:</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>GetPackedYuvOffsets</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_y_offset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_u_offset</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_v_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_chroma</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_UYVY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>i_y_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_u_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_v_offset</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_VYUY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>i_y_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_u_offset</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_v_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_YUYV</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>i_y_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_u_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_v_offset</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>VLC_CODEC_YVYU</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>i_y_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_u_offset</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_v_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>GetPackedRgbIndexes</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_r_index</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_g_index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_b_index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_RGB24</name> <operator>&amp;&amp;</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>!=</operator> <name>VLC_CODEC_RGB32</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mask_bits</name> <init>= <expr><ternary><condition><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_chroma</name></name> <operator>==</operator> <name>VLC_CODEC_RGB24</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">24</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>i_r_index</name> <operator>=</operator> <operator>(</operator><name>i_mask_bits</name> <operator>-</operator> <call><name>vlc_ctz</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_rmask</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_g_index</name> <operator>=</operator> <operator>(</operator><name>i_mask_bits</name> <operator>-</operator> <call><name>vlc_ctz</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_gmask</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_b_index</name> <operator>=</operator> <operator>(</operator><name>i_mask_bits</name> <operator>-</operator> <call><name>vlc_ctz</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bmask</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>*</operator><name>i_r_index</name> <operator>=</operator> <call><name>vlc_ctz</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_rmask</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_g_index</name> <operator>=</operator> <call><name>vlc_ctz</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_gmask</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>i_b_index</name> <operator>=</operator> <call><name>vlc_ctz</name><argument_list>(<argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bmask</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>vlc_uint8</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>v</name> <operator>&gt;</operator> <literal type="number">255</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">255</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>yuv_to_rgb</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>g</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>v1</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALEBITS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ONE_HALF</name></cpp:macro> <cpp:value>(1 &lt;&lt; (SCALEBITS - 1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) ((x) * (1&lt;&lt;SCALEBITS) + 0.5))</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>cb</name></decl>, <decl><type ref="prev"/><name>cr</name></decl>, <decl><type ref="prev"/><name>r_add</name></decl>, <decl><type ref="prev"/><name>g_add</name></decl>, <decl><type ref="prev"/><name>b_add</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name>u1</name> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <name>v1</name> <operator>-</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>r_add</name> <operator>=</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">1.40200</literal><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>cr</name> <operator>+</operator> <name>ONE_HALF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>g_add</name> <operator>=</operator> <operator>-</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.34414</literal><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>cb</name>

<operator>-</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">0.71414</literal><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>cr</name> <operator>+</operator> <name>ONE_HALF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_add</name> <operator>=</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">1.77200</literal><operator>*</operator><literal type="number">255.0</literal><operator>/</operator><literal type="number">224.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>cb</name> <operator>+</operator> <name>ONE_HALF</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y1</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <call><name>FIX</name><argument_list>(<argument><expr><literal type="number">255.0</literal><operator>/</operator><literal type="number">219.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>r</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>r_add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>g</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>g_add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>b</name> <operator>=</operator> <call><name>vlc_uint8</name><argument_list>( <argument><expr><operator>(</operator><name>y</name> <operator>+</operator> <name>b_add</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SCALEBITS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIX</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ONE_HALF</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SCALEBITS</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>rgb_to_yuv</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>v</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <operator>(</operator> <literal type="number">66</literal> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">129</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">25</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>u</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <operator>-</operator><literal type="number">38</literal> <operator>*</operator> <name>r</name> <operator>-</operator> <literal type="number">74</literal> <operator>*</operator> <name>g</name> <operator>+</operator> <literal type="number">112</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr> ;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>v</name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <literal type="number">112</literal> <operator>*</operator> <name>r</name> <operator>-</operator> <literal type="number">94</literal> <operator>*</operator> <name>g</name> <operator>-</operator> <literal type="number">18</literal> <operator>*</operator> <name>b</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr> ;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>picture_t</name> <modifier>*</modifier></type><name>CopyInfoAndRelease</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_outpic</name></decl></parameter>, <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_inpic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_CopyProperties</name><argument_list>( <argument><expr><name>p_outpic</name></expr></argument>, <argument><expr><name>p_inpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>( <argument><expr><name>p_inpic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_outpic</name></expr>;</return>

</block_content>}</block></function>

</unit>
