






















enum hxxx_sei_type_e
{
HXXX_SEI_PIC_TIMING = 1,
HXXX_SEI_USER_DATA_REGISTERED_ITU_T_T35 = 4,
HXXX_SEI_RECOVERY_POINT = 6,
HXXX_SEI_FRAME_PACKING_ARRANGEMENT = 45,
HXXX_SEI_MASTERING_DISPLAY_COLOUR_VOLUME = 137, 
HXXX_SEI_CONTENT_LIGHT_LEVEL = 144,
};

enum hxxx_sei_t35_type_e
{
HXXX_ITU_T35_TYPE_CC,
};

typedef struct
{
unsigned i_type;
union
{
bs_t *p_bs; 
struct
{
enum hxxx_sei_t35_type_e type;
union
{
struct
{
const uint8_t *p_data;
size_t i_data;
} cc;
} u;
} itu_t35;
struct
{
enum
{
FRAME_PACKING_CANCEL = -1,
FRAME_PACKING_INTERLEAVED_CHECKERBOARD = 0,
FRAME_PACKING_INTERLEAVED_COLUMN,
FRAME_PACKING_INTERLEAVED_ROW,
FRAME_PACKING_SIDE_BY_SIDE,
FRAME_PACKING_TOP_BOTTOM,
FRAME_PACKING_TEMPORAL,
FRAME_PACKING_NONE_2D,
FRAME_PACKING_TILED,
} type;
bool b_flipped;
bool b_left_first;
bool b_fields;
bool b_frame0;
} frame_packing;
struct
{
int i_frames;
} recovery;
struct
{
uint16_t primaries[3*2]; 
uint16_t white_point[2]; 
uint32_t max_luminance;
uint32_t min_luminance;
} colour_volume; 
struct
{
uint16_t MaxCLL;
uint16_t MaxFALL;
} content_light_lvl; 
};
} hxxx_sei_data_t;

typedef bool (*pf_hxxx_sei_callback)(const hxxx_sei_data_t *, void *);
void HxxxParseSEI(const uint8_t *, size_t, uint8_t, pf_hxxx_sei_callback, void *);
void HxxxParse_AnnexB_SEI(const uint8_t *, size_t, uint8_t, pf_hxxx_sei_callback, void *);


