<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\vc1.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../codec/cc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packetizer_helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_ep3b.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"startcode_helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iso_color_tables.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_SOUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_SOUT_PACKETIZER</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"VC-1 packetizer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">50</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>packetizer_t</name></type> <name>packetizer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_sequence_header</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_sh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_advanced_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_interlaced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_frame_interpolation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_range_reduction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_bframe</name></decl>;</decl_stmt>

}</block> <decl><name>sh</name></decl>;</struct>

<decl_stmt><decl><type><name>bool</name></type> <name>b_entry_point</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ep</name></decl>;</decl_stmt>

}</block> <decl><name>ep</name></decl>;</struct>

<decl_stmt><decl><type><name>bool</name></type> <name>b_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_frame_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_frame_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_check_startcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_cc_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_cc_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_cc_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cc_data_t</name></type> <name>cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cc_data_t</name></type> <name>cc_next</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>IDU_TYPE_SEQUENCE_HEADER</name> <init>= <expr><literal type="number">0x0f</literal></expr></init></decl>,

<decl><name>IDU_TYPE_ENTRY_POINT</name> <init>= <expr><literal type="number">0x0e</literal></expr></init></decl>,

<decl><name>IDU_TYPE_FRAME</name> <init>= <expr><literal type="number">0x0D</literal></expr></init></decl>,

<decl><name>IDU_TYPE_FIELD</name> <init>= <expr><literal type="number">0x0C</literal></expr></init></decl>,

<decl><name>IDU_TYPE_SLICE</name> <init>= <expr><literal type="number">0x0B</literal></expr></init></decl>,

<decl><name>IDU_TYPE_END_OF_SEQUENCE</name> <init>= <expr><literal type="number">0x0A</literal></expr></init></decl>,

<decl><name>IDU_TYPE_SEQUENCE_LEVEL_USER_DATA</name> <init>= <expr><literal type="number">0x1F</literal></expr></init></decl>,

<decl><name>IDU_TYPE_ENTRY_POINT_USER_DATA</name> <init>= <expr><literal type="number">0x1E</literal></expr></init></decl>,

<decl><name>IDU_TYPE_FRAME_USER_DATA</name> <init>= <expr><literal type="number">0x1D</literal></expr></init></decl>,

<decl><name>IDU_TYPE_FIELD_USER_DATA</name> <init>= <expr><literal type="number">0x1C</literal></expr></init></decl>,

<decl><name>IDU_TYPE_SLICE_USER_DATA</name> <init>= <expr><literal type="number">0x1B</literal></expr></init></decl>,

}</block></enum></type> <name>idu_type_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeReset</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_broken</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeParse</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>PacketizeValidate</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeDrain</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>OutputFrame</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ParseIDU</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetCc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>decoder_cc_desc_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_vc1_startcode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_VC1</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>decoder_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_get_cc</name></name> <operator>=</operator> <name>GetCc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>packetizer_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>,

<argument><expr><name>p_vc1_startcode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_vc1_startcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>startcode_FindAnnexB</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name>PacketizeReset</name></expr></argument>, <argument><expr><name>PacketizeParse</name></expr></argument>, <argument><expr><name>PacketizeValidate</name></expr></argument>, <argument><expr><name>PacketizeDrain</name></expr></argument>,

<argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_entry_point</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_frame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><literal type="number">30000</literal><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_check_startcode</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>b_packetized</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>packetizer_Header</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cc_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cc_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cc_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc_next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packetizer_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cc_Exit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc_next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Exit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_check_startcode</name></name> <operator>&amp;&amp;</operator> <name>pp_block</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp_block</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_startcode</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_vc1_startcode</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><operator>*</operator><name>pp_block</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>i_startcode</name> <operator>||</operator>

<call><name>memcmp</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>p_vc1_startcode</name></expr></argument>, <argument><expr><name>i_startcode</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>p_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name>i_startcode</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>p_vc1_startcode</name></expr></argument>, <argument><expr><name>i_startcode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_interlaced</name></name> <operator>&amp;&amp;</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name>i_startcode</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_startcode</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xc0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_startcode</name></expr>]</index></name> <operator>=</operator> <name>IDU_TYPE_FIELD</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_startcode</name></expr>]</index></name> <operator>=</operator> <name>IDU_TYPE_FRAME</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_check_startcode</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_au</name> <init>= <expr><call><name>packetizer_Packetize</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_au</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_check_startcode</name></name> <operator>=</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>b_packetized</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_au</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packetizer_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeReset</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_flush</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_frame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeParse</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ParseIDU</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>pb_ts_used</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PacketizeValidate</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_au</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"need a starting pts/dts"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>PacketizeDrain</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_frame</name></name></expr> ?</condition><then> <expr><call><name>OutputFrame</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BuildExtraData</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_entry_point</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_extra</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>!=</operator> <name>i_extra</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>xrealloc</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>OutputFrame</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_pic_flags</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pic_flags</name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ep</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ep</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_list</name></expr></argument>, <argument><expr><name>p_ep</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_list</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>i_pic_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name> <operator>=</operator> <name>p_list</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><call><name>block_ChainGather</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_has_bframe</name></name> <operator>||</operator> <operator>(</operator><name>i_pic_flags</name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_B</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator> <name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cc_pts</name></name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cc_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cc_flags</name></name> <operator>=</operator> <name>i_pic_flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc_next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_frame</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ParseIDU</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pic</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>idu_type_t</name></type> <name>idu</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_ts_used</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name> <operator>&amp;&amp;</operator> <name>idu</name> <operator>!=</operator> <name>IDU_TYPE_SEQUENCE_HEADER</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"waiting for sequence header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_entry_point</name></name> <operator>&amp;&amp;</operator> <name>idu</name> <operator>!=</operator> <name>IDU_TYPE_ENTRY_POINT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"waiting for entry point"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_frame</name></name> <operator>&amp;&amp;</operator>

<name>idu</name> <operator>!=</operator> <name>IDU_TYPE_FRAME_USER_DATA</name> <operator>&amp;&amp;</operator>

<name>idu</name> <operator>!=</operator> <name>IDU_TYPE_FIELD</name> <operator>&amp;&amp;</operator> <name>idu</name> <operator>!=</operator> <name>IDU_TYPE_FIELD_USER_DATA</name> <operator>&amp;&amp;</operator>

<name>idu</name> <operator>!=</operator> <name>IDU_TYPE_SLICE</name> <operator>&amp;&amp;</operator> <name>idu</name> <operator>!=</operator> <name>IDU_TYPE_SLICE_USER_DATA</name> <operator>&amp;&amp;</operator>

<name>idu</name> <operator>!=</operator> <name>IDU_TYPE_END_OF_SEQUENCE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>OutputFrame</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_dts</name></name> <operator>=</operator> <name><name>p_frag</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_pts</name></name> <operator>=</operator> <name><name>p_frag</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_ts_used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_release</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>idu</name> <operator>!=</operator> <name>IDU_TYPE_SEQUENCE_HEADER</name> <operator>&amp;&amp;</operator> <name>idu</name> <operator>!=</operator> <name>IDU_TYPE_ENTRY_POINT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_last</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_release</name> <operator>=</operator> <name>p_frag</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>idu</name> <operator>==</operator> <name>IDU_TYPE_SEQUENCE_HEADER</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_profile</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>p_sh</name></name> <operator>=</operator> <call><name>block_Duplicate</name><argument_list>( <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_potential_width</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_potential_height</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_potential_width</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_potential_width</name> <operator>&lt;=</operator> <literal type="number">8192</literal> <operator>&amp;&amp;</operator>

<name>i_potential_height</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_potential_height</name> <operator>&lt;=</operator> <literal type="number">8192</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_v</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_v</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_v</name><operator>-&gt;</operator><name>i_width</name></name> <operator>==</operator> <name>i_potential_width</name> <operator>&amp;&amp;</operator> <name><name>p_v</name><operator>-&gt;</operator><name>i_height</name></name> <operator>==</operator> <name>i_potential_height</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>startcode</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><name>IDU_TYPE_SEQUENCE_HEADER</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name>i_potential_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name>i_potential_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>startcode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>startcode</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name></type> <name>bsctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hxxx_bsfw_ep3b_ctx_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init_custom</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>hxxx_bsfw_ep3b_callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_profile</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_profile</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_level</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_advanced_profile</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_range_reduction</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_has_bframe</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>+</operator><literal type="number">5</literal><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"found sequence header for advanced profile level L%d resolution %dx%d"</literal></expr></argument>,

<argument><expr><name>i_level</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_interlaced</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_frame_interpolation</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_display_width</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_display_height</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name>i_display_width</name> <operator>*</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name>i_display_height</name> <operator>*</operator> <name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"display size %dx%d"</literal></expr></argument>, <argument><expr><name>i_display_width</name></expr></argument>, <argument><expr><name>i_display_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>p_ar</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">12</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">16</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">40</literal></expr>,<expr><literal type="number">33</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">24</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">20</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">32</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">80</literal></expr>,<expr><literal type="number">33</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">18</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">11</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">64</literal></expr>,<expr><literal type="number">33</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">160</literal></expr>,<expr><literal type="number">99</literal></expr>}</block></expr>,<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ar</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_ar_w</name></decl>, <decl><type ref="prev"/><name>i_ar_h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ar</name> <operator>==</operator> <literal type="number">15</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ar_w</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ar_h</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_ar_w</name> <operator>=</operator> <name><name>p_ar</name><index>[<expr><name>i_ar</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ar_h</name> <operator>=</operator> <name><name>p_ar</name><index>[<expr><name>i_ar</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_ar_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_ar_h</name></expr></argument>, <argument><expr><name>i_ar_w</name></expr></argument>, <argument><expr><name>i_ar_h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"aspect ratio %d:%d"</literal></expr></argument>, <argument><expr><name>i_ar_w</name></expr></argument>, <argument><expr><name>i_ar_h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_fps_num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_fps_den</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_fps_num</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_fps_den</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_nr</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dn</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_nr</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>i_fps_num</name> <operator>=</operator> <literal type="number">24000</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>i_fps_num</name> <operator>=</operator> <literal type="number">25000</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>i_fps_num</name> <operator>=</operator> <literal type="number">30000</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>i_fps_num</name> <operator>=</operator> <literal type="number">50000</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>i_fps_num</name> <operator>=</operator> <literal type="number">60000</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>i_fps_num</name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>i_fps_num</name> <operator>=</operator> <literal type="number">72000</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><name>i_dn</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>i_fps_den</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>i_fps_den</name> <operator>=</operator> <literal type="number">1001</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_fps_num</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_fps_den</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_ureduce</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>, <argument><expr><name>i_fps_num</name></expr></argument>, <argument><expr><name>i_fps_den</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"frame rate %d/%d"</literal></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> 

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <call><name>iso_23001_8_cp_to_vlc_primaries</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <call><name>iso_23001_8_tc_to_vlc_xfer</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <call><name>iso_23001_8_mc_to_vlc_coeffs</name><argument_list>( <argument><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_advanced_profile</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_interlaced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"found sequence header for %s profile"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i_profile</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"simple"</literal></expr> </then><else>: <expr><literal type="string">"main"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>+</operator><literal type="number">5</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator> 

<literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator> 

<literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_range_reduction</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_has_bframe</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_has_bframe</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_frame_interpolation</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_sequence_header</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BuildExtraData</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>idu</name> <operator>==</operator> <name>IDU_TYPE_ENTRY_POINT</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ep</name><operator>.</operator><name>p_ep</name></name> <operator>=</operator> <call><name>block_Duplicate</name><argument_list>( <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_entry_point</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"found entry point"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_entry_point</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BuildExtraData</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>idu</name> <operator>==</operator> <name>IDU_TYPE_FRAME</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name></type> <name>bsctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hxxx_bsfw_ep3b_ctx_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init_custom</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>hxxx_bsfw_ep3b_callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_advanced_profile</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_fcm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_interlaced</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_fcm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_fcm</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_fcm</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition> 

<block>{<block_content>

<switch>switch<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case> 

<case>case <expr><literal type="number">1</literal></expr>:</case> 

<case>case <expr><literal type="number">2</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<case>case <expr><literal type="number">5</literal></expr>:</case> 

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<case>case <expr><literal type="number">7</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_frame_interpolation</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_range_reduction</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>b_has_bframe</name></name> <operator>||</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_frame</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_frame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>idu</name> <operator>==</operator> <name>IDU_TYPE_FRAME_USER_DATA</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_size</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name></type> <name>bsctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hxxx_bsfw_ep3b_ctx_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init_custom</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hxxx_bsfw_ep3b_callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_data</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i_data</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_data</name><operator>&lt;</operator><name>i_size</name> <operator>&amp;&amp;</operator> <call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">16</literal></expr> ;</condition> <incr><expr><name>i_data</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><name>i_data</name></expr>]</index></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_DVB1_user_identifier</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x34</literal></expr> 

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>p_DVB1_user_identifier</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>p_DVB1_user_identifier</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_DVB1_user_identifier</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cc_ProbeAndExtract</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc_next</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_release</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_release</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetCc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>decoder_cc_desc_t</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_cc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_cc</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_cc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_cc</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>

<name><name>p_cc</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_reorder</name></name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cc_pts</name></name></expr> </then><else>: <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_cc_dts</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_cc_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_desc</name><operator>-&gt;</operator><name>i_608_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_608channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_desc</name><operator>-&gt;</operator><name>i_708_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>i_708channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_desc</name><operator>-&gt;</operator><name>i_reorder_depth</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name><operator>.</operator><name>b_reorder</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>cc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_cc</name></expr>;</return>

</block_content>}</block></function>

</unit>
