<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\hxxx_ep3b.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>hxxx_ep3b_to_rbsp</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_prev</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>++</operator><name>p</name> <operator>&gt;=</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_prev</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>pi_prev</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>!</operator><operator>*</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="number">0x03</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>!=</operator> <name>end</name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>pi_prev</name> <operator>&amp;</operator> <literal type="number">0x06</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x06</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_prev</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>*</operator><name>pi_prev</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>!</operator><operator>*</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static inline uint8_t * hxxx_ep3b_to_rbsp(const uint8_t *p_src, size_t i_src, size_t *pi_ret)

{

uint8_t *p_dst;

if(!p_src || !(p_dst = malloc(i_src)))

return NULL;

size_t j = 0;

for (size_t i = 0; i &lt; i_src; i++) {

if (i &lt; i_src - 3 &amp;&amp;

p_src[i] == 0 &amp;&amp; p_src[i+1] == 0 &amp;&amp; p_src[i+2] == 3) {

p_dst[j++] = 0;

p_dst[j++] = 0;

i += 2;

continue;

}

p_dst[j++] = p_src[i];

}

*pi_ret = j;

return p_dst;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>hxxx_bsfw_ep3b_ctx_s</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_prev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_bytepos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_bytesize</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hxxx_bsfw_ep3b_ctx_init</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>i_prev</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>i_bytepos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>i_bytesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>hxxx_ep3b_total_size</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p</name> <operator>&lt;</operator> <name>p_end</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>n</name> <init>= <expr><call><name>hxxx_ep3b_to_rbsp</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_prev</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>n</name> <operator>&gt;</operator> <name>p</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>hxxx_bsfw_byte_forward_ep3b</name><parameter_list>( <parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>hxxx_bsfw_ep3b_ctx_s</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>p_priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>i_bytesize</name></name> <operator>=</operator> <call><name>hxxx_ep3b_total_size</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_start</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>i_bytepos</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name> <operator>=</operator> <call><name>hxxx_ep3b_to_rbsp</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>i_prev</name></name></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>i_bytepos</name></name> <operator>+=</operator> <name>i_count</name></expr>;</expr_stmt>

<return>return <expr><name>i_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>hxxx_bsfw_byte_pos_ep3b</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>hxxx_bsfw_ep3b_ctx_s</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>p_priv</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>i_bytepos</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>hxxx_bsfw_byte_remain_ep3b</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>bs_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator>struct <name>hxxx_bsfw_ep3b_ctx_s</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>p_priv</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ctx</name><operator>-&gt;</operator><name>i_bytesize</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>p_start</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>i_bytesize</name></name> <operator>=</operator> <call><name>hxxx_ep3b_total_size</name><argument_list>( <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_start</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>p_end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>i_bytesize</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>i_bytepos</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>i_bytesize</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>i_bytepos</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>bs_byte_callbacks_t</name></type> <name>hxxx_bsfw_ep3b_callbacks</name> <init>=

<expr><block>{

<expr><name>hxxx_bsfw_byte_forward_ep3b</name></expr>,

<expr><name>hxxx_bsfw_byte_pos_ep3b</name></expr>,

<expr><name>hxxx_bsfw_byte_remain_ep3b</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
