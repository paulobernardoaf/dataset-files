<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\hevc.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packetizer_helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"startcode_helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_sei.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_SOUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_SOUT_PACKETIZER</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"HEVC/H.265 video packetizer"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<struct>struct <name>hevc_tuple_s</name>

<block>{

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_decoded</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>packetizer_t</name></type> <name>packetizer</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_chain_last</name></decl>;</decl_stmt>

}</block> <decl><name>frame</name></decl>, <name>pre</name>, <name>post</name>;</struct>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hevc_tuple_s</name></name></type> <name><name>rg_vps</name><index>[<expr><name>HEVC_VPS_ID_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>,

<name><name>rg_sps</name><index>[<expr><name>HEVC_SPS_ID_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>,

<name><name>rg_pps</name><index>[<expr><name>HEVC_PPS_ID_MAX</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_active_vps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_active_sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_active_pps</name></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>MISSING</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>COMPLETE</name></decl>,

<decl><name>SENT</name></decl>,

}</block> <decl><name>sets</name></decl>;</enum>

<decl_stmt><decl><type><name>bool</name></type> <name>b_recovery_point</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hevc_sei_pic_timing_t</name> <modifier>*</modifier></type><name>p_timing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_need_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cc_storage_t</name> <modifier>*</modifier></type><name>p_ccs</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeAnnexB</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeHVC1</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeFlush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeReset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_broken</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeParse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ParseNALBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>PacketizeValidate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>PacketizeDrain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ParseSEICallback</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hxxx_sei_data_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetCc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>decoder_cc_desc_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetXPSCopy</name><parameter_list>(<parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK_FLAG_DROP</name></cpp:macro> <cpp:value>(1 &lt;&lt; BLOCK_FLAG_PRIVATE_SHIFT)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_hevc_startcode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>InitQueue</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_head</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_tail</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_head</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_tail</name> <operator>=</operator> <name>pp_head</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITQ</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>InitQueue(&amp;p_sys-&gt;name.p_chain, &amp;p_sys-&gt;name.pp_chain_last)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>OutputQueues</name><parameter_list>(<parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_valid</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_output_last</name> <init>= <expr><operator>&amp;</operator><name>p_output</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>SENT</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator>

<call><name>hevc_getNALType</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HEVC_NAL_AUD</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_au</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_au</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp_output_last</name></expr></argument>, <argument><expr><name>p_au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp_output_last</name></expr></argument>, <argument><expr><call><name>GetXPSCopy</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp_output_last</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_chain</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_chain</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp_output_last</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>post</name><operator>.</operator><name>p_chain</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_flags</name> <operator>|=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>post</name><operator>.</operator><name>p_chain</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp_output_last</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>post</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name>post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_output</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>i_flags</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_valid</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DROP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_output</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_HEVC</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>decoder_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name> <operator>=</operator> <call><name>cc_storage_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INITQ</name><argument_list>(<argument><expr><name>post</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>packetizer_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>,

<argument><expr><name>p_hevc_startcode</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p_hevc_startcode</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>startcode_FindAnnexB</name></expr></argument>,

<argument><expr><name>p_hevc_startcode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>,

<argument><expr><name>PacketizeReset</name></expr></argument>, <argument><expr><name>PacketizeParse</name></expr></argument>, <argument><expr><name>PacketizeValidate</name></expr></argument>, <argument><expr><name>PacketizeDrain</name></expr></argument>,

<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&amp;&amp;</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&amp;&amp;</operator>

<name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&lt;=</operator> <name>UINT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">30000</literal></expr></argument>, <argument><expr><literal type="number">1001</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_need_ts</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>=</operator> <name>MISSING</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hevc_ishvcC</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>PacketizeHVC1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_new_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator>

<call><name>hevc_hvcC_to_AnnexB_NAL</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_new_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_nal_length_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_new_extra</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>PacketizeAnnexB</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>PacketizeFlush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_get_cc</name></name> <operator>=</operator> <name>GetCc</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>packetizer_Header</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>,

<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packetizer_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>post</name><operator>.</operator><name>p_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>HEVC_PPS_ID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hevc_rbsp_release_pps</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_nal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>HEVC_SPS_ID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hevc_rbsp_release_sps</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_nal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>HEVC_VPS_ID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hevc_rbsp_release_vps</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_nal</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>hevc_release_sei_pic_timing</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_timing</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_storage_delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeHVC1</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>PacketizeXXC1</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_nal_length_size</name></name></expr></argument>,

<argument><expr><name>pp_block</name></expr></argument>, <argument><expr><name>ParseNALBlock</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeAnnexB</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>packetizer_Packetize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeFlush</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>packetizer_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetCc</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>decoder_cc_desc_t</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>cc_storage_get_current</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument>, <argument><expr><name>p_desc</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PacketizeReset</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>b_flush</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>=</operator> <name>MISSING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_need_ts</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>InsertXPS</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_type</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_id</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_nalb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hevc_tuple_s</name></name> <modifier>*</modifier></type><name>p_tuple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_active</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>i_nal_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEVC_NAL_VPS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>i_id</name> <operator>&gt;</operator> <name>HEVC_VPS_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_tuple</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name><index>[<expr><name>i_id</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_active</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_vps</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SPS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>i_id</name> <operator>&gt;</operator> <name>HEVC_SPS_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_tuple</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name><index>[<expr><name>i_id</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_active</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_PPS</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>i_id</name> <operator>&gt;</operator> <name>HEVC_PPS_ID_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_tuple</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name><index>[<expr><name>i_id</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp_active</name> <operator>=</operator> <operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_nal</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_stored</name> <init>= <expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_nal</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_stored</name> <init>= <expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_nal</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_stored</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stored</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><name><name>p_nalb</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_new</name> <init>= <expr><name><name>p_nalb</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_new</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_new</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_stored</name> <operator>==</operator> <name>i_new</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p_stored</name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>i_new</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name></expr>)</condition>

<block>{<block_content>

<switch>switch<condition>(<expr><name>i_nal_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEVC_NAL_VPS</name></expr>:</case>

<expr_stmt><expr><call><name>hevc_rbsp_release_vps</name><argument_list>(<argument><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SPS</name></expr>:</case>

<expr_stmt><expr><call><name>hevc_rbsp_release_sps</name><argument_list>(<argument><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_PPS</name></expr>:</case>

<expr_stmt><expr><call><name>hevc_rbsp_release_pps</name><argument_list>(<argument><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pp_active</name> <operator>==</operator> <name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_active</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_active</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<expr_stmt><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>pp_active</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_nal</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_nal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_nal</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><name><name>p_nalb</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer</name> <init>= <expr><name><name>p_nalb</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>(<expr><name>i_nal_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEVC_NAL_SPS</name></expr>:</case>

<expr_stmt><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name> <operator>=</operator> <call><name>hevc_decode_sps</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Failed decoding SPS id %d"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_PPS</name></expr>:</case>

<expr_stmt><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name> <operator>=</operator> <call><name>hevc_decode_pps</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Failed decoding PPS id %d"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_VPS</name></expr>:</case>

<expr_stmt><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name> <operator>=</operator> <call><name>hevc_decode_vps</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Failed decoding VPS id %d"</literal></expr></argument>, <argument><expr><name>i_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name> <operator>&amp;&amp;</operator> <name>pp_active</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>pp_active</name> <operator>=</operator> <name><name>p_tuple</name><operator>-&gt;</operator><name>p_decoded</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_tuple</name><operator>-&gt;</operator><name>p_nal</name></name> <operator>=</operator> <call><name>block_Duplicate</name><argument_list>(<argument><expr><operator>(</operator><name>block_t</name> <operator>*</operator><operator>)</operator><name>p_nalb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GetXPSCopy</name><parameter_list>(<parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name>p_chain</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hevc_tuple_s</name></name> <modifier>*</modifier></type><name><name>xpstype</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name></name></expr>, <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name></name></expr>, <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name><name>xpsmax</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>HEVC_VPS_ID_MAX</name></expr>, <expr><name>HEVC_SPS_ID_MAX</name></expr>, <expr><name>HEVC_PPS_ID_MAX</name></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>xpsmax</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_dup</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>xpstype</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_nal</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>p_dup</name> <operator>=</operator> <call><name>block_Duplicate</name><argument_list>(<argument><expr><name><name>xpstype</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_nal</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pp_append</name></expr></argument>, <argument><expr><name>p_dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></for><empty_stmt>;</empty_stmt>

<return>return <expr><name>p_chain</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>XPSReady</name><parameter_list>(<parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>HEVC_PPS_ID_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_pps</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>id_sps</name> <init>= <expr><call><name>hevc_get_pps_sps_id</name><argument_list>(<argument><expr><name>p_pps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name><index>[<expr><name>id_sps</name></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_sps</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>id_vps</name> <init>= <expr><call><name>hevc_get_sps_vps_id</name><argument_list>(<argument><expr><name>p_sps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name><index>[<expr><name>id_vps</name></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AppendAsAnnexB</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>SIZE_MAX</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <operator>*</operator><name>pi_dst</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_realloc</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <operator>*</operator><name>pi_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>pp_dst</name></expr></argument>, <argument><expr><name>i_realloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_realloc</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_realloc</name><index>[<expr><operator>*</operator><name>pi_dst</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_dst</name> <operator>=</operator> <name>i_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_dst</name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPENDIF</name><parameter_list>(<parameter><type><name>idmax</name></type></parameter>, <parameter><type><name>set</name></type></parameter>, <parameter><type><name>rg</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(size_t i=0; i&lt;=idmax; i++){if(((set != rg[i].p_decoded) == !b) &amp;&amp; rg[i].p_nal){AppendAsAnnexB(rg[i].p_nal, &amp;p_data, &amp;i_data);break;}}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetsToAnnexB</name><parameter_list>(<parameter><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_vps</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>APPENDIF</name><argument_list>(<argument><expr><name>HEVC_VPS_ID_MAX</name></expr></argument>, <argument><expr><name>p_vps</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPENDIF</name><argument_list>(<argument><expr><name>HEVC_VPS_ID_MAX</name></expr></argument>, <argument><expr><name>p_vps</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPENDIF</name><argument_list>(<argument><expr><name>HEVC_SPS_ID_MAX</name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPENDIF</name><argument_list>(<argument><expr><name>HEVC_SPS_ID_MAX</name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPENDIF</name><argument_list>(<argument><expr><name>HEVC_PPS_ID_MAX</name></expr></argument>, <argument><expr><name>p_pps</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>APPENDIF</name><argument_list>(<argument><expr><name>HEVC_PPS_ID_MAX</name></expr></argument>, <argument><expr><name>p_pps</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_data</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_out</name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_out</name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ActivateSets</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_vps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_pps</name></name> <operator>=</operator> <name>p_pps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name> <operator>=</operator> <name>p_sps</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_vps</name></name> <operator>=</operator> <name>p_vps</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_sps</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>||</operator> <operator>!</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hevc_get_frame_rate</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name>p_vps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name>den</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name><operator>.</operator><name>i_divider_den</name></name> <operator>!=</operator> <name>den</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>dts</name><operator>.</operator><name>i_divider_num</name></name> <operator>!=</operator> <literal type="number">2</literal> <operator>*</operator> <name>num</name> <operator>&amp;&amp;</operator>

<name>num</name> <operator>&lt;=</operator> <name>UINT_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Change</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dts</name><operator>.</operator><name>i_divider_num</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>dts</name><operator>.</operator><name>i_divider_den</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>==</operator> <name>COLOR_PRIMARIES_UNDEF</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>hevc_get_colorimetry</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>sizes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>hevc_get_picture_size</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_profile</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_profile</name></decl>, <decl><type ref="prev"/><name>i_level</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>hevc_get_sps_profile_tier_level</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_profile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_level</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name>i_profile</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_level</name></name> <operator>=</operator> <name>i_level</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_vps</name> <operator>&amp;&amp;</operator> <name>p_pps</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetsToAnnexB</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_pps</name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name>p_vps</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>GetXPSSet</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i_pps_id</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>,

<parameter><decl><type><name>hevc_picture_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pps</name></decl></parameter>,

<parameter><decl><type><name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_sps</name></decl></parameter>,

<parameter><decl><type><name>hevc_video_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_vps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_vps</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>pp_pps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rg_pps</name><index>[<expr><name>i_pps_id</name></expr>]</index></name><operator>.</operator><name>p_decoded</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rg_sps</name><index>[<expr><call><name>hevc_get_pps_sps_id</name><argument_list>(<argument><expr><operator>*</operator><name>pp_pps</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>p_decoded</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_vps</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rg_vps</name><index>[<expr><call><name>hevc_get_sps_vps_id</name><argument_list>(<argument><expr><operator>*</operator><name>pp_sps</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>p_decoded</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParseStoredSEI</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_nal</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name></name></expr></init></decl>;</init>

<condition><expr><name>p_nal</name></expr>;</condition> <incr><expr><name>p_nal</name> <operator>=</operator> <name><name>p_nal</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_nal</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>hevc_getNALType</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_nal</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HEVC_NAL_PREF_SEI</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>HxxxParse_AnnexB_SEI</name><argument_list>( <argument><expr><name><name>p_nal</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_nal</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><name>ParseSEICallback</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ParseVCL</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_type</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_outputchain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buffer</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>i_buffer</name> <operator>&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pp_chain_last</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_layer</name> <init>= <expr><call><name>hevc_getNALLayer</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_first_slice_in_pic</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>b_first_slice_in_pic</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_chain</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_outputchain</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>MISSING</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>hevc_slice_segment_header_t</name> <modifier>*</modifier></type><name>p_sli</name> <init>= <expr><call><name>hevc_decode_slice_header</name><argument_list>(<argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><name>GetXPSSet</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_sli</name> <operator>&amp;&amp;</operator> <name>i_layer</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>hevc_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hevc_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hevc_video_parameter_set_t</name> <modifier>*</modifier></type><name>p_vps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>GetXPSSet</name><argument_list>(<argument><expr><call><name>hevc_get_slice_pps_id</name><argument_list>(<argument><expr><name>p_sli</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_vps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ActivateSets</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_pps</name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name>p_vps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ParseStoredSEI</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>i_nal_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEVC_NAL_BLA_W_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_W_RADL</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_BLA_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_W_RADL</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_IDR_N_LP</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_CRA</name></expr>:</case>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>p_sli</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>hevc_slice_type_e</name></name></type> <name>type</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hevc_get_slice_type</name><argument_list>( <argument><expr><name>p_sli</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEVC_SLICE_TYPE_B</name></expr>:</case>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_SLICE_TYPE_P</name></expr>:</case>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_SLICE_TYPE_I</name></expr>:</case>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_B</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name>p_sli</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hevc_rbsp_release_slice_header</name><argument_list>(<argument><expr><name>p_sli</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>==</operator> <name>MISSING</name> <operator>&amp;&amp;</operator> <name>i_layer</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>XPSReady</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>=</operator> <name>COMPLETE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>MISSING</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_I</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>cc_storage_reset</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>pp_chain_last</name></name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_outputchain</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>ParseAUHead</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_type</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_nalb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>post</name><operator>.</operator><name>p_chain</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_chain</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ret</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>MISSING</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>i_nal_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEVC_NAL_AUD</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_ret</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>p_chain</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ret</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>MISSING</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_VPS</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_SPS</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_PPS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_xps</name> <init>= <expr><name><name>p_nalb</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_xps</name> <init>= <expr><name><name>p_nalb</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_xps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xps</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>hevc_get_xps_id</name><argument_list>(<argument><expr><name><name>p_nalb</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_nalb</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>InsertXPS</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_nal_type</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>p_nalb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>SENT</name></expr>)</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_nalb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>HEVC_NAL_PREF_SEI</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pre</name><operator>.</operator><name>pp_chain_last</name></name></expr></argument>, <argument><expr><name>p_nalb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>ParseAUTail</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_type</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_nalb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>post</name><operator>.</operator><name>pp_chain_last</name></name></expr></argument>, <argument><expr><name>p_nalb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>i_nal_type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>HEVC_NAL_EOS</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_EOB</name></expr>:</case>

<expr_stmt><expr><name>p_ret</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>MISSING</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ret</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ret</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_END_OF_SEQUENCE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>HEVC_NAL_SUFF_SEI</name></expr>:</case>

<expr_stmt><expr><call><name>HxxxParse_AnnexB_SEI</name><argument_list>( <argument><expr><name><name>p_nalb</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_nalb</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><name>ParseSEICallback</name></expr></argument>, <argument><expr><name>p_dec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_ret</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_chain</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_ret</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>ParseNonVCL</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_type</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_nalb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_nal_type</name> <operator>&gt;=</operator> <name>HEVC_NAL_VPS</name> <operator>&amp;&amp;</operator> <name>i_nal_type</name> <operator>&lt;=</operator> <name>HEVC_NAL_AUD</name><operator>)</operator> <operator>||</operator>

<name>i_nal_type</name> <operator>==</operator> <name>HEVC_NAL_PREF_SEI</name> <operator>||</operator>

<operator>(</operator><name>i_nal_type</name> <operator>&gt;=</operator> <name>HEVC_NAL_RSV_NVCL41</name> <operator>&amp;&amp;</operator> <name>i_nal_type</name> <operator>&lt;=</operator> <name>HEVC_NAL_RSV_NVCL44</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>i_nal_type</name> <operator>&gt;=</operator> <name>HEVC_NAL_UNSPEC48</name> <operator>&amp;&amp;</operator> <name>i_nal_type</name> <operator>&lt;=</operator> <name>HEVC_NAL_UNSPEC55</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_ret</name> <operator>=</operator> <call><name>ParseAUHead</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_nal_type</name></expr></argument>, <argument><expr><name>p_nalb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_ret</name> <operator>=</operator> <call><name>ParseAUTail</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_nal_type</name></expr></argument>, <argument><expr><name>p_nalb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>p_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>GatherAndValidateChain</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_outputchain</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_outputchain</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_outputchain</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DROP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_output</name> <operator>=</operator> <name>p_outputchain</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>block_ChainGather</name><argument_list>(<argument><expr><name>p_outputchain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>p_output</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_output</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DROP</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>(<argument><expr><name>p_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>p_output</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_output</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetOutputBlockProperties</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_num_clock_ts</name> <init>= <expr><call><name>hevc_get_num_clock_ts</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_timing</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_start</name> <init>= <expr><call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>i_num_clock_ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>i_start</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_output</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_AU_END</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hevc_release_sei_pic_timing</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_timing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_timing</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ParseNALBlock</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_ts_used</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_au_end</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_AU_END</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_need_ts</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>p_frag</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_need_ts</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_ts_used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>,<argument><expr><literal type="string">"NAL too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>,<argument><expr><literal type="string">"Forbidden zero bit not null, corrupted NAL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>p_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>GatherAndValidateChain</name><argument_list>(<argument><expr><call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>dts</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_dts</name></name></expr></init></decl>, <decl><type ref="prev"/><name>pts</name> <init>= <expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_pts</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type> <name>p_output</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_nal_type</name> <init>= <expr><call><name>hevc_getNALType</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_frag</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_nal_type</name> <operator>&lt;</operator> <name>HEVC_NAL_VPS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>ParseVCL</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_nal_type</name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_output</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_output</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DROP</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Waiting for VPS/SPS/PPS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>ParseNonVCL</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>i_nal_type</name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_output</name> <operator>&amp;&amp;</operator> <name>b_au_end</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>MISSING</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_output</name> <operator>=</operator> <call><name>GatherAndValidateChain</name><argument_list>(<argument><expr><name>p_output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p_output</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>SENT</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>==</operator> <name>COMPLETE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>=</operator> <name>SENT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetOutputBlockProperties</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_output</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>, <argument><expr><name>dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_ts_used</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_output</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>PacketizeParse</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>ParseNALBlock</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>pb_ts_used</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cc_storage_commit</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PacketizeValidate</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_au</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_private</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_au</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>PacketizeDrain</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><name>p_private</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>p_chain</name></name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>sets</name></name> <operator>!=</operator> <name>MISSING</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>OutputQueues</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_out</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name>GatherAndValidateChain</name><argument_list>(<argument><expr><name>p_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_out</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetOutputBlockProperties</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ParseSEICallback</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>hxxx_sei_data_t</name> <modifier>*</modifier></type><name>p_sei_data</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator> <name>cbdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>HXXX_SEI_PIC_TIMING</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>hevc_release_sei_pic_timing</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_timing</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_timing</name></name> <operator>=</operator> <call><name>hevc_decode_sei_pic_timing</name><argument_list>( <argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>p_bs</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_active_sps</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_USER_DATA_REGISTERED_ITU_T_T35</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>itu_t35</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>HXXX_ITU_T35_TYPE_CC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cc_storage_append</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_ccs</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>itu_t35</name><operator>.</operator><name>u</name><operator>.</operator><name>cc</name><operator>.</operator><name>p_data</name></name></expr></argument>,

<argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>itu_t35</name><operator>.</operator><name>u</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_RECOVERY_POINT</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Seen SEI recovery point, %d recovery frames"</literal></expr></argument>, <argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>recovery</name><operator>.</operator><name>i_frames</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_recovery_point</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_FRAME_PACKING_ARRANGEMENT</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>==</operator> <name>MULTIVIEW_2D</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>video_multiview_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>frame_packing</name><operator>.</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>FRAME_PACKING_INTERLEAVED_CHECKERBOARD</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_CHECKERBOARD</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FRAME_PACKING_INTERLEAVED_COLUMN</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_COL</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FRAME_PACKING_INTERLEAVED_ROW</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_ROW</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FRAME_PACKING_SIDE_BY_SIDE</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_SBS</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FRAME_PACKING_TOP_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_TB</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FRAME_PACKING_TEMPORAL</name></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_FRAME</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>FRAME_PACKING_TILED</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_2D</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_MASTERING_DISPLAY_COLOUR_VOLUME</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>colour_volume</name><operator>.</operator><name>primaries</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>primaries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_sei_data</name><operator>-&gt;</operator><name>colour_volume</name><operator>.</operator><name>primaries</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name><name>p_sei_data</name><operator>-&gt;</operator><name>colour_volume</name><operator>.</operator><name>white_point</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>white_point</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_sei_data</name><operator>-&gt;</operator><name>colour_volume</name><operator>.</operator><name>white_point</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name> <operator>=</operator> <name><name>p_sei_data</name><operator>-&gt;</operator><name>colour_volume</name><operator>.</operator><name>max_luminance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>mastering</name><operator>.</operator><name>min_luminance</name></name> <operator>=</operator> <name><name>p_sei_data</name><operator>-&gt;</operator><name>colour_volume</name><operator>.</operator><name>min_luminance</name></name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_CONTENT_LIGHT_LEVEL</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>video_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name> <operator>=</operator> <name><name>p_sei_data</name><operator>-&gt;</operator><name>content_light_lvl</name><operator>.</operator><name>MaxCLL</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name> <operator>=</operator> <name><name>p_sei_data</name><operator>-&gt;</operator><name>content_light_lvl</name><operator>.</operator><name>MaxFALL</name></name></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
