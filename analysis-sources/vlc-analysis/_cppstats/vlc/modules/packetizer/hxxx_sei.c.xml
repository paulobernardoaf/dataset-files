<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\hxxx_sei.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_sei.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_ep3b.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>HxxxParse_AnnexB_SEI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_header</name></decl></parameter>, <parameter><decl><type><name>pf_hxxx_sei_callback</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_buf</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>HxxxParseSEI</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument>, <argument><expr><name>i_header</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>cbdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>HxxxParseSEI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_header</name></decl></parameter>, <parameter><decl><type><name>pf_hxxx_sei_callback</name></type> <name>pf_callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_continue</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_buf</name> <operator>&lt;=</operator> <name>i_header</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name></type> <name>bsctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hxxx_bsfw_ep3b_ctx_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init_custom</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><name>i_header</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_buf</name> <operator>-</operator> <name>i_header</name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name>hxxx_bsfw_ep3b_callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>bs_aligned</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>b_continue</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_byte</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_type</name> <operator>+=</operator> <name>i_byte</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_byte</name> <operator>!=</operator> <literal type="number">0xff</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_byte</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <name>i_byte</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_byte</name> <operator>!=</operator> <literal type="number">0xff</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>hxxx_sei_data_t</name></type> <name>sei_data</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_start_bit_pos</name> <init>= <expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>HXXX_SEI_PIC_TIMING</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>p_bs</name></name> <operator>=</operator> <operator>&amp;</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <call><name>pf_callback</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sei_data</name></expr></argument>, <argument><expr><name>cbdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_USER_DATA_REGISTERED_ITU_T_T35</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_t35</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_t35</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_t35</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i_t35</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_t35</name><operator>&lt;</operator><name>i_size</name> <operator>&amp;&amp;</operator> <call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i_t35</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_t35</name><index>[<expr><name>i_t35</name></expr>]</index></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>i_t35</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>p_t35</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xb5</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_t35</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>p_t35</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x31</literal> <operator>&amp;&amp;</operator> 

<name>i_t35</name> <operator>&gt;</operator> <literal type="number">7</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><name><name>p_t35</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>p_t35</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>p_t35</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>p_t35</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'9'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_t35</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>itu_t35</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HXXX_ITU_T35_TYPE_CC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>itu_t35</name><operator>.</operator><name>u</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_data</name></name> <operator>=</operator> <name>i_t35</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>itu_t35</name><operator>.</operator><name>u</name><operator>.</operator><name>cc</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_t35</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <call><name>pf_callback</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sei_data</name></expr></argument>, <argument><expr><name>cbdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_t35</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>p_t35</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x2f</literal> <operator>&amp;&amp;</operator> 

<name><name>p_t35</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x03</literal> <operator>&amp;&amp;</operator> <name>i_t35</name> <operator>&gt;</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>itu_t35</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>HXXX_ITU_T35_TYPE_CC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>itu_t35</name><operator>.</operator><name>u</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_data</name></name> <operator>=</operator> <name>i_t35</name> <operator>-</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>itu_t35</name><operator>.</operator><name>u</name><operator>.</operator><name>cc</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_t35</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <call><name>pf_callback</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sei_data</name></expr></argument>, <argument><expr><name>cbdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_t35</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_FRAME_PACKING_ARRANGEMENT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>b_left_first</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>b_left_first</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>b_flipped</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>b_fields</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>b_frame0</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>FRAME_PACKING_CANCEL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_RECOVERY_POINT</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>recovery</name><operator>.</operator><name>i_frames</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <call><name>pf_callback</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sei_data</name></expr></argument>, <argument><expr><name>cbdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_MASTERING_DISPLAY_COLOUR_VOLUME</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator><literal type="number">16</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">16</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">32</literal><operator>+</operator><literal type="number">32</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>colour_volume</name><operator>.</operator><name>primaries</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>colour_volume</name><operator>.</operator><name>white_point</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>colour_volume</name><operator>.</operator><name>max_luminance</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>colour_volume</name><operator>.</operator><name>min_luminance</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <call><name>pf_callback</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sei_data</name></expr></argument>, <argument><expr><name>cbdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<case>case <expr><name>HXXX_SEI_CONTENT_LIGHT_LEVEL</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator><literal type="number">16</literal><operator>+</operator><literal type="number">16</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>content_light_lvl</name><operator>.</operator><name>MaxCLL</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sei_data</name><operator>.</operator><name>content_light_lvl</name><operator>.</operator><name>MaxFALL</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <call><name>pf_callback</name><argument_list>( <argument><expr><operator>&amp;</operator><name>sei_data</name></expr></argument>, <argument><expr><name>cbdata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> <break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_end_bit_pos</name> <init>= <expr><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_end_bit_pos</name> <operator>-</operator> <name>i_start_bit_pos</name> <operator>&gt;</operator> <name>i_size</name> <operator>*</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>i_size</name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator> <name>i_end_bit_pos</name> <operator>-</operator> <name>i_start_bit_pos</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

</unit>
