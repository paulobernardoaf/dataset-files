<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\av1_obu.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1_obu.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iso_color_tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>uint8_t</name></type> <name>obu_u1_t</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>obu_u2_t</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>obu_u3_t</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>obu_u4_t</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>obu_u5_t</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>obu_u6_t</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>obu_u7_t</name>;</typedef>

<typedef>typedef <type><name>uint8_t</name></type> <name>obu_u8_t</name>;</typedef>

<typedef>typedef <type><name>uint16_t</name></type> <name>obu_u12_t</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>obu_u32_t</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>obu_uvlc_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_SCREEN_CONTENT_TOOLS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SELECT_INTEGER_MV</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV1_OPERATING_POINTS_COUNT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<struct>struct <name>av1_header_info_s</name>

<block>{

<decl_stmt><decl><type><name>obu_u4_t</name></type> <name>obu_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u3_t</name></type> <name>temporal_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u2_t</name></type> <name>spatial_id</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>av1_read_header</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>av1_header_info_s</name></name> <modifier>*</modifier></type><name>p_hdr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>obu_type</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>obu_u1_t</name></type> <name>obu_extension_flag</name> <init>= <expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>obu_u1_t</name></type> <name>obu_has_size_field</name> <init>= <expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>obu_extension_flag</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>bs_remain</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>temporal_id</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>spatial_id</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>obu_has_size_field</name></expr>)</condition>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>bs_remain</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>av1_timing_info_s</name>

<block>{

<decl_stmt><decl><type><name>obu_u32_t</name></type> <name>num_units_in_display_tick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u32_t</name></type> <name>time_scale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>equal_picture_interval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_uvlc_t</name></type> <name>num_ticks_per_picture_minus_1</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>av1_parse_timing_info</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>av1_timing_info_s</name></name> <modifier>*</modifier></type><name>p_ti</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ti</name><operator>-&gt;</operator><name>num_units_in_display_tick</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ti</name><operator>-&gt;</operator><name>time_scale</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ti</name><operator>-&gt;</operator><name>equal_picture_interval</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_ti</name><operator>-&gt;</operator><name>equal_picture_interval</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ti</name><operator>-&gt;</operator><name>num_ticks_per_picture_minus_1</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>av1_decoder_model_info_s</name>

<block>{

<decl_stmt><decl><type><name>obu_u5_t</name></type> <name>buffer_delay_length_minus_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u32_t</name></type> <name>num_units_in_decoding_tick</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u5_t</name></type> <name>buffer_removal_time_length_minus_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u5_t</name></type> <name>frame_presentation_time_length_minus_1</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>av1_parse_decoder_model_info</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>av1_decoder_model_info_s</name></name> <modifier>*</modifier></type><name>p_dm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dm</name><operator>-&gt;</operator><name>buffer_delay_length_minus_1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dm</name><operator>-&gt;</operator><name>num_units_in_decoding_tick</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dm</name><operator>-&gt;</operator><name>buffer_removal_time_length_minus_1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dm</name><operator>-&gt;</operator><name>frame_presentation_time_length_minus_1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>av1_operating_parameters_info_s</name>

<block>{

<decl_stmt><decl><type><name>obu_u32_t</name></type> <name>decoder_buffer_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u32_t</name></type> <name>encoder_buffer_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>low_delay_mode_flag</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>av1_parse_operating_parameters_info</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>av1_operating_parameters_info_s</name></name> <modifier>*</modifier></type><name>p_op</name></decl></parameter>,

<parameter><decl><type><name>obu_u8_t</name></type> <name>buffer_delay_length_minus_1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_op</name><operator>-&gt;</operator><name>decoder_buffer_delay</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>buffer_delay_length_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_op</name><operator>-&gt;</operator><name>encoder_buffer_delay</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>buffer_delay_length_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_op</name><operator>-&gt;</operator><name>low_delay_mode_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>av1_color_config_s</name>

<block>{

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>high_bitdepth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>twelve_bit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>mono_chrome</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>color_description_present_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u8_t</name></type> <name>color_primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u8_t</name></type> <name>transfer_characteristics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u8_t</name></type> <name>matrix_coefficients</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>color_range</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>subsampling_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>subsampling_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u2_t</name></type> <name>chroma_sample_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>separate_uv_delta_q</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>av1_parse_color_config</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>av1_color_config_s</name></name> <modifier>*</modifier></type><name>p_cc</name></decl></parameter>,

<parameter><decl><type><name>obu_u3_t</name></type> <name>seq_profile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>high_bitdepth</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>seq_profile</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_cc</name><operator>-&gt;</operator><name>high_bitdepth</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>twelve_bit</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>seq_profile</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>mono_chrome</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>BitDepth</name> <init>= <expr><ternary><condition><expr><name><name>p_cc</name><operator>-&gt;</operator><name>twelve_bit</name></name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p_cc</name><operator>-&gt;</operator><name>high_bitdepth</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>color_description_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_cc</name><operator>-&gt;</operator><name>color_description_present_flag</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_cc</name><operator>-&gt;</operator><name>mono_chrome</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>COLOR_RANGE_FULL</name></expr> </then><else>: <expr><name>COLOR_RANGE_LIMITED</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_cc</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>p_cc</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>==</operator> <literal type="number">13</literal> <operator>&amp;&amp;</operator>

<name><name>p_cc</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>COLOR_RANGE_FULL</name></expr> </then><else>: <expr><name>COLOR_RANGE_LIMITED</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>seq_profile</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>BitDepth</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>subsampling_x</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_cc</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>subsampling_y</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>subsampling_x</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_cc</name><operator>-&gt;</operator><name>subsampling_x</name></name> <operator>&amp;&amp;</operator> <name><name>p_cc</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>chroma_sample_position</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_cc</name><operator>-&gt;</operator><name>separate_uv_delta_q</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>av1_OBU_sequence_header_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>av1_header_info_s</name></name></type> <name>obu_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u3_t</name></type> <name>seq_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>still_picture</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>reduced_still_picture_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>timing_info_present_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>av1_timing_info_s</name></name></type> <name>timing_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>decoder_model_info_present_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>av1_decoder_model_info_s</name></name></type> <name>decoder_model_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>initial_display_delay_present_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>operating_points_cnt_minus_1</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>obu_u12_t</name></type> <name>operating_point_idc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u5_t</name></type> <name>seq_level_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>seq_tier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>decoder_model_present_for_this_op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>av1_operating_parameters_info_s</name></name></type> <name>operating_parameters_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>initial_display_delay_present_for_this_op</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u4_t</name></type> <name>initial_display_delay_minus_1</name></decl>;</decl_stmt>

}</block> <decl><name><name>operating_points</name><index>[<expr><name>AV1_OPERATING_POINTS_COUNT</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>obu_u32_t</name></type> <name>max_frame_width_minus_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u32_t</name></type> <name>max_frame_height_minus_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>frame_id_numbers_present_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u4_t</name></type> <name>delta_frame_id_length_minus_2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u3_t</name></type> <name>additional_frame_id_length_minus_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>use_128x128_superblock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_filter_intra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_intra_edge_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_interintra_compound</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_masked_compound</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_warped_motion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_dual_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_order_hint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_jnt_comp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_ref_frame_mvs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u2_t</name></type> <name>seq_force_screen_content_tools</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u2_t</name></type> <name>seq_force_integer_mv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u3_t</name></type> <name>order_hint_bits_minus_1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_superres</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_cdef</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>enable_restoration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>av1_color_config_s</name></name></type> <name>color_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>film_grain_params_present</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>void</name></type> <name>AV1_release_sequence_header</name><parameter_list>(<parameter><decl><type><name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_seq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type>

<name>AV1_OBU_parse_sequence_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_seq</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_seq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_seq</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>av1_read_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_seq</name><operator>-&gt;</operator><name>obu_header</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AV1_release_sequence_header</name><argument_list>(<argument><expr><name>p_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>seq_force_screen_content_tools</name></name> <operator>=</operator> <name>SELECT_SCREEN_CONTENT_TOOLS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>seq_force_integer_mv</name></name> <operator>=</operator> <name>SELECT_INTEGER_MV</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>seq_profile</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>still_picture</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>obu_u1_t</name></type> <name>reduced_still_picture_header</name> <init>= <expr><call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>reduced_still_picture_header</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>seq_level_idx</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>av1_parse_timing_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_seq</name><operator>-&gt;</operator><name>timing_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>decoder_model_info_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>decoder_model_info_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av1_parse_decoder_model_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_seq</name><operator>-&gt;</operator><name>decoder_model_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>initial_display_delay_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points_cnt_minus_1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>obu_u5_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points_cnt_minus_1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>operating_point_idc</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seq_level_idx</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seq_level_idx</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seq_tier</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>decoder_model_info_present_flag</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>decoder_model_present_for_this_op</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>decoder_model_present_for_this_op</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av1_parse_operating_parameters_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>operating_parameters_info</name></expr></argument>,

<argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>decoder_model_info</name><operator>.</operator><name>buffer_delay_length_minus_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>initial_display_delay_present_flag</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>initial_display_delay_present_for_this_op</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>initial_display_delay_present_for_this_op</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>initial_display_delay_minus_1</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>obu_u4_t</name></type> <name>frame_width_bits_minus_1</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>obu_u4_t</name></type> <name>frame_height_bits_minus_1</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>max_frame_width_minus_1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>frame_width_bits_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>max_frame_height_minus_1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>frame_height_bits_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>reduced_still_picture_header</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>frame_id_numbers_present_flag</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>frame_id_numbers_present_flag</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>delta_frame_id_length_minus_2</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>additional_frame_id_length_minus_1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>use_128x128_superblock</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_filter_intra</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_intra_edge_filter</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>reduced_still_picture_header</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_interintra_compound</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_masked_compound</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_warped_motion</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_dual_filter</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_order_hint</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_order_hint</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_jnt_comp</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_ref_frame_mvs</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>obu_u1_t</name></type> <name>seq_choose_screen_content_tools</name> <init>= <expr><call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>seq_choose_screen_content_tools</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>seq_force_screen_content_tools</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>seq_force_screen_content_tools</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>obu_u1_t</name></type> <name>seq_choose_integer_mv</name> <init>= <expr><call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>seq_choose_integer_mv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>seq_force_integer_mv</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_order_hint</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>order_hint_bits_minus_1</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_superres</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_cdef</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>enable_restoration</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av1_parse_color_config</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name></name></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>seq_profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AV1_release_sequence_header</name><argument_list>(<argument><expr><name>p_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_seq</name><operator>-&gt;</operator><name>film_grain_params_present</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_seq</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>av1_uncompressed_header_s</name>

<block>{

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>show_existing_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u2_t</name></type> <name>frame_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u1_t</name></type> <name>show_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>obu_u32_t</name></type> <name>frame_presentation_time</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>av1_parse_uncompressed_header</name><parameter_list>(<parameter><decl><type><name>bs_t</name> <modifier>*</modifier></type><name>p_bs</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>av1_uncompressed_header_s</name></name> <modifier>*</modifier></type><name>p_uh</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_seq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>reduced_still_picture_header</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_uh</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <name>AV1_FRAME_TYPE_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_uh</name><operator>-&gt;</operator><name>show_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_uh</name><operator>-&gt;</operator><name>show_existing_frame</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_uh</name><operator>-&gt;</operator><name>show_existing_frame</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>obu_u3_t</name></type> <name>frame_to_show_map_idx</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>frame_to_show_map_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>decoder_model_info_present_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_seq</name><operator>-&gt;</operator><name>timing_info</name><operator>.</operator><name>equal_picture_interval</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_uh</name><operator>-&gt;</operator><name>frame_presentation_time</name></name> <operator>=</operator>

<call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>p_seq</name><operator>-&gt;</operator><name>decoder_model_info</name><operator>.</operator><name>frame_presentation_time_length_minus_1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>frame_id_numbers_present_flag</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>idLen</name> <init>= <expr><name><name>p_seq</name><operator>-&gt;</operator><name>additional_frame_id_length_minus_1</name></name> <operator>+</operator>

<name><name>p_seq</name><operator>-&gt;</operator><name>delta_frame_id_length_minus_2</name></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>obu_u32_t</name></type> <name>display_frame_id</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><name>idLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>display_frame_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_seq</name><operator>-&gt;</operator><name>film_grain_params_present</name></name></expr>)</condition>

<block>{<block_content>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_uh</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_uh</name><operator>-&gt;</operator><name>show_frame</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>(<argument><expr><name>p_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>av1_OBU_frame_header_t</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>av1_header_info_s</name></name></type> <name>obu_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>av1_uncompressed_header_s</name></name></type> <name>header</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>void</name></type> <name>AV1_release_frame_header</name><parameter_list>(<parameter><decl><type><name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type><name>p_fh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type>

<name>AV1_OBU_parse_frame_header</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_seq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type><name>p_fh</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_fh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_fh</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><call><name>av1_read_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_fh</name><operator>-&gt;</operator><name>obu_header</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>av1_parse_uncompressed_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_fh</name><operator>-&gt;</operator><name>header</name></name></expr></argument>, <argument><expr><name>p_seq</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AV1_release_frame_header</name><argument_list>(<argument><expr><name>p_fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_fh</name></expr>;</return>

</block_content>}</block></function>

<function><type><name><name>enum</name> <name>av1_frame_type_e</name></name></type> <name>AV1_get_frame_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type><name>p_fh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_fh</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>frame_type</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AV1_get_frame_visibility</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_frame_header_t</name> <modifier>*</modifier></type><name>p_fh</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_fh</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>show_frame</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AV1_get_frame_max_dimensions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_seq</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>w</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>h</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_seq</name><operator>-&gt;</operator><name>max_frame_height_minus_1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>w</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_seq</name><operator>-&gt;</operator><name>max_frame_width_minus_1</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AV1_get_profile_level</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_seq</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_profile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_level</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_tier</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_profile</name> <operator>=</operator> <name><name>p_seq</name><operator>-&gt;</operator><name>seq_profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_level</name> <operator>=</operator> <name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>seq_level_idx</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_tier</name> <operator>=</operator> <name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>seq_tier</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AV1_get_frame_rate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_seq</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>den</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_seq</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name> <operator>||</operator>

<operator>!</operator><name><name>p_seq</name><operator>-&gt;</operator><name>timing_info</name><operator>.</operator><name>equal_picture_interval</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>p_seq</name><operator>-&gt;</operator><name>timing_info</name><operator>.</operator><name>num_ticks_per_picture_minus_1</name></name><operator>)</operator> <operator>*</operator>

<name><name>p_seq</name><operator>-&gt;</operator><name>timing_info</name><operator>.</operator><name>num_units_in_display_tick</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator> <name><name>p_seq</name><operator>-&gt;</operator><name>timing_info</name><operator>.</operator><name>time_scale</name></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>AV1_get_colorimetry</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_seq</name></decl></parameter>,

<parameter><decl><type><name>video_color_primaries_t</name> <modifier>*</modifier></type><name>p_primaries</name></decl></parameter>,

<parameter><decl><type><name>video_transfer_func_t</name> <modifier>*</modifier></type><name>p_transfer</name></decl></parameter>,

<parameter><decl><type><name>video_color_space_t</name> <modifier>*</modifier></type><name>p_colorspace</name></decl></parameter>,

<parameter><decl><type><name>video_color_range_t</name> <modifier>*</modifier></type><name>p_full_range</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>color_description_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_primaries</name> <operator>=</operator> <call><name>iso_23001_8_cp_to_vlc_primaries</name><argument_list>(<argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>color_primaries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_transfer</name> <operator>=</operator> <call><name>iso_23001_8_tc_to_vlc_xfer</name><argument_list>(<argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>transfer_characteristics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_colorspace</name> <operator>=</operator> <call><name>iso_23001_8_mc_to_vlc_coeffs</name><argument_list>(<argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>matrix_coefficients</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_full_range</name> <operator>=</operator> <ternary><condition><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>color_range</name></name></expr> ?</condition><then> <expr><name>COLOR_RANGE_FULL</name></expr> </then><else>: <expr><name>COLOR_RANGE_LIMITED</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>AV1_create_DecoderConfigurationRecord</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_buffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>av1_OBU_sequence_header_t</name> <modifier>*</modifier></type><name>p_seq</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_obu</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>p_obus</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name><name>pi_obus</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_buffer</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_obu</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_buffer</name> <operator>+=</operator> <name><name>pi_obus</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>i_buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>bs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_write_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>seq_profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>seq_level_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>operating_points</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>seq_tier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>high_bitdepth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>twelve_bit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>mono_chrome</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>p_seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>chroma_sample_position</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bs_write</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bs</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_obu</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_obus</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pi_obus</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><operator>*</operator><name>pp_buffer</name> <operator>=</operator> <name>p_buffer</name></expr>;</expr_stmt>

<return>return <expr><name>i_buffer</name></expr>;</return>

</block_content>}</block></function>

</unit>
