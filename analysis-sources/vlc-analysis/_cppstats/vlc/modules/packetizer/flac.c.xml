<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\flac.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block_helper.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"packetizer_helper.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flac.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_SOUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_SOUT_PACKETIZER</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Flac audio packetizer"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"packetizer"</literal></argument>, <argument><literal type="number">50</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_bytestream_t</name></type> <name>bytestream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>flac_stream_info</name></name></type> <name>stream_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_stream_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>flac_header_info</name></name></type> <name>headerinfo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_last_frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>crc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_next_block_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>decoder_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_channels_maps</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_REARLEFT</name>

<operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name>

<operator>|</operator> <name>AOUT_CHAN_REARLEFT</name> <operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name>

<operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name> <operator>|</operator> <name>AOUT_CHAN_RIGHT</name> <operator>|</operator> <name>AOUT_CHAN_CENTER</name> <operator>|</operator> <name>AOUT_CHAN_REARLEFT</name>

<operator>|</operator> <name>AOUT_CHAN_REARRIGHT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLELEFT</name> <operator>|</operator> <name>AOUT_CHAN_MIDDLERIGHT</name>

<operator>|</operator> <name>AOUT_CHAN_LFE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ProcessHeader</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_extra</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>p_extra</name></expr></argument>, <argument><expr><literal type="string">"fLaC"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_extra</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_extra</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_extra</name></name> <operator>&lt;</operator> <name>FLAC_STREAMINFO_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FLAC_ParseStreamInfo</name><argument_list>( <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>p_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>flac_crc8_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x1B</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x15</literal></expr>,

<expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x3F</literal></expr>, <expr><literal type="number">0x36</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x2D</literal></expr>,

<expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x7E</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x6C</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x65</literal></expr>,

<expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0x5D</literal></expr>,

<expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE7</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xF5</literal></expr>,

<expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xDF</literal></expr>, <expr><literal type="number">0xD6</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xC3</literal></expr>, <expr><literal type="number">0xCA</literal></expr>, <expr><literal type="number">0xCD</literal></expr>,

<expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x85</literal></expr>,

<expr><literal type="number">0xA8</literal></expr>, <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xA6</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0xBD</literal></expr>,

<expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC9</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xDB</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xD5</literal></expr>, <expr><literal type="number">0xD2</literal></expr>,

<expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xF6</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xED</literal></expr>, <expr><literal type="number">0xEA</literal></expr>,

<expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0xBE</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xAC</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0xA2</literal></expr>,

<expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0x9A</literal></expr>,

<expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0x35</literal></expr>, <expr><literal type="number">0x32</literal></expr>,

<expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0A</literal></expr>,

<expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x59</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x42</literal></expr>,

<expr><literal type="number">0x6F</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0x7D</literal></expr>, <expr><literal type="number">0x7A</literal></expr>,

<expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x9C</literal></expr>,

<expr><literal type="number">0xB1</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xAA</literal></expr>, <expr><literal type="number">0xA3</literal></expr>, <expr><literal type="number">0xA4</literal></expr>,

<expr><literal type="number">0xF9</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xF7</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xE5</literal></expr>, <expr><literal type="number">0xE2</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xEC</literal></expr>,

<expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0xC6</literal></expr>, <expr><literal type="number">0xCF</literal></expr>, <expr><literal type="number">0xC8</literal></expr>, <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD4</literal></expr>,

<expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x72</literal></expr>, <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x7C</literal></expr>,

<expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x4D</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x44</literal></expr>,

<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x17</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x0C</literal></expr>,

<expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x3A</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x34</literal></expr>,

<expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x5B</literal></expr>,

<expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x63</literal></expr>,

<expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x2C</literal></expr>, <expr><literal type="number">0x2B</literal></expr>,

<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x0F</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x1D</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x13</literal></expr>,

<expr><literal type="number">0xAE</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0xBB</literal></expr>,

<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x9F</literal></expr>, <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x8D</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x83</literal></expr>,

<expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xC5</literal></expr>, <expr><literal type="number">0xCC</literal></expr>, <expr><literal type="number">0xCB</literal></expr>,

<expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE1</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xF3</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>flac_crc8</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>crc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <name><name>flac_crc8_table</name><index>[<expr><name>crc</name> <operator>^</operator> <operator>*</operator><name>data</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>crc</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>flac_crc16_table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x0000</literal></expr>, <expr><literal type="number">0x8005</literal></expr>, <expr><literal type="number">0x800f</literal></expr>, <expr><literal type="number">0x000a</literal></expr>, <expr><literal type="number">0x801b</literal></expr>, <expr><literal type="number">0x001e</literal></expr>, <expr><literal type="number">0x0014</literal></expr>, <expr><literal type="number">0x8011</literal></expr>,

<expr><literal type="number">0x8033</literal></expr>, <expr><literal type="number">0x0036</literal></expr>, <expr><literal type="number">0x003c</literal></expr>, <expr><literal type="number">0x8039</literal></expr>, <expr><literal type="number">0x0028</literal></expr>, <expr><literal type="number">0x802d</literal></expr>, <expr><literal type="number">0x8027</literal></expr>, <expr><literal type="number">0x0022</literal></expr>,

<expr><literal type="number">0x8063</literal></expr>, <expr><literal type="number">0x0066</literal></expr>, <expr><literal type="number">0x006c</literal></expr>, <expr><literal type="number">0x8069</literal></expr>, <expr><literal type="number">0x0078</literal></expr>, <expr><literal type="number">0x807d</literal></expr>, <expr><literal type="number">0x8077</literal></expr>, <expr><literal type="number">0x0072</literal></expr>,

<expr><literal type="number">0x0050</literal></expr>, <expr><literal type="number">0x8055</literal></expr>, <expr><literal type="number">0x805f</literal></expr>, <expr><literal type="number">0x005a</literal></expr>, <expr><literal type="number">0x804b</literal></expr>, <expr><literal type="number">0x004e</literal></expr>, <expr><literal type="number">0x0044</literal></expr>, <expr><literal type="number">0x8041</literal></expr>,

<expr><literal type="number">0x80c3</literal></expr>, <expr><literal type="number">0x00c6</literal></expr>, <expr><literal type="number">0x00cc</literal></expr>, <expr><literal type="number">0x80c9</literal></expr>, <expr><literal type="number">0x00d8</literal></expr>, <expr><literal type="number">0x80dd</literal></expr>, <expr><literal type="number">0x80d7</literal></expr>, <expr><literal type="number">0x00d2</literal></expr>,

<expr><literal type="number">0x00f0</literal></expr>, <expr><literal type="number">0x80f5</literal></expr>, <expr><literal type="number">0x80ff</literal></expr>, <expr><literal type="number">0x00fa</literal></expr>, <expr><literal type="number">0x80eb</literal></expr>, <expr><literal type="number">0x00ee</literal></expr>, <expr><literal type="number">0x00e4</literal></expr>, <expr><literal type="number">0x80e1</literal></expr>,

<expr><literal type="number">0x00a0</literal></expr>, <expr><literal type="number">0x80a5</literal></expr>, <expr><literal type="number">0x80af</literal></expr>, <expr><literal type="number">0x00aa</literal></expr>, <expr><literal type="number">0x80bb</literal></expr>, <expr><literal type="number">0x00be</literal></expr>, <expr><literal type="number">0x00b4</literal></expr>, <expr><literal type="number">0x80b1</literal></expr>,

<expr><literal type="number">0x8093</literal></expr>, <expr><literal type="number">0x0096</literal></expr>, <expr><literal type="number">0x009c</literal></expr>, <expr><literal type="number">0x8099</literal></expr>, <expr><literal type="number">0x0088</literal></expr>, <expr><literal type="number">0x808d</literal></expr>, <expr><literal type="number">0x8087</literal></expr>, <expr><literal type="number">0x0082</literal></expr>,

<expr><literal type="number">0x8183</literal></expr>, <expr><literal type="number">0x0186</literal></expr>, <expr><literal type="number">0x018c</literal></expr>, <expr><literal type="number">0x8189</literal></expr>, <expr><literal type="number">0x0198</literal></expr>, <expr><literal type="number">0x819d</literal></expr>, <expr><literal type="number">0x8197</literal></expr>, <expr><literal type="number">0x0192</literal></expr>,

<expr><literal type="number">0x01b0</literal></expr>, <expr><literal type="number">0x81b5</literal></expr>, <expr><literal type="number">0x81bf</literal></expr>, <expr><literal type="number">0x01ba</literal></expr>, <expr><literal type="number">0x81ab</literal></expr>, <expr><literal type="number">0x01ae</literal></expr>, <expr><literal type="number">0x01a4</literal></expr>, <expr><literal type="number">0x81a1</literal></expr>,

<expr><literal type="number">0x01e0</literal></expr>, <expr><literal type="number">0x81e5</literal></expr>, <expr><literal type="number">0x81ef</literal></expr>, <expr><literal type="number">0x01ea</literal></expr>, <expr><literal type="number">0x81fb</literal></expr>, <expr><literal type="number">0x01fe</literal></expr>, <expr><literal type="number">0x01f4</literal></expr>, <expr><literal type="number">0x81f1</literal></expr>,

<expr><literal type="number">0x81d3</literal></expr>, <expr><literal type="number">0x01d6</literal></expr>, <expr><literal type="number">0x01dc</literal></expr>, <expr><literal type="number">0x81d9</literal></expr>, <expr><literal type="number">0x01c8</literal></expr>, <expr><literal type="number">0x81cd</literal></expr>, <expr><literal type="number">0x81c7</literal></expr>, <expr><literal type="number">0x01c2</literal></expr>,

<expr><literal type="number">0x0140</literal></expr>, <expr><literal type="number">0x8145</literal></expr>, <expr><literal type="number">0x814f</literal></expr>, <expr><literal type="number">0x014a</literal></expr>, <expr><literal type="number">0x815b</literal></expr>, <expr><literal type="number">0x015e</literal></expr>, <expr><literal type="number">0x0154</literal></expr>, <expr><literal type="number">0x8151</literal></expr>,

<expr><literal type="number">0x8173</literal></expr>, <expr><literal type="number">0x0176</literal></expr>, <expr><literal type="number">0x017c</literal></expr>, <expr><literal type="number">0x8179</literal></expr>, <expr><literal type="number">0x0168</literal></expr>, <expr><literal type="number">0x816d</literal></expr>, <expr><literal type="number">0x8167</literal></expr>, <expr><literal type="number">0x0162</literal></expr>,

<expr><literal type="number">0x8123</literal></expr>, <expr><literal type="number">0x0126</literal></expr>, <expr><literal type="number">0x012c</literal></expr>, <expr><literal type="number">0x8129</literal></expr>, <expr><literal type="number">0x0138</literal></expr>, <expr><literal type="number">0x813d</literal></expr>, <expr><literal type="number">0x8137</literal></expr>, <expr><literal type="number">0x0132</literal></expr>,

<expr><literal type="number">0x0110</literal></expr>, <expr><literal type="number">0x8115</literal></expr>, <expr><literal type="number">0x811f</literal></expr>, <expr><literal type="number">0x011a</literal></expr>, <expr><literal type="number">0x810b</literal></expr>, <expr><literal type="number">0x010e</literal></expr>, <expr><literal type="number">0x0104</literal></expr>, <expr><literal type="number">0x8101</literal></expr>,

<expr><literal type="number">0x8303</literal></expr>, <expr><literal type="number">0x0306</literal></expr>, <expr><literal type="number">0x030c</literal></expr>, <expr><literal type="number">0x8309</literal></expr>, <expr><literal type="number">0x0318</literal></expr>, <expr><literal type="number">0x831d</literal></expr>, <expr><literal type="number">0x8317</literal></expr>, <expr><literal type="number">0x0312</literal></expr>,

<expr><literal type="number">0x0330</literal></expr>, <expr><literal type="number">0x8335</literal></expr>, <expr><literal type="number">0x833f</literal></expr>, <expr><literal type="number">0x033a</literal></expr>, <expr><literal type="number">0x832b</literal></expr>, <expr><literal type="number">0x032e</literal></expr>, <expr><literal type="number">0x0324</literal></expr>, <expr><literal type="number">0x8321</literal></expr>,

<expr><literal type="number">0x0360</literal></expr>, <expr><literal type="number">0x8365</literal></expr>, <expr><literal type="number">0x836f</literal></expr>, <expr><literal type="number">0x036a</literal></expr>, <expr><literal type="number">0x837b</literal></expr>, <expr><literal type="number">0x037e</literal></expr>, <expr><literal type="number">0x0374</literal></expr>, <expr><literal type="number">0x8371</literal></expr>,

<expr><literal type="number">0x8353</literal></expr>, <expr><literal type="number">0x0356</literal></expr>, <expr><literal type="number">0x035c</literal></expr>, <expr><literal type="number">0x8359</literal></expr>, <expr><literal type="number">0x0348</literal></expr>, <expr><literal type="number">0x834d</literal></expr>, <expr><literal type="number">0x8347</literal></expr>, <expr><literal type="number">0x0342</literal></expr>,

<expr><literal type="number">0x03c0</literal></expr>, <expr><literal type="number">0x83c5</literal></expr>, <expr><literal type="number">0x83cf</literal></expr>, <expr><literal type="number">0x03ca</literal></expr>, <expr><literal type="number">0x83db</literal></expr>, <expr><literal type="number">0x03de</literal></expr>, <expr><literal type="number">0x03d4</literal></expr>, <expr><literal type="number">0x83d1</literal></expr>,

<expr><literal type="number">0x83f3</literal></expr>, <expr><literal type="number">0x03f6</literal></expr>, <expr><literal type="number">0x03fc</literal></expr>, <expr><literal type="number">0x83f9</literal></expr>, <expr><literal type="number">0x03e8</literal></expr>, <expr><literal type="number">0x83ed</literal></expr>, <expr><literal type="number">0x83e7</literal></expr>, <expr><literal type="number">0x03e2</literal></expr>,

<expr><literal type="number">0x83a3</literal></expr>, <expr><literal type="number">0x03a6</literal></expr>, <expr><literal type="number">0x03ac</literal></expr>, <expr><literal type="number">0x83a9</literal></expr>, <expr><literal type="number">0x03b8</literal></expr>, <expr><literal type="number">0x83bd</literal></expr>, <expr><literal type="number">0x83b7</literal></expr>, <expr><literal type="number">0x03b2</literal></expr>,

<expr><literal type="number">0x0390</literal></expr>, <expr><literal type="number">0x8395</literal></expr>, <expr><literal type="number">0x839f</literal></expr>, <expr><literal type="number">0x039a</literal></expr>, <expr><literal type="number">0x838b</literal></expr>, <expr><literal type="number">0x038e</literal></expr>, <expr><literal type="number">0x0384</literal></expr>, <expr><literal type="number">0x8381</literal></expr>,

<expr><literal type="number">0x0280</literal></expr>, <expr><literal type="number">0x8285</literal></expr>, <expr><literal type="number">0x828f</literal></expr>, <expr><literal type="number">0x028a</literal></expr>, <expr><literal type="number">0x829b</literal></expr>, <expr><literal type="number">0x029e</literal></expr>, <expr><literal type="number">0x0294</literal></expr>, <expr><literal type="number">0x8291</literal></expr>,

<expr><literal type="number">0x82b3</literal></expr>, <expr><literal type="number">0x02b6</literal></expr>, <expr><literal type="number">0x02bc</literal></expr>, <expr><literal type="number">0x82b9</literal></expr>, <expr><literal type="number">0x02a8</literal></expr>, <expr><literal type="number">0x82ad</literal></expr>, <expr><literal type="number">0x82a7</literal></expr>, <expr><literal type="number">0x02a2</literal></expr>,

<expr><literal type="number">0x82e3</literal></expr>, <expr><literal type="number">0x02e6</literal></expr>, <expr><literal type="number">0x02ec</literal></expr>, <expr><literal type="number">0x82e9</literal></expr>, <expr><literal type="number">0x02f8</literal></expr>, <expr><literal type="number">0x82fd</literal></expr>, <expr><literal type="number">0x82f7</literal></expr>, <expr><literal type="number">0x02f2</literal></expr>,

<expr><literal type="number">0x02d0</literal></expr>, <expr><literal type="number">0x82d5</literal></expr>, <expr><literal type="number">0x82df</literal></expr>, <expr><literal type="number">0x02da</literal></expr>, <expr><literal type="number">0x82cb</literal></expr>, <expr><literal type="number">0x02ce</literal></expr>, <expr><literal type="number">0x02c4</literal></expr>, <expr><literal type="number">0x82c1</literal></expr>,

<expr><literal type="number">0x8243</literal></expr>, <expr><literal type="number">0x0246</literal></expr>, <expr><literal type="number">0x024c</literal></expr>, <expr><literal type="number">0x8249</literal></expr>, <expr><literal type="number">0x0258</literal></expr>, <expr><literal type="number">0x825d</literal></expr>, <expr><literal type="number">0x8257</literal></expr>, <expr><literal type="number">0x0252</literal></expr>,

<expr><literal type="number">0x0270</literal></expr>, <expr><literal type="number">0x8275</literal></expr>, <expr><literal type="number">0x827f</literal></expr>, <expr><literal type="number">0x027a</literal></expr>, <expr><literal type="number">0x826b</literal></expr>, <expr><literal type="number">0x026e</literal></expr>, <expr><literal type="number">0x0264</literal></expr>, <expr><literal type="number">0x8261</literal></expr>,

<expr><literal type="number">0x0220</literal></expr>, <expr><literal type="number">0x8225</literal></expr>, <expr><literal type="number">0x822f</literal></expr>, <expr><literal type="number">0x022a</literal></expr>, <expr><literal type="number">0x823b</literal></expr>, <expr><literal type="number">0x023e</literal></expr>, <expr><literal type="number">0x0234</literal></expr>, <expr><literal type="number">0x8231</literal></expr>,

<expr><literal type="number">0x8213</literal></expr>, <expr><literal type="number">0x0216</literal></expr>, <expr><literal type="number">0x021c</literal></expr>, <expr><literal type="number">0x8219</literal></expr>, <expr><literal type="number">0x0208</literal></expr>, <expr><literal type="number">0x820d</literal></expr>, <expr><literal type="number">0x8207</literal></expr>, <expr><literal type="number">0x0202</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>flac_crc16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>crc</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>byte</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>crc</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name><name>flac_crc16_table</name><index>[<expr><operator>(</operator><name>crc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <name>byte</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static uint16_t flac_crc16_undo(uint16_t crc, const uint8_t last_byte)

{

static const uint8_t flac_crc16_rev_table[256] = {

0x00, 0x7f, 0xff, 0x80, 0x7e, 0x01, 0x81, 0xfe,

0xfc, 0x83, 0x03, 0x7c, 0x82, 0xfd, 0x7d, 0x02,

0x78, 0x07, 0x87, 0xf8, 0x06, 0x79, 0xf9, 0x86,

0x84, 0xfb, 0x7b, 0x04, 0xfa, 0x85, 0x05, 0x7a,

0xf0, 0x8f, 0x0f, 0x70, 0x8e, 0xf1, 0x71, 0x0e,

0x0c, 0x73, 0xf3, 0x8c, 0x72, 0x0d, 0x8d, 0xf2,

0x88, 0xf7, 0x77, 0x08, 0xf6, 0x89, 0x09, 0x76,

0x74, 0x0b, 0x8b, 0xf4, 0x0a, 0x75, 0xf5, 0x8a,

0x60, 0x1f, 0x9f, 0xe0, 0x1e, 0x61, 0xe1, 0x9e,

0x9c, 0xe3, 0x63, 0x1c, 0xe2, 0x9d, 0x1d, 0x62,

0x18, 0x67, 0xe7, 0x98, 0x66, 0x19, 0x99, 0xe6,

0xe4, 0x9b, 0x1b, 0x64, 0x9a, 0xe5, 0x65, 0x1a,

0x90, 0xef, 0x6f, 0x10, 0xee, 0x91, 0x11, 0x6e,

0x6c, 0x13, 0x93, 0xec, 0x12, 0x6d, 0xed, 0x92,

0xe8, 0x97, 0x17, 0x68, 0x96, 0xe9, 0x69, 0x16,

0x14, 0x6b, 0xeb, 0x94, 0x6a, 0x15, 0x95, 0xea,

0xc0, 0xbf, 0x3f, 0x40, 0xbe, 0xc1, 0x41, 0x3e,

0x3c, 0x43, 0xc3, 0xbc, 0x42, 0x3d, 0xbd, 0xc2,

0xb8, 0xc7, 0x47, 0x38, 0xc6, 0xb9, 0x39, 0x46,

0x44, 0x3b, 0xbb, 0xc4, 0x3a, 0x45, 0xc5, 0xba,

0x30, 0x4f, 0xcf, 0xb0, 0x4e, 0x31, 0xb1, 0xce,

0xcc, 0xb3, 0x33, 0x4c, 0xb2, 0xcd, 0x4d, 0x32,

0x48, 0x37, 0xb7, 0xc8, 0x36, 0x49, 0xc9, 0xb6,

0xb4, 0xcb, 0x4b, 0x34, 0xca, 0xb5, 0x35, 0x4a,

0xa0, 0xdf, 0x5f, 0x20, 0xde, 0xa1, 0x21, 0x5e,

0x5c, 0x23, 0xa3, 0xdc, 0x22, 0x5d, 0xdd, 0xa2,

0xd8, 0xa7, 0x27, 0x58, 0xa6, 0xd9, 0x59, 0x26,

0x24, 0x5b, 0xdb, 0xa4, 0x5a, 0x25, 0xa5, 0xda,

0x50, 0x2f, 0xaf, 0xd0, 0x2e, 0x51, 0xd1, 0xae,

0xac, 0xd3, 0x53, 0x2c, 0xd2, 0xad, 0x2d, 0x52,

0x28, 0x57, 0xd7, 0xa8, 0x56, 0x29, 0xa9, 0xd6,

0xd4, 0xab, 0x2b, 0x54, 0xaa, 0xd5, 0x55, 0x2a,

};

uint8_t idx = flac_crc16_rev_table[crc &amp; 0xff];

return ((idx ^ last_byte) &lt;&lt; 8) | ((crc ^ flac_crc16_table[idx]) &gt;&gt; 8);

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Flush</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_INVALID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamEmpty</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>FLACStartcodeHelper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>p</name> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>end</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>memchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0xFF</literal></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>end</name> <operator>-</operator> <name>p</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>FLACStartcodeMatcher</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_pos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_startcode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_startcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>i_pos</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i</name> <operator>==</operator> <literal type="number">0xFF</literal></expr> </then><else>: <expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">0xFE</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF8</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Packetize</name><parameter_list>(<parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_header</name><index>[<expr><name>FLAC_HEADER_SIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>pp_block</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>pp_block</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>in</name> <operator>=</operator> <operator>*</operator><name>pp_block</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Flush</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>in</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><name>BLOCK_FLAG_CORRUPTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ProcessHeader</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"This stream uses too many audio channels (%d &gt; 8)"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>in</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_BytestreamPush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <switch>switch <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STATE_NOSYNC</name></expr>:</case>

<if_stmt><if>if<condition>(<expr><call><name>block_FindStartcodeFromOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>FLACStartcodeHelper</name></expr></argument>,

<argument><expr><name>FLACStartcodeMatcher</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SYNC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_SkipBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamFlush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>!=</operator> <name>STATE_SYNC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<case>case <expr><name>STATE_SYNC</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_HEADER</name></expr>;</expr_stmt>

<case>case <expr><name>STATE_HEADER</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>block_PeekBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>FLAC_HEADER_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>FLAC_ParseSyncInfo</name><argument_list>(<argument><expr><name>p_header</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>flac_crc8</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>headerinfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i_ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"emulated sync word"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_SkipByte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NEXT_SYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><name>STATE_NEXT_SYNC</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>block_FindStartcodeFromOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>FLACStartcodeHelper</name></expr></argument>,

<argument><expr><name>FLACStartcodeMatcher</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>pp_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <call><name>block_BytestreamRemaining</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_GET_DATA</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>nextheader</name><index>[<expr><name>FLAC_HEADER_SIZE_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>block_PeekOffsetBytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument>,

<argument><expr><name>nextheader</name></expr></argument>, <argument><expr><name>FLAC_HEADER_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>flac_header_info</name></name></type> <name>dummy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FLAC_ParseSyncInfo</name><argument_list>(<argument><expr><name>nextheader</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_GET_DATA</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block>

<case>case <expr><name>STATE_GET_DATA</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>&lt;</operator> <name>FLAC_FRAME_SIZE_MIN</name> <operator>||</operator>

<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>min_framesize</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NEXT_SYNC</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>max_framesize</name></name> <operator>&gt;</operator> <name>FLAC_FRAME_SIZE_MIN</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>max_framesize</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_SkipBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>FLAC_HEADER_SIZE_MAX</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamFlush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_buf</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_min_alloc</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_frame_size</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument>, <argument><expr><name>i_min_alloc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_realloc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buf</name></name> <operator>=</operator> <name>i_min_alloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_PeekOffsetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>flac_crc16</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>stream_crc</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>stream_crc</name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>flac_crc16</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <call><name>flac_crc16</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name>pp_block</name></expr> ?</condition><then> <expr><name>STATE_NOSYNC</name></expr> </then><else>: <expr><name>STATE_NEXT_SYNC</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SEND_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_SkipBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamFlush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_frame_size</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>crc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>block_BytestreamRemaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_SEND_DATA</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>STATE_SEND_DATA</name></expr>:</case>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>headerinfo</name><operator>.</operator><name>i_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>headerinfo</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>pi_channels_maps</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream_info</name><operator>.</operator><name>channels</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&gt;</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>headerinfo</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>block_heap_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>out</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>headerinfo</name><operator>.</operator><name>i_frame_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>out</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>out</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>pp_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <call><name>block_BytestreamPop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></switch></block_content></block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_FLAC</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_stream_info</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_last_frame_size</name></name> <operator>=</operator> <name>FLAC_FRAME_SIZE_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>headerinfo</name><operator>.</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_buf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_FLAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_packetize</name></name> <operator>=</operator> <name>Packetize</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_flush</name></name> <operator>=</operator> <name>Flush</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec</name><operator>-&gt;</operator><name>pf_get_cc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name> <init>= <expr><operator>(</operator><name>decoder_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_dec</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_BytestreamRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
