<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\h264_slice.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_slice.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_nal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_ep3b.h"</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>h264_decode_slice</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier> <name>get_sps_pps</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>h264_picture_parameter_set_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>h264_slice_t</name> <modifier>*</modifier></type><name>p_slice</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_slice_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>h264_slice_init</name><argument_list>( <argument><expr><name>p_slice</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>hxxx_bsfw_ep3b_ctx_s</name></name></type> <name>bsctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>hxxx_bsfw_ep3b_ctx_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init_custom</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hxxx_bsfw_ep3b_callbacks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bsctx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_nal_ref_idc</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_nal_type</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_slice_type</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>i_slice_type</name> <operator>%</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>=</operator> <name>i_nal_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_ref_idc</name></name> <operator>=</operator> <name>i_nal_ref_idc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_pic_parameter_set_id</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_pic_parameter_set_id</name></name> <operator>&gt;</operator> <name>H264_PPS_ID_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>h264_picture_parameter_set_t</name> <modifier>*</modifier></type><name>p_pps</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>get_sps_pps</name><argument_list>( <argument><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_pic_parameter_set_id</name></name></expr></argument>, <argument><expr><name>priv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sps</name> <operator>||</operator> <operator>!</operator><name>p_pps</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_frame_num</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_frame_num</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_bottom_field_flag</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>==</operator> <name>H264_NAL_SLICE_IDR</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_idr_pic_id</name></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_pic_order_cnt_lsb</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_pic_order_cnt_lsb</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_pic_order_present_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_slice</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt_bottom</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>i_delta_pic_order_always_zero_flag</name></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt0</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_pic_order_present_flag</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_slice</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt1</name></name> <operator>=</operator> <call><name>bs_read_se</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pps</name><operator>-&gt;</operator><name>i_redundant_pic_present_flag</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>num_ref_idx_l01_active_minus1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr> , <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_slice_type</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_slice_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator>

<name>i_slice_type</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator>

<name>i_slice_type</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">6</literal></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>num_ref_idx_l01_active_minus1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_slice_type</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>num_ref_idx_l01_active_minus1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_ref_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>has_mmco5</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_mvc</name> <init>= <expr><operator>(</operator><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>==</operator> <literal type="number">20</literal> <operator>||</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>==</operator> <literal type="number">21</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_slice_type</name> <operator>%</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_slice_type</name> <operator>%</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_slice_type</name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mod</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>mod</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>mod</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <operator>(</operator> <name>b_mvc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>mod</name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator> <name>mod</name> <operator>==</operator> <literal type="number">5</literal><operator>)</operator> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block>

while<condition>( <expr><name>mod</name> <operator>!=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>bs_remain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition>;</do>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">5</literal> <operator>||</operator> 

<name>i_slice_type</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">8</literal> <operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_slice_type</name> <operator>==</operator> <literal type="number">6</literal> <operator>)</operator> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>b_separate_colour_planes_flag</name></name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_num_layers</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>i_slice_type</name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_num_layers</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><name><name>num_ref_idx_l01_active_minus1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>bs_read_se</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read_se</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>b_separate_colour_planes_flag</name></name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>bs_read_se</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read_se</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read_se</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_read_se</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>!=</operator> <literal type="number">5</literal></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mmco</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>mmco</name> <operator>=</operator> <call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>mmco</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>mmco</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name>mmco</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name>mmco</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>mmco</name> <operator>==</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name>mmco</name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read_ue</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name>mmco</name> <operator>==</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_slice</name><operator>-&gt;</operator><name>has_mmco5</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break> 

</block_content>}</block></if></if_stmt>

</block_content>}</block>

while<condition>( <expr><name>mmco</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>;</do>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>h264_compute_poc</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>h264_slice_t</name> <modifier>*</modifier></type><name>p_slice</name></decl></parameter>, <parameter><decl><type><name>h264_poc_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_PictureOrderCount</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_tFOC</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_bFOC</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_tFOC</name> <operator>=</operator> <operator>*</operator><name>p_bFOC</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>maxPocLSB</name> <init>= <expr><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_pic_order_cnt_lsb</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>==</operator> <name>H264_NAL_SLICE_IDR</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevPicOrderCnt</name><operator>.</operator><name>lsb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevPicOrderCnt</name><operator>.</operator><name>msb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevRefPictureHasMMCO5</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevPicOrderCnt</name><operator>.</operator><name>msb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>prevRefPictureIsBottomField</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevPicOrderCnt</name><operator>.</operator><name>lsb</name></name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>prevRefPictureTFOC</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevPicOrderCnt</name><operator>.</operator><name>lsb</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pocMSB</name> <init>= <expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevPicOrderCnt</name><operator>.</operator><name>msb</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>orderDiff</name> <init>= <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_pic_order_cnt_lsb</name></name> <operator>-</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>prevPicOrderCnt</name><operator>.</operator><name>lsb</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>orderDiff</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>-</operator><name>orderDiff</name> <operator>&gt;=</operator> <name>maxPocLSB</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pocMSB</name> <operator>+=</operator> <name>maxPocLSB</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>orderDiff</name> <operator>&gt;</operator> <name>maxPocLSB</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pocMSB</name> <operator>-=</operator> <name>maxPocLSB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_tFOC</name> <operator>=</operator> <operator>*</operator><name>p_bFOC</name> <operator>=</operator> <name>pocMSB</name> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_pic_order_cnt_lsb</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_bFOC</name> <operator>+=</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt_bottom</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_ref_idc</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevRefPictureIsBottomField</name></name> <operator>=</operator> <operator>(</operator><name><name>p_slice</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name> <operator>&amp;&amp;</operator>

<name><name>p_slice</name><operator>-&gt;</operator><name>i_bottom_field_flag</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevRefPictureHasMMCO5</name></name> <operator>=</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>has_mmco5</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevRefPictureTFOC</name></name> <operator>=</operator> <operator>*</operator><name>p_tFOC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevPicOrderCnt</name><operator>.</operator><name>lsb</name></name> <operator>=</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_pic_order_cnt_lsb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevPicOrderCnt</name><operator>.</operator><name>msb</name></name> <operator>=</operator> <name>pocMSB</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>maxFrameNum</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>p_sps</name><operator>-&gt;</operator><name>i_log2_max_frame_num</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>frameNumOffset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>expectedPicOrderCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>==</operator> <name>H264_NAL_SLICE_IDR</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frameNumOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevFrameNum</name></name> <operator>&gt;</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_frame_num</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frameNumOffset</name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>prevFrameNumOffset</name></name> <operator>+</operator> <name>maxFrameNum</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>frameNumOffset</name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>prevFrameNumOffset</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>absFrameNum</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_num_ref_frames_in_pic_order_cnt_cycle</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>absFrameNum</name> <operator>=</operator> <name>frameNumOffset</name> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_frame_num</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>absFrameNum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_ref_idc</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>absFrameNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>absFrameNum</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>absFrameNum</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>expectedDeltaPerPicOrderCntCycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sps</name><operator>-&gt;</operator><name>i_num_ref_frames_in_pic_order_cnt_cycle</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>expectedDeltaPerPicOrderCntCycle</name> <operator>+=</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>offset_for_ref_frame</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>unsigned</name></type> <name>picOrderCntCycleCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>frameNumInPicOrderCntCycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_num_ref_frames_in_pic_order_cnt_cycle</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>picOrderCntCycleCnt</name> <operator>=</operator> <operator>(</operator> <name>absFrameNum</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>i_num_ref_frames_in_pic_order_cnt_cycle</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frameNumInPicOrderCntCycle</name> <operator>=</operator> <operator>(</operator> <name>absFrameNum</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>%</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>i_num_ref_frames_in_pic_order_cnt_cycle</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>expectedPicOrderCnt</name> <operator>=</operator> <name>picOrderCntCycleCnt</name> <operator>*</operator> <name>expectedDeltaPerPicOrderCntCycle</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>frameNumInPicOrderCntCycle</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>expectedPicOrderCnt</name> <operator>=</operator> <name>expectedPicOrderCnt</name> <operator>+</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>offset_for_ref_frame</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_ref_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>expectedPicOrderCnt</name> <operator>=</operator> <name>expectedPicOrderCnt</name> <operator>+</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>offset_for_non_ref_pic</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_tFOC</name> <operator>=</operator> <name>expectedPicOrderCnt</name> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt0</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_slice</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_bFOC</name> <operator>=</operator> <operator>*</operator><name>p_tFOC</name> <operator>+</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>offset_for_top_to_bottom_field</name></name> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt1</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_bottom_field_flag</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_bFOC</name> <operator>=</operator> <name>expectedPicOrderCnt</name> <operator>+</operator> <name><name>p_sps</name><operator>-&gt;</operator><name>offset_for_top_to_bottom_field</name></name> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_delta_pic_order_cnt0</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sps</name><operator>-&gt;</operator><name>i_pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tempPicOrderCnt</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_type</name></name> <operator>==</operator> <name>H264_NAL_SLICE_IDR</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tempPicOrderCnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_nal_ref_idc</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tempPicOrderCnt</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <name>frameNumOffset</name> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_frame_num</name></name> <operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tempPicOrderCnt</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <name>frameNumOffset</name> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_frame_num</name></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_bFOC</name> <operator>=</operator> <operator>*</operator><name>p_tFOC</name> <operator>=</operator> <name>tempPicOrderCnt</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevFrameNum</name></name> <operator>=</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_frame_num</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>has_mmco5</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevFrameNumOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>prevFrameNumOffset</name></name> <operator>=</operator> <name>frameNumOffset</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_slice</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><operator>*</operator><name>p_PictureOrderCount</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><operator>*</operator><name>p_bFOC</name></expr></argument>, <argument><expr><operator>*</operator><name>p_tFOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else 

if <condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_bottom_field_flag</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_PictureOrderCount</name> <operator>=</operator> <operator>*</operator><name>p_bFOC</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_PictureOrderCount</name> <operator>=</operator> <operator>*</operator><name>p_tFOC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>h264_infer_pic_struct</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>h264_slice_t</name> <modifier>*</modifier></type><name>p_slice</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_pic_struct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tFOC</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bFOC</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>b_pic_struct_present_flag</name></name> <operator>||</operator> <name>i_pic_struct</name> <operator>&gt;=</operator> <literal type="number">9</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_slice</name><operator>-&gt;</operator><name>i_field_pic_flag</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pic_struct</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_slice</name><operator>-&gt;</operator><name>i_bottom_field_flag</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>tFOC</name> <operator>==</operator> <name>bFOC</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pic_struct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>tFOC</name> <operator>&lt;</operator> <name>bFOC</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pic_struct</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pic_struct</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_pic_struct</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name></type> <name>h264_get_num_ts</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>h264_sequence_parameter_set_t</name> <modifier>*</modifier></type><name>p_sps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>h264_slice_t</name> <modifier>*</modifier></type><name>p_slice</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_pic_struct</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tFOC</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bFOC</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>i_pic_struct</name> <operator>=</operator> <call><name>h264_infer_pic_struct</name><argument_list>( <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name>p_slice</name></expr></argument>, <argument><expr><name>i_pic_struct</name></expr></argument>, <argument><expr><name>tFOC</name></expr></argument>, <argument><expr><name>bFOC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>rgi_numclock</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name><name>rgi_numclock</name><index>[ <expr><name>i_pic_struct</name></expr> ]</index></name></expr>;</return>

</block_content>}</block></function>

</unit>
