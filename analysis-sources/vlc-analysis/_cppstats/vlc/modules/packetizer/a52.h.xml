<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\a52.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_A52_MIN_HEADER_SIZE</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_A52_EAC3_BSI_SIZE</name></cpp:macro> <cpp:value>((532 + 7)/8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_A52_EAC3_HEADER_SIZE</name></cpp:macro> <cpp:value>(VLC_A52_EAC3_BSI_SIZE + 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_A52_PROFILE_EAC3_DEPENDENT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<struct>struct <name>vlc_a52_bitstream_info</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_fscod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_frmsizcod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bsmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_acmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_lfeon</name></decl>;</decl_stmt>

<union>union

<block>{

<struct>struct <block>{

<enum>enum <block>{

<decl><name>EAC3_STRMTYP_INDEPENDENT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>EAC3_STRMTYP_DEPENDENT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>EAC3_STRMTYP_AC3_CONVERT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>EAC3_STRMTYP_RESERVED</name></decl>,

}</block> <decl><name>strmtyp</name></decl>;</enum>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_frmsiz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_fscod2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_numblkscod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_substreamid</name></decl>;</decl_stmt>

}</block> <decl><name>eac3</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_dsurmod</name></decl>;</decl_stmt>

}</block> <decl><name>ac3</name></decl>;</struct>

}</block>;</union>

}</block>;</struct>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_eac3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_channels_conf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_chan_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_a52_bitstream_info</name></name></type> <name>bs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_blocks_per_sync_frame</name></decl>;</decl_stmt>

}</block></struct></type> <name>vlc_a52_header_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_a52_ParseAc3BitstreamInfo</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vlc_a52_bitstream_info</name></name> <modifier>*</modifier></type><name>bs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_fscod</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_fscod</name></name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_frmsizcod</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_frmsizcod</name></name> <operator>&gt;=</operator> <literal type="number">38</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_bsid</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_bsmod</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>&amp;</operator> <literal type="number">0x1</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>!=</operator> <literal type="number">0x1</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>&amp;</operator> <literal type="number">0x4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>ac3</name><operator>.</operator><name>i_dsurmod</name></name> <operator>=</operator> <ternary><condition><expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>==</operator> <literal type="number">0x2</literal></expr> ?</condition><then> <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_lfeon</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_a52_header_ParseAc3</name><parameter_list>( <parameter><decl><type><name>vlc_a52_header_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>p_acmod</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>pi_fscod_samplerates</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_a52_ParseAc3BitstreamInfo</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_header</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, 

<argument><expr><name>VLC_A52_MIN_HEADER_SIZE</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>ppi_frmsizcod_fscod_sizes</name><index>[]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">96</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">96</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">120</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">80</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">120</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">80</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">144</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">96</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">144</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">96</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">168</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">112</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">168</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">112</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">192</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">192</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">128</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">240</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">160</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">240</literal></expr>, <expr><literal type="number">175</literal></expr>, <expr><literal type="number">160</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">288</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">192</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">288</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">192</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">336</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">224</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">336</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">224</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">384</literal></expr>, <expr><literal type="number">278</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">384</literal></expr>, <expr><literal type="number">279</literal></expr>, <expr><literal type="number">256</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">480</literal></expr>, <expr><literal type="number">348</literal></expr>, <expr><literal type="number">320</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">480</literal></expr>, <expr><literal type="number">349</literal></expr>, <expr><literal type="number">320</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">576</literal></expr>, <expr><literal type="number">417</literal></expr>, <expr><literal type="number">384</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">576</literal></expr>, <expr><literal type="number">418</literal></expr>, <expr><literal type="number">384</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">672</literal></expr>, <expr><literal type="number">487</literal></expr>, <expr><literal type="number">448</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">672</literal></expr>, <expr><literal type="number">488</literal></expr>, <expr><literal type="number">448</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">768</literal></expr>, <expr><literal type="number">557</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">768</literal></expr>, <expr><literal type="number">558</literal></expr>, <expr><literal type="number">512</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">960</literal></expr>, <expr><literal type="number">696</literal></expr>, <expr><literal type="number">640</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">960</literal></expr>, <expr><literal type="number">697</literal></expr>, <expr><literal type="number">640</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1152</literal></expr>, <expr><literal type="number">835</literal></expr>, <expr><literal type="number">768</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1152</literal></expr>, <expr><literal type="number">836</literal></expr>, <expr><literal type="number">768</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1344</literal></expr>, <expr><literal type="number">975</literal></expr>, <expr><literal type="number">896</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1344</literal></expr>, <expr><literal type="number">976</literal></expr>, <expr><literal type="number">896</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1536</literal></expr>, <expr><literal type="number">1114</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1536</literal></expr>, <expr><literal type="number">1115</literal></expr>, <expr><literal type="number">1024</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1728</literal></expr>, <expr><literal type="number">1253</literal></expr>, <expr><literal type="number">1152</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1728</literal></expr>, <expr><literal type="number">1254</literal></expr>, <expr><literal type="number">1152</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1393</literal></expr>, <expr><literal type="number">1280</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1920</literal></expr>, <expr><literal type="number">1394</literal></expr>, <expr><literal type="number">1280</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>pi_frmsizcod_bitrates</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>,

<expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">112</literal></expr>,

<expr><literal type="number">128</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">224</literal></expr>,

<expr><literal type="number">256</literal></expr>, <expr><literal type="number">320</literal></expr>, <expr><literal type="number">384</literal></expr>, <expr><literal type="number">448</literal></expr>,

<expr><literal type="number">512</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">640</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_a52_bitstream_info</name></name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><operator>&amp;</operator><name><name>p_header</name><operator>-&gt;</operator><name>bs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_channels_conf</name></name> <operator>=</operator> <name><name>p_acmod</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>ac3</name><operator>.</operator><name>i_dsurmod</name></name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>|=</operator> <name>AOUT_CHANMODE_DOLBYSTEREO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>|=</operator> <name>AOUT_CHANMODE_DUALMONO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_lfeon</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_channels_conf</name></name> <operator>|=</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <call><name>vlc_popcount</name><argument_list>(<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_channels_conf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_rate_shift</name> <init>= <expr><call><name>VLC_CLIP</name><argument_list>(<argument><expr><name><name>bs</name><operator>-&gt;</operator><name>i_bsid</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <operator>(</operator><name><name>pi_frmsizcod_bitrates</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>i_frmsizcod</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator>

<operator>&gt;&gt;</operator> <name>i_rate_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>pi_fscod_samplerates</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>i_fscod</name></name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>i_rate_shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name><name>ppi_frmsizcod_fscod_sizes</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>i_frmsizcod</name></name></expr>]</index>

<index>[<expr><literal type="number">2</literal> <operator>-</operator> <name><name>bs</name><operator>-&gt;</operator><name>i_fscod</name></name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_blocks_per_sync_frame</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>i_blocks_per_sync_frame</name></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>b_eac3</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_a52_ParseEac3BitstreamInfo</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vlc_a52_bitstream_info</name></name> <modifier>*</modifier></type><name>bs</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>strmtyp</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_substreamid</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_frmsiz</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_frmsiz</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_fscod</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_fscod</name></name> <operator>==</operator> <literal type="number">0x03</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_fscod2</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_fscod2</name></name> <operator>==</operator> <literal type="number">0x03</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_numblkscod</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_numblkscod</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_lfeon</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_bsid</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_buf</name> <operator>&lt;=</operator> <name>VLC_A52_MIN_HEADER_SIZE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_bsmod</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>strmtyp</name></name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>&gt;</operator> <literal type="number">0x02</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_lfeon</name></name> <operator>&amp;&amp;</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>strmtyp</name></name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>(<expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_mixdef</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_mixdef</name> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if<condition>( <expr><name>i_mixdef</name> <operator>==</operator> <literal type="number">0x02</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if<condition>( <expr><name>i_mixdef</name> <operator>==</operator> <literal type="number">0x03</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>mixdeflen</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>mixdeflen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>bs_align</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>&lt;</operator> <literal type="number">0x02</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>==</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>blkspersyncframe</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal><operator>+</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>nb</name> <init>= <expr><name><name>blkspersyncframe</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_numblkscod</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>nb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_numblkscod</name></name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_bsmod</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>bs</name><operator>-&gt;</operator><name>i_bsmod</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_a52_header_ParseEac3</name><parameter_list>( <parameter><decl><type><name>vlc_a52_header_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>p_acmod</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <modifier>*</modifier></type><name>pi_fscod_samplerates</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_a52_ParseEac3BitstreamInfo</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_header</name><operator>-&gt;</operator><name>bs</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, 

<argument><expr><name>VLC_A52_MIN_HEADER_SIZE</name> <operator>-</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>vlc_a52_bitstream_info</name></name> <modifier>*</modifier></type><name>bs</name> <init>= <expr><operator>&amp;</operator><name><name>p_header</name><operator>-&gt;</operator><name>bs</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_frmsiz</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_fscod</name></name> <operator>==</operator> <literal type="number">0x03</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>pi_fscod_samplerates</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_fscod2</name></name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_blocks_per_sync_frame</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_numblkscod</name> <index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">6</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>pi_fscod_samplerates</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>i_fscod</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_blocks_per_sync_frame</name></name> <operator>=</operator> <name><name>pi_numblkscod</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>eac3</name><operator>.</operator><name>i_numblkscod</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_channels_conf</name></name> <operator>=</operator> <name><name>p_acmod</name><index>[<expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>|=</operator> <name>AOUT_CHANMODE_DUALMONO</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>bs</name><operator>-&gt;</operator><name>i_lfeon</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_channels_conf</name></name> <operator>|=</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_channels</name></name> <operator>=</operator> <call><name>vlc_popcount</name><argument_list>( <argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_channels_conf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>p_header</name><operator>-&gt;</operator><name>i_size</name></name> <operator>*</operator> <name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name>

<operator>/</operator> <operator>(</operator><name><name>p_header</name><operator>-&gt;</operator><name>i_blocks_per_sync_frame</name></name> <operator>*</operator> <literal type="number">256</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>i_blocks_per_sync_frame</name></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>b_eac3</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vlc_a52_header_Parse</name><parameter_list>( <parameter><decl><type><name>vlc_a52_header_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>p_acmod</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>AOUT_CHANS_2_0</name></expr>,

<expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHANS_2_0</name></expr>,

<expr><name>AOUT_CHANS_3_0</name></expr>,

<expr><name>AOUT_CHANS_FRONT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name></expr>, 

<expr><name>AOUT_CHANS_FRONT</name> <operator>|</operator> <name>AOUT_CHANS_CENTER</name></expr>, 

<expr><name>AOUT_CHANS_4_0</name></expr>,

<expr><name>AOUT_CHANS_5_0</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>pi_fscod_samplerates</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">48000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">32000</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <name>VLC_A52_MIN_HEADER_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0b</literal> <operator>||</operator> <name><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x77</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bsid</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>bsid</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlc_a52_header_ParseAc3</name><argument_list>( <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>,

<argument><expr><name>p_acmod</name></expr></argument>, <argument><expr><name>pi_fscod_samplerates</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>bsid</name> <operator>&lt;=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlc_a52_header_ParseEac3</name><argument_list>( <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>,

<argument><expr><name>p_acmod</name></expr></argument>, <argument><expr><name>pi_fscod_samplerates</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

</unit>
