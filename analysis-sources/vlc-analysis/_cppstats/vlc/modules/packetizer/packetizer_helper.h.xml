<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\packetizer_helper.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<enum>enum

<block>{

<decl><name>STATE_NOSYNC</name></decl>,

<decl><name>STATE_SYNC</name></decl>,

<decl><name>STATE_HEADER</name></decl>,

<decl><name>STATE_NEXT_SYNC</name></decl>,

<decl><name>STATE_GET_DATA</name></decl>,

<decl><name>STATE_SEND_DATA</name></decl>,

<decl><name>STATE_CUSTOM_FIRST</name></decl>,

}</block>;</enum>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>packetizer_reset_t</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_flush</name></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>block_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>packetizer_parse_t</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_ts_used</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>block_t</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>packetizer_drain_t</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>packetizer_validate_t</name>)<parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_bytestream_t</name></type> <name>bytestream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_startcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_startcode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_startcode_helper_t</name></type> <name>pf_startcode_helper</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_au_prepend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_au_prepend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_au_min_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>packetizer_reset_t</name></type> <name>pf_reset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>packetizer_parse_t</name></type> <name>pf_parse</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>packetizer_validate_t</name></type> <name>pf_validate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>packetizer_drain_t</name></type> <name>pf_drain</name></decl>;</decl_stmt>

}</block></struct></type> <name>packetizer_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>packetizer_Init</name><parameter_list>( <parameter><decl><type><name>packetizer_t</name> <modifier>*</modifier></type><name>p_pack</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_startcode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_startcode</name></decl></parameter>,

<parameter><decl><type><name>block_startcode_helper_t</name></type> <name>pf_start_helper</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_au_prepend</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_au_prepend</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_au_min_size</name></decl></parameter>,

<parameter><decl><type><name>packetizer_reset_t</name></type> <name>pf_reset</name></decl></parameter>,

<parameter><decl><type><name>packetizer_parse_t</name></type> <name>pf_parse</name></decl></parameter>,

<parameter><decl><type><name>packetizer_validate_t</name></type> <name>pf_validate</name></decl></parameter>,

<parameter><decl><type><name>packetizer_drain_t</name></type> <name>pf_drain</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_private</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_au_prepend</name></name> <operator>=</operator> <name>i_au_prepend</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_au_prepend</name></name> <operator>=</operator> <name>p_au_prepend</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_au_min_size</name></name> <operator>=</operator> <name>i_au_min_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_startcode</name></name> <operator>=</operator> <name>i_startcode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_startcode</name></name> <operator>=</operator> <name>p_startcode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>pf_startcode_helper</name></name> <operator>=</operator> <name>pf_start_helper</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>pf_reset</name></name> <operator>=</operator> <name>pf_reset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>pf_parse</name></name> <operator>=</operator> <name>pf_parse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>pf_validate</name></name> <operator>=</operator> <name>pf_validate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>pf_drain</name></name> <operator>=</operator> <name>pf_drain</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_private</name></name> <operator>=</operator> <name>p_private</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>packetizer_Clean</name><parameter_list>( <parameter><decl><type><name>packetizer_t</name> <modifier>*</modifier></type><name>p_pack</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>block_BytestreamRelease</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>packetizer_Flush</name><parameter_list>( <parameter><decl><type><name>packetizer_t</name> <modifier>*</modifier></type><name>p_pack</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamEmpty</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_pack</name><operator>-&gt;</operator><name>pf_reset</name></name><argument_list>( <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_private</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>packetizer_PacketizeBlock</name><parameter_list>( <parameter><decl><type><name>packetizer_t</name> <modifier>*</modifier></type><name>p_pack</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>pp_block</name> <operator>)</operator></expr> ?</condition><then> <expr><operator>*</operator><name>pp_block</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>&amp;&amp;</operator> <call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><operator>(</operator><name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_drained</name> <init>= <expr><call><name>packetizer_PacketizeBlock</name><argument_list>( <argument><expr><name>p_pack</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_drained</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_drained</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamEmpty</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>p_pack</name><operator>-&gt;</operator><name>pf_reset</name></name><argument_list>( <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_private</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_BytestreamPush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_used_ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>STATE_NOSYNC</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>block_FindStartcodeFromOffset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument>,

<argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_startcode</name></name></expr></argument>, <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_startcode</name></name></expr></argument>,

<argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>pf_startcode_helper</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NEXT_SYNC</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_SkipBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamFlush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name> <operator>!=</operator> <name>STATE_NEXT_SYNC</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<case>case <expr><name>STATE_NEXT_SYNC</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>block_FindStartcodeFromOffset</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument>,

<argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_startcode</name></name></expr></argument>, <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_startcode</name></name></expr></argument>,

<argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>pf_startcode_helper</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>pp_block</name> <operator>||</operator> <operator>!</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_chain</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <call><name>block_BytestreamRemaining</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_pack</name><operator>-&gt;</operator><name>i_startcode</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_AU_END</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_BytestreamFlush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_bytestream</name> <init>= <expr><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name><operator>.</operator><name>p_block</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>+</operator> <name><name>p_pack</name><operator>-&gt;</operator><name>i_au_prepend</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block_bytestream</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block_bytestream</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_block_bytestream</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_AU_END</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>p_block_bytestream</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_AU_END</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_GetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pic</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_au_prepend</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name><name>p_pack</name><operator>-&gt;</operator><name>i_au_prepend</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_au_prepend</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_pic</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_au_prepend</name></name></expr></argument>, <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_au_prepend</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pic</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name><name>p_pack</name><operator>-&gt;</operator><name>i_au_min_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_pic</name> <operator>=</operator> <call><name><name>p_pack</name><operator>-&gt;</operator><name>pf_parse</name></name><argument_list>( <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_private</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_used_ts</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_used_ts</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block_bytestream</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block_bytestream</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>p_pack</name><operator>-&gt;</operator><name>pf_validate</name></name><argument_list>( <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_private</name></name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <call><name>block_BytestreamPop</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<return>return <expr><name>p_pic</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>packetizer_Packetize</name><parameter_list>( <parameter><decl><type><name>packetizer_t</name> <modifier>*</modifier></type><name>p_pack</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_out</name> <init>= <expr><call><name>packetizer_PacketizeBlock</name><argument_list>( <argument><expr><name>p_pack</name></expr></argument>, <argument><expr><name>pp_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_out</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_out</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_block</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_pack</name><operator>-&gt;</operator><name>pf_drain</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <call><name><name>p_pack</name><operator>-&gt;</operator><name>pf_drain</name></name><argument_list>( <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_private</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_out</name> <operator>&amp;&amp;</operator> <call><name><name>p_pack</name><operator>-&gt;</operator><name>pf_validate</name></name><argument_list>( <argument><expr><name><name>p_pack</name><operator>-&gt;</operator><name>p_private</name></name></expr></argument>, <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_out</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>packetizer_Header</name><parameter_list>( <parameter><decl><type><name>packetizer_t</name> <modifier>*</modifier></type><name>p_pack</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_header</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_init</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_header</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_init</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_init</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>i_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>p_pic</name> <operator>=</operator> <call><name>packetizer_Packetize</name><argument_list>( <argument><expr><name>p_pack</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_init</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while> 

<while>while<condition>( <expr><operator>(</operator> <name>p_pic</name> <operator>=</operator> <call><name>packetizer_Packetize</name><argument_list>( <argument><expr><name>p_pack</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_state</name></name> <operator>=</operator> <name>STATE_NOSYNC</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_BytestreamEmpty</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pack</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pack</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
