<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\hxxx_nal.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"startcode_helper.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>annexb_startcode4</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>annexb_startcode3</name></cpp:macro> <cpp:value>(&amp;annexb_startcode4[1])</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>hxxx_strip_AnnexB_startcode</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>bitflow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>*</operator><name>pp_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name> <init>= <expr><operator>*</operator><name>pi_data</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_data</name> <operator>&amp;&amp;</operator> <name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>bitflow</name> <operator>=</operator> <operator>(</operator><name>bitflow</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>!</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>bitflow</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>bitflow</name> <operator>&amp;</operator> <literal type="number">0x06</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x06</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_data</name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_data</name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_head</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>hxxx_iterator_ctx_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>hxxx_iterator_init</name><parameter_list>( <parameter><decl><type><name>hxxx_iterator_ctx_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>=</operator> <name>p_data</name> <operator>+</operator> <name>i_data</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_popcount</name><argument_list>(<argument><expr><name>i_nal_length_size</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_nal_length_size</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>=</operator> <name>i_nal_length_size</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>hxxx_iterate_next</name><parameter_list>( <parameter><decl><type><name>hxxx_iterator_ctx_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_nal_length_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>-</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>&lt;</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>i_nal_length_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_nal_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>i_nal_length_size</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_nal_size</name> <operator>=</operator> <operator>(</operator><name>i_nal_size</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>*</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>i_nal_size</name> <operator>&gt;</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>p_tail</name></name> <operator>-</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_start</name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>i_nal_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>+=</operator> <name>i_nal_size</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>hxxx_annexb_iterate_next</name><parameter_list>( <parameter><decl><type><name>hxxx_iterator_ctx_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_start</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <call><name>startcode_FindAnnexB</name><argument_list>( <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr></argument>, <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_tail</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><call><name>startcode_FindAnnexB</name><argument_list>( <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_tail</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_end</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_end</name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_tail</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name>p_end</name> <operator>&gt;</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>&amp;&amp;</operator> <name><name>p_end</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_end</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>pp_start</name> <operator>=</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>p_end</name> <operator>-</operator> <name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ctx</name><operator>-&gt;</operator><name>p_head</name></name> <operator>=</operator> <name>p_end</name></expr>;</expr_stmt>

<return>return <expr><call><name>hxxx_strip_AnnexB_startcode</name><argument_list>( <argument><expr><name>pp_start</name></expr></argument>, <argument><expr><name>pi_size</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>block_t</name> <modifier>*</modifier></type><name>hxxx_AnnexB_to_xVC</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter> )</parameter_list>;</function_decl>

</unit>
