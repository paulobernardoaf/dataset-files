<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\hxxx_common.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_block.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hxxx_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../codec/cc.h"</cpp:file></cpp:include>

<struct>struct <name>cc_storage_t</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cc_data_t</name></type> <name>current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cc_data_t</name></type> <name>next</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><name>cc_storage_t</name> <modifier>*</modifier></type> <name>cc_storage_new</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cc_storage_t</name> <modifier>*</modifier></type><name>p_ccs</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_ccs</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_ccs</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ccs</name><operator>-&gt;</operator><name>next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_ccs</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cc_storage_delete</name><parameter_list>( <parameter><decl><type><name>cc_storage_t</name> <modifier>*</modifier></type><name>p_ccs</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>cc_Exit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Exit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ccs</name><operator>-&gt;</operator><name>next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ccs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cc_storage_reset</name><parameter_list>( <parameter><decl><type><name>cc_storage_t</name> <modifier>*</modifier></type><name>p_ccs</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ccs</name><operator>-&gt;</operator><name>next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cc_storage_append</name><parameter_list>( <parameter><decl><type><name>cc_storage_t</name> <modifier>*</modifier></type><name>p_ccs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_top_field_first</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>cc_Extract</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ccs</name><operator>-&gt;</operator><name>next</name></name></expr></argument>, <argument><expr><name>CC_PAYLOAD_GA94</name></expr></argument>, <argument><expr><name>b_top_field_first</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>i_buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cc_storage_commit</name><parameter_list>( <parameter><decl><type><name>cc_storage_t</name> <modifier>*</modifier></type><name>p_ccs</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pic</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_pic</name><operator>-&gt;</operator><name>i_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name></name> <operator>=</operator> <name><name>p_ccs</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ccs</name><operator>-&gt;</operator><name>next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type> <name>cc_storage_get_current</name><parameter_list>( <parameter><decl><type><name>cc_storage_t</name> <modifier>*</modifier></type><name>p_ccs</name></decl></parameter>, <parameter><decl><type><name>decoder_cc_desc_t</name> <modifier>*</modifier></type><name>p_desc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>b_reorder</name></name> <operator>&amp;&amp;</operator> <name><name>p_ccs</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>i_data</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>i_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>b_reorder</name></name></expr> ?</condition><then> <expr><name><name>p_ccs</name><operator>-&gt;</operator><name>i_pts</name></name></expr> </then><else>: <expr><name><name>p_ccs</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name><name>p_ccs</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_TYPE_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_desc</name><operator>-&gt;</operator><name>i_608_channels</name></name> <operator>=</operator> <name><name>p_ccs</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>i_608channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_desc</name><operator>-&gt;</operator><name>i_708_channels</name></name> <operator>=</operator> <name><name>p_ccs</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>i_708channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_desc</name><operator>-&gt;</operator><name>i_reorder_depth</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name><operator>.</operator><name>b_reorder</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>cc_Flush</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ccs</name><operator>-&gt;</operator><name>current</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>block_t</name> <modifier>*</modifier></type><name>PacketizeXXC1</name><parameter_list>( <parameter><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_dec</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_nal_length_size</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>, <parameter><decl><type><name>pf_annexb_nal_packetizer</name></type> <name>pf_nal_parser</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_block</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>pp_block</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><operator>(</operator><operator>*</operator><name>pp_block</name><operator>)</operator><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><operator>(</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><operator>*</operator><name>pp_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <operator>*</operator><name>pp_block</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name> <operator>-</operator> <name>p</name> <operator>&lt;</operator> <name>i_nal_length_size</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_nal_length_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <operator>(</operator><name>i_size</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator>

<name>i_size</name> <operator>&gt;</operator> <operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>p</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><literal type="string">"Broken frame : size %d is too big"</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_nal</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>==</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>p</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_nal</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_nal</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_nal</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">4</literal> <operator>+</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_nal</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_nal</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_nal</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_nal</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_nal</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_nal</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_nal</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_nal</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_nal</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pic</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_pic</name> <operator>=</operator> <call><name>pf_nal_parser</name><argument_list>( <argument><expr><name>p_dec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_dummy</name></expr></argument>, <argument><expr><name>p_nal</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_ret</name></expr></argument>, <argument><expr><name>p_pic</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
