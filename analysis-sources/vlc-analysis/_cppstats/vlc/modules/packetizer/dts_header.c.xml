<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\packetizer\dts_header.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dts_header.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BufLeToBe</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_in</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_in</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_in</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_in</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Buf14To16</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_le</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_out_le</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_in</name></decl>, <decl><type ref="prev"/><name>bits_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_in</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name><operator>%</operator><literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>p_in</name><index>[<expr><name>i</name><operator>-</operator><name>i_le</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_in</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>p_in</name><index>[<expr><name>i</name><operator>+</operator><name>i_le</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_in</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>bits_out</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><call><name>__MIN</name><argument_list>( <argument><expr><literal type="number">8</literal> <operator>-</operator> <name>bits_out</name></expr></argument>, <argument><expr><name>bits_in</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cur</name> <operator>&lt;&lt;=</operator> <name>need</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>|=</operator> <operator>(</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>bits_in</name> <operator>-</operator> <name>need</name><operator>)</operator> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>&lt;&lt;=</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bits_in</name> <operator>+</operator> <name>need</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>&gt;&gt;=</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>bits_in</name> <operator>+</operator> <name>need</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_in</name> <operator>-=</operator> <name>need</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_out</name> <operator>+=</operator> <name>need</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>bits_out</name> <operator>==</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_out</name> <operator>%</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_out</name> <operator>-</operator> <name>i_out_le</name></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_out</name><index>[<expr><name>i_out</name> <operator>+</operator> <name>i_out_le</name></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_out</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bits_out</name> <operator>+=</operator> <name>bits_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>&lt;&lt;=</operator> <name>bits_in</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>|=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_out</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>vlc_dts_syncword_e</name></name></type> <name>dts_header_getSyncword</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="string">"\x7F\xFE\x80\x01"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DTS_SYNC_CORE_BE</name></expr>;</return></block_content></block></if>

<if type="elseif">else

if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="string">"\xFE\x7F\x01\x80"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DTS_SYNC_CORE_LE</name></expr>;</return></block_content></block></if>

<if type="elseif">else

if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="string">"\x64\x58\x20\x25"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DTS_SYNC_SUBSTREAM</name></expr>;</return></block_content></block></if>

<if type="elseif">else

if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="string">"\x1F\xFF\xE8\x00"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <name><name>p_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x07</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DTS_SYNC_CORE_14BITS_BE</name></expr>;</return></block_content></block></if>

<if type="elseif">else

if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="string">"\xFF\x1F\x00\xE8"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xf0</literal> <operator>&amp;&amp;</operator> <name><name>p_buf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x07</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DTS_SYNC_CORE_14BITS_LE</name></expr>;</return></block_content></block></if>

<if type="elseif">else

if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="string">"\x0A\x80\x19\x21"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>DTS_SYNC_SUBSTREAM_LBR</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>DTS_SYNC_NONE</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vlc_dts_header_IsSync</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name>i_buf</name> <operator>&gt;=</operator> <literal type="number">6</literal>

<operator>&amp;&amp;</operator> <call><name>dts_header_getSyncword</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>DTS_SYNC_NONE</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>dca_get_samplerate</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>i_sfreq</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>p_dca_samplerates</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">8000</literal></expr>, <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">11025</literal></expr>, <expr><literal type="number">22050</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">12000</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">96000</literal></expr>, <expr><literal type="number">192000</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sfreq</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>p_dca_samplerates</name><index>[<expr><name>i_sfreq</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>dca_get_bitrate</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>i_rate</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>p_dca_bitrates</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">32000</literal></expr>, <expr><literal type="number">56000</literal></expr>, <expr><literal type="number">64000</literal></expr>, <expr><literal type="number">96000</literal></expr>, <expr><literal type="number">112000</literal></expr>,

<expr><literal type="number">128000</literal></expr>, <expr><literal type="number">192000</literal></expr>, <expr><literal type="number">224000</literal></expr>, <expr><literal type="number">256000</literal></expr>, <expr><literal type="number">320000</literal></expr>,

<expr><literal type="number">384000</literal></expr>, <expr><literal type="number">448000</literal></expr>, <expr><literal type="number">512000</literal></expr>, <expr><literal type="number">576000</literal></expr>, <expr><literal type="number">640000</literal></expr>,

<expr><literal type="number">768000</literal></expr>, <expr><literal type="number">896000</literal></expr>, <expr><literal type="number">1024000</literal></expr>, <expr><literal type="number">1152000</literal></expr>, <expr><literal type="number">1280000</literal></expr>,

<expr><literal type="number">1344000</literal></expr>, <expr><literal type="number">1408000</literal></expr>, <expr><literal type="number">1411200</literal></expr>, <expr><literal type="number">1472000</literal></expr>, <expr><literal type="number">1536000</literal></expr>,

<expr><literal type="number">1920000</literal></expr>, <expr><literal type="number">2048000</literal></expr>, <expr><literal type="number">3072000</literal></expr>, <expr><literal type="number">3840000</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_rate</name> <operator>&gt;=</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>p_dca_bitrates</name><index>[<expr><name>i_rate</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>dca_get_channels</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>i_amode</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_lfe</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>p_chan_mode</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_physical_channels</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_amode</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x0</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_FRONT</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_chan_mode</name> <operator>=</operator> <name>AOUT_CHANMODE_DUALMONO</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2</literal></expr>:</case>

<case>case <expr><literal type="number">0x3</literal></expr>:</case>

<case>case <expr><literal type="number">0x4</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_FRONT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x5</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_3_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x6</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_FRONT</name> <operator>|</operator> <name>AOUT_CHAN_REARCENTER</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x7</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_4_CENTER_REAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x8</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_4_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x9</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_5_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xA</literal></expr>:</case>

<case>case <expr><literal type="number">0xB</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_6_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xC</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_CENTER</name> <operator>|</operator> <name>AOUT_CHANS_FRONT</name>

<operator>|</operator> <name>AOUT_CHANS_REAR</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xD</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_7_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xE</literal></expr>:</case>

<case>case <expr><literal type="number">0xF</literal></expr>:</case>

<expr_stmt><expr><name>i_physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_7_0</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>b_lfe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_physical_channels</name> <operator>|=</operator> <name>AOUT_CHAN_LFE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_physical_channels</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>dca_get_LBR_channels</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>nuSpkrActivityMask</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>pi_chans</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_physical_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>phy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>nb</name></decl>;</decl_stmt>

}</block> <decl><name><name>bitmask</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AOUT_CHAN_CENTER</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHANS_FRONT</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHANS_MIDDLE</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_LFE</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHAN_REARCENTER</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHANS_REAR</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHANS_FRONT</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AOUT_CHANS_MIDDLE</name></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>nuSpkrActivityMask</name></expr>;</condition> <incr><expr><name>nuSpkrActivityMask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>nuSpkrActivityMask</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_physical_channels</name> <operator>|=</operator> <name><name>bitmask</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>phy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_channels</name> <operator>+=</operator> <name><name>bitmask</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pi_chans</name> <operator>=</operator> <name>i_physical_channels</name></expr>;</expr_stmt>

<return>return <expr><name>i_channels</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dts_header_ParseSubstream</name><parameter_list>( <parameter><decl><type><name>vlc_dts_header_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>VLC_DTS_HEADER_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bHeaderSizeType</name> <init>= <expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nuBits4ExSSFsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>nuExtSSHeaderSize</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>bHeaderSizeType</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>nuExtSSHeaderSize</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nuBits4ExSSFsize</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>nuExtSSHeaderSize</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nuBits4ExSSFsize</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_header</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>syncword</name></name> <operator>=</operator> <name>DTS_SYNC_SUBSTREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_substream_header_size</name></name> <operator>=</operator> <name>nuExtSSHeaderSize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <name>nuBits4ExSSFsize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dts_header_ParseLBRExtSubstream</name><parameter_list>( <parameter><decl><type><name>vlc_dts_header_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>VLC_DTS_HEADER_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ucFmtInfoCode</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ucFmtInfoCode</name> <operator>!=</operator> <literal type="number">0x02</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name><name>LBRsamplerates</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">8000</literal></expr>, <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">32000</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">22050</literal></expr>, <expr><literal type="number">44100</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">12000</literal></expr>, <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">48000</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>LBRsamplerates</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <name><name>LBRsamplerates</name><index>[<expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&lt;</operator> <literal type="number">16000</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>&lt;</operator> <literal type="number">32000</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">2048</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_spkrmask</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dca_get_LBR_channels</name><argument_list>( <argument><expr><name>i_spkrmask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_header</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>nLBRBitRateMSnybbles</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>nLBRScaledBitRate_LSW</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <name>nLBRScaledBitRate_LSW</name> <operator>|</operator> <operator>(</operator><operator>(</operator><name>nLBRBitRateMSnybbles</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dts_header_ParseCore</name><parameter_list>( <parameter><decl><type><name>vlc_dts_header_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>VLC_DTS_HEADER_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_nblks</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_nblks</name> <operator>&lt;</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_fsize</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_fsize</name> <operator>&lt;</operator> <literal type="number">95</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_amode</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sfreq</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_rate</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_skip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator>

<literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_lff</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_lfe</name> <init>= <expr><name>i_lff</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_lff</name> <operator>==</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>=</operator> <call><name>dca_get_samplerate</name><argument_list>( <argument><expr><name>i_sfreq</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <call><name>dca_get_bitrate</name><argument_list>( <argument><expr><name>i_rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <name>i_fsize</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_header</name><operator>-&gt;</operator><name>syncword</name></name> <operator>==</operator> <name>DTS_SYNC_CORE_14BITS_LE</name> <operator>||</operator>

<name><name>p_header</name><operator>-&gt;</operator><name>syncword</name></name> <operator>==</operator> <name>DTS_SYNC_CORE_14BITS_BE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>=</operator> <name><name>p_header</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>/</operator> <literal type="number">14</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>=</operator> <operator>(</operator><name>i_nblks</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_chan_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>i_physical_channels</name></name> <operator>=</operator>

<call><name>dca_get_channels</name><argument_list>( <argument><expr><name>i_amode</name></expr></argument>, <argument><expr><name>b_lfe</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_header</name><operator>-&gt;</operator><name>i_chan_mode</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_header</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>||</operator> <operator>!</operator><name><name>p_header</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>||</operator>

<operator>!</operator><name><name>p_header</name><operator>-&gt;</operator><name>i_frame_length</name></name> <operator>||</operator> <operator>!</operator><name><name>p_header</name><operator>-&gt;</operator><name>i_physical_channels</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ssize_t</name></type> <name>vlc_dts_header_Convert14b16b</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_dst</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_src</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_out_le</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_size</name> <init>= <expr><name>i_src</name> <operator>*</operator> <literal type="number">14</literal> <operator>/</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_src</name> <operator>&lt;=</operator> <name>VLC_DTS_HEADER_SIZE</name> <operator>||</operator> <name>i_size</name> <operator>&gt;</operator> <name>i_dst</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_dts_syncword_e</name></name></type> <name>syncword</name> <init>= <expr><call><name>dts_header_getSyncword</name><argument_list>( <argument><expr><name>p_src</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>syncword</name> <operator>==</operator> <name>DTS_SYNC_NONE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>syncword</name> <operator>!=</operator> <name>DTS_SYNC_CORE_14BITS_BE</name>

<operator>&amp;&amp;</operator> <name>syncword</name> <operator>!=</operator> <name>DTS_SYNC_CORE_14BITS_LE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>Buf14To16</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name>p_src</name></expr></argument>, <argument><expr><name>i_src</name></expr></argument>,

<argument><expr><name>syncword</name> <operator>==</operator> <name>DTS_SYNC_CORE_14BITS_LE</name></expr></argument>, <argument><expr><name>b_out_le</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>vlc_dts_header_Parse</name><parameter_list>( <parameter><decl><type><name>vlc_dts_header_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_buffer</name> <operator>&lt;</operator> <name>VLC_DTS_HEADER_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_header</name><operator>-&gt;</operator><name>syncword</name></name> <operator>=</operator> <call><name>dts_header_getSyncword</name><argument_list>( <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_header</name><operator>-&gt;</operator><name>syncword</name></name> <operator>==</operator> <name>DTS_SYNC_NONE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_header</name><operator>-&gt;</operator><name>syncword</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DTS_SYNC_CORE_LE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>conv_buf</name><index>[<expr><name>VLC_DTS_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BufLeToBe</name><argument_list>( <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>VLC_DTS_HEADER_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>dts_header_ParseCore</name><argument_list>( <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DTS_SYNC_CORE_BE</name></expr>:</case>

<return>return <expr><call><name>dts_header_ParseCore</name><argument_list>( <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DTS_SYNC_CORE_14BITS_BE</name></expr>:</case>

<case>case <expr><name>DTS_SYNC_CORE_14BITS_LE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>conv_buf</name><index>[<expr><name>VLC_DTS_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>Buf14To16</name><argument_list>( <argument><expr><name>conv_buf</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>VLC_DTS_HEADER_SIZE</name></expr></argument>,

<argument><expr><name><name>p_header</name><operator>-&gt;</operator><name>syncword</name></name> <operator>==</operator> <name>DTS_SYNC_CORE_14BITS_LE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>dts_header_ParseCore</name><argument_list>( <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>conv_buf</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DTS_SYNC_SUBSTREAM</name></expr>:</case>

<return>return <expr><call><name>dts_header_ParseSubstream</name><argument_list>( <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DTS_SYNC_SUBSTREAM_LBR</name></expr>:</case>

<return>return <expr><call><name>dts_header_ParseLBRExtSubstream</name><argument_list>( <argument><expr><name>p_header</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></function>

</unit>
