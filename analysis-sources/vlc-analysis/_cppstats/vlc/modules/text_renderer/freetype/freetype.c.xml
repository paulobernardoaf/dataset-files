<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\text_renderer\freetype\freetype.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_subpicture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_text_style.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_FONTCONFIG</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GET_FONT_BY_FAMILY_NAME</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_FONTCONFIG</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GET_FONT_BY_FAMILY_NAME</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONTCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GET_FONT_BY_FAMILY_NAME</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_GET_FONT_BY_FAMILY_NAME</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform_fonts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"freetype.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"text_layout.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Create</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT_TEXT</name></cpp:macro> <cpp:value>N_("Font")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MONOSPACE_FONT_TEXT</name></cpp:macro> <cpp:value>N_("Monospace Font")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAMILY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Font family for the font you want to use")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FONT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Font file for the font you want to use")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPACITY_TEXT</name></cpp:macro> <cpp:value>N_("Text opacity")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPACITY_LONGTEXT</name></cpp:macro> <cpp:value>N_("The opacity (inverse of transparency) of the " "text that will be rendered on the video. 0 = transparent, " "255 = totally opaque." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_TEXT</name></cpp:macro> <cpp:value>N_("Text default color")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLOR_LONGTEXT</name></cpp:macro> <cpp:value>N_("The color of the text that will be rendered on ""the video. This must be an hexadecimal (like HTML colors). The first two ""chars are for red, then green, then blue. #000000 = black, #FF0000 = red,"" #00FF00 = green, #FFFF00 = yellow (red + green), #FFFFFF = white" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOLD_TEXT</name></cpp:macro> <cpp:value>N_("Force bold")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BG_OPACITY_TEXT</name></cpp:macro> <cpp:value>N_("Background opacity")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BG_COLOR_TEXT</name></cpp:macro> <cpp:value>N_("Background color")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTLINE_OPACITY_TEXT</name></cpp:macro> <cpp:value>N_("Outline opacity")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTLINE_COLOR_TEXT</name></cpp:macro> <cpp:value>N_("Outline color")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTLINE_THICKNESS_TEXT</name></cpp:macro> <cpp:value>N_("Outline thickness")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_OPACITY_TEXT</name></cpp:macro> <cpp:value>N_("Shadow opacity")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_COLOR_TEXT</name></cpp:macro> <cpp:value>N_("Shadow color")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_ANGLE_TEXT</name></cpp:macro> <cpp:value>N_("Shadow angle")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHADOW_DISTANCE_TEXT</name></cpp:macro> <cpp:value>N_("Shadow distance")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_DIRECTION_TEXT</name></cpp:macro> <cpp:value>N_("Text direction")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEXT_DIRECTION_LONGTEXT</name></cpp:macro> <cpp:value>N_("Paragraph base direction for the Unicode bi-directional algorithm.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUVP_TEXT</name></cpp:macro> <cpp:value>N_("Use YUVP renderer")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUVP_LONGTEXT</name></cpp:macro> <cpp:value>N_("This renders the font using \"paletized YUV\". " "This option is only needed if you want to encode into DVB subtitles" )</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_color_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00808080</literal></expr>, <expr><literal type="number">0x00C0C0C0</literal></expr>, <expr><literal type="number">0x00FFFFFF</literal></expr>, <expr><literal type="number">0x00800000</literal></expr>,

<expr><literal type="number">0x00FF0000</literal></expr>, <expr><literal type="number">0x00FF00FF</literal></expr>, <expr><literal type="number">0x00FFFF00</literal></expr>, <expr><literal type="number">0x00808000</literal></expr>, <expr><literal type="number">0x00008000</literal></expr>, <expr><literal type="number">0x00008080</literal></expr>,

<expr><literal type="number">0x0000FF00</literal></expr>, <expr><literal type="number">0x00800080</literal></expr>, <expr><literal type="number">0x00000080</literal></expr>, <expr><literal type="number">0x000000FF</literal></expr>, <expr><literal type="number">0x0000FFFF</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_color_descriptions</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Black"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Gray"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Silver"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"White"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Maroon"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Red"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Fuchsia"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Yellow"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Olive"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Green"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Teal"</literal></expr></argument>)</argument_list></call></expr>,

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Lime"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Purple"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Navy"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Blue"</literal></expr></argument>)</argument_list></call></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Aqua"</literal></argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_outline_thickness</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_outline_thickness</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Thin"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Normal"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Thick"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_text_direction</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_text_direction</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Left to right"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Right to left"</literal></expr></argument>)</argument_list></call></expr>, <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Auto"</literal></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Text renderer"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Freetype2 font renderer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_VIDEO</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_VIDEO_SUBPIC</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GET_FONT_BY_FAMILY_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_font</name><argument_list>(<argument><literal type="string">"freetype-font"</literal></argument>, <argument>DEFAULT_FAMILY</argument>, <argument>FONT_TEXT</argument>, <argument>FAMILY_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_font</name><argument_list>(<argument><literal type="string">"freetype-monofont"</literal></argument>, <argument>DEFAULT_MONOSPACE_FAMILY</argument>,

<argument>MONOSPACE_FONT_TEXT</argument>, <argument>FAMILY_LONGTEXT</argument>)</argument_list></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<macro><name>add_loadfile</name><argument_list>(<argument><literal type="string">"freetype-font"</literal></argument>, <argument>DEFAULT_FONT_FILE</argument>, <argument>FONT_TEXT</argument>, <argument>FONT_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_loadfile</name><argument_list>(<argument><literal type="string">"freetype-monofont"</literal></argument>, <argument>DEFAULT_MONOSPACE_FONT_FILE</argument>,

<argument>MONOSPACE_FONT_TEXT</argument>, <argument>FONT_LONGTEXT</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"freetype-opacity"</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>OPACITY_TEXT</argument>, <argument>OPACITY_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_rgb</name><argument_list>(<argument><literal type="string">"freetype-color"</literal></argument>, <argument><literal type="number">0x00FFFFFF</literal></argument>, <argument>COLOR_TEXT</argument>, <argument>COLOR_LONGTEXT</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_color_values</argument>, <argument>ppsz_color_descriptions</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0x000000</literal></argument>, <argument><literal type="number">0xFFFFFF</literal></argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"freetype-bold"</literal></argument>, <argument>false</argument>, <argument>BOLD_TEXT</argument>, <argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"freetype-background-opacity"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>BG_OPACITY_TEXT</argument>, <argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_rgb</name><argument_list>(<argument><literal type="string">"freetype-background-color"</literal></argument>, <argument><literal type="number">0x00000000</literal></argument>, <argument>BG_COLOR_TEXT</argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_color_values</argument>, <argument>ppsz_color_descriptions</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0x000000</literal></argument>, <argument><literal type="number">0xFFFFFF</literal></argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"freetype-outline-opacity"</literal></argument>, <argument><literal type="number">255</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>OUTLINE_OPACITY_TEXT</argument>, <argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_rgb</name><argument_list>(<argument><literal type="string">"freetype-outline-color"</literal></argument>, <argument><literal type="number">0x00000000</literal></argument>, <argument>OUTLINE_COLOR_TEXT</argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_color_values</argument>, <argument>ppsz_color_descriptions</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0x000000</literal></argument>, <argument><literal type="number">0xFFFFFF</literal></argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"freetype-outline-thickness"</literal></argument>, <argument><literal type="number">4</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">50</literal></argument>, <argument>OUTLINE_THICKNESS_TEXT</argument>,

<argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_outline_thickness</argument>, <argument>ppsz_outline_thickness</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"freetype-shadow-opacity"</literal></argument>, <argument><literal type="number">128</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">255</literal></argument>,

<argument>SHADOW_OPACITY_TEXT</argument>, <argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_rgb</name><argument_list>(<argument><literal type="string">"freetype-shadow-color"</literal></argument>, <argument><literal type="number">0x00000000</literal></argument>, <argument>SHADOW_COLOR_TEXT</argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_color_values</argument>, <argument>ppsz_color_descriptions</argument> )</argument_list></macro>

<macro><name>change_integer_range</name><argument_list>( <argument><literal type="number">0x000000</literal></argument>, <argument><literal type="number">0xFFFFFF</literal></argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"freetype-shadow-angle"</literal></argument>, <argument>-<literal type="number">45</literal></argument>, <argument>-<literal type="number">360</literal></argument>, <argument><literal type="number">360</literal></argument>,

<argument>SHADOW_ANGLE_TEXT</argument>, <argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_float_with_range</name><argument_list>( <argument><literal type="string">"freetype-shadow-distance"</literal></argument>, <argument><literal type="number">0.06</literal></argument>, <argument><literal type="number">0.0</literal></argument>, <argument><literal type="number">1.0</literal></argument>,

<argument>SHADOW_DISTANCE_TEXT</argument>, <argument>NULL</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<expr_stmt><expr><call><name>add_obsolete_integer</name><argument_list>( <argument><expr><literal type="string">"freetype-fontsize"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_obsolete_integer</name><argument_list>( <argument><expr><literal type="string">"freetype-rel-fontsize"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>add_obsolete_integer</name><argument_list>( <argument><expr><literal type="string">"freetype-effect"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"freetype-yuvp"</literal></argument>, <argument>false</argument>, <argument>YUVP_TEXT</argument>,

<argument>YUVP_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"freetype-text-direction"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument>TEXT_DIRECTION_TEXT</argument>,

<argument>TEXT_DIRECTION_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>change_integer_list</name><argument_list>( <argument>pi_text_direction</argument>, <argument>ppsz_text_direction</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"text renderer"</literal></argument>, <argument><literal type="number">100</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"text"</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Create</argument>, <argument>Destroy</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>YUVFromRGB</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_argb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_y</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_u</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_red</name> <init>= <expr><operator>(</operator> <name>i_argb</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_green</name> <init>= <expr><operator>(</operator> <name>i_argb</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_blue</name> <init>= <expr><operator>(</operator> <name>i_argb</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_y</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>__MIN</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>( <argument><expr><literal type="number">2104</literal> <operator>*</operator> <name>i_red</name> <operator>+</operator> <literal type="number">4130</literal> <operator>*</operator> <name>i_green</name> <operator>+</operator>

<literal type="number">802</literal> <operator>*</operator> <name>i_blue</name> <operator>+</operator> <literal type="number">4096</literal> <operator>+</operator> <literal type="number">131072</literal></expr></argument> )</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">235</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_u</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>__MIN</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1214</literal> <operator>*</operator> <name>i_red</name> <operator>+</operator> <operator>-</operator><literal type="number">2384</literal> <operator>*</operator> <name>i_green</name> <operator>+</operator>

<literal type="number">3598</literal> <operator>*</operator> <name>i_blue</name> <operator>+</operator> <literal type="number">4096</literal> <operator>+</operator> <literal type="number">1048576</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_v</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><call><name>__MIN</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>( <argument><expr><literal type="number">3598</literal> <operator>*</operator> <name>i_red</name> <operator>+</operator> <operator>-</operator><literal type="number">3013</literal> <operator>*</operator> <name>i_green</name> <operator>+</operator>

<operator>-</operator><literal type="number">585</literal> <operator>*</operator> <name>i_blue</name> <operator>+</operator> <literal type="number">4096</literal> <operator>+</operator> <literal type="number">1048576</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RGBFromRGB</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_argb</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_r</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_g</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_b</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_r</name> <operator>=</operator> <operator>(</operator> <name>i_argb</name> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_g</name> <operator>=</operator> <operator>(</operator> <name>i_argb</name> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_b</name> <operator>=</operator> <operator>(</operator> <name>i_argb</name> <operator>&amp;</operator> <literal type="number">0x000000ff</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FT_Vector</name></type> <name>GetAlignedOffset</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>FT_BBox</name> <modifier>*</modifier></type><name>p_textbbox</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_align</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FT_Vector</name></type> <name>offsets</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_text_width</name> <init>= <expr><name><name>p_textbbox</name><operator>-&gt;</operator><name>xMax</name></name> <operator>-</operator> <name><name>p_textbbox</name><operator>-&gt;</operator><name>xMin</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_line</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&lt;</operator> <name>i_text_width</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>i_align</name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_LEFT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_align</name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>offsets</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator> <name>i_text_width</name> <operator>-</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_width</name></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>offsets</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>(</operator> <name>i_text_width</name> <operator>-</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_width</name></name> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>offsets</name><operator>.</operator><name>x</name></name> <operator>=</operator> <name><name>p_textbbox</name><operator>-&gt;</operator><name>xMin</name></name> <operator>-</operator> <name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMin</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>offsets</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadFontsFromAttachments</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_attachments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_attachments_cnt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>filter_GetInputAttachments</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pp_attachments</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_attachments_cnt</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_font_attachments</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_font_attachments</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_attachments_cnt</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_font_attachments</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pp_font_attachments</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_attachments_cnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name><name>pp_attachments</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_attachments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>i_attachments_cnt</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attach</name> <init>= <expr><name><name>pp_attachments</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>, <argument><expr><literal type="string">"application/x-truetype-font"</literal></expr></argument> )</argument_list></call> <operator>||</operator> 

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>psz_mime</name></name></expr></argument>, <argument><expr><literal type="string">"application/x-font-otf"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator> 

<name><name>p_attach</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_attach</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_font_attachments</name><index>[ <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_font_attachments</name></name><operator>++</operator></expr> ]</index></name> <operator>=</operator> <name>p_attach</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_font_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><literal type="number">0</literal> <operator>==</operator> <call><name>FT_New_Memory_Face</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument>,

<argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>,

<argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>,

<argument><expr><name>i_font_idx</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_face</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bold</name> <init>= <expr><name><name>p_face</name><operator>-&gt;</operator><name>style_flags</name></name> <operator>&amp;</operator> <name>FT_STYLE_FLAG_BOLD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_italic</name> <init>= <expr><name><name>p_face</name><operator>-&gt;</operator><name>style_flags</name></name> <operator>&amp;</operator> <name>FT_STYLE_FLAG_ITALIC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_face</name><operator>-&gt;</operator><name>family_name</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_lc</name> <operator>=</operator> <call><name>ToLower</name><argument_list>( <argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>family_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_lc</name></expr></argument>, <argument><expr><name>FB_NAME</name><literal type="string">"-%04d"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fallback_counter</name></name><operator>++</operator></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_lc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>=

<expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name> <operator>==</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_family</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_lc</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fontfile</name></expr></argument>, <argument><expr><literal type="string">":/%d"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_font_attachments</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>NewFont</name><argument_list>( <argument><expr><name>psz_fontfile</name></expr></argument>, <argument><expr><name>i_font_idx</name></expr></argument>, <argument><expr><name>b_bold</name></expr></argument>, <argument><expr><name>b_italic</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>( <argument><expr><name>p_face</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_font_idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name>p_attach</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_attachments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_attachments</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></init></decl>;</init> <condition><expr><name>p_family</name></expr>;</condition>

<incr><expr><name>p_family</name> <operator>=</operator> <name><name>p_family</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_temp</name> <init>= <expr><call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_attachments</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_temp</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_attachments</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeFamilies</name><argument_list>( <argument><expr><name>p_attachments</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_temp</name><operator>-&gt;</operator><name>p_fonts</name></name> <operator>=</operator> <name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_attachments</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>FB_LIST_ATTACHMENTS</name></expr></argument>, <argument><expr><name>p_attachments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_face</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>( <argument><expr><name>p_face</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_lc</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>k</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_attachments_cnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name><name>pp_attachments</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_attachments</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RenderYUVP</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,

<parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>,

<parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_regionbbox</name></decl></parameter>, <parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_paddedbbox</name></decl></parameter>,

<parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_bbox</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_paddedbbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>pi_gamma</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=

<expr><block>{<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xff</literal></expr>,

<expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>i_pitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_y</name></decl>, <decl><type ref="prev"/><name>i_u</name></decl>, <decl><type ref="prev"/><name>i_v</name></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VLC_CODEC_YUVP</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>xMax</name></name> <operator>-</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>xMin</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>yMax</name></name> <operator>-</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>yMin</name></name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>regionnum</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>regionden</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>transfer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>mastering</name></name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>mastering</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr> ?</condition><then> <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr> </then><else>: <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>fmt</name><operator>.</operator><name>p_palette</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name>regionnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name>regionden</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_alpha</name> <init>= <expr><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>YUVFromRGB</name><argument_list>( <argument><expr><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>pi_gamma</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>int</name><operator>)</operator><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>i_alpha</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name>i_y</name> <operator>/</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_u</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>pi_gamma</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>int</name><operator>)</operator><name><name>fmt</name><operator>.</operator><name>p_palette</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>i_alpha</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PIXELS</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pitch</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PITCH</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_pitch</name> <operator>*</operator> <name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_line</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_line</name> <operator>=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>FT_Vector</name></type> <name>offset</name> <init>= <expr><call><name>GetAlignedOffset</name><argument_list>( <argument><expr><name>p_line</name></expr></argument>, <argument><expr><name>p_bbox</name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_align</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>line_character_t</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_BitmapGlyph</name></type> <name>p_glyph</name> <init>= <expr><name><name>ch</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_glyph_y</name> <init>= <expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>yMax</name></name> <operator>-</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>top</name></name> <operator>+</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_base_line</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_glyph_x</name> <init>= <expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>left</name></name> <operator>-</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>xMin</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>buffer</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>pitch</name></name> <operator>+</operator> <name>x</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><operator>(</operator><name>i_glyph_y</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name>i_pitch</name> <operator>+</operator> <operator>(</operator><name>i_glyph_x</name> <operator>+</operator> <name>x</name><operator>)</operator></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>buffer</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>pitch</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>/</operator><literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_dst</name> <operator>=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PIXELS</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_top</name> <init>= <expr><name>p_dst</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>current</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>y</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_top</name></expr></argument>, <argument><expr><name>p_dst</name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_dst</name> <operator>+=</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PITCH</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>current</name> <operator>=</operator> <name><name>p_dst</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_dst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>left</name> <operator>+</operator> <name><name>p_dst</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>p_top</name><index>[<expr><name>x</name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator> <name><name>p_top</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>p_top</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>p_dst</name><index>[<expr><name>x</name> <operator>-</operator><literal type="number">1</literal> <operator>+</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PITCH</name></name></expr> ]</index></name> <operator>+</operator> <name><name>p_dst</name><index>[<expr><name>x</name> <operator>+</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PITCH</name></name></expr>]</index></name> <operator>+</operator> <name><name>p_dst</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name><operator>-&gt;</operator><name>Y_PITCH</name></name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_top</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillYUVAPicture</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>,

<argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name>i_u</name></expr></argument>,

<argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name>i_v</name></expr></argument>,

<argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name>i_a</name></expr></argument>,

<argument><expr><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>i_lines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BlendYUVAPixel</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_picture_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_picture_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_v</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_alpha</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_alpha</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_an</name> <init>= <expr><name>i_a</name> <operator>*</operator> <name>i_alpha</name> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_y</name> <init>= <expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_picture_y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <name>i_picture_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_u</name> <init>= <expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_picture_y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <name>i_picture_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_v</name> <init>= <expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_picture_y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <name>i_picture_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_a</name> <init>= <expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>p_pixels</name><index>[<expr><name>i_picture_y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>+</operator> <name>i_picture_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ao</name> <init>= <expr><operator>*</operator><name>p_a</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ao</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_y</name> <operator>=</operator> <name>i_y</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_u</name> <operator>=</operator> <name>i_u</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_v</name> <operator>=</operator> <name>i_v</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_a</name> <operator>=</operator> <name>i_an</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ani</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <name>i_an</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_aoni</name> <init>= <expr><name>i_ao</name> <operator>*</operator> <name>i_ani</name> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p_a</name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <operator>*</operator><name>p_a</name><operator>)</operator> <operator>*</operator> <name>i_ani</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_a</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_y</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_y</name> <operator>*</operator> <name>i_aoni</name> <operator>+</operator> <name>i_y</name> <operator>*</operator> <name>i_an</name> <operator>)</operator> <operator>/</operator> <operator>*</operator><name>p_a</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_u</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_u</name> <operator>*</operator> <name>i_aoni</name> <operator>+</operator> <name>i_u</name> <operator>*</operator> <name>i_an</name> <operator>)</operator> <operator>/</operator> <operator>*</operator><name>p_a</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_v</name> <operator>=</operator> <operator>(</operator> <operator>*</operator><name>p_v</name> <operator>*</operator> <name>i_aoni</name> <operator>+</operator> <name>i_v</name> <operator>*</operator> <name>i_an</name> <operator>)</operator> <operator>/</operator> <operator>*</operator><name>p_a</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillRGBAPicture</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_b</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dy</name> <operator>&lt;</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_lines</name></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dx</name> <operator>&lt;</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_visible_pitch</name></expr>;</condition> <incr><expr><name>dx</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_rgba</name> <init>= <expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>dy</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <name>dx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i_b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>i_a</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BlendRGBAPixel</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_picture_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_picture_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_b</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_alpha</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_alpha</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_an</name> <init>= <expr><name>i_a</name> <operator>*</operator> <name>i_alpha</name> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_rgba</name> <init>= <expr><operator>&amp;</operator><name><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>i_picture_y</name> <operator>*</operator> <name><name>p_picture</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_picture_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ao</name> <init>= <expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ao</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i_g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>i_b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>i_an</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ani</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <name>i_an</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>i_ani</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_aoni</name> <init>= <expr><name>i_ao</name> <operator>*</operator> <name>i_ani</name> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name>i_aoni</name> <operator>+</operator> <name>i_r</name> <operator>*</operator> <name>i_an</name> <operator>)</operator> <operator>/</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i_aoni</name> <operator>+</operator> <name>i_g</name> <operator>*</operator> <name>i_an</name> <operator>)</operator> <operator>/</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>i_aoni</name> <operator>+</operator> <name>i_b</name> <operator>*</operator> <name>i_an</name> <operator>)</operator> <operator>/</operator> <name><name>p_rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillARGBPicture</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>==</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>==</operator> <name>g</name></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>pixel</name> <init>= <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>g</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>lines</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr></init></decl>;</init> <condition><expr><name>lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>lines</name><operator>--</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pixels</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>line</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>cols</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></init></decl>;</init> <condition><expr><name>cols</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>cols</name> <operator>-=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>pixels</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>pixel</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>line</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BlendARGBPixel</name><parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pic_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pic_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>alpha</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgba</name> <init>= <expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>pic_y</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><operator>-&gt;</operator><name>i_pitch</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>pic_x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>an</name> <init>= <expr><name>a</name> <operator>*</operator> <name>alpha</name> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ao</name> <init>= <expr><name><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ao</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>an</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ani</name> <init>= <expr><literal type="number">255</literal> <operator>-</operator> <name>an</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal> <operator>-</operator> <operator>(</operator><literal type="number">255</literal> <operator>-</operator> <name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>ani</name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>aoni</name> <init>= <expr><name>ao</name> <operator>*</operator> <name>ani</name> <operator>/</operator> <literal type="number">255</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>rgba</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>aoni</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>an</name> <operator>)</operator> <operator>/</operator> <name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>rgba</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>aoni</name> <operator>+</operator> <name>g</name> <operator>*</operator> <name>an</name> <operator>)</operator> <operator>/</operator> <name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>rgba</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>aoni</name> <operator>+</operator> <name>b</name> <operator>*</operator> <name>an</name> <operator>)</operator> <operator>/</operator> <name><name>rgba</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BlendAXYZGlyph</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_picture_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_picture_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_z</name></decl></parameter>,

<parameter><decl><type><name>FT_BitmapGlyph</name></type> <name>p_glyph</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BlendPixel</name>)<parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>dy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dy</name> <operator>&lt;</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>rows</name></name></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>dx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dx</name> <operator>&lt;</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BlendPixel</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><name>i_picture_x</name> <operator>+</operator> <name>dx</name></expr></argument>, <argument><expr><name>i_picture_y</name> <operator>+</operator> <name>dy</name></expr></argument>,

<argument><expr><name>i_a</name></expr></argument>, <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>i_z</name></expr></argument>,

<argument><expr><name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>buffer</name><index>[<expr><name>dy</name> <operator>*</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>pitch</name></name> <operator>+</operator> <name>dx</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BlendAXYZLine</name><parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_picture_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_picture_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_z</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>line_character_t</name> <modifier>*</modifier></type><name>p_current</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>line_character_t</name> <modifier>*</modifier></type><name>p_next</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BlendPixel</name>)<parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_line_width</name> <init>= <expr><name><name>p_current</name><operator>-&gt;</operator><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_next</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_line_width</name> <operator>=</operator> <name><name>p_next</name><operator>-&gt;</operator><name>p_glyph</name><operator>-&gt;</operator><name>left</name></name> <operator>-</operator> <name><name>p_current</name><operator>-&gt;</operator><name>p_glyph</name><operator>-&gt;</operator><name>left</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dx</name> <operator>&lt;</operator> <name>i_line_width</name></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dy</name> <operator>&lt;</operator> <name><name>p_current</name><operator>-&gt;</operator><name>i_line_thickness</name></name></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BlendPixel</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>,

<argument><expr><name>i_picture_x</name> <operator>+</operator> <name>dx</name></expr></argument>,

<argument><expr><name>i_picture_y</name> <operator>+</operator> <name><name>p_current</name><operator>-&gt;</operator><name>i_line_offset</name></name> <operator>+</operator> <name>dy</name></expr></argument>,

<argument><expr><name>i_a</name></expr></argument>, <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>i_z</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RenderBackground</name><parameter_list>( <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,

<parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line_head</name></decl></parameter>,

<parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_regionbbox</name></decl></parameter>,

<parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_paddedbbox</name></decl></parameter>,

<parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_textbbox</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ExtractComponents</name>)<parameter_list>( <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BlendPixel</name>)<parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><name>p_line_head</name></expr></init></decl>;</init> <condition><expr><name>p_line</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_line</name> <operator>=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>FT_Vector</name></type> <name>offset</name> <init>= <expr><call><name>GetAlignedOffset</name><argument_list>( <argument><expr><name>p_line</name></expr></argument>, <argument><expr><name>p_textbbox</name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_text_align</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>linebgbox</name> <init>= <expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>linebgbox</name><operator>.</operator><name>xMin</name></name> <operator>+=</operator> <name><name>offset</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebgbox</name><operator>.</operator><name>xMax</name></name> <operator>+=</operator> <name><name>offset</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebgbox</name><operator>.</operator><name>yMax</name></name> <operator>+=</operator> <name><name>offset</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebgbox</name><operator>.</operator><name>yMin</name></name> <operator>+=</operator> <name><name>offset</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_line</name><operator>-&gt;</operator><name>i_first_visible_char_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>linebgbox</name><operator>.</operator><name>yMax</name></name> <operator>+=</operator> <operator>(</operator><name><name>p_paddedbbox</name><operator>-&gt;</operator><name>yMax</name></name> <operator>-</operator> <name><name>p_textbbox</name><operator>-&gt;</operator><name>yMax</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebgbox</name><operator>.</operator><name>yMin</name></name> <operator>-=</operator> <operator>(</operator><name><name>p_textbbox</name><operator>-&gt;</operator><name>yMin</name></name> <operator>-</operator> <name><name>p_paddedbbox</name><operator>-&gt;</operator><name>yMin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebgbox</name><operator>.</operator><name>xMin</name></name> <operator>-=</operator> <operator>(</operator><name><name>p_textbbox</name><operator>-&gt;</operator><name>xMin</name></name> <operator>-</operator> <name><name>p_paddedbbox</name><operator>-&gt;</operator><name>xMin</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linebgbox</name><operator>.</operator><name>xMax</name></name> <operator>+=</operator> <operator>(</operator><name><name>p_paddedbbox</name><operator>-&gt;</operator><name>xMax</name></name> <operator>-</operator> <name><name>p_textbbox</name><operator>-&gt;</operator><name>xMax</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_line</name><operator>-&gt;</operator><name>p_next</name></name> <operator>&amp;&amp;</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_next</name><operator>-&gt;</operator><name>i_first_visible_char_index</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>linebgbox</name><operator>.</operator><name>yMin</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>linebgbox</name><operator>.</operator><name>yMin</name></name></expr></argument>, <argument><expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMin</name></name> <operator>-</operator> <operator>(</operator><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMin</name></name> <operator>-</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_next</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMax</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_prev_style</name> <init>= <expr><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name><name>p_line</name><operator>-&gt;</operator><name>i_first_visible_char_index</name></name></expr>]</index></name><operator>.</operator><name>p_style</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>segmentbgbox</name> <init>= <expr><name>linebgbox</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_char_index</name> <init>= <expr><name><name>p_line</name><operator>-&gt;</operator><name>i_first_visible_char_index</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_char_index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>segmentbgbox</name><operator>.</operator><name>xMin</name></name> <operator>=</operator> <name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator>

<name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name><name>p_line</name><operator>-&gt;</operator><name>i_first_visible_char_index</name></name></expr>]</index></name><operator>.</operator><name><name>bbox</name><operator>.</operator><name>xMin</name></name> <operator>-</operator>

<operator>(</operator><name><name>p_textbbox</name><operator>-&gt;</operator><name>xMin</name></name> <operator>-</operator> <name><name>p_paddedbbox</name><operator>-&gt;</operator><name>xMin</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>i_char_index</name> <operator>&lt;=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_last_visible_char_index</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_seg_end</name> <init>= <expr><name>i_char_index</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_seg_end</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_last_visible_char_index</name></name> <operator>&amp;&amp;</operator>

<name>p_prev_style</name> <operator>==</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i_seg_end</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p_style</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_seg_end</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>segmentbgbox</name><operator>.</operator><name>xMax</name></name> <operator>=</operator> <name><name>offset</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i_seg_end</name></expr>]</index></name><operator>.</operator><name><name>bbox</name><operator>.</operator><name>xMax</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_seg_end</name> <operator>==</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_last_visible_char_index</name></name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>segmentbgbox</name><operator>.</operator><name>xMax</name></name> <operator>+=</operator> <operator>(</operator><name><name>p_paddedbbox</name><operator>-&gt;</operator><name>xMax</name></name> <operator>-</operator> <name><name>p_textbbox</name><operator>-&gt;</operator><name>xMax</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>line_character_t</name> <modifier>*</modifier></type><name>p_char</name> <init>= <expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i_char_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_char</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_BACKGROUND</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>, <decl><type ref="prev"/><name>i_z</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExtractComponents</name><argument_list>( <argument><expr><name><name>p_char</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_alpha</name> <init>= <expr><name><name>p_char</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_alpha</name> <operator>!=</operator> <name>STYLE_ALPHA_TRANSPARENT</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>absbox</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>xMin</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>segmentbgbox</name><operator>.</operator><name>xMin</name></name> <operator>-</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>xMin</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>xMax</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name><name>segmentbgbox</name><operator>.</operator><name>xMax</name></name> <operator>-</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>xMin</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_width</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>yMin</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>(<argument><expr><name><name>p_regionbbox</name><operator>-&gt;</operator><name>yMax</name></name> <operator>-</operator> <name><name>segmentbgbox</name><operator>.</operator><name>yMin</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_visible_height</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>yMax</name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_regionbbox</name><operator>-&gt;</operator><name>yMax</name></name> <operator>-</operator> <name><name>segmentbgbox</name><operator>.</operator><name>yMax</name></name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>dy</name> <init>= <expr><name><name>absbox</name><operator>.</operator><name>yMax</name></name></expr></init></decl>;</init> <condition><expr><name>dy</name> <operator>&lt;</operator> <name><name>absbox</name><operator>.</operator><name>yMin</name></name></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name><name>absbox</name><operator>.</operator><name>xMin</name></name></expr></init></decl>;</init> <condition><expr><name>dx</name> <operator>&lt;</operator> <name><name>absbox</name><operator>.</operator><name>xMax</name></name></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BlendPixel</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>, <argument><expr><name>i_alpha</name></expr></argument>, <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>i_z</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>segmentbgbox</name><operator>.</operator><name>xMin</name></name> <operator>=</operator> <name><name>segmentbgbox</name><operator>.</operator><name>xMax</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_char_index</name> <operator>=</operator> <name>i_seg_end</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_prev_style</name> <operator>=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><operator>-&gt;</operator><name>p_style</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>RenderCharAXYZ</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_offset_x</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_offset_y</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>g</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ExtractComponents</name>)<parameter_list>( <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BlendPixel</name>)<parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p_line</name><operator>-&gt;</operator><name>i_first_visible_char_index</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_last_visible_char_index</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>line_character_t</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>FT_BitmapGlyph</name></type> <name>p_glyph</name> <init>= <expr><ternary><condition><expr><name>g</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>ch</name><operator>-&gt;</operator><name>p_shadow</name></name></expr> </then><else>: <expr><ternary><condition><expr><name>g</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>ch</name><operator>-&gt;</operator><name>p_outline</name></name></expr> </then><else>: <expr><name><name>ch</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_glyph</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_a</name> <init>= <expr><name><name>ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_color</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>g</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>i_a</name> <operator>=</operator> <name>i_a</name> <operator>*</operator> <name><name>ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_shadow_alpha</name></name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_color</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_shadow_color</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>i_a</name> <operator>=</operator> <name>i_a</name> <operator>*</operator> <name><name>ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_outline_alpha</name></name> <operator>/</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_color</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_outline_color</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>i_color</name> <operator>=</operator> <name><name>ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>(<expr><name><name>ch</name><operator>-&gt;</operator><name>p_ruby</name></name> <operator>&amp;&amp;</operator> <name><name>ch</name><operator>-&gt;</operator><name>p_ruby</name><operator>-&gt;</operator><name>p_laid</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>RenderCharAXYZ</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><name>p_picture</name></expr></argument>,

<argument><expr><name><name>ch</name><operator>-&gt;</operator><name>p_ruby</name><operator>-&gt;</operator><name>p_laid</name></name></expr></argument>,

<argument><expr><name>i_offset_x</name></expr></argument>, <argument><expr><name>i_offset_y</name></expr></argument>,

<argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name>ExtractComponents</name></expr></argument>,

<argument><expr><name>BlendPixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_a</name> <operator>==</operator> <name>STYLE_ALPHA_TRANSPARENT</name> <operator>||</operator>

<operator>(</operator><name>g</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_SHADOW</name><operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator><name>g</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name><name>ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_OUTLINE</name><operator>)</operator> <operator>)</operator></expr>

)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>, <decl><type ref="prev"/><name>i_z</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ExtractComponents</name><argument_list>( <argument><expr><name>i_color</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_glyph_y</name> <init>= <expr><name>i_offset_y</name> <operator>-</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>top</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_glyph_x</name> <init>= <expr><name>i_offset_x</name> <operator>+</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>left</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BlendAXYZGlyph</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>,

<argument><expr><name>i_glyph_x</name></expr></argument>, <argument><expr><name>i_glyph_y</name></expr></argument>,

<argument><expr><name>i_a</name></expr></argument>, <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>i_z</name></expr></argument>,

<argument><expr><name>p_glyph</name></expr></argument>,

<argument><expr><name>BlendPixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>g</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>ch</name><operator>-&gt;</operator><name>i_line_thickness</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BlendAXYZLine</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>,

<argument><expr><name>i_glyph_x</name></expr></argument>, <argument><expr><name>i_glyph_y</name> <operator>+</operator> <name><name>p_glyph</name><operator>-&gt;</operator><name>top</name></name></expr></argument>,

<argument><expr><name>i_a</name></expr></argument>, <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>i_z</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>BlendPixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>RenderAXYZ</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region</name></decl></parameter>,

<parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line_head</name></decl></parameter>,

<parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_regionbbox</name></decl></parameter>,

<parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_paddedtextbbox</name></decl></parameter>,

<parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_textbbox</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_chroma</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>video_format_t</name> <modifier>*</modifier></type><name>fmt_out</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ExtractComponents</name>)<parameter_list>( <parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>FillPicture</name>)<parameter_list>( <parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>BlendPixel</name>)<parameter_list>(<parameter><decl><type><name>picture_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>i_chroma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_width</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>xMax</name></name> <operator>-</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>xMin</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_height</name></name> <operator>=</operator>

<name><name>fmt</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>yMax</name></name> <operator>-</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>yMin</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>regionnum</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>regionden</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_den</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>transfer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>primaries</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>space</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>mastering</name></name> <operator>=</operator> <name><name>fmt_out</name><operator>-&gt;</operator><name>mastering</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>p_picture</name> <init>= <expr><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name> <operator>=</operator> <call><name>picture_NewFromFormat</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_region</name><operator>-&gt;</operator><name>p_picture</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name>regionnum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name>regionden</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_x</name></decl>, <decl><type ref="prev"/><name>i_y</name></decl>, <decl><type ref="prev"/><name>i_z</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_region</name><operator>-&gt;</operator><name>b_noregionbg</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FillPicture</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><name>STYLE_ALPHA_TRANSPARENT</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ExtractComponents</name><argument_list>( <argument><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillPicture</name><argument_list>( <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name></expr></argument>, <argument><expr><name>i_x</name></expr></argument>, <argument><expr><name>i_y</name></expr></argument>, <argument><expr><name>i_z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>RenderBackground</name><argument_list>(<argument><expr><name>p_region</name></expr></argument>, <argument><expr><name>p_line_head</name></expr></argument>,

<argument><expr><name>p_regionbbox</name></expr></argument>, <argument><expr><name>p_paddedtextbbox</name></expr></argument>, <argument><expr><name>p_textbbox</name></expr></argument>,

<argument><expr><name>p_picture</name></expr></argument>, <argument><expr><name>ExtractComponents</name></expr></argument>, <argument><expr><name>BlendPixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>g</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><name>p_line_head</name></expr></init></decl>;</init> <condition><expr><name>p_line</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_line</name> <operator>=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>FT_Vector</name></type> <name>offset</name> <init>= <expr><call><name>GetAlignedOffset</name><argument_list>( <argument><expr><name>p_line</name></expr></argument>, <argument><expr><name>p_textbbox</name></expr></argument>, <argument><expr><name><name>p_region</name><operator>-&gt;</operator><name>i_text_align</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_glyph_offset_y</name> <init>= <expr><name><name>offset</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>yMax</name></name> <operator>+</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_base_line</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_glyph_offset_x</name> <init>= <expr><name><name>offset</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p_regionbbox</name><operator>-&gt;</operator><name>xMin</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>RenderCharAXYZ</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_picture</name></expr></argument>, <argument><expr><name>p_line</name></expr></argument>,

<argument><expr><name>i_glyph_offset_x</name></expr></argument>, <argument><expr><name>i_glyph_offset_y</name></expr></argument>, <argument><expr><name>g</name></expr></argument>,

<argument><expr><name>ExtractComponents</name></expr></argument>, <argument><expr><name>BlendPixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdateDefaultLiveStyles</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_color</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-color"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_alpha</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-background-opacity"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_style</name><operator>-&gt;</operator><name>i_background_color</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-background-color"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillDefaultStyles</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-font"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GET_FONT_BY_FAMILY_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>DEFAULT_FAMILY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_fontname</name></name> <operator>=</operator> <call><name>File_Select</name><argument_list>( <argument><expr><name>DEFAULT_FONT_FILE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>=</operator> <call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-monofont"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GET_FONT_BY_FAMILY_NAME</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>DEFAULT_MONOSPACE_FAMILY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>psz_monofontname</name></name> <operator>=</operator> <call><name>File_Select</name><argument_list>( <argument><expr><name>DEFAULT_MONOSPACE_FONT_FILE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UpdateDefaultLiveStyles</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_font_alpha</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-opacity"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_outline_alpha</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-outline-opacity"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_outline_color</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-outline-color"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_shadow_alpha</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-shadow-opacity"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_shadow_color</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-shadow-color"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_SHADOW</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-bold"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_forced_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>|=</operator> <name>STYLE_BOLD</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_forced_style</name><operator>-&gt;</operator><name>i_features</name></name> <operator>|=</operator> <name>STYLE_HAS_FLAGS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>text_style_Merge</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_forced_style</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeRubyBlockArray</name><parameter_list>( <parameter><decl><type><name>ruby_block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_array</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_array</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ruby_block_t</name> <modifier>*</modifier></type><name>p_lyt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>i_array</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_lyt</name> <operator>!=</operator> <name><name>pp_array</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_lyt</name> <operator>=</operator> <name><name>pp_array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_lyt</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_lyt</name><operator>-&gt;</operator><name>p_uchars</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_lyt</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_lyt</name><operator>-&gt;</operator><name>p_laid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLines</name><argument_list>( <argument><expr><name><name>p_lyt</name><operator>-&gt;</operator><name>p_laid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_lyt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_array</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeStylesArray</name><parameter_list>( <parameter><decl><type><name>text_style_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_styles</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_styles</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>i_styles</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_style</name> <operator>!=</operator> <name><name>pp_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_style</name> <operator>=</operator> <name><name>pp_styles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_styles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>AddTextAndStyles</name><parameter_list>( <parameter><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_rt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter>,

<parameter><decl><type><name>layout_text_block_t</name> <modifier>*</modifier></type><name>p_text_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uni_char_t</name> <modifier>*</modifier></type><name>p_ucs4</name> <init>= <expr><call><name>ToCharset</name><argument_list>( <argument><expr><name>FREETYPE_TO_UCS</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bytes</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ucs4</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_newchars</name> <init>= <expr><name>i_bytes</name> <operator>/</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>SIZE_MAX</name> <operator>/</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <name>i_newchars</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ucs4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_realloc</name> <init>= <expr><operator>(</operator><name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <name>i_newchars</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_text_block</name><operator>-&gt;</operator><name>p_uchars</name></name></expr></argument>, <argument><expr><name>i_realloc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_realloc</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_text_block</name><operator>-&gt;</operator><name>p_uchars</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>text_style_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <name>i_newchars</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_realloc</name> <operator>=</operator> <operator>(</operator><name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <name>i_newchars</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>text_style_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>p_realloc</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name><name>p_text_block</name><operator>-&gt;</operator><name>pp_styles</name></name></expr></argument>, <argument><expr><name>i_realloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_realloc</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_text_block</name><operator>-&gt;</operator><name>pp_styles</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>text_segment_ruby_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <name>i_newchars</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_realloc</name> <operator>=</operator> <operator>(</operator><name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <name>i_newchars</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>text_segment_ruby_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>p_realloc</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name><name>p_text_block</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr></argument>, <argument><expr><name>i_realloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_realloc</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_text_block</name><operator>-&gt;</operator><name>pp_ruby</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_text_block</name><operator>-&gt;</operator><name>p_uchars</name><index>[<expr><name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>p_ucs4</name></expr></argument>, <argument><expr><name>i_newchars</name> <operator>*</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ucs4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_mgstyle</name> <init>= <expr><call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_mgstyle</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>text_style_Merge</name><argument_list>( <argument><expr><name>p_mgstyle</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>text_style_Merge</name><argument_list>( <argument><expr><name>p_mgstyle</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_forced_style</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_newchars</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_block</name><operator>-&gt;</operator><name>pp_styles</name><index>[<expr><name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>p_mgstyle</name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>ruby_block_t</name> <modifier>*</modifier></type><name>p_rubyblock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_rt</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_ucs4</name> <operator>=</operator> <call><name>ToCharset</name><argument_list>( <argument><expr><name>FREETYPE_TO_UCS</name></expr></argument>, <argument><expr><name>psz_rt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_bytes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_ucs4</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_rubyblock</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ruby_block_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_rubyblock</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_rubyblock</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <call><name>text_style_Duplicate</name><argument_list>( <argument><expr><name>p_mgstyle</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_rubyblock</name><operator>-&gt;</operator><name>p_style</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ucs4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_rubyblock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_rubyblock</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name> <operator>*=</operator> <literal type="number">0.4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rubyblock</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>*=</operator> <literal type="number">0.4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rubyblock</name><operator>-&gt;</operator><name>p_uchars</name></name> <operator>=</operator> <name>p_ucs4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rubyblock</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <name>i_bytes</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_rubyblock</name><operator>-&gt;</operator><name>p_laid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_ucs4</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_newchars</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_text_block</name><operator>-&gt;</operator><name>pp_ruby</name><index>[<expr><name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>p_rubyblock</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_text_block</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+=</operator> <name>i_newchars</name></expr>;</expr_stmt>

<return>return <expr><name>i_newchars</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>SegmentsToTextAndStyles</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>p_segment</name></decl></parameter>,

<parameter><decl><type><name>layout_text_block_t</name> <modifier>*</modifier></type><name>p_text_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_nb_char</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>text_segment_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>p_segment</name></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>s</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>psz_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>s</name><operator>-&gt;</operator><name>p_ruby</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>text_segment_ruby_t</name> <modifier>*</modifier></type><name>p_ruby</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>p_ruby</name></name></expr></init></decl>;</init>

<condition><expr><name>p_ruby</name></expr>;</condition> <incr><expr><name>p_ruby</name> <operator>=</operator> <name><name>p_ruby</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>i_nb_char</name> <operator>+=</operator> <call><name>AddTextAndStyles</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>,

<argument><expr><name><name>p_ruby</name><operator>-&gt;</operator><name>psz_base</name></name></expr></argument>, <argument><expr><name><name>p_ruby</name><operator>-&gt;</operator><name>psz_rt</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>style</name></name></expr></argument>, <argument><expr><name>p_text_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_nb_char</name> <operator>+=</operator> <call><name>AddTextAndStyles</name><argument_list>( <argument><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>style</name></name></expr></argument>, <argument><expr><name>p_text_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_nb_char</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Render</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region_out</name></decl></parameter>,

<parameter><decl><type><name>subpicture_region_t</name> <modifier>*</modifier></type><name>p_region_in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>p_chroma_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_region_in</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_grid</name> <init>= <expr><name><name>p_region_in</name><operator>-&gt;</operator><name>b_gridmode</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name>b_grid</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">100</literal></expr> </then><else>: <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"sub-text-scale"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdateDefaultLiveStyles</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_face</name></name> <operator>=</operator> <call><name>SelectAndLoadFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_face</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Render(): Error loading default face"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>layout_text_block_t</name></type> <name>text_block</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>text_block</name><operator>.</operator><name>b_balanced</name></name> <operator>=</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>b_balanced_text</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text_block</name><operator>.</operator><name>b_grid</name></name> <operator>=</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>b_gridmode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text_block</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <call><name>SegmentsToTextAndStyles</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_region_in</name><operator>-&gt;</operator><name>p_text</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>text_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>text_block</name><operator>.</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>text_block</name><operator>.</operator><name>pp_styles</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>text_block</name><operator>.</operator><name>p_uchars</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rv</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>bbox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_max_face_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_max_width</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_width</name></name> <operator>&lt;</operator> <name>i_max_width</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max_width</name> <operator>=</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_width</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_region_in</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_x</name></name> <operator>&lt;</operator> <name>i_max_width</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max_width</name> <operator>-=</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_max_height</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>&lt;</operator> <name>i_max_height</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max_height</name> <operator>=</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_height</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_region_in</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_y</name></name> <operator>&lt;</operator> <name>i_max_height</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max_height</name> <operator>-=</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>text_block</name><operator>.</operator><name>i_max_width</name></name> <operator>=</operator> <name>i_max_width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text_block</name><operator>.</operator><name>i_max_height</name></name> <operator>=</operator> <name>i_max_height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>LayoutTextBlock</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text_block</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>text_block</name><operator>.</operator><name>p_laid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_max_face_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rv</name> <operator>&amp;&amp;</operator> <name><name>text_block</name><operator>.</operator><name>i_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>bbox</name><operator>.</operator><name>xMin</name></name> <operator>&lt;</operator> <name><name>bbox</name><operator>.</operator><name>xMax</name></name> <operator>&amp;&amp;</operator> <name><name>bbox</name><operator>.</operator><name>yMin</name></name> <operator>&lt;</operator> <name><name>bbox</name><operator>.</operator><name>yMax</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_chroma_list_yuvp</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>VLC_CODEC_YUVP</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name><name>p_chroma_list_rgba</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>VLC_CODEC_RGBA</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_background_opacity</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-background-opacity"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_background_opacity</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name>i_background_opacity</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_margin</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_background_opacity</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>b_gridmode</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>i_max_face_height</name> <operator>/</operator> <literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>i_margin</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>i_max_width</name> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>i_margin</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>i_max_height</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_margin</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-yuvp"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_chroma_list</name> <operator>=</operator> <name>p_chroma_list_yuvp</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name>p_chroma_list</name> <operator>||</operator> <operator>*</operator><name>p_chroma_list</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_chroma_list</name> <operator>=</operator> <name>p_chroma_list_rgba</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>paddedbbox</name> <init>= <expr><name>bbox</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>paddedbbox</name><operator>.</operator><name>xMin</name></name> <operator>-=</operator> <name>i_margin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>paddedbbox</name><operator>.</operator><name>xMax</name></name> <operator>+=</operator> <name>i_margin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>paddedbbox</name><operator>.</operator><name>yMin</name></name> <operator>-=</operator> <name>i_margin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>paddedbbox</name><operator>.</operator><name>yMax</name></name> <operator>+=</operator> <name>i_margin</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>regionbbox</name> <init>= <expr><name>paddedbbox</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>outertext_w</name> <init>= <expr><operator>(</operator><name><name>regionbbox</name><operator>.</operator><name>xMax</name></name> <operator>-</operator> <name><name>regionbbox</name><operator>.</operator><name>xMin</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>outertext_w</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_width</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_region_in</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_RIGHT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>regionbbox</name><operator>.</operator><name>xMin</name></name> <operator>-=</operator> <operator>(</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_width</name></name> <operator>-</operator> <name>outertext_w</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_region_in</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_LEFT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>regionbbox</name><operator>.</operator><name>xMax</name></name> <operator>+=</operator> <operator>(</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_width</name></name> <operator>-</operator> <name>outertext_w</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>regionbbox</name><operator>.</operator><name>xMin</name></name> <operator>-=</operator> <operator>(</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_width</name></name> <operator>-</operator> <name>outertext_w</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regionbbox</name><operator>.</operator><name>xMax</name></name> <operator>+=</operator> <operator>(</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_width</name></name> <operator>-</operator> <name>outertext_w</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>outertext_h</name> <init>= <expr><operator>(</operator><name><name>regionbbox</name><operator>.</operator><name>yMax</name></name> <operator>-</operator> <name><name>regionbbox</name><operator>.</operator><name>yMin</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>outertext_h</name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_height</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_region_in</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_TOP</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>regionbbox</name><operator>.</operator><name>yMin</name></name> <operator>-=</operator> <operator>(</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>-</operator> <name>outertext_h</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_region_in</name><operator>-&gt;</operator><name>i_text_align</name></name> <operator>&amp;</operator> <name>SUBPICTURE_ALIGN_BOTTOM</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>regionbbox</name><operator>.</operator><name>yMax</name></name> <operator>+=</operator> <operator>(</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>-</operator> <name>outertext_h</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>regionbbox</name><operator>.</operator><name>yMin</name></name> <operator>-=</operator> <operator>(</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>-</operator> <name>outertext_h</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>regionbbox</name><operator>.</operator><name>yMax</name></name> <operator>+=</operator> <operator>(</operator><name><name>p_region_in</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>-</operator> <name>outertext_h</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<expr_stmt><expr><name><name>p_region_out</name><operator>-&gt;</operator><name>i_x</name></name> <operator>=</operator> <operator>(</operator><name><name>paddedbbox</name><operator>.</operator><name>xMin</name></name> <operator>-</operator> <name><name>regionbbox</name><operator>.</operator><name>xMin</name></name><operator>)</operator> <operator>+</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_region_out</name><operator>-&gt;</operator><name>i_y</name></name> <operator>=</operator> <operator>(</operator><name><name>regionbbox</name><operator>.</operator><name>yMax</name></name> <operator>-</operator> <name><name>paddedbbox</name><operator>.</operator><name>yMax</name></name><operator>)</operator> <operator>+</operator> <name><name>p_region_in</name><operator>-&gt;</operator><name>i_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>regionbbox</name> <operator>=</operator> <name>paddedbbox</name></expr>;</expr_stmt>

</block_content>}</block>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>p_chroma</name> <init>= <expr><name>p_chroma_list</name></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>p_chroma</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>p_chroma</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_chroma</name> <operator>==</operator> <name>VLC_CODEC_YUVP</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>RenderYUVP</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_region_out</name></expr></argument>, <argument><expr><name><name>text_block</name><operator>.</operator><name>p_laid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>regionbbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paddedbbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p_chroma</name> <operator>==</operator> <name>VLC_CODEC_YUVA</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>RenderAXYZ</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_region_out</name></expr></argument>, <argument><expr><name><name>text_block</name><operator>.</operator><name>p_laid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>regionbbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paddedbbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbox</name></expr></argument>,

<argument><expr><name>VLC_CODEC_YUVA</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_region_out</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,

<argument><expr><name>YUVFromRGB</name></expr></argument>,

<argument><expr><name>FillYUVAPicture</name></expr></argument>,

<argument><expr><name>BlendYUVAPixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p_chroma</name> <operator>==</operator> <name>VLC_CODEC_RGBA</name>

<operator>||</operator> <operator>*</operator><name>p_chroma</name> <operator>==</operator> <name>VLC_CODEC_BGRA</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>RenderAXYZ</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_region_out</name></expr></argument>, <argument><expr><name><name>text_block</name><operator>.</operator><name>p_laid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>regionbbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paddedbbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbox</name></expr></argument>,

<argument><expr><operator>*</operator><name>p_chroma</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_region_out</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,

<argument><expr><name>RGBFromRGB</name></expr></argument>,

<argument><expr><name>FillRGBAPicture</name></expr></argument>,

<argument><expr><name>BlendRGBAPixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p_chroma</name> <operator>==</operator> <name>VLC_CODEC_ARGB</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>RenderAXYZ</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_region_out</name></expr></argument>, <argument><expr><name><name>text_block</name><operator>.</operator><name>p_laid</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>regionbbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paddedbbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bbox</name></expr></argument>,

<argument><expr><name>VLC_CODEC_ARGB</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_region_out</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,

<argument><expr><name>RGBFromRGB</name></expr></argument>,

<argument><expr><name>FillARGBPicture</name></expr></argument>,

<argument><expr><name>BlendARGBPixel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>rv</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FreeLines</name><argument_list>( <argument><expr><name><name>text_block</name><operator>.</operator><name>p_laid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>text_block</name><operator>.</operator><name>p_uchars</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeStylesArray</name><argument_list>( <argument><expr><name><name>text_block</name><operator>.</operator><name>pp_styles</name></name></expr></argument>, <argument><expr><name><name>text_block</name><operator>.</operator><name>i_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>text_block</name><operator>.</operator><name>pp_ruby</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeRubyBlockArray</name><argument_list>( <argument><expr><name><name>text_block</name><operator>.</operator><name>pp_ruby</name></name></expr></argument>, <argument><expr><name><name>text_block</name><operator>.</operator><name>i_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeFace</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_face</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>( <argument><expr><operator>(</operator> <name>FT_Face</name> <operator>)</operator> <name>p_face</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Create</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator> <name>filter_t</name> <operator>*</operator> <operator>)</operator> <name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FT_Init_FreeType</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize FreeType"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FT_Stroker_New</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_stroker</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to create stroker for outlining"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_stroker</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>face_map</name></name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_FULLY_SET</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_forced_style</name></name> <operator>=</operator> <call><name>text_style_Create</name><argument_list>( <argument><expr><name>STYLE_NO_DEFAULTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_forced_style</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FillDefaultStyles</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_shadow_angle</name> <init>= <expr><call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-shadow-angle"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_shadow_distance</name> <init>= <expr><call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-shadow-distance"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_shadow_distance</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name>f_shadow_distance</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_shadow_vector_x</name></name> <operator>=</operator> <name>f_shadow_distance</name> <operator>*</operator> <call><name>cosf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name><operator>)</operator> <operator>*</operator> <name>f_shadow_angle</name> <operator>/</operator> <literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_shadow_vector_y</name></name> <operator>=</operator> <name>f_shadow_distance</name> <operator>*</operator> <call><name>sinf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">2.</literal> <operator>*</operator> <name>M_PI</name><operator>)</operator> <operator>*</operator> <name>f_shadow_angle</name> <operator>/</operator> <literal type="number">360</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LoadFontsFromAttachments</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_ENOMEM</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONTCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_select</name></name> <operator>=</operator> <name>Generic_Select</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name> <operator>=</operator> <name>FontConfig_GetFamily</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_fallbacks</name></name> <operator>=</operator> <name>FontConfig_GetFallbacks</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FontConfig_Prepare</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__APPLE__</name></expr></argument> )</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_select</name></name> <operator>=</operator> <name>Generic_Select</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name> <operator>=</operator> <name>CoreText_GetFamily</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_fallbacks</name></name> <operator>=</operator> <name>CoreText_GetFallbacks</name></expr>;</expr_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:elif>

<if_stmt><if>if<condition>( <expr><call><name>InitDWrite</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name> <operator>=</operator> <name>DWrite_GetFamily</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_fallbacks</name></name> <operator>=</operator> <name>DWrite_GetFallbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_select</name></name> <operator>=</operator> <name>Generic_Select</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>VLC_WINSTORE_APP</name></expr></cpp:if>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Error initializing DirectWrite"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"DirectWrite initialization failed. Falling back to GDI/Uniscribe"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_win32_default</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"Tahoma"</literal></expr>, <expr><literal type="string">"FangSong"</literal></expr>, <expr><literal type="string">"SimHei"</literal></expr>, <expr><literal type="string">"KaiTi"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name> <operator>=</operator> <name>Win32_GetFamily</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_fallbacks</name></name> <operator>=</operator> <name>Win32_GetFallbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_select</name></name> <operator>=</operator> <name>Generic_Select</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>InitDefaultList</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>ppsz_win32_default</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ppsz_win32_default</name></expr></argument> )</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>ppsz_win32_default</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>__ANDROID__</name></expr></argument> )</argument_list></call></expr></cpp:elif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name> <operator>=</operator> <name>Android_GetFamily</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_fallbacks</name></name> <operator>=</operator> <name>Android_GetFallbacks</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_select</name></name> <operator>=</operator> <name>Generic_Select</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Android_Prepare</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_ENOMEM</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_select</name></name> <operator>=</operator> <name>Dummy_Select</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_face</name></name> <operator>=</operator> <call><name>SelectAndLoadFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_face</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Error loading default face"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONTCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>FontConfig_Unprepare</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_filter</name><operator>-&gt;</operator><name>pf_render</name></name> <operator>=</operator> <name>Render</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>Destroy</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Destroy</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name> <init>= <expr><operator>(</operator><name>filter_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PLATFORM_FONTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"------------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"p_sys-&gt;p_families:"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"------------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DumpFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"-----------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"p_sys-&gt;family_map"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"-----------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DumpDictionary</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"-------------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"p_sys-&gt;fallback_map"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"-------------------"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DumpDictionary</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>text_style_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_forced_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>FreeFamilies</name></expr></argument>, <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>face_map</name></name></expr></argument>, <argument><expr><name>FreeFace</name></expr></argument>, <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeFamiliesAndFonts</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_font_attachments</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_font_attachments</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_font_attachments</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_font_attachments</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONTCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_face</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FontConfig_Unprepare</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:elif>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name> <operator>==</operator> <name>DWrite_GetFamily</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ReleaseDWrite</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_stroker</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Stroker_Done</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_stroker</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FT_Done_FreeType</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
