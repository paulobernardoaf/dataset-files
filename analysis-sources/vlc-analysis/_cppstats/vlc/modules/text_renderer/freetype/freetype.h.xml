<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\text_renderer\freetype\freetype.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_text_style.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_arrays.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ft2build.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_FREETYPE_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_GLYPH_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_STROKER_H</cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_FLOOR</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((X &amp; -64) &gt;&gt; 6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_CEIL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((X + 63) &amp; -64) &gt;&gt; 6)</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>FT_MulFix</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FT_MulFix</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((v)*(s))&gt;&gt;16)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>uint16_t</name></type> <name>uni_char_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREETYPE_TO_UCS</name></cpp:macro> <cpp:value>"UCS-2LE"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>uint32_t</name></type> <name>uni_char_t</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREETYPE_TO_UCS</name></cpp:macro> <cpp:value>"UCS-4BE"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREETYPE_TO_UCS</name></cpp:macro> <cpp:value>"UCS-4LE"</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>vlc_family_t</name></name></type> <name>vlc_family_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>FT_Library</name></type> <name>p_library</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FT_Stroker</name></type> <name>p_stroker</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_default_style</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_forced_style</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>f_shadow_vector_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_shadow_vector_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_font_attachments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_font_attachments</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_families</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>family_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>fallback_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name></type> <name>face_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_fallback_counter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_scale</name></decl>;</decl_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>pf_select</name>) <parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>family</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>bold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>italic</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>index</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>pf_get_family</name>) <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>vlc_family_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>pf_get_fallbacks</name>) <parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,

<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_dw_sys</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>filter_sys_t</name>;</typedef>

<function_decl><type><name>FT_Face</name></type> <name>SelectAndLoadFace</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter>,

<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BBoxInit</name><parameter_list>( <parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>xMin</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>yMin</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>xMax</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>yMax</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BBoxEnlarge</name><parameter_list>( <parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_max</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>FT_BBox</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_max</name><operator>-&gt;</operator><name>xMin</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_max</name><operator>-&gt;</operator><name>xMin</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>xMin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_max</name><operator>-&gt;</operator><name>yMin</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_max</name><operator>-&gt;</operator><name>yMin</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>yMin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_max</name><operator>-&gt;</operator><name>xMax</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_max</name><operator>-&gt;</operator><name>xMax</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>xMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_max</name><operator>-&gt;</operator><name>yMax</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_max</name><operator>-&gt;</operator><name>yMax</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>yMax</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
