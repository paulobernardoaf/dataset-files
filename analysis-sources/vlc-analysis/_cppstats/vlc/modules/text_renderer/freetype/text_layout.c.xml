<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\text_renderer\freetype\text_layout.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_text_style.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ft2build.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_FREETYPE_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_GLYPH_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_STROKER_H</cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> FT_SYNTHESIS_H</cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRIBIDI_NO_DEPRECATED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fribidi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;hb-ft.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"freetype.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"text_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform_fonts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HAVE_FONTCONFIG</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FONT_FALLBACK</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONTCONFIG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FONT_FALLBACK</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FONT_FALLBACK</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_FONT_FALLBACK</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONT_FALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:warning>#<cpp:directive>warning</cpp:directive> YOU ARE MISSING FONTS FALLBACK. TEXT WILL BE INCORRECT</cpp:warning>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>run_desc_t</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_start_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_end_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>hb_script_t</name></type> <name>script</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hb_direction_t</name></type> <name>direction</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hb_font_t</name> <modifier>*</modifier></type><name>p_hb_font</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hb_buffer_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hb_glyph_info_t</name> <modifier>*</modifier></type><name>p_glyph_infos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hb_glyph_position_t</name> <modifier>*</modifier></type><name>p_glyph_positions</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_glyph_count</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>run_desc_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>glyph_bitmaps_t</name>

<block>{

<decl_stmt><decl><type><name>FT_Glyph</name></type> <name>p_glyph</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Glyph</name></type> <name>p_outline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Glyph</name></type> <name>p_shadow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>glyph_bbox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>outline_bbox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>shadow_bbox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_y_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_x_advance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_y_advance</name></decl>;</decl_stmt>

}</block></struct></type> <name>glyph_bitmaps_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>paragraph_t</name>

<block>{

<decl_stmt><decl><type><name>uni_char_t</name> <modifier>*</modifier></type><name>p_code_points</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_glyph_indices</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_styles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ruby_block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_ruby</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Face</name> <modifier>*</modifier></type><name>pp_faces</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_run_ids</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>glyph_bitmaps_t</name> <modifier>*</modifier></type><name>p_glyph_bitmaps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>run_desc_t</name> <modifier>*</modifier></type><name>p_runs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_runs_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_runs_size</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>hb_script_t</name> <modifier>*</modifier></type><name>p_scripts</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>FriBidiCharType</name> <modifier>*</modifier></type><name>p_types</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FRIBIDI_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>FriBidiBracketType</name> <modifier>*</modifier></type><name>p_btypes</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>FriBidiLevel</name> <modifier>*</modifier></type><name>p_levels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiStrIndex</name> <modifier>*</modifier></type><name>pi_reordered_indices</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiParType</name></type> <name>paragraph_type</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></struct></type> <name>paragraph_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeLine</name><parameter_list>( <parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>line_character_t</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><operator>(</operator><name>FT_Glyph</name><operator>)</operator><name><name>ch</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ch</name><operator>-&gt;</operator><name>p_outline</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><operator>(</operator><name>FT_Glyph</name><operator>)</operator><name><name>ch</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ch</name><operator>-&gt;</operator><name>p_shadow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><operator>(</operator><name>FT_Glyph</name><operator>)</operator><name><name>ch</name><operator>-&gt;</operator><name>p_shadow</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreeLines</name><parameter_list>( <parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_lines</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><name>p_lines</name></expr></init></decl>;</init> <condition><expr><name>p_line</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_line</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FreeLine</name><argument_list>( <argument><expr><name>p_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_line</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>line_desc_t</name> <modifier>*</modifier></type><name>NewLine</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_line</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_line</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_base_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_first_visible_char_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_last_visible_char_index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BBoxInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_line</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ShiftGlyph</name><parameter_list>( <parameter><decl><type><name>FT_BitmapGlyph</name></type> <name>g</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>g</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>left</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>g</name><operator>-&gt;</operator><name>top</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ShiftChar</name><parameter_list>( <parameter><decl><type><name>line_character_t</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ShiftGlyph</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShiftGlyph</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>p_shadow</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ShiftGlyph</name><argument_list>( <argument><expr><name><name>c</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMin</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMax</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMin</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMax</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ShiftLine</name><parameter_list>( <parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ShiftChar</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_base_line</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMin</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMax</name></name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMin</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMax</name></name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MoveLineTo</name><parameter_list>( <parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ShiftLine</name><argument_list>( <argument><expr><name>p_line</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMin</name></name></expr></argument>,

<argument><expr><name>y</name> <operator>-</operator> <name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMax</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IndentCharsFrom</name><parameter_list>( <parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>line_character_t</name> <modifier>*</modifier></type><name>p_ch</name> <init>= <expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i_start</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ShiftChar</name><argument_list>( <argument><expr><name>p_ch</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BBoxEnlarge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ch</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RubyBaseAdvance</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_ruby</name> <operator>!=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i_start</name></expr>]</index></name><operator>.</operator><name>p_ruby</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_count</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_total</name> <operator>+=</operator> <operator>(</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bbox</name><operator>.</operator><name>xMax</name></name> <operator>-</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bbox</name><operator>.</operator><name>xMin</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_total</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FixGlyph</name><parameter_list>( <parameter><decl><type><name>FT_Glyph</name></type> <name>glyph</name></decl></parameter>, <parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_bbox</name></decl></parameter>,

<parameter><decl><type><name>FT_Pos</name></type> <name>i_x_advance</name></decl></parameter>, <parameter><decl><type><name>FT_Pos</name></type> <name>i_y_advance</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>FT_Vector</name> <modifier>*</modifier></type><name>p_pen</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FT_BitmapGlyph</name></type> <name>glyph_bmp</name> <init>= <expr><operator>(</operator><name>FT_BitmapGlyph</name><operator>)</operator><name>glyph</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bbox</name><operator>-&gt;</operator><name>xMin</name></name> <operator>&gt;=</operator> <name><name>p_bbox</name><operator>-&gt;</operator><name>xMax</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bbox</name><operator>-&gt;</operator><name>xMin</name></name> <operator>=</operator> <call><name>FT_CEIL</name><argument_list>(<argument><expr><name><name>p_pen</name><operator>-&gt;</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bbox</name><operator>-&gt;</operator><name>xMax</name></name> <operator>=</operator> <call><name>FT_CEIL</name><argument_list>(<argument><expr><name><name>p_pen</name><operator>-&gt;</operator><name>x</name></name> <operator>+</operator> <name>i_x_advance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph_bmp</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <name><name>p_bbox</name><operator>-&gt;</operator><name>xMin</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bbox</name><operator>-&gt;</operator><name>yMin</name></name> <operator>&gt;=</operator> <name><name>p_bbox</name><operator>-&gt;</operator><name>yMax</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bbox</name><operator>-&gt;</operator><name>yMax</name></name> <operator>=</operator> <call><name>FT_CEIL</name><argument_list>(<argument><expr><name><name>p_pen</name><operator>-&gt;</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bbox</name><operator>-&gt;</operator><name>yMin</name></name> <operator>=</operator> <call><name>FT_CEIL</name><argument_list>(<argument><expr><name><name>p_pen</name><operator>-&gt;</operator><name>y</name></name> <operator>+</operator> <name>i_y_advance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>glyph_bmp</name><operator>-&gt;</operator><name>top</name></name> <operator>=</operator> <name><name>p_bbox</name><operator>-&gt;</operator><name>yMax</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>paragraph_t</name> <modifier>*</modifier></type><name>NewParagraph</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uni_char_t</name> <modifier>*</modifier></type><name>p_code_points</name></decl></parameter>,

<parameter><decl><type><name>text_style_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_styles</name></decl></parameter>,

<parameter><decl><type><name>ruby_block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_ruby</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_runs_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>paragraph_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_paragraph</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name> <operator>=</operator>

<call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_glyph_indices</name></name> <operator>=</operator>

<call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_glyph_indices</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name></name> <operator>=</operator>

<call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name></name> <operator>=</operator>

<call><name>calloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name></name> <operator>=</operator>

<call><name>calloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name></name> <operator>=</operator>

<call><name>calloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_ruby</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_runs_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>run_desc_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_size</name></name> <operator>=</operator> <name>i_runs_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name> <operator>||</operator> <operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_glyph_indices</name></name>

<operator>||</operator> <operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name></name> <operator>||</operator> <operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name></name>

<operator>||</operator> <operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name></name><operator>||</operator> <operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name></name>

<operator>||</operator> <operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_code_points</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name></expr></argument>, <argument><expr><name>p_code_points</name></expr></argument>,

<argument><expr><name>i_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_code_points</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_styles</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name></name></expr></argument>, <argument><expr><name>pp_styles</name></expr></argument>,

<argument><expr><name>i_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>pp_styles</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr></argument>, <argument><expr><name>pp_ruby</name></expr></argument>, <argument><expr><name>i_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>pp_ruby</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FRIBIDI_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_btypes</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_btypes</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_reordered_indices</name></name> <operator>=</operator>

<call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_reordered_indices</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name> <operator>||</operator> <operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name>

<operator>||</operator> <operator>!</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_reordered_indices</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_reordered_indices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>int</name></type> <name>i_direction</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-text-direction"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_direction</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>paragraph_type</name></name> <operator>=</operator> <name>FRIBIDI_PAR_LTR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_direction</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>paragraph_type</name></name> <operator>=</operator> <name>FRIBIDI_PAR_RTL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>paragraph_type</name></name> <operator>=</operator> <name>FRIBIDI_PAR_ON</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>p_paragraph</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_glyph_indices</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_glyph_indices</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FRIBIDI_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_btypes</name></name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_btypes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_reordered_indices</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_reordered_indices</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeParagraph</name><parameter_list>( <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_glyph_indices</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_reordered_indices</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FRIBIDI_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_btypes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>AnalyzeParagraph</name><parameter_list>( <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fribidi_get_bidi_types</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FRIBIDI_MAJOR_VERSION</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><call><name>fribidi_get_bracket_types</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_btypes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fribidi_get_par_embedding_levels_ex</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_btypes</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>paragraph_type</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>fribidi_get_par_embedding_levels</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>paragraph_type</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>hb_unicode_funcs_t</name> <modifier>*</modifier></type><name>p_funcs</name> <init>=

<expr><call><name>hb_unicode_funcs_create</name><argument_list>( <argument><expr><call><name>hb_unicode_funcs_get_default</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator>

<call><name>hb_unicode_script</name><argument_list>( <argument><expr><name>p_funcs</name></expr></argument>, <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>hb_unicode_funcs_destroy</name><argument_list>( <argument><expr><name>p_funcs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>hb_script_t</name></type> <name>i_last_script</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_script_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_set_index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <name>HB_SCRIPT_COMMON</name>

<operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <name>HB_SCRIPT_INHERITED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_last_script_index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>i_last_script</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_last_set_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i_last_set_index</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>i_last_script</name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_last_script_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_last_set_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>AddRun</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_start_offset</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_end_offset</name></decl></parameter>,

<parameter><decl><type><name>FT_Face</name></type> <name>p_face</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_start_offset</name> <operator>&gt;=</operator> <name>i_end_offset</name>

<operator>||</operator> <name><name>i_start_offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>i_start_offset</name> <operator>&gt;=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name>

<operator>||</operator> <name>i_end_offset</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_end_offset</name></expr></argument> &gt;</argument_list></name> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"AddRun() invalid parameters. Paragraph size: %d, "</literal>

<literal type="string">"Start offset: %d, End offset: %d"</literal></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><name>i_start_offset</name></expr></argument>, <argument><expr><name>i_end_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name> <operator>==</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_size</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>run_desc_t</name> <modifier>*</modifier></type><name>p_new_runs</name> <init>=

<expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_size</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_new_runs</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_new_runs</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_new_runs</name> <operator>+</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_size</name></name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_new_runs</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name> <operator>=</operator> <name>p_new_runs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_run_id</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>run_desc_t</name> <modifier>*</modifier></type><name>p_run</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name> <operator>+</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name> <operator>=</operator> <name>i_start_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>i_end_offset</name></name> <operator>=</operator> <name>i_end_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_face</name></name> <operator>=</operator> <name>p_face</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_style</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <name>p_style</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name><index>[ <expr><name>i_start_offset</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>script</name></name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i_start_offset</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>direction</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name><index>[ <expr><name>i_start_offset</name></expr> ]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then>

<expr><name>HB_DIRECTION_RTL</name></expr> </then><else>: <expr><name>HB_DIRECTION_LTR</name></expr></else></ternary></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_start_offset</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_end_offset</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>i_run_id</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONT_FALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>AddRunWithFallback</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_start_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_end_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_start_offset</name> <operator>&gt;=</operator> <name>i_end_offset</name>

<operator>||</operator> <name><name>i_start_offset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>i_start_offset</name> <operator>&gt;=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name>

<operator>||</operator> <name>i_end_offset</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_end_offset</name></expr></argument> &gt;</argument_list></name> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"AddRunWithFallback() invalid parameters. Paragraph size: %d, "</literal>

<literal type="string">"Start offset: %d, End offset: %d"</literal></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><name>i_start_offset</name></expr></argument>, <argument><expr><name>i_end_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name><index>[ <expr><name>i_start_offset</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FACES</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<decl_stmt><decl><type><name>FT_Face</name></type> <name><name>pp_faces</name><index>[ <expr><name>MAX_FACES</name></expr> ]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pp_faces</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <call><name>SelectAndLoadFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_start_offset</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_end_offset</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_glyph_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>p_face</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <name>FRIBIDI_TYPE_WS</name>

<operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <name>FRIBIDI_TYPE_CS</name>

<operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <name>FRIBIDI_TYPE_ON</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_glyph_index</name> <operator>=</operator> <call><name>FT_Get_Char_Index</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_glyph_index</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>p_face</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<do>do <block>{<block_content>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name><name>pp_faces</name><index>[ <expr><name>i_index</name></expr> ]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_face</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name><name>pp_faces</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>=</operator>

<call><name>SelectAndLoadFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_face</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_glyph_index</name> <operator>=</operator> <call><name>FT_Get_Char_Index</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_glyph_index</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>p_face</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><name>i_glyph_index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>++</operator><name>i_index</name> <operator>&lt;</operator> <name>MAX_FACES</name></expr> )</condition>;</do>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>i_run_start</name> <init>= <expr><name>i_start_offset</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_start_offset</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>i_end_offset</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name>i_end_offset</name>

<operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name><index>[ <expr><name>i_run_start</name></expr> ]</index></name> <operator>!=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name><index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>AddRun</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>, <argument><expr><name>i_run_start</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_faces</name><index>[ <expr><name>i_run_start</name></expr> ]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_run_start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>FaceStyleEquals</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style2</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_style1</name> <operator>||</operator> <operator>!</operator><name>p_style2</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_style1</name> <operator>==</operator> <name>p_style2</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_style_mask</name> <init>= <expr><name>STYLE_BOLD</name> <operator>|</operator> <name>STYLE_ITALIC</name> <operator>|</operator> <name>STYLE_HALFWIDTH</name> <operator>|</operator> <name>STYLE_DOUBLEWIDTH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fontname1</name> <init>= <expr><ternary><condition><expr><name><name>p_style1</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_MONOSPACED</name></expr>

?</condition><then> <expr><name><name>p_style1</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr> </then><else>: <expr><name><name>p_style1</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fontname2</name> <init>= <expr><ternary><condition><expr><name><name>p_style2</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_MONOSPACED</name></expr>

?</condition><then> <expr><name><name>p_style2</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr> </then><else>: <expr><name><name>p_style2</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_size1</name> <init>= <expr><call><name>ConvertToLiveSize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_style1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_size2</name> <init>= <expr><call><name>ConvertToLiveSize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_style2</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>(</operator><name><name>p_style1</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>i_style_mask</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>p_style2</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>i_style_mask</name><operator>)</operator>

<operator>&amp;&amp;</operator> <name>i_size1</name> <operator>==</operator> <name>i_size2</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_fontname1</name></expr></argument>, <argument><expr><name>psz_fontname2</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ItemizeParagraph</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"ItemizeParagraph() invalid parameters. Paragraph size: %d"</literal></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_run_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_last_style</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>hb_script_t</name></type> <name>last_script</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FriBidiLevel</name></type> <name>last_level</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name>last_script</name> <operator>!=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i</name></expr> ]</index></name>

<operator>||</operator> <name>last_level</name> <operator>!=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name><index>[ <expr><name>i</name></expr> ]</index></name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>||</operator> <operator>!</operator><call><name>FaceStyleEquals</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_last_style</name></expr></argument>, <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FONT_FALLBACK</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AddRunWithFallback</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>, <argument><expr><name>i_last_run_start</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AddRun</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>, <argument><expr><name>i_last_run_start</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_last_run_start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_last_style</name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>last_script</name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_level</name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ShapeParagraphHarfBuzz</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_old_paragraph</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name> <init>= <expr><operator>*</operator><name>p_old_paragraph</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_new_paragraph</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_total_glyphs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"ShapeParagraphHarfBuzz() invalid parameters. "</literal>

<literal type="string">"Paragraph size: %d. Runs count %d"</literal></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>run_desc_t</name> <modifier>*</modifier></type><name>p_run</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><name><name>p_run</name><operator>-&gt;</operator><name>p_style</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_run</name><operator>-&gt;</operator><name>p_face</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <call><name>SelectAndLoadFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_face</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_face</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_style</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <name>p_style</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_face</name></name> <operator>=</operator> <name>p_face</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name><name>p_run</name><operator>-&gt;</operator><name>p_face</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_hb_font</name></name> <operator>=</operator> <call><name>hb_ft_font_create</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_run</name><operator>-&gt;</operator><name>p_hb_font</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"ShapeParagraphHarfBuzz(): hb_ft_font_create() error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <call><name>hb_buffer_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_run</name><operator>-&gt;</operator><name>p_buffer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"ShapeParagraphHarfBuzz(): hb_buffer_create() error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>hb_buffer_set_direction</name><argument_list>( <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>direction</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hb_buffer_set_script</name><argument_list>( <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>script</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>hb_buffer_add_utf16</name><argument_list>( <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name> <operator>+</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name></expr></argument>,

<argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>i_end_offset</name></name> <operator>-</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>i_end_offset</name></name> <operator>-</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>hb_buffer_add_utf32</name><argument_list>( <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name> <operator>+</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name></expr></argument>,

<argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>i_end_offset</name></name> <operator>-</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>i_end_offset</name></name> <operator>-</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>hb_shape</name><argument_list>( <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_hb_font</name></name></expr></argument>, <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_glyph_infos</name></name> <operator>=</operator>

<call><name>hb_buffer_get_glyph_infos</name><argument_list>( <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_run</name><operator>-&gt;</operator><name>i_glyph_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_glyph_positions</name></name> <operator>=</operator>

<call><name>hb_buffer_get_glyph_positions</name><argument_list>( <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_run</name><operator>-&gt;</operator><name>i_glyph_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_run</name><operator>-&gt;</operator><name>i_glyph_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"ShapeParagraphHarfBuzz() invalid glyph count in shaped run"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_total_glyphs</name> <operator>+=</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_glyph_count</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_new_paragraph</name> <operator>=</operator> <call><name>NewParagraph</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_total_glyphs</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_new_paragraph</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_ENOMEM</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ruby_block_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>paragraph_type</name></name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>paragraph_type</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>run_desc_t</name> <modifier>*</modifier></type><name>p_run</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hb_glyph_info_t</name> <modifier>*</modifier></type><name>p_infos</name> <init>= <expr><name><name>p_run</name><operator>-&gt;</operator><name>p_glyph_infos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hb_glyph_position_t</name> <modifier>*</modifier></type><name>p_positions</name> <init>= <expr><name><name>p_run</name><operator>-&gt;</operator><name>p_glyph_positions</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_glyph_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_run_index</name> <init>= <expr><ternary><condition><expr><name><name>p_run</name><operator>-&gt;</operator><name>direction</name></name> <operator>==</operator> <name>HB_DIRECTION_LTR</name></expr> ?</condition><then>

<expr><name>j</name></expr> </then><else>: <expr><name><name>p_run</name><operator>-&gt;</operator><name>i_glyph_count</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_source_index</name> <init>=

<expr><name><name>p_infos</name><index>[ <expr><name>i_run_index</name></expr> ]</index></name><operator>.</operator><name>cluster</name> <operator>+</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>pi_glyph_indices</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>=</operator>

<name><name>p_infos</name><index>[ <expr><name>i_run_index</name></expr> ]</index></name><operator>.</operator><name>codepoint</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>=</operator>

<name><name>p_paragraph</name><operator>-&gt;</operator><name>p_scripts</name><index>[ <expr><name>i_source_index</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>=</operator>

<name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>i_source_index</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>p_levels</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>=</operator>

<name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name><index>[ <expr><name>i_source_index</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>pp_styles</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>=</operator>

<name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name><index>[ <expr><name>i_source_index</name></expr> ]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name><index>[ <expr><name>i_index</name></expr> ]</index></name> <operator>=</operator>

<name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name><index>[ <expr><name>i_source_index</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i_index</name></expr> ]</index></name><operator>.</operator><name>i_x_offset</name> <operator>=</operator>

<name><name>p_positions</name><index>[ <expr><name>i_run_index</name></expr> ]</index></name><operator>.</operator><name>x_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i_index</name></expr> ]</index></name><operator>.</operator><name>i_y_offset</name> <operator>=</operator>

<name><name>p_positions</name><index>[ <expr><name>i_run_index</name></expr> ]</index></name><operator>.</operator><name>y_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i_index</name></expr> ]</index></name><operator>.</operator><name>i_x_advance</name> <operator>=</operator>

<name><name>p_positions</name><index>[ <expr><name>i_run_index</name></expr> ]</index></name><operator>.</operator><name>x_advance</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_new_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i_index</name></expr> ]</index></name><operator>.</operator><name>i_y_advance</name> <operator>=</operator>

<name><name>p_positions</name><index>[ <expr><name>i_run_index</name></expr> ]</index></name><operator>.</operator><name>y_advance</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>i_index</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><call><name>AddRun</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_new_paragraph</name></expr></argument>, <argument><expr><name>i_index</name> <operator>-</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_glyph_count</name></name></expr></argument>,

<argument><expr><name>i_index</name></expr></argument>, <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_face</name></name></expr></argument>, <argument><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>hb_font_destroy</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>p_hb_font</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hb_buffer_destroy</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FreeParagraph</name><argument_list>( <argument><expr><operator>*</operator><name>p_old_paragraph</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_old_paragraph</name> <operator>=</operator> <name>p_new_paragraph</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>p_hb_font</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hb_font_destroy</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>p_hb_font</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>p_buffer</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>hb_buffer_destroy</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>p_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_new_paragraph</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeParagraph</name><argument_list>( <argument><expr><name>p_new_paragraph</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_HARFBUZZ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>int</name></type> <name>ShapeParagraphFriBidi</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"ShapeParagraphFriBidi() invalid parameters. Paragraph size: %d"</literal></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FriBidiJoiningType</name> <modifier>*</modifier></type><name>p_joining_types</name> <init>=

<expr><call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_joining_types</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_joining_types</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fribidi_get_joining_types</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><name>p_joining_types</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fribidi_join_arabic</name><argument_list>( <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name></name></expr></argument>, <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name></expr></argument>, <argument><expr><name>p_joining_types</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fribidi_shape</name><argument_list>( <argument><expr><name>FRIBIDI_FLAGS_DEFAULT</name> <operator>|</operator> <name>FRIBIDI_FLAGS_ARABIC</name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>,

<argument><expr><name>p_joining_types</name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_joining_types</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>RemoveZeroWidthCharacters</name><parameter_list>( <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uni_char_t</name></type> <name>ch</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ch</name> <operator>==</operator> <literal type="number">0xfeff</literal>

<operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="number">0x061c</literal>

<operator>||</operator> <operator>(</operator> <name>ch</name> <operator>&gt;=</operator> <literal type="number">0x202a</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0x202e</literal> <operator>)</operator>

<operator>||</operator> <operator>(</operator> <name>ch</name> <operator>&gt;=</operator> <literal type="number">0x2060</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0x2069</literal> <operator>)</operator>

<operator>||</operator> <operator>(</operator> <name>ch</name> <operator>&gt;=</operator> <literal type="number">0x200b</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="number">0x200f</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>glyph_bitmaps_t</name> <modifier>*</modifier></type><name>p_bitmaps</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_x_advance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_y_advance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ZeroNsmAdvance</name><parameter_list>( <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <name>FRIBIDI_TYPE_NSM</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_x_advance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_y_advance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LoadGlyphs</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_use_glyph_indices</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_overwrite_advance</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_max_advance_x</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LoadGlyphs() invalid parameters. "</literal>

<literal type="string">"Paragraph size: %d. Runs count %d"</literal></expr></argument>, <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_max_advance_x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>run_desc_t</name> <modifier>*</modifier></type><name>p_run</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><name><name>p_run</name><operator>-&gt;</operator><name>p_style</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_live_size</name> <init>= <expr><call><name>ConvertToLiveSize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_run</name><operator>-&gt;</operator><name>p_face</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <call><name>SelectAndLoadFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[<expr><name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_face</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_face</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_style</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <name>p_style</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_run</name><operator>-&gt;</operator><name>p_face</name></name> <operator>=</operator> <name>p_face</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name><name>p_run</name><operator>-&gt;</operator><name>p_face</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_stroker</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_OUTLINE</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f_outline_thickness</name> <init>=

<expr><call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"freetype-outline-thickness"</literal></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">100.0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>f_outline_thickness</name> <operator>=</operator> <call><name>VLC_CLIP</name><argument_list>( <argument><expr><name>f_outline_thickness</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_radius</name> <init>= <expr><operator>(</operator> <name>i_live_size</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>)</operator> <operator>*</operator> <name>f_outline_thickness</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FT_Stroker_Set</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_stroker</name></name></expr></argument>,

<argument><expr><name>i_radius</name></expr></argument>,

<argument><expr><name>FT_STROKER_LINECAP_ROUND</name></expr></argument>,

<argument><expr><name>FT_STROKER_LINEJOIN_ROUND</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>p_run</name><operator>-&gt;</operator><name>i_start_offset</name></name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_run</name><operator>-&gt;</operator><name>i_end_offset</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_glyph_index</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_use_glyph_indices</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_glyph_index</name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_glyph_indices</name><index>[ <expr><name>j</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_glyph_index</name> <operator>=</operator>

<call><name>FT_Get_Char_Index</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[ <expr><name>j</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>glyph_bitmaps_t</name> <modifier>*</modifier></type><name>p_bitmaps</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name></name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_GLYPH</name><parameter_list>( <parameter><type><name>p_bitmaps</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>{ p_bitmaps-&gt;p_glyph = 0; p_bitmaps-&gt;p_outline = 0; p_bitmaps-&gt;p_shadow = 0; p_bitmaps-&gt;i_x_advance = 0; p_bitmaps-&gt;i_y_advance = 0; continue; }</cpp:value></cpp:define>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_glyph_index</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uni_char_t</name></type> <name>codepoint</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[ <expr><name>j</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>codepoint</name> <operator>==</operator> <literal type="number">0x0009</literal> <operator>||</operator> <name>codepoint</name> <operator>==</operator> <literal type="number">0x00A0</literal>

<operator>||</operator> <name>codepoint</name> <operator>==</operator> <literal type="number">0x1680</literal> <operator>||</operator> <name>codepoint</name> <operator>==</operator> <literal type="number">0x3000</literal>

<operator>||</operator> <name>codepoint</name> <operator>==</operator> <literal type="number">0x202F</literal> <operator>||</operator> <name>codepoint</name> <operator>==</operator> <literal type="number">0x205F</literal>

<operator>||</operator> <operator>(</operator> <name>codepoint</name> <operator>&gt;=</operator> <literal type="number">0x2000</literal> <operator>&amp;&amp;</operator> <name>codepoint</name> <operator>&lt;=</operator> <literal type="number">0x200A</literal> <operator>)</operator>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>==</operator> <name>FRIBIDI_TYPE_WS</name>

<operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>==</operator> <name>FRIBIDI_TYPE_CS</name>

<operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>==</operator> <name>FRIBIDI_TYPE_SS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_glyph_index</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>codepoint</name> <operator>==</operator> <literal type="number">0x0D</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>==</operator> <name>FRIBIDI_TYPE_BS</name></expr>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</condition><block type="pseudo"><block_content>

<macro><name>SKIP_GLYPH</name><argument_list>( <argument>p_bitmaps</argument> )</argument_list></macro></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FT_Load_Glyph</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><name>i_glyph_index</name></expr></argument>,

<argument><expr><name>FT_LOAD_NO_BITMAP</name> <operator>|</operator> <name>FT_LOAD_DEFAULT</name></expr></argument> )</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>FT_Load_Glyph</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><name>i_glyph_index</name></expr></argument>, <argument><expr><name>FT_LOAD_DEFAULT</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<macro><name>SKIP_GLYPH</name><argument_list>( <argument>p_bitmaps</argument> )</argument_list></macro>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_BOLD</name> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name><name>p_face</name><operator>-&gt;</operator><name>style_flags</name></name> <operator>&amp;</operator> <name>FT_STYLE_FLAG_BOLD</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_GlyphSlot_Embolden</name><argument_list>( <argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_ITALIC</name> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator> <name><name>p_face</name><operator>-&gt;</operator><name>style_flags</name></name> <operator>&amp;</operator> <name>FT_STYLE_FLAG_ITALIC</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_GlyphSlot_Oblique</name><argument_list>( <argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FT_Get_Glyph</name><argument_list>( <argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>glyph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<macro><name>SKIP_GLYPH</name><argument_list>( <argument>p_bitmaps</argument> )</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SKIP_GLYPH</name></cpp:undef>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_stroker</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_OUTLINE</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name> <operator>=</operator> <name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FT_Glyph_StrokeBorder</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_stroker</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_shadow_alpha</name></name> <operator>!=</operator> <name>STYLE_ALPHA_TRANSPARENT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr> ?</condition><then>

<expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr> </then><else>: <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_overwrite_advance</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_x_advance</name></name> <operator>=</operator> <name><name>p_face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>advance</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_y_advance</name></name> <operator>=</operator> <name><name>p_face</name><operator>-&gt;</operator><name>glyph</name><operator>-&gt;</operator><name>advance</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_x_advance</name> <init>= <expr><call><name>FT_FLOOR</name><argument_list>( <argument><expr><call><name>abs</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_x_advance</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_x_advance</name> <operator>&gt;</operator> <operator>*</operator><name>pi_max_advance_x</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_max_advance_x</name> <operator>=</operator> <name>i_x_advance</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LayoutLine</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_first_char</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_last_char</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_grid</name></decl></parameter>,

<parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_line</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal>

<operator>||</operator> <name>i_first_char</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>i_last_char</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal>

<operator>||</operator> <name>i_first_char</name></expr></argument> &gt;</argument_list></name> <name>i_last_char</name>

<operator>||</operator> <name>i_last_char</name> <operator>&gt;=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"LayoutLine() invalid parameters. "</literal>

<literal type="string">"Paragraph size: %d. Runs count: %d. "</literal>

<literal type="string">"Start char: %d. End char: %d"</literal></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr></argument>,

<argument><expr><name>i_first_char</name></expr></argument>, <argument><expr><name>i_last_char</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_run</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>run_desc_t</name> <modifier>*</modifier></type><name>p_run</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Vector</name></type> <name>pen</name> <init>= <expr><block>{ <expr><operator>.</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_font_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_font_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_font_max_advance_y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ul_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ul_thickness</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>bool</name></type> <name>b_reordered</name> <init>= <expr><operator>(</operator> <literal type="number">0</literal> <operator>!=</operator>

<call><name>fribidi_reorder_line</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[<expr><name>i_first_char</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i_last_char</name> <operator>-</operator> <name>i_first_char</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>paragraph_type</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_levels</name><index>[<expr><name>i_first_char</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_reordered_indices</name><index>[<expr><name>i_first_char</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><call><name>NewLine</name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>i_last_char</name> <operator>-</operator> <name>i_first_char</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_line</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_first_char</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>i_last_char</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_paragraph_index</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name>b_reordered</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_paragraph_index</name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_reordered_indices</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_paragraph_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>line_character_t</name> <modifier>*</modifier></type><name>p_ch</name> <init>= <expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_style</name></name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_styles</name><index>[ <expr><name>i_paragraph_index</name></expr> ]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_ruby</name></name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>glyph_bitmaps_t</name> <modifier>*</modifier></type><name>p_bitmaps</name> <init>=

<expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name></name> <operator>+</operator> <name>i_paragraph_index</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>BBoxInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ch</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_last_run</name> <operator>!=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name><index>[ <expr><name>i_paragraph_index</name></expr> ]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_last_run</name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name><index>[ <expr><name>i_paragraph_index</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_run</name> <operator>=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name></name> <operator>+</operator> <name>i_last_run</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_style</name> <operator>=</operator> <name><name>p_run</name><operator>-&gt;</operator><name>p_style</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name><name>p_run</name><operator>-&gt;</operator><name>p_face</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_font_width</name> <operator>=</operator> <name>i_font_size</name> <operator>=</operator> <call><name>ConvertToLiveSize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_HALFWIDTH</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_font_width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_DOUBLEWIDTH</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_font_width</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FT_Vector</name></type> <name>pen_new</name> <init>= <expr><block>{

<expr><operator>.</operator><name>x</name> <operator>=</operator> <name><name>pen</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i_paragraph_index</name></expr> ]</index></name><operator>.</operator><name>i_x_offset</name></expr>,

<expr><operator>.</operator><name>y</name> <operator>=</operator> <name><name>pen</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i_paragraph_index</name></expr> ]</index></name><operator>.</operator><name>i_y_offset</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Vector</name></type> <name>pen_shadow</name> <init>= <expr><block>{

<expr><operator>.</operator><name>x</name> <operator>=</operator> <name><name>pen_new</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_shadow_vector_x</name></name> <operator>*</operator> <operator>(</operator> <name>i_font_width</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>)</operator></expr>,

<expr><operator>.</operator><name>y</name> <operator>=</operator> <name><name>pen_new</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_shadow_vector_y</name></name> <operator>*</operator> <operator>(</operator> <name>i_font_size</name> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>)</operator></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>FT_Glyph_To_Bitmap</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name></expr></argument>, <argument><expr><name>FT_RENDER_MODE_NORMAL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pen_shadow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Glyph_Get_CBox</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name></expr></argument>, <argument><expr><name>ft_glyph_bbox_pixels</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>shadow_bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>FT_Glyph_To_Bitmap</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></argument>, <argument><expr><name>FT_RENDER_MODE_NORMAL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pen_new</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Glyph_Get_CBox</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></argument>, <argument><expr><name>ft_glyph_bbox_pixels</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>glyph_bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>FT_Glyph_To_Bitmap</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument>, <argument><expr><name>FT_RENDER_MODE_NORMAL</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pen_new</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Glyph_Get_CBox</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument>, <argument><expr><name>ft_glyph_bbox_pixels</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>outline_bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FixGlyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>glyph_bbox</name></name></expr></argument>,

<argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_x_advance</name></name></expr></argument>, <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_y_advance</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pen_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FixGlyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>outline_bbox</name></name></expr></argument>,

<argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_x_advance</name></name></expr></argument>, <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_y_advance</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pen_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FixGlyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>shadow_bbox</name></name></expr></argument>,

<argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_x_advance</name></name></expr></argument>, <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_y_advance</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pen_shadow</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_line_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_line_thickness</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>STYLE_UNDERLINE</name> <operator>|</operator> <name>STYLE_STRIKEOUT</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_line_offset</name> <operator>=</operator>

<call><name>abs</name><argument_list>( <argument><expr><call><name>FT_FLOOR</name><argument_list>( <argument><expr><call><name>FT_MulFix</name><argument_list>( <argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>underline_position</name></name></expr></argument>,

<argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>y_scale</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_line_thickness</name> <operator>=</operator>

<call><name>abs</name><argument_list>( <argument><expr><call><name>FT_CEIL</name><argument_list>( <argument><expr><call><name>FT_MulFix</name><argument_list>( <argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>underline_thickness</name></name></expr></argument>,

<argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>y_scale</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_STRIKEOUT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_line_offset</name> <operator>-=</operator>

<call><name>abs</name><argument_list>( <argument><expr><call><name>FT_FLOOR</name><argument_list>( <argument><expr><call><name>FT_MulFix</name><argument_list>( <argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>descender</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>y_scale</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>glyph_bbox</name><operator>.</operator><name>yMax</name></name> <operator>=</operator>

<call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>glyph_bbox</name><operator>.</operator><name>yMax</name></name></expr></argument>,

<argument><expr><operator>-</operator> <name>i_line_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>glyph_bbox</name><operator>.</operator><name>yMin</name></name> <operator>=</operator>

<call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>glyph_bbox</name><operator>.</operator><name>yMin</name></name></expr></argument>,

<argument><expr><name>i_line_offset</name> <operator>-</operator> <name>i_line_thickness</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_line_thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>glyph_bbox</name><operator>.</operator><name>yMin</name></name> <operator>=</operator>

<call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>glyph_bbox</name><operator>.</operator><name>yMin</name></name></expr></argument>,

<argument><expr><operator>-</operator> <name>i_line_offset</name> <operator>-</operator> <name>i_line_thickness</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ul_offset</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_ul_offset</name></expr></argument>, <argument><expr><name>i_line_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ul_thickness</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_ul_thickness</name></expr></argument>, <argument><expr><name>i_line_thickness</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_line_thickness</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_glyph</name></name> <operator>=</operator> <operator>(</operator> <name>FT_BitmapGlyph</name> <operator>)</operator> <name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_outline</name></name> <operator>=</operator> <operator>(</operator> <name>FT_BitmapGlyph</name> <operator>)</operator> <name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_shadow</name></name> <operator>=</operator> <operator>(</operator> <name>FT_BitmapGlyph</name> <operator>)</operator> <name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ch</name><operator>-&gt;</operator><name>i_line_thickness</name></name> <operator>=</operator> <name>i_line_thickness</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ch</name><operator>-&gt;</operator><name>i_line_offset</name></name> <operator>=</operator> <name>i_line_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ch</name><operator>-&gt;</operator><name>bbox</name></name> <operator>=</operator> <name><name>p_bitmaps</name><operator>-&gt;</operator><name>glyph_bbox</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BBoxEnlarge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ch</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>outline_bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_shadow</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>BBoxEnlarge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ch</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_bitmaps</name><operator>-&gt;</operator><name>shadow_bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>BBoxEnlarge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_ch</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pen</name><operator>.</operator><name>x</name></name> <operator>+=</operator> <name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_x_advance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pen</name><operator>.</operator><name>y</name></name> <operator>+=</operator> <name><name>p_bitmaps</name><operator>-&gt;</operator><name>i_y_advance</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_grid</name> <operator>&amp;&amp;</operator> <name>i_font_max_advance_y</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p_face</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_font_max_advance_y</name> <operator>=</operator> <call><name>abs</name><argument_list>( <argument><expr><call><name>FT_FLOOR</name><argument_list>( <argument><expr><call><name>FT_MulFix</name><argument_list>( <argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>max_advance_height</name></name></expr></argument>,

<argument><expr><name><name>p_face</name><operator>-&gt;</operator><name>size</name><operator>-&gt;</operator><name>metrics</name><operator>.</operator><name>y_scale</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_glyph</name><operator>-&gt;</operator><name>bitmap</name><operator>.</operator><name>rows</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_line</name><operator>-&gt;</operator><name>i_first_visible_char_index</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_first_visible_char_index</name></name> <operator>=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_last_visible_char_index</name></name> <operator>=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_ruby_baseline</name> <init>= <expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMax</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ruby_block_t</name> <modifier>*</modifier></type><name>p_prevruby</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>line_character_t</name> <modifier>*</modifier></type><name>p_ch</name> <init>= <expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_ruby</name></name> <operator>==</operator> <name>p_prevruby</name> <operator>||</operator> <operator>!</operator><name><name>p_ch</name><operator>-&gt;</operator><name>p_glyph</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_prevruby</name> <operator>=</operator> <name><name>p_ch</name><operator>-&gt;</operator><name>p_ruby</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ch</name><operator>-&gt;</operator><name>p_ruby</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_rubyline</name> <init>= <expr><name><name>p_ch</name><operator>-&gt;</operator><name>p_ruby</name><operator>-&gt;</operator><name>p_laid</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_rubyline</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rubyadvance</name> <init>= <expr><operator>(</operator><name><name>p_rubyline</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMax</name></name> <operator>-</operator> <name><name>p_rubyline</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMin</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rubyheight</name> <init>= <expr><operator>(</operator><name><name>p_rubyline</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMax</name></name> <operator>-</operator> <name><name>p_rubyline</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMin</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MoveLineTo</name><argument_list>( <argument><expr><name>p_rubyline</name></expr></argument>, <argument><expr><name><name>p_ch</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMin</name></name></expr></argument>, <argument><expr><name>i_ruby_baseline</name> <operator>+</operator> <name>i_rubyheight</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BBoxEnlarge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_rubyline</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_baseadvance</name> <init>= <expr><call><name>RubyBaseAdvance</name><argument_list>( <argument><expr><name>p_line</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_count</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_baseadvance</name> <operator>&lt;</operator> <name>i_rubyadvance</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>IndentCharsFrom</name><argument_list>( <argument><expr><name>p_line</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i_count</name></expr></argument>, <argument><expr><operator>(</operator><name>i_rubyadvance</name> <operator>-</operator> <name>i_baseadvance</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IndentCharsFrom</name><argument_list>( <argument><expr><name>p_line</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>i_count</name></expr></argument>, <argument><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>i_count</name><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>i_rubyadvance</name> <operator>-</operator> <name>i_baseadvance</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_baseadvance</name> <operator>&gt;</operator> <name>i_rubyadvance</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ShiftLine</name><argument_list>( <argument><expr><name>p_rubyline</name></expr></argument>, <argument><expr><operator>(</operator><name>i_baseadvance</name> <operator>-</operator> <name>i_rubyadvance</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BBoxEnlarge</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_rubyline</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMax</name></name> <operator>-</operator> <name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>xMin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_grid</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <name>i_font_max_advance_y</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMax</name></name> <operator>-</operator> <name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ul_thickness</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_line</name><operator>-&gt;</operator><name>i_character_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>line_character_t</name> <modifier>*</modifier></type><name>ch</name> <init>= <expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>p_character</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ch</name><operator>-&gt;</operator><name>i_line_thickness</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>i_line_offset</name></name> <operator>=</operator> <name>i_ul_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ch</name><operator>-&gt;</operator><name>i_line_thickness</name></name> <operator>=</operator> <name>i_ul_thickness</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_line</name> <operator>=</operator> <name>p_line</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ReleaseGlyphBitMaps</name><parameter_list>(<parameter><decl><type><name>glyph_bitmaps_t</name> <modifier>*</modifier></type><name>p_bitmaps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_glyph</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FT_Done_Glyph</name><argument_list>( <argument><expr><name><name>p_bitmaps</name><operator>-&gt;</operator><name>p_outline</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>IsWhitespaceAt</name><parameter_list>( <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_code_points</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="char">' '</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_types</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <name>FRIBIDI_TYPE_WS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LayoutParagraph</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_max_width</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_max_advance_x</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_grid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_balance</name></decl></parameter>,

<parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_lines</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LayoutParagraph() invalid parameters. "</literal>

<literal type="string">"Paragraph size: %d. Runs count %d"</literal></expr></argument>,

<argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>i_runs_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_max_width</name> <operator>&lt;=</operator> <name>i_max_advance_x</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LayoutParagraph(): Invalid max width"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_max_width</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_max_advance_x</name> <operator>&lt;&lt;=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_line_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Pos</name></type> <name>i_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Pos</name></type> <name>i_preferred_width</name> <init>= <expr><name>i_max_width</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Pos</name></type> <name>i_total_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Pos</name></type> <name>i_last_space_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_last_space</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_first_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_line</name> <init>= <expr><operator>&amp;</operator><name>p_first_line</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>IsWhitespaceAt</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call> <operator>||</operator> <name>i</name> <operator>!=</operator> <name>i_last_space</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_total_width</name> <operator>+=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_x_advance</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_last_space</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_last_space</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_total_width</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ReleaseGlyphBitMaps</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_balance</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_line_count</name> <init>= <expr><name>i_total_width</name> <operator>/</operator> <operator>(</operator><name>i_max_width</name> <operator>-</operator> <name>i_max_advance_x</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_preferred_width</name> <operator>=</operator> <name>i_total_width</name> <operator>/</operator> <name>i_line_count</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_line_start</name> <operator>&lt;</operator> <name>i</name></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><call><name>LayoutLine</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>,

<argument><expr><name>i_line_start</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b_grid</name></expr></argument>, <argument><expr><name>pp_line</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name></name> <operator>&amp;&amp;</operator>

<name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>p_laid</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ruby_block_t</name> <modifier>*</modifier></type><name>p_rubyseq</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_advance</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_advanceruby</name> <init>= <expr><name><name>p_rubyseq</name><operator>-&gt;</operator><name>p_laid</name><operator>-&gt;</operator><name>i_width</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&amp;&amp;</operator>

<name>p_rubyseq</name> <operator>==</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>pp_ruby</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_advance</name> <operator>+=</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name><operator>++</operator></expr> ]</index></name><operator>.</operator><name>i_x_advance</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>i_width</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>i_advance</name> <operator>&lt;</operator> <name>i_advanceruby</name><operator>)</operator></expr> ?</condition><then> <expr><name>i_advanceruby</name></expr> </then><else>: <expr><name>i_advance</name></expr></else></ternary></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>IsWhitespaceAt</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_line_start</name> <operator>==</operator> <name>i</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ReleaseGlyphBitMaps</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_line_start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_last_space</name> <operator>==</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_last_space</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_last_space</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_last_space_width</name> <operator>=</operator> <name>i_width</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>run_desc_t</name> <modifier>*</modifier></type><name>p_run</name> <init>= <expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_runs</name><index>[<expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>pi_run_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_advance_x</name> <init>= <expr><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>i_x_advance</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_last_space_width</name> <operator>+</operator> <name>i_advance_x</name> <operator>&gt;</operator> <name>i_preferred_width</name> <operator>&amp;&amp;</operator>

<name><name>p_run</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>e_wrapinfo</name></name> <operator>==</operator> <name>STYLE_WRAP_DEFAULT</name> <operator>)</operator>

<operator>||</operator> <name>i_width</name> <operator>+</operator> <name>i_advance_x</name> <operator>&gt;</operator> <name>i_max_width</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_line_start</name> <operator>==</operator> <name>i</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LayoutParagraph(): First glyph width in line exceeds maximum, skipping"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ReleaseGlyphBitMaps</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_newline_start</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_last_space</name> <operator>&gt;</operator> <name>i_line_start</name> <operator>&amp;&amp;</operator> <name><name>p_run</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>e_wrapinfo</name></name> <operator>==</operator> <name>STYLE_WRAP_DEFAULT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_newline_start</name> <operator>=</operator> <name>i_last_space</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_newline_start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if<condition>( <expr><call><name>LayoutLine</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>, <argument><expr><name>i_line_start</name></expr></argument>,

<argument><expr><name>i_newline_start</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>b_grid</name></expr></argument>, <argument><expr><name>pp_line</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_run</name><operator>-&gt;</operator><name>p_style</name><operator>-&gt;</operator><name>e_wrapinfo</name></name> <operator>==</operator> <name>STYLE_WRAP_NONE</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ReleaseGlyphBitMaps</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp_line</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator> <operator>*</operator><name>pp_line</name> <operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_newline_start</name> <operator>==</operator> <name>i_last_space</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <name>i_width</name> <operator>-</operator> <name>i_last_space_width</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_newline_start</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_line_start</name> <operator>=</operator> <name>i_newline_start</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_line_start</name> <operator>=</operator> <name>i_newline_start</name></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_line_start</name> <operator>=</operator> <name>i_newline_start</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_last_space_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_width</name> <operator>+=</operator> <name>i_advance_x</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pp_lines</name> <operator>=</operator> <name>p_first_line</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_line_start</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_paragraph</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ReleaseGlyphBitMaps</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_paragraph</name><operator>-&gt;</operator><name>p_glyph_bitmaps</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name>p_first_line</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeLines</name><argument_list>( <argument><expr><name>p_first_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>paragraph_t</name> <modifier>*</modifier></type> <name>BuildParagraph</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uni_char_t</name> <modifier>*</modifier></type><name>p_uchars</name></decl></parameter>,

<parameter><decl><type><name>text_style_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_styles</name></decl></parameter>,

<parameter><decl><type><name>ruby_block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_ruby</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_runs_size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_max_advance_x</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name> <init>= <expr><call><name>NewParagraph</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>,

<argument><expr><name>p_uchars</name></expr></argument>,

<argument><expr><name>pp_styles</name></expr></argument>,

<argument><expr><name>pp_ruby</name></expr></argument>,

<argument><expr><name>i_runs_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_paragraph</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FRIBIDI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><call><name>AnalyzeParagraph</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>ItemizeParagraph</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>defined</name> <name>HAVE_HARFBUZZ</name></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><call><name>ShapeParagraphHarfBuzz</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_paragraph</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LoadGlyphs</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>pi_max_advance_x</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>HAVE_FRIBIDI</name></expr></cpp:elif>

<if_stmt><if>if<condition>( <expr><call><name>ShapeParagraphFriBidi</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LoadGlyphs</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pi_max_advance_x</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>RemoveZeroWidthCharacters</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ZeroNsmAdvance</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>( <expr><call><name>LoadGlyphs</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>pi_max_advance_x</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>p_paragraph</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_paragraph</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeParagraph</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>LayoutRubyText</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uni_char_t</name> <modifier>*</modifier></type><name>p_uchars</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_uchars</name></decl></parameter>,

<parameter><decl><type><name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter>,

<parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_line</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_max_advance_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>text_style_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_styles</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp_styles</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_uchars</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>i_uchars</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp_styles</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>p_style</name></expr>;</expr_stmt></block_content></block></for>

<decl_stmt><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name> <init>= <expr><call><name>BuildParagraph</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_uchars</name></expr></argument>,

<argument><expr><name>p_uchars</name></expr></argument>, <argument><expr><name>pp_styles</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_max_advance_x</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_paragraph</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_styles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LayoutLine</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_uchars</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>false</name></expr></argument>, <argument><expr><name>pp_line</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_styles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FreeParagraph</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FreeParagraph</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_styles</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>LayoutTextBlock</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>layout_text_block_t</name> <modifier>*</modifier></type><name>p_textblock</name></decl></parameter>,

<parameter><decl><type><name>line_desc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_lines</name></decl></parameter>, <parameter><decl><type><name>FT_BBox</name> <modifier>*</modifier></type><name>p_bbox</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_max_face_height</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_first_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_line</name> <init>= <expr><operator>&amp;</operator><name>p_first_line</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_paragraph_start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_total_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_max_advance_x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_max_face_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_textblock</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ruby_block_t</name> <modifier>*</modifier></type><name>p_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_textblock</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_textblock</name><operator>-&gt;</operator><name>pp_ruby</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>p_prev</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_prev</name> <operator>=</operator> <name><name>p_textblock</name><operator>-&gt;</operator><name>pp_ruby</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_prev</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>LayoutRubyText</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_prev</name><operator>-&gt;</operator><name>p_uchars</name></name></expr></argument>, <argument><expr><name><name>p_prev</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>,

<argument><expr><name><name>p_prev</name><operator>-&gt;</operator><name>p_style</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_prev</name><operator>-&gt;</operator><name>p_laid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>p_textblock</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <name><name>p_textblock</name><operator>-&gt;</operator><name>i_count</name></name> <operator>||</operator> <name><name>p_textblock</name><operator>-&gt;</operator><name>p_uchars</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_paragraph_start</name> <operator>==</operator> <name>i</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_paragraph_start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>paragraph_t</name> <modifier>*</modifier></type><name>p_paragraph</name> <init>=

<expr><call><name>BuildParagraph</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><name>i</name> <operator>-</operator> <name>i_paragraph_start</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_textblock</name><operator>-&gt;</operator><name>p_uchars</name><index>[<expr><name>i_paragraph_start</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_textblock</name><operator>-&gt;</operator><name>pp_styles</name><index>[<expr><name>i_paragraph_start</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_textblock</name><operator>-&gt;</operator><name>pp_ruby</name></name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>p_textblock</name><operator>-&gt;</operator><name>pp_ruby</name><index>[<expr><name>i_paragraph_start</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_max_advance_x</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_paragraph</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_first_line</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FreeLines</name><argument_list>( <argument><expr><name>p_first_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>LayoutParagraph</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_paragraph</name></expr></argument>,

<argument><expr><name><name>p_textblock</name><operator>-&gt;</operator><name>i_max_width</name></name></expr></argument>,

<argument><expr><name>i_max_advance_x</name></expr></argument>,

<argument><expr><name><name>p_textblock</name><operator>-&gt;</operator><name>b_grid</name></name></expr></argument>, <argument><expr><name><name>p_textblock</name><operator>-&gt;</operator><name>b_balanced</name></name></expr></argument>,

<argument><expr><name>pp_line</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FreeParagraph</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_first_line</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FreeLines</name><argument_list>( <argument><expr><name>p_first_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>FreeParagraph</name><argument_list>( <argument><expr><name>p_paragraph</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><operator>*</operator><name>pp_line</name></expr>;</condition> <incr><expr><name>pp_line</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pp_line</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_textblock</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_total_height</name> <operator>&gt;</operator> <name><name>p_textblock</name><operator>-&gt;</operator><name>i_max_height</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_total_height</name> <operator>=</operator> <name><name>p_textblock</name><operator>-&gt;</operator><name>i_max_height</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_todelete</name> <init>= <expr><operator>*</operator><name>pp_line</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_todelete</name></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_todelete</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FreeLine</name><argument_list>( <argument><expr><name>p_todelete</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_todelete</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>pp_line</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>p_textblock</name><operator>-&gt;</operator><name>i_count</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<break>break;</break> 

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><operator>(</operator><operator>*</operator><name>pp_line</name><operator>)</operator><operator>-&gt;</operator><name>i_height</name></name> <operator>&gt;</operator> <name>i_max_face_height</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_max_face_height</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>pp_line</name><operator>)</operator><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_total_height</name> <operator>+=</operator> <name><operator>(</operator><operator>*</operator><name>pp_line</name><operator>)</operator><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_paragraph_start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>int</name></type> <name>i_base_line</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_BBox</name></type> <name>bbox</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BBoxInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bbox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>line_desc_t</name> <modifier>*</modifier></type><name>p_line</name> <init>= <expr><name>p_first_line</name></expr></init></decl>;</init> <condition><expr><name>p_line</name></expr>;</condition> <incr><expr><name>p_line</name> <operator>=</operator> <name><name>p_line</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>i_base_line</name></name> <operator>=</operator> <name>i_base_line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMin</name></name> <operator>-=</operator> <name>i_base_line</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name><operator>.</operator><name>yMax</name></name> <operator>-=</operator> <name>i_base_line</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BBoxEnlarge</name><argument_list>( <argument><expr><operator>&amp;</operator><name>bbox</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_line</name><operator>-&gt;</operator><name>bbox</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_base_line</name> <operator>+=</operator> <name>i_max_face_height</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pi_max_face_height</name> <operator>=</operator> <name>i_max_face_height</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_lines</name> <operator>=</operator> <name>p_first_line</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_bbox</name> <operator>=</operator> <name>bbox</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
