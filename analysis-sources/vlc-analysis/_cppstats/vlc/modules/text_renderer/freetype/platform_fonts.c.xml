<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\text_renderer\freetype\platform_fonts.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_text_style.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"platform_fonts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"freetype.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>FT_Face</name></type> <name>LoadFace</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_idx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_font_size</name> <init>= <expr><call><name>ConvertToLiveSize</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_font_width</name> <init>= <expr><name>i_font_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_HALFWIDTH</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_font_width</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_DOUBLEWIDTH</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_font_width</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_key</name></expr></argument>, <argument><expr><literal type="string">"%s - %d - %d - %d"</literal></expr></argument>,

<argument><expr><name>psz_fontfile</name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument>,

<argument><expr><name>i_font_size</name></expr></argument>, <argument><expr><name>i_font_width</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>face_map</name></name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_face</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_fontfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>psz_fontfile</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_attach</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>psz_fontfile</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_attach</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_attach</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_font_attachments</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LoadFace: Invalid font attachment index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attach</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pp_font_attachments</name><index>[ <expr><name>i_attach</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FT_New_Memory_Face</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument>, <argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>,

<argument><expr><name><name>p_attach</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_face</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LoadFace: Error creating face for %s"</literal></expr></argument>, <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>( <argument><expr><name>_WIN32</name></expr></argument> )</argument_list></call></expr></cpp:if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>psz_fontfile</name></expr></argument>, <argument><expr><literal type="string">":dw/"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><call><name>atoi</name><argument_list>( <argument><expr><name>psz_fontfile</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Stream</name></type> <name>p_stream</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>DWrite_GetFontStream</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>i_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_stream</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LoadFace: Invalid font stream index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>FT_Open_Args</name></type> <name>args</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>FT_OPEN_STREAM</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>args</name><operator>.</operator><name>stream</name></name> <operator>=</operator> <name>p_stream</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FT_Open_Face</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>args</name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_face</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LoadFace: Error creating face for %s"</literal></expr></argument>, <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if type="elseif">else

if<condition>( <expr><call><name>FT_New_Face</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_library</name></name></expr></argument>, <argument><expr><name>psz_fontfile</name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_face</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LoadFace: Error creating face for %s"</literal></expr></argument>, <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_face</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FT_Select_Charmap</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><name>ft_encoding_unicode</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"LoadFace: Error selecting charmap for %s"</literal></expr></argument>, <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>( <argument><expr><name>p_face</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FT_Set_Pixel_Sizes</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><name>i_font_width</name></expr></argument>, <argument><expr><name>i_font_size</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"LoadFace: Failed to set font size for %s"</literal></expr></argument>, <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FT_Done_Face</name><argument_list>( <argument><expr><name>p_face</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>face_map</name></name></expr></argument>, <argument><expr><name>psz_key</name></expr></argument>, <argument><expr><name>p_face</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_face</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>FT_Face</name></type> <name>GetFace</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_font</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_font</name><operator>-&gt;</operator><name>p_face</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_font</name><operator>-&gt;</operator><name>p_face</name></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_font</name><operator>-&gt;</operator><name>p_face</name></name> <operator>=</operator> <call><name>LoadFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_font</name><operator>-&gt;</operator><name>psz_fontfile</name></name></expr></argument>, <argument><expr><name><name>p_font</name><operator>-&gt;</operator><name>i_index</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_default_style</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>p_font</name><operator>-&gt;</operator><name>p_face</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_font_t</name> <modifier>*</modifier></type><name>GetBestFont</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_bold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_italic</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_best_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_best_font</name> <init>= <expr><name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_font</name> <init>= <expr><name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr></init></decl>;</init> <condition><expr><name>p_font</name></expr>;</condition> <incr><expr><name>p_font</name> <operator>=</operator> <name><name>p_font</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>codepoint</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><call><name>GetFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_font</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_face</name> <operator>&amp;&amp;</operator> <call><name>FT_Get_Char_Index</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_score</name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>!</operator><name><name>p_font</name><operator>-&gt;</operator><name>b_bold</name></name> <operator>==</operator> <operator>!</operator><operator>!</operator><name>b_bold</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_score</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>!</operator><name><name>p_font</name><operator>-&gt;</operator><name>b_italic</name></name> <operator>==</operator> <operator>!</operator><operator>!</operator><name>b_italic</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_score</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_score</name> <operator>&gt;</operator> <name>i_best_score</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_best_font</name> <operator>=</operator> <name>p_font</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_best_score</name> <operator>=</operator> <name>i_score</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_best_font</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>SearchFallbacks</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_fallbacks</name></decl></parameter>,

<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_fallback</name> <init>= <expr><name>p_fallbacks</name></expr></init></decl>;</init> <condition><expr><name>p_fallback</name></expr>;</condition>

<incr><expr><name>p_fallback</name> <operator>=</operator> <name><name>p_fallback</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fallback</name><operator>-&gt;</operator><name>p_fonts</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>p_temp</name> <init>=

<expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_fallback</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_temp</name> <operator>||</operator> <operator>!</operator><name><name>p_temp</name><operator>-&gt;</operator><name>p_fonts</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_fallback</name><operator>-&gt;</operator><name>p_fonts</name></name> <operator>=</operator> <name><name>p_temp</name><operator>-&gt;</operator><name>p_fonts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><call><name>GetFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_fallback</name><operator>-&gt;</operator><name>p_fonts</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_face</name> <operator>||</operator> <operator>!</operator><call><name>FT_Get_Char_Index</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <name>p_fallback</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<return>return <expr><name>p_family</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>AppendFont</name><parameter_list>( <parameter><decl><type><name>vlc_font_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_list</name></decl></parameter>, <parameter><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_font</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>pp_list</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_list</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator> <operator>*</operator><name>pp_list</name> <operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>pp_list</name> <operator>=</operator> <name>p_font</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>AppendFamily</name><parameter_list>( <parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_list</name></decl></parameter>, <parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>pp_list</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_list</name> <operator>=</operator> <operator>&amp;</operator><name><operator>(</operator> <operator>*</operator><name>pp_list</name> <operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><operator>*</operator><name>pp_list</name> <operator>=</operator> <name>p_family</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>NewFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,

<parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_list</name></decl></parameter>, <parameter><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dict</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_key</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_family</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_family</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_family</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_family</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>ToLower</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><name>FB_NAME</name><literal type="string">"-%04d"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_fallback_counter</name></name><operator>++</operator></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_key</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_lc</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_lc</name> <operator>=</operator> <call><name>ToLower</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_family</name> <operator>||</operator> <operator>!</operator><name>psz_name</name> <operator>||</operator> <operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_family</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>psz_name</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pp_list</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendFamily</name><argument_list>( <argument><expr><name>pp_list</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dict</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_root</name> <init>= <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_root</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendFamily</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_root</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_family</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>NewFont</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_index</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_bold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_italic</name></decl></parameter>,

<parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_font</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_font</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_font</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_fontfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_font</name><operator>-&gt;</operator><name>psz_fontfile</name></name> <operator>=</operator> <name>psz_fontfile</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_font</name><operator>-&gt;</operator><name>i_index</name></name> <operator>=</operator> <name>i_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_font</name><operator>-&gt;</operator><name>b_bold</name></name> <operator>=</operator> <name>b_bold</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_font</name><operator>-&gt;</operator><name>b_italic</name></name> <operator>=</operator> <name>b_italic</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_parent</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_parent</name><operator>-&gt;</operator><name>p_fonts</name></name>

<operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_parent</name><operator>-&gt;</operator><name>p_fonts</name><operator>-&gt;</operator><name>b_bold</name></name> <operator>||</operator> <name><name>p_parent</name><operator>-&gt;</operator><name>p_fonts</name><operator>-&gt;</operator><name>b_italic</name></name> <operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><name>b_bold</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_italic</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_font</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_parent</name><operator>-&gt;</operator><name>p_fonts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_parent</name><operator>-&gt;</operator><name>p_fonts</name></name> <operator>=</operator> <name>p_font</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AppendFont</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_parent</name><operator>-&gt;</operator><name>p_fonts</name></name></expr></argument>, <argument><expr><name>p_font</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_font</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreeFamiliesAndFonts</name><parameter_list>( <parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_family</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeFamiliesAndFonts</name><argument_list>( <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_font</name> <init>= <expr><name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr></init></decl>;</init> <condition><expr><name>p_font</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_temp</name> <init>= <expr><name><name>p_font</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_font</name><operator>-&gt;</operator><name>psz_fontfile</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_font</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_font</name> <operator>=</operator> <name>p_temp</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>FreeFamilies</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_families</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><operator>(</operator> <name>vlc_family_t</name> <operator>*</operator> <operator>)</operator> <name>p_families</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_family</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FreeFamilies</name><argument_list>( <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>p_next</name></name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>InitDefaultList</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>ppsz_default</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_default</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>=

<expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>ppsz_default</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_temp</name> <init>=

<expr><call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>ppsz_default</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_default</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_temp</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_temp</name><operator>-&gt;</operator><name>p_fonts</name></name> <operator>=</operator> <name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_default</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>FB_LIST_DEFAULT</name></expr></argument>, <argument><expr><name>p_default</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_default</name></expr>;</return>

<label><name>error</name>:</label>

<if_stmt><if>if<condition>( <expr><name>p_default</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>FreeFamilies</name><argument_list>( <argument><expr><name>p_default</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG_PLATFORM_FONTS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>DumpFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_dump_fonts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_families</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_max_families</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max_families</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p_family</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>i_max_families</name></expr> ;</condition> <incr><expr><name>p_family</name> <operator>=</operator> <name><name>p_family</name><operator>-&gt;</operator><name>p_next</name></name></expr><operator>,</operator> <expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"\t[%p] %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_family</name></expr></argument>, <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_dump_fonts</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_font</name> <init>= <expr><name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr></init></decl>;</init> <condition><expr><name>p_font</name></expr>;</condition> <incr><expr><name>p_font</name> <operator>=</operator> <name><name>p_font</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_style</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_font</name><operator>-&gt;</operator><name>b_bold</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_font</name><operator>-&gt;</operator><name>b_italic</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_style</name> <operator>=</operator> <literal type="string">"Regular"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_font</name><operator>-&gt;</operator><name>b_bold</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_font</name><operator>-&gt;</operator><name>b_italic</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_style</name> <operator>=</operator> <literal type="string">"Bold"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name><name>p_font</name><operator>-&gt;</operator><name>b_bold</name></name> <operator>&amp;&amp;</operator> <name><name>p_font</name><operator>-&gt;</operator><name>b_italic</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_style</name> <operator>=</operator> <literal type="string">"Italic"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_font</name><operator>-&gt;</operator><name>b_bold</name></name> <operator>&amp;&amp;</operator> <name><name>p_font</name><operator>-&gt;</operator><name>b_italic</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_style</name> <operator>=</operator> <literal type="string">"Bold Italic"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"\t\t[%p] (%s): %s - %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_font</name></expr></argument>,

<argument><expr><name>psz_style</name></expr></argument>, <argument><expr><name><name>p_font</name><operator>-&gt;</operator><name>psz_fontfile</name></name></expr></argument>, <argument><expr><name><name>p_font</name><operator>-&gt;</operator><name>i_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DumpDictionary</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dict</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_dump_fonts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_max_families</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_keys</name> <init>= <expr><call><name>vlc_dictionary_all_keys</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>ppsz_keys</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_keys</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name><name>ppsz_keys</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Key: %s"</literal></expr></argument>, <argument><expr><name><name>ppsz_keys</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DumpFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument>, <argument><expr><name>b_dump_fonts</name></expr></argument>, <argument><expr><name>i_max_families</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ppsz_keys</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>char</name><modifier>*</modifier></type> <name>ToLower</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_src</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_buffer</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_buffer</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>psz_buffer</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <call><name>tolower</name><argument_list>( <argument><expr><name><name>psz_src</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>psz_buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ConvertToLiveSize</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_font_size</name> <init>= <expr><name>STYLE_DEFAULT_FONT_SIZE</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_font_size</name> <operator>=</operator> <name><name>p_style</name><operator>-&gt;</operator><name>i_font_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_font_size</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>p_filter</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>*</operator> <name><name>p_style</name><operator>-&gt;</operator><name>f_font_relsize</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>!=</operator> <literal type="number">100</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_font_size</name> <operator>=</operator> <name>i_font_size</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_scale</name></name> <operator>/</operator> <literal type="number">100</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_font_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>FT_Face</name></type> <name>SelectAndLoadFace</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>text_style_t</name> <modifier>*</modifier></type><name>p_style</name></decl></parameter>,

<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fontname</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_MONOSPACED</name><operator>)</operator></expr>

?</condition><then> <expr><name><name>p_style</name><operator>-&gt;</operator><name>psz_monofontname</name></name></expr> </then><else>: <expr><name><name>p_style</name><operator>-&gt;</operator><name>psz_fontname</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bold</name> <init>= <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_BOLD</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_italic</name> <init>= <expr><name><name>p_style</name><operator>-&gt;</operator><name>i_style_flags</name></name> <operator>&amp;</operator> <name>STYLE_ITALIC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_select</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_fontfile</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_select</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_fontname</name></expr></argument>, <argument><expr><name>b_bold</name></expr></argument>, <argument><expr><name>b_italic</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_idx</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_fontfile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_fontfile</name> <operator>||</operator> <operator>*</operator><name>psz_fontfile</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>,

<argument><expr><literal type="string">"SelectAndLoadFace: no font found for family: %s, codepoint: 0x%x"</literal></expr></argument>,

<argument><expr><name>psz_fontname</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_fontfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_face</name> <operator>=</operator> <call><name>LoadFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_fontfile</name></expr></argument>, <argument><expr><name>i_idx</name></expr></argument>, <argument><expr><name>p_style</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_fontfile</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_face</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>Generic_Select</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_family</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_bold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_italic</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_idx</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_fallbacks</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>codepoint</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>p_temp</name> <init>= <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_temp</name> <operator>&amp;&amp;</operator> <name><name>p_temp</name><operator>-&gt;</operator><name>p_fonts</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>FT_Face</name></type> <name>p_face</name> <init>= <expr><call><name>GetFace</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_temp</name><operator>-&gt;</operator><name>p_fonts</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_face</name> <operator>&amp;&amp;</operator> <call><name>FT_Get_Char_Index</name><argument_list>( <argument><expr><name>p_face</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <name>p_temp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_fallbacks</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>,

<argument><expr><name>FB_LIST_ATTACHMENTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_fallbacks</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>SearchFallbacks</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_fallbacks</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_fallbacks</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_fallbacks</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_family</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_fallbacks</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>SearchFallbacks</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_fallbacks</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_fallbacks</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>,

<argument><expr><name>FB_LIST_DEFAULT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_fallbacks</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>SearchFallbacks</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_fallbacks</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name> <operator>||</operator> <operator>!</operator><name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_get_family</name></name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>SYSTEM_DEFAULT_FAMILY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_font_t</name> <modifier>*</modifier></type><name>p_font</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>p_font</name> <operator>=</operator> <call><name>GetBestFont</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument>, <argument><expr><name>b_bold</name></expr></argument>,

<argument><expr><name>b_italic</name></expr></argument>, <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>i_idx</name> <operator>=</operator> <name><name>p_font</name><operator>-&gt;</operator><name>i_index</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>p_font</name><operator>-&gt;</operator><name>psz_fontfile</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>File_Select</name><argument_list>( <argument><expr><name>SYSTEM_DEFAULT_FONT_FILE</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <name>VLC_WINSTORE_APP</name></expr></cpp:if>

<function><type><name>char</name><modifier>*</modifier></type> <name>Dummy_Select</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_font</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_bold</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_italic</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>i_idx</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>b_bold</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>b_italic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontname</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_font</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>psz_fontname</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
