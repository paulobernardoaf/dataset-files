<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\text_renderer\freetype\fonts\darwin.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreFoundation/CoreFoundation.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;CoreText/CoreText.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../platform_fonts.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>getPathForFontDescription</name><parameter_list>(<parameter><decl><type><name>CTFontDescriptorRef</name></type> <name>fontDescriptor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CFURLRef</name></type> <name>url</name> <init>= <expr><call><name>CTFontDescriptorCopyAttribute</name><argument_list>(<argument><expr><name>fontDescriptor</name></expr></argument>, <argument><expr><name>kCTFontURLAttribute</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>url</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>path</name> <init>= <expr><call><name>CFURLCopyFileSystemPath</name><argument_list>(<argument><expr><name>url</name></expr></argument>, <argument><expr><name>kCFURLPOSIXPathStyle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>retPath</name> <init>= <expr><call><name>FromCFString</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>retPath</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>addNewFontToFamily</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>CTFontDescriptorRef</name></type> <name>iter</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bold</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_italic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFDictionaryRef</name></type> <name>fontTraits</name> <init>= <expr><call><name>CTFontDescriptorCopyAttribute</name><argument_list>(<argument><expr><name>iter</name></expr></argument>, <argument><expr><name>kCTFontTraitsAttribute</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFNumberRef</name></type> <name>trait</name> <init>= <expr><call><name>CFDictionaryGetValue</name><argument_list>(<argument><expr><name>fontTraits</name></expr></argument>, <argument><expr><name>kCTFontWeightTrait</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>traitValue</name> <init>= <expr><literal type="number">0.</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CFNumberGetValue</name><argument_list>(<argument><expr><name>trait</name></expr></argument>, <argument><expr><name>kCFNumberFloatType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>traitValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_bold</name> <operator>=</operator> <name>traitValue</name> <operator>&gt;</operator> <literal type="number">0.23</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>trait</name> <operator>=</operator> <call><name>CFDictionaryGetValue</name><argument_list>(<argument><expr><name>fontTraits</name></expr></argument>, <argument><expr><name>kCTFontSlantTrait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>traitValue</name> <operator>=</operator> <literal type="number">0.</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFNumberGetValue</name><argument_list>(<argument><expr><name>trait</name></expr></argument>, <argument><expr><name>kCFNumberFloatType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>traitValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_italic</name> <operator>=</operator> <name>traitValue</name> <operator>&gt;</operator> <literal type="number">0.03</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"New font: bold %i italic %i path '%s'"</literal></expr></argument>, <argument><expr><name>b_bold</name></expr></argument>, <argument><expr><name>b_italic</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>NewFont</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b_bold</name></expr></argument>, <argument><expr><name>b_italic</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>fontTraits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>CoreText_GetFamily</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>psz_family</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><call><name>ToLower</name><argument_list>(<argument><expr><name>psz_family</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>psz_lc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_family</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_family</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CTFontCollectionRef</name></type> <name>coreTextFontCollection</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>matchedFontDescriptions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>numberOfAttributes</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CTFontDescriptorRef</name></type> <name><name>coreTextFontDescriptors</name><index>[<expr><name>numberOfAttributes</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFMutableDictionaryRef</name></type> <name><name>coreTextAttributes</name><index>[<expr><name>numberOfAttributes</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name><name>attributeNames</name><index>[<expr><name>numberOfAttributes</name></expr>]</index></name> <init>= <expr><block>{

<expr><name>kCTFontFamilyNameAttribute</name></expr>,

<expr><name>kCTFontDisplayNameAttribute</name></expr>,

<expr><name>kCTFontNameAttribute</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Creating new family for '%s'"</literal></expr></argument>, <argument><expr><name>psz_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>familyName</name> <init>= <expr><call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>psz_family</name></expr></argument>,

<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>numberOfAttributes</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>coreTextAttributes</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>CFDictionaryCreateMutable</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFDictionaryAddValue</name><argument_list>(<argument><expr><name><name>coreTextAttributes</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>attributeNames</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>familyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coreTextFontDescriptors</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>CTFontDescriptorCreateWithAttributes</name><argument_list>(<argument><expr><name><name>coreTextAttributes</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>CFArrayRef</name></type> <name>coreTextFontDescriptorsArray</name> <init>= <expr><call><name>CFArrayCreate</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>coreTextFontDescriptors</name></expr></argument>,

<argument><expr><name>numberOfAttributes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>coreTextFontCollection</name> <operator>=</operator> <call><name>CTFontCollectionCreateWithFontDescriptors</name><argument_list>(<argument><expr><name>coreTextFontDescriptorsArray</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coreTextFontCollection</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>,<argument><expr><literal type="string">"CTFontCollectionCreateWithFontDescriptors (1) failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>matchedFontDescriptions</name> <operator>=</operator> <call><name>CTFontCollectionCreateMatchingFontDescriptors</name><argument_list>(<argument><expr><name>coreTextFontCollection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>matchedFontDescriptions</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"CTFontCollectionCreateMatchingFontDescriptors (2) failed!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>CFIndex</name></type> <name>numberOfFoundFontDescriptions</name> <init>= <expr><call><name>CFArrayGetCount</name><argument_list>(<argument><expr><name>matchedFontDescriptions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>NewFamily</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_family</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>CFIndex</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numberOfFoundFontDescriptions</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CTFontDescriptorRef</name></type> <name>iter</name> <init>= <expr><call><name>CFArrayGetValueAtIndex</name><argument_list>(<argument><expr><name>matchedFontDescriptions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>getPathForFontDescription</name><argument_list>(<argument><expr><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>path</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>path</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>addNewFontToFamily</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>iter</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><name>matchedFontDescriptions</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>matchedFontDescriptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>coreTextFontCollection</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>coreTextFontCollection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>numberOfAttributes</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>coreTextAttributes</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name><name>coreTextFontDescriptors</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>coreTextFontDescriptorsArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>familyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_lc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_family</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>CoreText_GetFallbacks</name><parameter_list>(<parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>, <parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>psz_family</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>postScriptFallbackFontname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CTFontDescriptorRef</name></type> <name>fallbackFontDescriptor</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc_fallback</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontPath</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>familyName</name> <init>= <expr><call><name>CFStringCreateWithCString</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><name>psz_family</name></expr></argument>,

<argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CTFontRef</name></type> <name>font</name> <init>= <expr><call><name>CTFontCreateWithName</name><argument_list>(<argument><expr><name>familyName</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>littleEndianCodePoint</name> <init>= <expr><call><name>OSSwapHostToLittleInt32</name><argument_list>(<argument><expr><name>codepoint</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>codepointString</name> <init>= <expr><call><name>CFStringCreateWithBytes</name><argument_list>(<argument><expr><name>kCFAllocatorDefault</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>UInt8</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>littleEndianCodePoint</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>littleEndianCodePoint</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>kCFStringEncodingUTF32LE</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CTFontRef</name></type> <name>fallbackFont</name> <init>= <expr><call><name>CTFontCreateForString</name><argument_list>(<argument><expr><name>font</name></expr></argument>, <argument><expr><name>codepointString</name></expr></argument>, <argument><expr><call><name>CFRangeMake</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CFStringRef</name></type> <name>fallbackFontFamilyName</name> <init>= <expr><call><name>CTFontCopyFamilyName</name><argument_list>(<argument><expr><name>fallbackFont</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fallbackFamilyName</name> <init>= <expr><call><name>FromCFString</name><argument_list>(<argument><expr><name>fallbackFontFamilyName</name></expr></argument>, <argument><expr><name>kCFStringEncodingUTF8</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_fallbackFamilyName</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Failed to convert font family name CFString to C string"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Will deploy fallback font '%s'"</literal></expr></argument>, <argument><expr><name>psz_fallbackFamilyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>psz_lc_fallback</name> <operator>=</operator> <call><name>ToLower</name><argument_list>(<argument><expr><name>psz_fallbackFamilyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc_fallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_family</name></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>NewFamily</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_lc_fallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc_fallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_family</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>postScriptFallbackFontname</name> <operator>=</operator> <call><name>CTFontCopyPostScriptName</name><argument_list>(<argument><expr><name>fallbackFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>fallbackFontDescriptor</name> <operator>=</operator> <call><name>CTFontDescriptorCreateWithNameAndSize</name><argument_list>(<argument><expr><name>postScriptFallbackFontname</name></expr></argument>, <argument><expr><literal type="number">0.</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_fontPath</name> <operator>=</operator> <call><name>getPathForFontDescription</name><argument_list>(<argument><expr><name>fallbackFontDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>psz_fontPath</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>psz_fontPath</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>addNewFontToFamily</name><argument_list>(<argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>fallbackFontDescriptor</name></expr></argument>, <argument><expr><call><name>strdup</name><argument_list>(<argument><expr><name>psz_fontPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p_family</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>familyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>font</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>codepointString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>fallbackFont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>fallbackFontFamilyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_fallbackFamilyName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_lc_fallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_fontPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>postScriptFallbackFontname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>postScriptFallbackFontname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fallbackFontDescriptor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CFRelease</name><argument_list>(<argument><expr><name>fallbackFontDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_family</name></expr>;</return>

</block_content>}</block></function>

</unit>
