<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\text_renderer\freetype\fonts\android.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_filter.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../platform_fonts.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDROID_SYSTEM_FONTS_NOUGAT</name></cpp:macro> <cpp:value>"file:///system/etc/fonts.xml"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDROID_SYSTEM_FONTS_LEGACY</name></cpp:macro> <cpp:value>"file:///system/etc/system_fonts.xml"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDROID_FALLBACK_FONTS</name></cpp:macro> <cpp:value>"file:///system/etc/fallback_fonts.xml"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDROID_VENDOR_FONTS</name></cpp:macro> <cpp:value>"file:///vendor/etc/fallback_fonts.xml"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ANDROID_FONT_PATH</name></cpp:macro> <cpp:value>"/system/fonts"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Android_ParseFont</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml</name></decl></parameter>,

<parameter><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bold</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_italic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>psz_attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_val</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"weight"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>psz_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_val</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_weight</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"style"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>psz_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_val</name></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"italic"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_italic</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_weight</name> <operator>==</operator> <literal type="number">700</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_bold</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>!=</operator> <name>XML_READER_TEXT</name> <operator>||</operator> <operator>!</operator><name>psz_val</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>psz_val</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Android_ParseFont: no file name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_weight</name> <operator>==</operator> <literal type="number">400</literal> <operator>||</operator> <name>i_weight</name> <operator>==</operator> <literal type="number">700</literal></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fontfile</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>ANDROID_FONT_PATH</name></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>NewFont</name><argument_list>( <argument><expr><name>psz_fontfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b_bold</name></expr></argument>, <argument><expr><name>b_italic</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Android_Nougat_ParseFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dict</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>psz_attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_val</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>psz_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_val</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <name>psz_val</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>psz_name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_name</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><call><name>ToLower</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_family</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_val</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"font"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><call><name>Android_ParseFont</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_ENOMEM</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"family"</literal></expr></argument>, <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>FB_NAME</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_fallback</name> <init>=

<expr><call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>FB_LIST_DEFAULT</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_fallback</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_fallback</name><operator>-&gt;</operator><name>p_fonts</name></name> <operator>=</operator> <name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Android_ParseFamily: Corrupt font configuration file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Android_ParseAlias</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dict</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_dest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_attr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>psz_attr</name> <operator>=</operator> <call><name>xml_ReaderNextAttr</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_val</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"weight"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>psz_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_val</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_weight</name> <operator>=</operator> <call><name>atoi</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"to"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>psz_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_val</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_dest</name> <operator>=</operator> <call><name>ToLower</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>psz_attr</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>psz_val</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_val</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>ToLower</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_dest</name> <operator>||</operator> <operator>!</operator><name>psz_name</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>done</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_dest</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dest</name> <operator>&amp;&amp;</operator> <name>i_weight</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>p_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dest</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Android_Legacy_ParseFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_dictionary_t</name> <modifier>*</modifier></type><name>p_dict</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_counter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bold</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_italic</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>!=</operator> <name>XML_READER_TEXT</name> <operator>||</operator> <operator>!</operator><name>p_node</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p_node</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Android_ParseFamily: empty name"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_lc</name> <operator>=</operator> <call><name>ToLower</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name> <operator>==</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator>

<call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_family</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><name>p_dict</name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"file"</literal></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>!=</operator> <name>XML_READER_TEXT</name> <operator>||</operator> <operator>!</operator><name>p_node</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>p_node</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name>i_counter</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_family</name> <operator>=</operator> <call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_families</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_family</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_counter</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>b_bold</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_italic</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>b_bold</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_italic</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>b_bold</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_italic</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>b_bold</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_italic</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Android_ParseFamily: too many files"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_fontfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_fontfile</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>ANDROID_FONT_PATH</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>!</operator><call><name>NewFont</name><argument_list>( <argument><expr><name>psz_fontfile</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b_bold</name></expr></argument>, <argument><expr><name>b_italic</name></expr></argument>, <argument><expr><name>p_family</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>i_counter</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"family"</literal></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_family</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Android_ParseFamily: empty family"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name>FB_NAME</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_fallback</name> <init>=

<expr><call><name>NewFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name><name>p_family</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>FB_LIST_DEFAULT</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_fallback</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_fallback</name><operator>-&gt;</operator><name>p_fonts</name></name> <operator>=</operator> <name><name>p_family</name><operator>-&gt;</operator><name>p_fonts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><literal type="string">"Android_ParseOldFamily: Corrupt font configuration file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Android_ParseSystemFonts</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_new_format</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><call><name>vlc_stream_NewURL</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_stream</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name> <modifier>*</modifier></type><name>p_xml</name> <init>= <expr><call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_xml</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>i_type</name> <operator>=</operator> <call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_node</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_STARTELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"family"</literal></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>b_new_format</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_ret</name> <operator>=</operator> <call><name>Android_Nougat_ParseFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_xml</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_STARTELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"family"</literal></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_new_format</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_ret</name> <operator>=</operator> <call><name>Android_Legacy_ParseFamily</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_xml</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>XML_READER_STARTELEM</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><literal type="string">"alias"</literal></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>b_new_format</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_ret</name> <operator>=</operator> <call><name>Android_ParseAlias</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>p_xml</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name>p_xml</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Android_Prepare</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>Android_ParseSystemFonts</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>ANDROID_SYSTEM_FONTS_NOUGAT</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>Android_ParseSystemFonts</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>ANDROID_SYSTEM_FONTS_LEGACY</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_ENOMEM</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Android_ParseSystemFonts</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>ANDROID_FALLBACK_FONTS</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_ENOMEM</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Android_ParseSystemFonts</name><argument_list>( <argument><expr><name>p_filter</name></expr></argument>, <argument><expr><name>ANDROID_VENDOR_FONTS</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_ENOMEM</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>vlc_family_t</name> <modifier>*</modifier></type><name>Android_GetFamily</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><call><name>ToLower</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_family</name> <init>=

<expr><call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>family_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_family</name> <operator>==</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>p_family</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>Android_GetFallbacks</name><parameter_list>( <parameter><decl><type><name>filter_t</name> <modifier>*</modifier></type><name>p_filter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_family</name></decl></parameter>,

<parameter><decl><type><name>uni_char_t</name></type> <name>codepoint</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>codepoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_family_t</name> <modifier>*</modifier></type><name>p_fallbacks</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>filter_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_filter</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_lc</name> <init>= <expr><call><name>ToLower</name><argument_list>( <argument><expr><name>psz_family</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_lc</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_fallbacks</name> <operator>=</operator> <call><name>vlc_dictionary_value_for_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fallback_map</name></name></expr></argument>, <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_lc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_fallbacks</name> <operator>==</operator> <name>kVLCDictionaryNotFound</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>p_fallbacks</name></expr>;</return>

</block_content>}</block></function>

</unit>
