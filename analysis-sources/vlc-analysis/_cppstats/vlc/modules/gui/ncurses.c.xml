<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\gui\ncurses.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE_EXTENDED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_MODULE_LICENSE</name></cpp:macro> <cpp:value>VLC_LICENSE_GPL_2_PLUS</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ncurses.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_interface.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input_item.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_player.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_playlist.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_fs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_url.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vector.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROWSE_TEXT</name></cpp:macro> <cpp:value>N_("Filebrowser starting point")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROWSE_LONGTEXT</name></cpp:macro> <cpp:value>N_("This option allows you to specify the directory the ncurses filebrowser " "will show you initially.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"Ncurses"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Ncurses interface"</literal>)</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"interface"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INTERFACE</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INTERFACE_MAIN</argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"curses"</literal></argument>)</argument_list></macro>

<macro><name>add_directory</name><argument_list>(<argument><literal type="string">"browse-dir"</literal></argument>, <argument>NULL</argument>, <argument>BROWSE_TEXT</argument>, <argument>BROWSE_LONGTEXT</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>vlc_module_end</name> <argument_list>()</argument_list></call>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eject.c"</cpp:file></cpp:include>

enum

<block>{

<expr><name>BOX_NONE</name></expr>,

<expr><name>BOX_HELP</name></expr>,

<expr><name>BOX_INFO</name></expr>,

<expr><name>BOX_LOG</name></expr>,

<expr><name>BOX_PLAYLIST</name></expr>,

<expr><name>BOX_SEARCH</name></expr>,

<expr><name>BOX_OPEN</name></expr>,

<expr><name>BOX_BROWSE</name></expr>,

<expr><name>BOX_META</name></expr>,

<expr><name>BOX_STATS</name></expr>

}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>box_title</name><index>[]</index><index>[<expr><literal type="number">19</literal></expr>]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>BOX_NONE</name></expr>]</index> <operator>=</operator> <literal type="string">""</literal></expr>,

<expr><index>[<expr><name>BOX_HELP</name></expr>]</index> <operator>=</operator> <literal type="string">" Help "</literal></expr>,

<expr><index>[<expr><name>BOX_INFO</name></expr>]</index> <operator>=</operator> <literal type="string">" Information "</literal></expr>,

<expr><index>[<expr><name>BOX_LOG</name></expr>]</index> <operator>=</operator> <literal type="string">" Messages "</literal></expr>,

<expr><index>[<expr><name>BOX_PLAYLIST</name></expr>]</index> <operator>=</operator> <literal type="string">" Playlist "</literal></expr>,

<expr><index>[<expr><name>BOX_SEARCH</name></expr>]</index> <operator>=</operator> <literal type="string">" Playlist "</literal></expr>,

<expr><index>[<expr><name>BOX_OPEN</name></expr>]</index> <operator>=</operator> <literal type="string">" Playlist "</literal></expr>,

<expr><index>[<expr><name>BOX_BROWSE</name></expr>]</index> <operator>=</operator> <literal type="string">" Browse "</literal></expr>,

<expr><index>[<expr><name>BOX_META</name></expr>]</index> <operator>=</operator> <literal type="string">" Meta-information "</literal></expr>,

<expr><index>[<expr><name>BOX_STATS</name></expr>]</index> <operator>=</operator> <literal type="string">" Stats "</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<enum>enum

<block>{

<decl><name>C_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>C_TITLE</name></decl>,

<decl><name>C_PLAYLIST_1</name></decl>,

<decl><name>C_PLAYLIST_2</name></decl>,

<decl><name>C_PLAYLIST_3</name></decl>,

<decl><name>C_BOX</name></decl>,

<decl><name>C_STATUS</name></decl>,

<decl><name>C_INFO</name></decl>,

<decl><name>C_ERROR</name></decl>,

<decl><name>C_WARNING</name></decl>,

<decl><name>C_DEBUG</name></decl>,

<decl><name>C_CATEGORY</name></decl>,

<decl><name>C_FOLDER</name></decl>,

<decl><name>C_MAX</name></decl>

}</block>;</enum>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><name>short</name></type> <name>f</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>short</name></type> <name>b</name></decl>;</decl_stmt> }</block> <decl><name><name>color_pairs</name><index>[]</index></name> <init>=

<expr><block>{

<expr><index>[<expr><name>C_TITLE</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_YELLOW</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_PLAYLIST_1</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_GREEN</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_PLAYLIST_2</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_YELLOW</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_PLAYLIST_3</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_RED</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_BOX</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_CYAN</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_STATUS</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_BLUE</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_INFO</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_BLACK</name></expr>, <expr><name>COLOR_WHITE</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_ERROR</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_RED</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_WARNING</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_YELLOW</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_DEBUG</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_WHITE</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_CATEGORY</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_MAGENTA</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

<expr><index>[<expr><name>C_FOLDER</name></expr>]</index> <operator>=</operator> <block>{ <expr><name>COLOR_RED</name></expr>, <expr><name>COLOR_BLACK</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct>struct <name>dir_entry_t</name>

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>file</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr><name>char</name> <specifier>const</specifier> <operator>*</operator></expr></argument>)</argument_list> <name>pl_item_names</name>;</typedef>

<struct>struct <name>intf_sys_t</name>

<block>{

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_bool</name></type> <name>alive</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>color</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>yellow_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>yellow_g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name>yellow_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>box_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>box_y</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>box_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>box_lines_total</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>box_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>box_idx</name></decl>;</decl_stmt> 

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_log_t</name> <modifier>*</modifier></type><name>item</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl>;</decl_stmt>

}</block> <decl><name><name>msgs</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</struct> 

<decl_stmt><decl><type><name>int</name></type> <name>i_msgs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>verbosity</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>msg_lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>search_chain</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>open_chain</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>current_dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n_dir_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry_t</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>dir_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>show_hidden_files</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_listener_id</name> <modifier>*</modifier></type><name>playlist_listener</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pl_item_names</name></type> <name>pl_item_names</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>need_update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>plidx_follow</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DirsDestroy</name><parameter_list>(<parameter><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>n_dir_entries</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry_t</name></name> <modifier>*</modifier></type><name>dir_entry</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>dir_entries</name><index>[<expr><operator>--</operator><name><name>sys</name><operator>-&gt;</operator><name>n_dir_entries</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>dir_entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dir_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dir_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>dir_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>comdir_entries</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry_t</name></name> <modifier>*</modifier></type><name>dir_entry1</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>dir_entry_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry_t</name></name> <modifier>*</modifier></type><name>dir_entry2</name> <init>= <expr><operator>*</operator><operator>(</operator>struct <name>dir_entry_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dir_entry1</name><operator>-&gt;</operator><name>file</name></name> <operator>==</operator> <name><name>dir_entry2</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name><name>dir_entry1</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>dir_entry2</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name><name>dir_entry1</name><operator>-&gt;</operator><name>file</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>current_dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>S_ISDIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uri</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <name>DIR_SEP</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>current_dir</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>st</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>vlc_stat</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>st</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReadDir</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name> <operator>||</operator> <operator>!</operator><operator>*</operator><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"no current dir set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>current_dir</name> <init>= <expr><call><name>vlc_opendir</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current_dir</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"cannot open directory `%s' (%s)"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name></expr></argument>,

<argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DirsDestroy</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>vlc_readdir</name><argument_list>(<argument><expr><name>current_dir</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>show_hidden_files</name></name> <operator>&amp;&amp;</operator> <operator>*</operator><name>entry</name> <operator>==</operator> <literal type="char">'.'</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry_t</name></name> <modifier>*</modifier></type><name>dir_entry</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof <name/></sizeof>*<name>dir_entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>dir_entry</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dir_entry</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <call><name>IsFile</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dir_entry</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>dir_entry</name><operator>-&gt;</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dir_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>n_dir_entries</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dir_entries</name></name></expr></argument>, <argument><expr><name>dir_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></while>

<expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>current_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>n_dir_entries</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>dir_entries</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>n_dir_entries</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>dir_entry_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>comdir_entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CheckIdx</name><parameter_list>(<parameter><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lines</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>box_lines_total</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name>LINES</name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_y</name></name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&gt;</operator> <name>lines</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>lines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>&gt;=</operator> <name>lines</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lines</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <name>lines</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>-</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>||</operator>

<name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>&gt;</operator> <name>height</name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>-</operator> <name>height</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>==</operator> <name>height</name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PlaylistRebuild</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>vlc_playlist_Count</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vlc_vector_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier></type><name>plitem</name> <init>= <expr><call><name>vlc_playlist_Get</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_playlist_item_GetMedia</name><argument_list>(<argument><expr><name>plitem</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>input_item_GetTitleFbName</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>need_update</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>playlist_on_items_added</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>items</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><operator>(</operator><name>intf_sys_t</name> <operator>*</operator><operator>)</operator><name>userdata</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>need_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>playlist_on_items_updated</name><parameter_list>(<parameter><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>index</name></decl></parameter>,

<parameter><decl><type><name>vlc_playlist_item_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>items</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>intf_sys_t</name> <operator>*</operator><operator>)</operator><name>userdata</name><operator>)</operator><operator>-&gt;</operator><name>need_update</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SubSearchPlaylist</name><parameter_list>(<parameter><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>searchstring</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_stop</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>i_start</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_stop</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>strcasestr</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>searchstring</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SearchPlaylist</name><parameter_list>(<parameter><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>search_chain</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_first</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>str</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_item</name> <init>= <expr><call><name>SubSearchPlaylist</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>i_first</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_item</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_item</name> <operator>=</operator> <call><name>SubSearchPlaylist</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_item</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <name>i_item</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CheckIdx</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>start_color_and_pairs</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>has_colors</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Terminal doesn't support colors"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>start_color</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>C_DEFAULT</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>C_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>color_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>, <argument><expr><name><name>color_pairs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>can_change_color</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>color_content</name><argument_list>(<argument><expr><name>COLOR_YELLOW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>yellow_r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>yellow_g</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>yellow_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>COLOR_YELLOW</name></expr></argument>, <argument><expr><literal type="number">960</literal></expr></argument>, <argument><expr><literal type="number">500</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawBox</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>title</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name>COLS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">3</literal> <operator>||</operator> <name>h</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_BOX</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>title</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>title</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>w</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mvaddch</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACS_ULCORNER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvhline</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACS_HLINE</name></expr></argument>, <argument><expr><operator>(</operator><name>w</name><operator>-</operator><name>len</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvprintw</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>w</name><operator>-</operator><name>len</name><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvhline</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><operator>(</operator><name>w</name><operator>-</operator><name>len</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><name>len</name></expr></argument>, <argument><expr><name>ACS_HLINE</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><name>w</name><operator>-</operator><name>len</name><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>+</operator><name>len</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvaddch</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ACS_URCORNER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mvaddch</name><argument_list>(<argument><expr><operator>++</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACS_VLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvaddch</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACS_VLINE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>mvaddch</name><argument_list>(<argument><expr><operator>++</operator><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ACS_LLCORNER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvhline</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACS_HLINE</name></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvaddch</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ACS_LRCORNER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawEmptyLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mvhline</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DrawLine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>attrset</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvhline</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>attroff</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mvnprintw</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>vl_args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vl_args</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_buf</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>vl_args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>wchar_t</name></type> <name><name>wide</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_char_len</name> <init>= <expr><call><name>mbstowcs</name><argument_list>(<argument><expr><name>wide</name></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_width</name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>i_char_len</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <call><name>wcswidth</name><argument_list>(<argument><expr><name>wide</name></expr></argument>, <argument><expr><name>i_char_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_width</name> <operator>==</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_char_len</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_cwidth</name> <init>= <expr><call><name>wcwidth</name><argument_list>(<argument><expr><name><name>wide</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_cwidth</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_width</name> <operator>+=</operator> <name>i_cwidth</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_width</name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mvprintw</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvhline</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>i_width</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><name>w</name> <operator>-</operator> <name>i_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_total_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i_total_width</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i_total_width</name> <operator>+=</operator> <call><name>wcwidth</name><argument_list>(<argument><expr><name><name>wide</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <name>i_total_width</name> <operator>&gt;=</operator> <name>w</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wide</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wide</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_total_width</name> <operator>-=</operator> <call><name>wcwidth</name><argument_list>(<argument><expr><name><name>wide</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wide</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_total_width</name> <operator>-=</operator> <call><name>wcwidth</name><argument_list>(<argument><expr><name><name>wide</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i_2nd_width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i_char_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i_2nd_width</name> <operator>&lt;</operator> <name>w</name> <operator>-</operator> <name>i_total_width</name></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_2nd_width</name> <operator>+=</operator> <call><name>wcwidth</name><argument_list>(<argument><expr><name><name>wide</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i_2nd_width</name> <operator>&gt;</operator> <name>w</name> <operator>-</operator> <name>i_total_width</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>wmemmove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>wide</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>wide</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_char_len</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wide</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>i_char_len</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>wide</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_wlen</name> <init>= <expr><call><name>wcslen</name><argument_list>(<argument><expr><name>wide</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>ellipsized</name><index>[<expr><name>i_wlen</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>wcstombs</name><argument_list>(<argument><expr><name>ellipsized</name></expr></argument>, <argument><expr><name>wide</name></expr></argument>, <argument><expr><name>i_wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvprintw</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ellipsized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MainBoxWrite</name><parameter_list>(<parameter><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>vl_args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_selected</name> <init>= <expr><name>l</name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>||</operator> <name>l</name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>&gt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vl_args</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_buf</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>vl_args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vl_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_ret</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_selected</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>attron</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>box_y</name></name> <operator>+</operator> <name>l</name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>COLS</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b_selected</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>attroff</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DrawMeta</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_player_HoldCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>VLC_META_TYPE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><call><name>vlc_meta_Get</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>p_meta</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>meta</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>meta</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">" [%s]"</literal></expr></argument>, <argument><expr><call><name>vlc_meta_TypeToLocalizedString</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DrawInfo</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_player_HoldCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>i_categories</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>info_category_t</name> <modifier>*</modifier></type><name>p_category</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>pp_categories</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>info_t</name> <modifier>*</modifier></type><name>p_info</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" [%s]"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_category</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<macro><name>info_foreach</name><argument_list>(<argument>p_info</argument>, <argument>&amp;p_category-&gt;infos</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" %s: %s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_info</name><operator>-&gt;</operator><name>psz_value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DrawStats</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_stats_t</name> <modifier>*</modifier></type><name>p_stats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_audio</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i_video</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_player_HoldCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_stats</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>p_stats</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>item</name><operator>-&gt;</operator><name>i_es</name></name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i_audio</name> <operator>+=</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>AUDIO_ES</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_video</name> <operator>+=</operator> <operator>(</operator><name><name>item</name><operator>-&gt;</operator><name>es</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_cat</name> <operator>==</operator> <name>VIDEO_ES</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"+-[Incoming]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| input bytes read : %8.0f KiB"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>p_stats</name><operator>-&gt;</operator><name>i_read_bytes</name></name><operator>)</operator><operator>/</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| input bitrate : %6.0f kb/s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_stats</name><operator>-&gt;</operator><name>f_input_bitrate</name></name><operator>*</operator><literal type="number">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| demux bytes read : %8.0f KiB"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name><name>p_stats</name><operator>-&gt;</operator><name>i_demux_read_bytes</name></name><operator>)</operator><operator>/</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| demux bitrate : %6.0f kb/s"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_stats</name><operator>-&gt;</operator><name>f_demux_bitrate</name></name><operator>*</operator><literal type="number">8000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_video</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"+-[Video Decoding]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| video decoded : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_decoded_video</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| frames displayed : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_displayed_pictures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| frames lost : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_lost_pictures</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i_audio</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"+-[Audio Decoding]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| audio decoded : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_decoded_audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| buffers played : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_played_abuffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"| buffers lost : %5"</literal><name>PRIi64</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_stats</name><operator>-&gt;</operator><name>i_lost_abuffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>item</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DrawHelp</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MainBoxWrite(sys, l++, a)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[Display]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" h,H Show/Hide help box"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" i Show/Hide info box"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" M Show/Hide metadata box"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" L Show/Hide messages box"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" P Show/Hide playlist box"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" B Show/Hide filebrowser"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" S Show/Hide statistics box"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Esc Close Add/Search entry"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Ctrl-l Refresh the screen"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[Global]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" q, Q, Esc Quit"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" s Stop"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" &lt;space&gt; Pause/Play"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" f Toggle Fullscreen"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" c Cycle through audio tracks"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" v Cycle through subtitles tracks"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" b Cycle through video tracks"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" n, p Next/Previous playlist item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" [, ] Next/Previous title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" &lt;, &gt; Next/Previous chapter"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" &lt;left&gt;,&lt;right&gt; Seek -/+ 1%%"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" a, z Volume Up/Down"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" m Mute"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" &lt;up&gt;,&lt;down&gt; Navigate through the box line by line"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" &lt;pageup&gt;,&lt;pagedown&gt; Navigate through the box page by page"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" &lt;start&gt;,&lt;end&gt; Navigate to start/end of box"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[Playlist]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" r Toggle Random playing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" l Toggle Loop Playlist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" R Toggle Repeat item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" o Order Playlist by title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" O Reverse order Playlist by title"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" g Go to the current playing item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" / Look for an item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" ; Look for the next item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" A Add an entry"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" D, &lt;backspace&gt;, &lt;del&gt; Delete an entry"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" e Eject (if stopped)"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[Filebrowser]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" &lt;enter&gt; Add the selected file to the playlist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" &lt;space&gt; Add the selected directory to the playlist"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" . Show/Hide hidden files"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_CATEGORY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"[Player]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>H</name><argument_list>(<argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" &lt;up&gt;,&lt;down&gt; Seek +/-5%%"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>H</name></cpp:undef>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DrawBrowse</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>n_dir_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry_t</name></name> <modifier>*</modifier></type><name>dir_entry</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>dir_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><name><name>dir_entry</name><operator>-&gt;</operator><name>file</name></name></expr> ?</condition><then> <expr><literal type="char">' '</literal></expr> </then><else>: <expr><literal type="char">'+'</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>dir_entry</name><operator>-&gt;</operator><name>file</name></name></expr> ?</condition><then> <expr><name>C_DEFAULT</name></expr> </then><else>: <expr><name>C_FOLDER</name></expr></else></ternary></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">" %c %s"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name><name>dir_entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>sys</name><operator>-&gt;</operator><name>n_dir_entries</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DrawPlaylist</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>cur_idx</name> <init>= <expr><call><name>vlc_playlist_GetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>need_update</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PlaylistRebuild</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>plidx_follow</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <ternary><condition><expr><name>cur_idx</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>cur_idx</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>i</name><operator>%</operator><literal type="number">3</literal> <operator>+</operator> <name>C_PLAYLIST_1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="string">"%c %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>ssize_t</name><operator>)</operator><name>i</name> <operator>==</operator> <name>cur_idx</name></expr> ?</condition><then> <expr><literal type="char">'&gt;'</literal></expr> </then><else>: <expr><literal type="char">' '</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DrawMessages</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>msg_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_log_t</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>+</operator> <name>C_INFO</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MainBoxWrite</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>l</name><operator>++</operator></expr></argument>, <argument><expr><literal type="string">"[%s] %s"</literal></expr></argument>, <argument><expr><name><name>msg</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <sizeof>sizeof <name><name>sys</name><operator>-&gt;</operator><name>msgs</name></name></sizeof> <operator>/</operator> <sizeof>sizeof <name/></sizeof>*<name><name>sys</name><operator>-&gt;</operator><name>msgs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>msg_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>l</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DrawStatus</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"VLC media player"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>name_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PACKAGE_VERSION</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>repeat</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>loop</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>random</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><name>COLS</name> <operator>-</operator> <name>name_len</name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>padding</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>padding</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>attrset</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_TITLE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DrawEmptyLine</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name>padding</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>PACKAGE_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_STATUS</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>attroff</name><argument_list>(<argument><expr><name>A_REVERSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt> 

<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>loop</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>random</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat_mode</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order_mode</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>repeat_mode</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>repeat</name> <operator>=</operator> <literal type="string">"[Repeat]"</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>repeat_mode</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>loop</name> <operator>=</operator> <literal type="string">"[Loop]"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>order_mode</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>random</name> <operator>=</operator> <literal type="string">"[Random]"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_IsStarted</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>uri</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>uri</name> <operator>=</operator> <call><name>input_item_GetURI</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>vlc_uri2path</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Source : %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>path</name></expr>?</condition><then><expr><name>path</name></expr></then><else>:<expr><name>uri</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_player_state</name></name></type> <name>state</name> <init>= <expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>state</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>input_state</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>]</index> <operator>=</operator> <literal type="string">" State : Playing %s%s%s"</literal></expr>,

<expr><index>[<expr><name>VLC_PLAYER_STATE_STARTED</name></expr>]</index> <operator>=</operator> <literal type="string">" State : Opening/Connecting %s%s%s"</literal></expr>,

<expr><index>[<expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>]</index> <operator>=</operator> <literal type="string">" State : Paused %s%s%s"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><name>MSTRTIME_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf2</name><index>[<expr><name>MSTRTIME_MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>volume</name></decl>;</decl_stmt>

<case>case <expr><name>VLC_PLAYER_STATE_STOPPED</name></expr>:</case>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYER_STATE_PLAYING</name></expr>:</case>

<case>case <expr><name>VLC_PLAYER_STATE_STARTED</name></expr>:</case>

<case>case <expr><name>VLC_PLAYER_STATE_PAUSED</name></expr>:</case>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name><name>input_state</name><index>[<expr><name>state</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repeat</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<expr_stmt><expr><call><name>secstotimestr</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_player_GetTime</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>secstotimestr</name><argument_list>(<argument><expr><name>buf2</name></expr></argument>, <argument><expr><call><name>SEC_FROM_VLC_TICK</name><argument_list>(<argument><expr><call><name>vlc_player_GetLength</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Position : %s/%s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>buf1</name></expr></argument>, <argument><expr><name>buf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>volume</name> <operator>=</operator> <call><name>vlc_player_aout_GetVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>mute</name> <init>= <expr><call><name>vlc_player_aout_IsMuted</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>mute</name></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Volume : Mute"</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><ternary><condition><expr><name>volume</name> <operator>&gt;=</operator> <literal type="number">0.f</literal></expr> ?</condition><then> <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Volume : %3ld%%"</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Volume : ----"</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></argument>,

<argument><expr><call><name>lroundf</name><argument_list>(<argument><expr><name>volume</name> <operator>*</operator> <literal type="number">100.f</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>title_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_title_list</name></name> <modifier>*</modifier></type><name>titles</name> <init>=

<expr><call><name>vlc_player_GetTitleList</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>titles</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>title_count</name> <operator>=</operator> <call><name>vlc_player_title_list_GetCount</name><argument_list>(<argument><expr><name>titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>title_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Title : %zd/%d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>vlc_player_GetSelectedTitleIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>title_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_player_title</name></name> <specifier>const</specifier> <modifier>*</modifier></type><name>title</name> <init>=

<expr><call><name>vlc_player_GetSelectedTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>title</name> <operator>&amp;&amp;</operator> <name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Chapter : %zd/%d"</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>vlc_player_GetSelectedChapterIdx</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>title</name><operator>-&gt;</operator><name>chapter_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_GetError</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_PLAYER_ERROR_GENERIC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" Source: &lt;no current item&gt;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><literal type="string">" %s%s%s"</literal></expr></argument>, <argument><expr><name>repeat</name></expr></argument>, <argument><expr><name>random</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">" [ h for help ]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawEmptyLine</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>COLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>color_set</name><argument_list>(<argument><expr><name>C_DEFAULT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>DrawBox</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>DrawEmptyLine</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>COLS</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_IsStarted</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DrawLine</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>COLS</name><operator>-</operator><literal type="number">2</literal><operator>)</operator> <operator>*</operator> <call><name>vlc_player_GetPosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>y</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillTextBox</name><parameter_list>(<parameter><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name>COLS</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DrawEmptyLine</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name> <operator>==</operator> <name>BOX_OPEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Open: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>open_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mvnprintw</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"Find: %s"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>search_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillBox</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>int</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <name><name>draw</name><index>[]</index></name></expr></argument>)</argument_list></call> <argument_list>(<argument><expr><name>intf_thread_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <block>{

<expr><index>[<expr><name>BOX_HELP</name></expr>]</index> <operator>=</operator> <name>DrawHelp</name></expr>,

<expr><index>[<expr><name>BOX_INFO</name></expr>]</index> <operator>=</operator> <name>DrawInfo</name></expr>,

<expr><index>[<expr><name>BOX_META</name></expr>]</index> <operator>=</operator> <name>DrawMeta</name></expr>,

<expr><index>[<expr><name>BOX_STATS</name></expr>]</index> <operator>=</operator> <name>DrawStats</name></expr>,

<expr><index>[<expr><name>BOX_BROWSE</name></expr>]</index> <operator>=</operator> <name>DrawBrowse</name></expr>,

<expr><index>[<expr><name>BOX_PLAYLIST</name></expr>]</index> <operator>=</operator> <name>DrawPlaylist</name></expr>,

<expr><index>[<expr><name>BOX_SEARCH</name></expr>]</index> <operator>=</operator> <name>DrawPlaylist</name></expr>,

<expr><index>[<expr><name>BOX_OPEN</name></expr>]</index> <operator>=</operator> <name>DrawPlaylist</name></expr>,

<expr><index>[<expr><name>BOX_LOG</name></expr>]</index> <operator>=</operator> <name>DrawMessages</name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_lines_total</name></name> <operator>=</operator> <name><name>draw</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name></expr>]</index></name><operator>(</operator><name>intf</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name> <operator>==</operator> <name>BOX_SEARCH</name> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name> <operator>==</operator> <name>BOX_OPEN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FillTextBox</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Redraw</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>box</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>DrawStatus</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_height</name></name> <operator>=</operator> <name>LINES</name> <operator>-</operator> <name>y</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DrawBox</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>box_height</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr></argument>, <argument><expr><call><name>_</name><argument_list>(<argument><expr><name><name>box_title</name><index>[<expr><name>box</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_y</name></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>box</name> <operator>!=</operator> <name>BOX_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>FillBox</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_lines_total</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_lines_total</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_lines_total</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>box_lines_total</name></name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name></expr></argument>,

<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>box_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>LINES</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DrawEmptyLine</name><argument_list>(<argument><expr><name>y</name><operator>++</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>COLS</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>refresh</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ChangePosition</name><parameter_list>(<parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>increment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_player_GetState</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_PLAYER_STATE_PLAYING</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_player_JumpPos</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>increment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>RemoveLastUTF8Entity</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>psz</name><index>[<expr><operator>--</operator><name>len</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> 

<empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><name><name>psz</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GetDiscDevice</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{ <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>v</name></decl>;</decl_stmt> }</block> <decl><name><name>devs</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="string">"cdda://"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="string">"cd-audio"</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"dvd://"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="string">"dvd"</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"vcd://"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="string">"vcd"</literal></expr>, }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <name>devs</name></sizeof> <operator>/</operator> <sizeof>sizeof <name/></sizeof>*<name>devs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><name><name>devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>n</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>name</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="char">'@'</literal> <operator>||</operator> <name><name>name</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>config_GetPsz</name><argument_list>(<argument><expr><name><name>devs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name>name</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>device</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>device</name><index>[<expr><call><name>strcspn</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"@"</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>device</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Eject</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>device</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>started</name> <init>= <expr><call><name>vlc_player_IsStarted</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>started</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>current</name> <init>= <expr><call><name>vlc_player_GetCurrentMedia</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>current</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>name</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>psz_name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>device</name> <operator>=</operator> <ternary><condition><expr><name>name</name></expr> ?</condition><then> <expr><call><name>GetDiscDevice</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>device</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>intf_Eject</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AddItem</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>uri</name> <init>= <expr><call><name>vlc_path2uri</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>uri</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><call><name>input_item_New</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>item</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_AppendOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>BoxSwitch</name><parameter_list>(<parameter><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>box</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name> <operator>==</operator> <name>box</name><operator>)</operator></expr> ?</condition><then> <expr><name>BOX_NONE</name></expr> </then><else>: <expr><name>box</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>HandlePlaylistKey</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>key</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'r'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_order</name></name></type> <name>order_mode</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>order_mode</name> <operator>=</operator>

<ternary><condition><expr><name>order_mode</name> <operator>==</operator> <name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr>

?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_RANDOM</name></expr>

</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_ORDER_NORMAL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackOrder</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>order_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<case>case <expr><literal type="char">'R'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>vlc_playlist_playback_repeat</name></name></type> <name>repeat_mode</name> <init>=

<expr><call><name>vlc_playlist_GetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>repeat_mode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr>:</case>

<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <ternary><condition><expr><name>key</name> <operator>==</operator> <literal type="char">'l'</literal></expr>

?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>

</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>:</case>

<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <ternary><condition><expr><name>key</name> <operator>==</operator> <literal type="char">'l'</literal></expr>

?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr>

</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_CURRENT</name></expr>:</case>

<expr_stmt><expr><name>repeat_mode</name> <operator>=</operator> <ternary><condition><expr><name>key</name> <operator>==</operator> <literal type="char">'l'</literal></expr>

?</condition><then> <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_ALL</name></expr>

</then><else>: <expr><name>VLC_PLAYLIST_PLAYBACK_REPEAT_NONE</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_playlist_SetPlaybackRepeat</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name>repeat_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<case>case <expr><literal type="char">'O'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_playlist_sort_criterion</name></name></type> <name>criteria</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>key</name> <operator>=</operator> <name>VLC_PLAYLIST_SORT_KEY_TITLE</name></expr>,

<expr><operator>.</operator><name>order</name> <operator>=</operator> <name>key</name> <operator>==</operator> <literal type="char">'o'</literal>

<operator>?</operator> <name>VLC_PLAYLIST_SORT_ORDER_ASCENDING</name>

<operator>:</operator> <name>VLC_PLAYLIST_SORT_ORDER_DESCENDING</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Sort</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>criteria</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>need_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">';'</literal></expr>:</case>

<expr_stmt><expr><call><name>SearchPlaylist</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'g'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <call><name>vlc_playlist_GetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plidx_follow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><literal type="char">'D'</literal></expr>:</case>

<case>case <expr><name>KEY_BACKSPACE</name></expr>:</case>

<case>case <expr><literal type="number">0x7f</literal></expr>:</case>

<case>case <expr><name>KEY_DC</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>size</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_RemoveOne</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>&gt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_lines_total</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_lines_total</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>need_update</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>KEY_ENTER</name></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>size</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_PlayAt</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plidx_follow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>HandleBrowseKey</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>dir_entry_t</name></name> <modifier>*</modifier></type><name>dir_entry</name></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>key</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'.'</literal></expr>:</case>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>show_hidden_files</name></name> <operator>=</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>show_hidden_files</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReadDir</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>KEY_ENTER</name></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><name>dir_entry</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>dir_entries</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <name>DIR_SEP</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name></expr></argument>,

<argument><expr><name><name>dir_entry</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dir_entry</name><operator>-&gt;</operator><name>file</name></name> <operator>&amp;&amp;</operator> <name>key</name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name> <operator>=</operator> <name>path</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ReadDir</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AddItem</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_PLAYLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OpenSelection</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AddItem</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>open_chain</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plidx_follow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HandleEditBoxKey</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>box</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>search</name> <init>= <expr><name>box</name> <operator>==</operator> <name>BOX_SEARCH</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><ternary><condition><expr><name>search</name></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>search_chain</name></name></expr></then><else>: <expr><name><name>sys</name><operator>-&gt;</operator><name>open_chain</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>box</name> <operator>==</operator> <name>BOX_SEARCH</name> <operator>||</operator> <name>box</name> <operator>==</operator> <name>BOX_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>key</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case> 

<case>case <expr><name>KEY_CLEAR</name></expr>:</case> <expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><name>KEY_ENTER</name></expr>:</case>

<case>case <expr><literal type="char">'\r'</literal></expr>:</case>

<case>case <expr><literal type="char">'\n'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>search</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SearchPlaylist</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OpenSelection</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name> <operator>=</operator> <name>BOX_PLAYLIST</name></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="number">0x1b</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>getch</name><argument_list>()</argument_list></call> <operator>==</operator> <name>ERR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name> <operator>=</operator> <name>BOX_PLAYLIST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

<case>case <expr><name>KEY_BACKSPACE</name></expr>:</case>

<case>case <expr><literal type="number">0x7f</literal></expr>:</case>

<expr_stmt><expr><call><name>RemoveLastUTF8Entity</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>search</name></expr> ?</condition><then> <expr><sizeof>sizeof <name><name>sys</name><operator>-&gt;</operator><name>search_chain</name></name></sizeof></expr>

</then><else>: <expr><sizeof>sizeof <name><name>sys</name><operator>-&gt;</operator><name>open_chain</name></name></sizeof></expr></else></ternary><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>len</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>search</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SearchPlaylist</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HandleCommonKey</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>key</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x1b</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>getch</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>ERR</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'q'</literal></expr>:</case>

<case>case <expr><literal type="char">'Q'</literal></expr>:</case>

<case>case <expr><name>KEY_EXIT</name></expr>:</case>

<expr_stmt><expr><call><name>libvlc_Quit</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<case>case <expr><literal type="char">'H'</literal></expr>:</case> <expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_HELP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><literal type="char">'i'</literal></expr>:</case> <expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_INFO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><literal type="char">'M'</literal></expr>:</case> <expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_META</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><literal type="char">'L'</literal></expr>:</case> <expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_LOG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><literal type="char">'P'</literal></expr>:</case> <expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_PLAYLIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><literal type="char">'B'</literal></expr>:</case> <expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_BROWSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_STATS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><literal type="char">'/'</literal></expr>:</case> 

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plidx_follow</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_SEARCH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> 

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>open_chain</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>BoxSwitch</name><argument_list>(<argument><expr><name>sys</name></expr></argument>, <argument><expr><name>BOX_OPEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><name>KEY_RIGHT</name></expr>:</case> <expr_stmt><expr><call><name>ChangePosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><name>KEY_LEFT</name></expr>:</case> <expr_stmt><expr><call><name>ChangePosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><literal type="char">'f'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_vout_ToggleFullscreen</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_TogglePause</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Stop</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <expr_stmt><expr><call><name>Eject</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectPrevTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">']'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectNextTitle</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'&lt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectPrevChapter</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'&gt;'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectNextChapter</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Prev</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Next</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_aout_IncrementVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_aout_DecrementVolume</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_aout_ToggleMute</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectNextTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'v'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectNextTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<expr_stmt><expr><call><name>vlc_player_Lock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_SelectNextTrack</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_player_Unlock</name><argument_list>(<argument><expr><name>player</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case> 

<case>case <expr><name>KEY_CLEAR</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>HandleListKey</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name>key</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>KEY_SELECT</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>KEY_END</name></expr>:</case> <expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_lines_total</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KEY_HOME</name></expr>:</case> <expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KEY_UP</name></expr>:</case> <expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name><operator>--</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KEY_DOWN</name></expr>:</case> <expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KEY_PPAGE</name></expr>:</case><expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>-=</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_height</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>KEY_NPAGE</name></expr>:</case><expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>box_height</name></name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>CheckIdx</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name> <operator>==</operator> <name>BOX_PLAYLIST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plidx_follow</name></name> <operator>=</operator>

<name><name>sys</name><operator>-&gt;</operator><name>box_idx</name></name> <operator>==</operator> <call><name>vlc_playlist_GetCurrentIndex</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>HandleKey</name><parameter_list>(<parameter><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>key</name> <init>= <expr><call><name>getch</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>box</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_player_t</name> <modifier>*</modifier></type><name>player</name> <init>= <expr><call><name>vlc_playlist_GetPlayer</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>box</name> <operator>==</operator> <name>BOX_SEARCH</name> <operator>||</operator> <name>box</name> <operator>==</operator> <name>BOX_OPEN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>HandleEditBoxKey</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>box</name> <operator>==</operator> <name>BOX_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch<condition>(<expr><name>key</name></expr>)</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__FreeBSD__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>KEY_SELECT</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>KEY_END</name></expr>:</case> <expr_stmt><expr><call><name>ChangePosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">.99</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><name>KEY_HOME</name></expr>:</case> <expr_stmt><expr><call><name>ChangePosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><name>KEY_UP</name></expr>:</case> <expr_stmt><expr><call><name>ChangePosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">0.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<case>case <expr><name>KEY_DOWN</name></expr>:</case> <expr_stmt><expr><call><name>ChangePosition</name><argument_list>(<argument><expr><name>player</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0.05</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

<default>default:</default> <expr_stmt><expr><call><name>HandleCommonKey</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>player</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>box</name> <operator>==</operator> <name>BOX_BROWSE</name> <operator>&amp;&amp;</operator> <call><name>HandleBrowseKey</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>box</name> <operator>==</operator> <name>BOX_PLAYLIST</name> <operator>&amp;&amp;</operator> <call><name>HandlePlaylistKey</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>HandleListKey</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>HandleCommonKey</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><name>player</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>msg_Copy</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_log_t</name> <modifier>*</modifier></type><name>copy</name> <init>= <expr><operator>(</operator><name>vlc_log_t</name> <operator>*</operator><operator>)</operator><call><name>xmalloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>copy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>i_object_id</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>i_object_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>psz_object_type</name></name> <operator>=</operator> <name><name>msg</name><operator>-&gt;</operator><name>psz_object_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>psz_module</name></name> <operator>=</operator> <call><name>strdup</name> <argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>copy</name><operator>-&gt;</operator><name>psz_header</name></name> <operator>=</operator> <ternary><condition><expr><name><name>msg</name><operator>-&gt;</operator><name>psz_header</name></name></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name><name>msg</name><operator>-&gt;</operator><name>psz_header</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>copy</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_Free</name> <parameter_list>(<parameter><decl><type><name>vlc_log_t</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>msg</name><operator>-&gt;</operator><name>psz_module</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>msg</name><operator>-&gt;</operator><name>psz_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MsgCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_log_t</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>&lt;</operator> <operator>(</operator><name>type</name> <operator>-</operator> <name>VLC_MSG_ERR</name><operator>)</operator>

<operator>||</operator> <call><name>vasprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>msg_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name></expr>]</index></name><operator>.</operator><name>item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name></expr>]</index></name><operator>.</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name></expr>]</index></name><operator>.</operator><name>item</name> <operator>=</operator> <call><name>msg_Copy</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name></expr>]</index></name><operator>.</operator><name>msg</name> <operator>=</operator> <name>text</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name> <operator>==</operator> <operator>(</operator><sizeof>sizeof <name><name>sys</name><operator>-&gt;</operator><name>msgs</name></name></sizeof> <operator>/</operator> <sizeof>sizeof <name/></sizeof>*<name><name>sys</name><operator>-&gt;</operator><name>msgs</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>i_msgs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>msg_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_logger_operations</name></name></type> <name>log_ops</name> <init>= <expr><block>{ <expr><name>MsgCallback</name></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>Run</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>alive</name></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>Redraw</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>HandleKey</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>intf_sys_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>alive</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>msg_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>verbosity</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"verbose"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_LogSet</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>log_ops</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>box_type</name></name> <operator>=</operator> <name>BOX_PLAYLIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>plidx_follow</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"color"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name> <operator>=</operator> <call><name>var_CreateGetNonEmptyString</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"browse-dir"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name> <operator>=</operator> <call><name>config_GetUserDir</name><argument_list>(<argument><expr><name>VLC_HOME_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>initscr</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>color</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>start_color_and_pairs</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>keypad</name><argument_list>(<argument><expr><name>stdscr</name></expr></argument>, <argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>nonl</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>cbreak</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>noecho</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>curs_set</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>timeout</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"/dev/null"</literal></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>intf</name></expr></argument>, <argument><expr><literal type="string">"Couldn't close stderr (%s)"</literal></expr></argument>, <argument><expr><call><name>vlc_strerror_c</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ReadDir</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name> <operator>=</operator> <call><name>vlc_intf_GetMainPlaylist</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>vlc_playlist_callbacks</name></name> <specifier>const</specifier></type> <name>playlist_cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>on_items_added</name> <operator>=</operator> <name>playlist_on_items_added</name></expr>,

<expr><operator>.</operator><name>on_items_updated</name> <operator>=</operator> <name>playlist_on_items_updated</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PlaylistRebuild</name><argument_list>(<argument><expr><name>intf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist_listener</name></name> <operator>=</operator>

<call><name>vlc_playlist_AddListener</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>playlist_cbs</name></expr></argument>, <argument><expr><name>sys</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_clone</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>Run</name></expr></argument>, <argument><expr><name>intf</name></expr></argument>, <argument><expr><name>VLC_THREAD_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_RemoveListener</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>intf_thread_t</name> <modifier>*</modifier></type><name>intf</name> <init>= <expr><operator>(</operator><name>intf_thread_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>intf_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>intf</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>atomic_store_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>alive</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_join</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_playlist_t</name> <modifier>*</modifier></type><name>playlist</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>playlist</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Lock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_RemoveListener</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>playlist_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_playlist_Unlock</name><argument_list>(<argument><expr><name>playlist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pl_item_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DirsDestroy</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>current_dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>can_change_color</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>init_color</name><argument_list>(<argument><expr><name>COLOR_YELLOW</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>yellow_r</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>yellow_g</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>yellow_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>endwin</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_LogSet</name><argument_list>(<argument><expr><call><name>vlc_object_instance</name><argument_list>(<argument><expr><name>p_this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof <name><name>sys</name><operator>-&gt;</operator><name>msgs</name></name></sizeof> <operator>/</operator> <sizeof>sizeof <name/></sizeof>*<name><name>sys</name><operator>-&gt;</operator><name>msgs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>msgs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
