<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\vobsub.h"><function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vobsub_palette_argb2ayvu</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>__MIN</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <literal type="number">2104</literal> <operator>+</operator> <name>g</name> <operator>*</operator> <literal type="number">4130</literal> <operator>+</operator> <name>b</name> <operator>*</operator> <literal type="number">802</literal> <operator>+</operator> <literal type="number">4096</literal> <operator>+</operator> <literal type="number">131072</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">235</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>__MIN</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <operator>-</operator><literal type="number">1214</literal> <operator>+</operator> <name>g</name> <operator>*</operator> <operator>-</operator><literal type="number">2384</literal> <operator>+</operator> <name>b</name> <operator>*</operator> <literal type="number">3598</literal> <operator>+</operator> <literal type="number">4096</literal> <operator>+</operator> <literal type="number">1048576</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>__MIN</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>r</name> <operator>*</operator> <literal type="number">3598</literal> <operator>+</operator> <name>g</name> <operator>*</operator> <operator>-</operator><literal type="number">3013</literal> <operator>+</operator> <name>b</name> <operator>*</operator> <operator>-</operator><literal type="number">585</literal> <operator>+</operator> <literal type="number">4096</literal> <operator>+</operator> <literal type="number">1048576</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">240</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">16</literal> <operator>|</operator> <operator>(</operator><name>v</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>|</operator> <operator>(</operator><name>u</name><operator>&amp;</operator><literal type="number">0xff</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vobsub_palette_parse</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pu_palette</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_buf</name></expr></argument>, <argument><expr><literal type="string">"palette: "</literal>

<literal type="string">"%"</literal> <name>SCNx32</name><literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", "</literal>

<literal type="string">"%"</literal> <name>SCNx32</name><literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", "</literal>

<literal type="string">"%"</literal> <name>SCNx32</name><literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", "</literal>

<literal type="string">"%"</literal> <name>SCNx32</name><literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">", %"</literal> <name>SCNx32</name> <literal type="string">""</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>palette</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">16</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vobsub_palette_argb2ayvu</name><argument_list>( <argument><expr><name>palette</name></expr></argument>, <argument><expr><name>pu_palette</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vobsub_size_parse</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_buf</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_original_frame_width</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_original_frame_height</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_buf</name></expr></argument>, <argument><expr><literal type="string">"size: %dx%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_original_frame_width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_original_frame_height</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
