<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\rawdv.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV_PAL_FRAME_SIZE</name></cpp:macro> <cpp:value>(12 * 150 * 80)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DV_NTSC_FRAME_SIZE</name></cpp:macro> <cpp:value>(10 * 150 * 80)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>dv_audio_shuffle525</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">70</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">76</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">82</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">88</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">71</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">77</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">83</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">89</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>dv_audio_shuffle625</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">88</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">94</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">84</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">100</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">70</literal></expr>, <expr><literal type="number">106</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">86</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">76</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">82</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">89</literal></expr>}</block></expr>, 

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">95</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">13</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">39</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">101</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">19</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">107</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">77</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">31</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">83</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint16_t</name></type> <name>dv_audio_12to16</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>sample</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>shift</name></decl>, <decl><type ref="prev"/><name>result</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>sample</name> <operator>&lt;</operator> <literal type="number">0x800</literal><operator>)</operator></expr> ?</condition><then> <expr><name>sample</name></expr> </then><else>: <expr><name>sample</name> <operator>|</operator> <literal type="number">0xf000</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <operator>(</operator><name>sample</name> <operator>&amp;</operator> <literal type="number">0xf00</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>shift</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0x2</literal> <operator>||</operator> <name>shift</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xd</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>result</name> <operator>=</operator> <name>sample</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0x8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><name>sample</name> <operator>-</operator> <operator>(</operator><literal type="number">256</literal> <operator>*</operator> <name>shift</name><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">0xe</literal> <operator>-</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>sample</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">256</literal> <operator>*</operator> <name>shift</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dv_get_audio_format</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_aaux_src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_S16L</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<switch>switch<condition>( <expr><operator>(</operator><name><name>p_aaux_src</name><index>[<expr><literal type="number">4</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">32000</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>dv_get_audio_sample_count</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_dsf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_samples</name> <init>= <expr><name><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></init></decl>;</decl_stmt> 

<switch>switch<condition>( <expr><operator>(</operator><name><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><name>i_samples</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><literal type="number">1896</literal></expr> </then><else>: <expr><literal type="number">1580</literal></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><name>i_samples</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><literal type="number">1742</literal></expr> </then><else>: <expr><literal type="number">1452</literal></expr></else></ternary><operator>)</operator></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<default>default:</default>

<return>return <expr><name>i_samples</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><literal type="number">1264</literal></expr> </then><else>: <expr><literal type="number">1053</literal></expr></else></ternary><operator>)</operator></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>block_t</name> <modifier>*</modifier></type><name>dv_extract_audio</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_frame</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_audio_quant</name></decl>, <decl><type ref="prev"/><name>i_samples</name></decl>, <decl><type ref="prev"/><name>i_half_ch</name></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <call><name>uint16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>audio_shuffle</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">9</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>of</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_frame_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_dsf</name> <init>= <expr><operator>(</operator><name><name>p_frame_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_frame_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><name>DV_PAL_FRAME_SIZE</name></expr>

</then><else>: <expr><name>DV_NTSC_FRAME_SIZE</name></expr></else></ternary> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_buf</name> <operator>=</operator> <name><name>p_frame_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">80</literal><operator>*</operator><literal type="number">6</literal><operator>+</operator><literal type="number">80</literal><operator>*</operator><literal type="number">16</literal><operator>*</operator><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_buf</name> <operator>!=</operator> <literal type="number">0x50</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_audio_quant</name> <operator>=</operator> <name><name>p_buf</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_audio_quant</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_samples</name> <operator>=</operator> <call><name>dv_get_audio_sample_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_dsf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>i_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_frame</name> <operator>=</operator> <name><name>p_frame_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_shuffle</name> <operator>=</operator> <ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><name>dv_audio_shuffle625</name></expr> </then><else>: <expr><name>dv_audio_shuffle525</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>i_half_ch</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_frame</name> <operator>+=</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">80</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_audio_quant</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>i_half_ch</name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>d</name> <operator>=</operator> <literal type="number">8</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition> <incr><expr><name>d</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_audio_quant</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>of</name> <operator>=</operator> <name><name>audio_shuffle</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>d</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal> <operator>*</operator>

<operator>(</operator><ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><literal type="number">108</literal></expr> </then><else>: <expr><literal type="number">90</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>of</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_samples</name></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>of</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>p_frame</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>of</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p_frame</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>of</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>of</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>of</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>lc</name> <init>= <expr><operator>(</operator><name><name>p_frame</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p_frame</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>rc</name> <init>= <expr><operator>(</operator><name><name>p_frame</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>p_frame</name><index>[<expr><name>d</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>lc</name> <operator>=</operator> <ternary><condition><expr><name>lc</name> <operator>==</operator> <literal type="number">0x800</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>dv_audio_12to16</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <ternary><condition><expr><name>rc</name> <operator>==</operator> <literal type="number">0x800</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>dv_audio_12to16</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>of</name> <operator>=</operator> <name><name>audio_shuffle</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>d</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><literal type="number">108</literal></expr> </then><else>: <expr><literal type="number">90</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>of</name><operator>*</operator><literal type="number">2</literal> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_samples</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>of</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>lc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>of</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>lc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>of</name> <operator>=</operator> <name><name>audio_shuffle</name><index>[<expr><name>i</name> <operator>+</operator> <name>i_half_ch</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>d</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>i_dsf</name></expr> ?</condition><then> <expr><literal type="number">108</literal></expr> </then><else>: <expr><literal type="number">90</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>of</name><operator>*</operator><literal type="number">2</literal> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>*</operator> <name>i_samples</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>of</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rc</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>of</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rc</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>d</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p_frame</name> <operator>+=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">80</literal></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_frame_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> ?</condition><then> <expr><name><name>p_frame_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr>

</then><else>: <expr><name><name>p_frame_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_frame_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

</unit>
