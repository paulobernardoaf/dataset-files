<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mp4\attachments.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libmp4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attachments.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>psz_meta_roots</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"/moov/udta/meta/ilst"</literal></expr>,

<expr><literal type="string">"/moov/meta/ilst"</literal></expr>,

<expr><literal type="string">"/moov/udta/meta"</literal></expr>,

<expr><literal type="string">"/moov/udta"</literal></expr>,

<expr><literal type="string">"/meta/ilst"</literal></expr>,

<expr><literal type="string">"/udta"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_GetMetaRoot</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_path</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>psz_meta_roots</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_udta</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><name><name>psz_meta_roots</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_udta</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppsz_path</name> <operator>=</operator> <name><name>psz_meta_roots</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>p_udta</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>detectedImageType</name>

<block>{

<decl><name>IMAGE_TYPE_UNKNOWN</name> <init>= <expr><name>DATA_WKT_RESERVED</name></expr></init></decl>,

<decl><name>IMAGE_TYPE_JPEG</name> <init>= <expr><name>DATA_WKT_JPEG</name></expr></init></decl>,

<decl><name>IMAGE_TYPE_PNG</name> <init>= <expr><name>DATA_WKT_PNG</name></expr></init></decl>,

<decl><name>IMAGE_TYPE_BMP</name> <init>= <expr><name>DATA_WKT_BMP</name></expr></init></decl>,

}</block>;</enum>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>detectedImageType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mime</name></decl>;</decl_stmt>

}</block> <decl><name><name>rg_imageTypeToMime</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>IMAGE_TYPE_JPEG</name></expr>, <expr><literal type="string">"image/jpeg"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>IMAGE_TYPE_PNG</name></expr>, <expr><literal type="string">"image/png"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>IMAGE_TYPE_BMP</name></expr>, <expr><literal type="string">"image/bmp"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>getMimeType</name><parameter_list>( <parameter><decl><type><name><name>enum</name> <name>detectedImageType</name></name></type> <name>type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>rg_imageTypeToMime</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>rg_imageTypeToMime</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>type</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>rg_imageTypeToMime</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mime</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>detectedImageType</name></name></type> <name>wellKnownToimageType</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>e_wellknowntype</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>e_wellknowntype</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DATA_WKT_PNG</name></expr>:</case>

<case>case <expr><name>DATA_WKT_JPEG</name></expr>:</case>

<case>case <expr><name>DATA_WKT_BMP</name></expr>:</case>

<return>return <expr><name>e_wellknowntype</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>IMAGE_TYPE_UNKNOWN</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>detectedImageType</name></name></type> <name>probeImageType</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&gt;</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="string">"\xFF\xD8\xFF"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>IMAGE_TYPE_JPEG</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="string">".PNG"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>IMAGE_TYPE_PNG</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>IMAGE_TYPE_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type> <name>GetValidCovrMeta</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_index</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_data</name></expr>;</condition> <incr><expr><name>p_data</name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_data</name> <operator>||</operator> <name>p_data</name> <operator>==</operator> <operator>*</operator><name>ctx</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_index</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>wellKnownToimageType</name><argument_list>(

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>e_wellknowntype</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>IMAGE_TYPE_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<return>return <expr><name>p_data</name></expr>;</return>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type> <name>GetValidPnotMeta</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_pnot</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_index</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_pnot</name></expr>;</condition> <incr><expr><name>p_pnot</name> <operator>=</operator> <name><name>p_pnot</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pnot</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_pnot</name> <operator>||</operator> <name>p_pnot</name> <operator>==</operator> <operator>*</operator><name>ctx</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_index</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_pnot</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_type</name> <operator>!=</operator> <name>ATOM_PICT</name> <operator>&amp;&amp;</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_pnot</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_type</name> <operator>!=</operator> <name>ATOM_pict</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>p_pnot</name></expr>;</expr_stmt>

<return>return <expr><name>p_pnot</name></expr>;</return>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type> <name>GetValidThumMeta</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_thum</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_index</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ctx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_thum</name></expr>;</condition> <incr><expr><name>p_thum</name> <operator>=</operator> <name><name>p_thum</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_thum</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_thum</name> <operator>||</operator> <name>p_thum</name> <operator>==</operator> <operator>*</operator><name>ctx</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_index</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_thum</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name> <operator>||</operator>

<call><name>probeImageType</name><argument_list>( <argument><expr><name><name>p_thum</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>,

<argument><expr><name><name>p_thum</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call>

<operator>==</operator> <name>IMAGE_TYPE_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ctx</name> <operator>=</operator> <name>p_thum</name></expr>;</expr_stmt>

<return>return <expr><name>p_thum</name></expr>;</return>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>MP4_GetCoverMetaURI</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_metaroot</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_metapath</name></decl></parameter>,

<parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_attachment_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_meta</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_metaroot</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_metaroot</name></expr></argument>, <argument><expr><literal type="string">"covr/data"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>p_data</name> <operator>=</operator> <call><name>GetValidCovrMeta</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_attachment</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_attachment</name></expr></argument>,

<argument><expr><literal type="string">"attachment://%s/covr/data[%u]"</literal></expr></argument>,

<argument><expr><name>psz_metapath</name></expr></argument>, <argument><expr><name>i_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_SetArtURL</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_attachment_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_pnot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_attachment_set</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_pnot</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><literal type="string">"pnot"</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>p_pnot</name> <operator>=</operator> <call><name>GetValidPnotMeta</name><argument_list>( <argument><expr><name>p_pnot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_attachment</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_attachment</name></expr></argument>,

<argument><expr><literal type="string">"attachment://pnot[%u]"</literal></expr></argument>, <argument><expr><name>i_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_SetArtURL</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_attachment_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_thum</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_attachment_set</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p_thum</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><literal type="string">"thum"</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>p_thum</name> <operator>=</operator> <call><name>GetValidThumMeta</name><argument_list>( <argument><expr><name>p_thum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_attachment</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>-</operator><literal type="number">1</literal> <operator>!=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_attachment</name></expr></argument>,

<argument><expr><literal type="string">"attachment://thum[%u]"</literal></expr></argument>,

<argument><expr><name>i_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_SetArtURL</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_attachment_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_attachment</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_attachment_set</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>MP4_GetAttachments</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter>, <parameter><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attach</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_metaroot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_metarootpath</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_attach</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_attach</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_metaroot</name> <operator>=</operator> <call><name>MP4_GetMetaRoot</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_metarootpath</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_metaroot</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_covercount</name> <init>= <expr><call><name>MP4_BoxCount</name><argument_list>( <argument><expr><name>p_metaroot</name></expr></argument>, <argument><expr><literal type="string">"covr/data"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_covercount</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>i_count</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_count</name> <operator>+=</operator> <name>i_covercount</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_pictcount</name> <init>= <expr><call><name>MP4_BoxCount</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><literal type="string">"pnot"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_pictcount</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>i_count</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_count</name> <operator>+=</operator> <name>i_pictcount</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_thmb_count</name> <init>= <expr><call><name>MP4_BoxCount</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><literal type="string">"thum"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_thmb_count</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>-</operator> <name>i_count</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_count</name> <operator>+=</operator> <name>i_thmb_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pp_attach</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_attachment_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>pp_attach</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>p_metaroot</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_metaroot</name></expr></argument>, <argument><expr><literal type="string">"covr/data"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>p_data</name> <operator>=</operator> <call><name>GetValidCovrMeta</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_filename</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>detectedImageType</name></name></type> <name>type</name> <init>=

<expr><call><name>wellKnownToimageType</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>e_wellknowntype</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name> <init>= <expr><call><name>getMimeType</name><argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_filename</name></expr></argument>, <argument><expr><literal type="string">"%s/covr/data[%u]"</literal></expr></argument>,

<argument><expr><name>psz_metarootpath</name></expr></argument>,

<argument><expr><name>i_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attach</name> <init>=

<expr><call><name>vlc_input_attachment_New</name><argument_list>(

<argument><expr><name>psz_filename</name></expr></argument>,

<argument><expr><name>psz_mime</name></expr></argument>,

<argument><expr><literal type="string">"Cover picture"</literal></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_blob</name></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_filename</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_attach</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp_attach</name><index>[<expr><name>i_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p_attach</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_pnot</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><literal type="string">"pnot"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pnot</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>p_pnot</name> <operator>=</operator> <call><name>GetValidPnotMeta</name><argument_list>( <argument><expr><name>p_pnot</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_location</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_location</name></expr></argument>, <argument><expr><literal type="string">"pnot[%u]"</literal></expr></argument>, <argument><expr><name>i_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>rgz_path</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>rgz_path</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>,

<argument><expr><literal type="string">"/%4.4s[%"</literal><name>PRIu16</name><literal type="string">"]"</literal></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_pnot</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pnot</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>,

<argument><expr><name><name>p_pnot</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pnot</name><operator>-&gt;</operator><name>i_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_pict</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><name>rgz_path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pict</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attach</name> <init>=

<expr><call><name>vlc_input_attachment_New</name><argument_list>(

<argument><expr><name>psz_location</name></expr></argument>,

<argument><expr><literal type="string">"image/x-pict"</literal></expr></argument>,

<argument><expr><literal type="string">"Quickdraw image"</literal></expr></argument>,

<argument><expr><name><name>p_pict</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>,

<argument><expr><name><name>p_pict</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_location</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_attach</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp_attach</name><index>[<expr><name>i_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p_attach</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_thum</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_root</name></expr></argument>, <argument><expr><literal type="string">"thum"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_thum</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>p_thum</name> <operator>=</operator> <call><name>GetValidThumMeta</name><argument_list>( <argument><expr><name>p_thum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_index</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_location</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>detectedImageType</name></name></type> <name>type</name> <init>=

<expr><call><name>probeImageType</name><argument_list>( <argument><expr><name><name>p_thum</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>,

<argument><expr><name><name>p_thum</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_mime</name> <init>= <expr><call><name>getMimeType</name><argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_location</name></expr></argument>, <argument><expr><literal type="string">"thum[%u]"</literal></expr></argument>, <argument><expr><name>i_index</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_attach</name> <init>=

<expr><call><name>vlc_input_attachment_New</name><argument_list>(

<argument><expr><name>psz_location</name></expr></argument>,

<argument><expr><name>psz_mime</name></expr></argument>,

<argument><expr><literal type="string">"Cover picture"</literal></expr></argument>,

<argument><expr><name><name>p_thum</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>,

<argument><expr><name><name>p_thum</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_location</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_attach</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pp_attach</name><index>[<expr><name>i_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p_attach</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_attach</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_attach</name> <operator>=</operator> <name>pp_attach</name></expr>;</expr_stmt>

<return>return <expr><name>i_count</name></expr>;</return>

</block_content>}</block></function>

</unit>
