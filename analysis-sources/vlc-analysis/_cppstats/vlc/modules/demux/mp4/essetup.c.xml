<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mp4\essetup.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mp4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avci.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../xiph.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/iso_color_tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CopyExtradata</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_extra</name></decl></parameter>,

<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_extra</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_extra</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupGlobalExtensions</name><parameter_list>( <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_btrt</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"btrt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_btrt</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_btrt</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_btrt</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_avg_bitrate</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_glbl</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"glbl"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_glbl</name> <operator>&amp;&amp;</operator> <name><name>p_glbl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name> <operator>&amp;&amp;</operator> <name><name>p_glbl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><name><name>p_glbl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>,

<argument><expr><name><name>p_glbl</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupESDS</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_descriptor_decoder_config_t</name> <modifier>*</modifier></type><name>p_decconfig</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_decconfig</name><operator>-&gt;</operator><name>i_objectProfileIndication</name></name></expr> )</condition>

<block>{<block_content>

<case>case<expr><operator>(</operator> <literal type="number">0xe0</literal> <operator>)</operator></expr>:</case> 

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>SPU_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_SPU</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_width</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>i_original_frame_height</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case<expr><operator>(</operator> <literal type="number">0xe1</literal> <operator>)</operator></expr>:</case> 

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_QCELP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>( <expr><call><name>MPEG4_Codec_By_ObjectType</name><argument_list>( <argument><expr><name><name>p_decconfig</name><operator>-&gt;</operator><name>i_objectProfileIndication</name></name></expr></argument>,

<argument><expr><name><name>p_decconfig</name><operator>-&gt;</operator><name>p_decoder_specific_info</name></name></expr></argument>,

<argument><expr><name><name>p_decconfig</name><operator>-&gt;</operator><name>i_decoder_specific_info_len</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">"unknown objectProfileIndication(0x%x) (Track[ID 0x%x])"</literal></expr></argument>,

<argument><expr><name><name>p_decconfig</name><operator>-&gt;</operator><name>i_objectProfileIndication</name></name></expr></argument>,

<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_decconfig</name><operator>-&gt;</operator><name>i_avg_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><name><name>p_decconfig</name><operator>-&gt;</operator><name>p_decoder_specific_info</name></name></expr></argument>,

<argument><expr><name><name>p_decconfig</name><operator>-&gt;</operator><name>i_decoder_specific_info_len</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SPU</name> <operator>&amp;&amp;</operator>

<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>GetDWBE</name><argument_list>(<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>spu</name><operator>.</operator><name>palette</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>SPU_PALETTE_DEFINED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetupRTPReceptionHintTrack</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>p_sdp</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Required 'sdp '-box not found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sdp</name> <init>= <expr><name><name>p_track</name><operator>-&gt;</operator><name>p_sdp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strtok_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>pch</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_sdp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">" =\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>pch</name> <operator>&amp;&amp;</operator> <name><name>pch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'m'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"No Media entry found in SDP:%s"</literal></expr></argument>, <argument><expr><name>pch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" =\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sdp: media type:%s"</literal></expr></argument>, <argument><expr><name>pch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" =\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sdp: port:%s"</literal></expr></argument>, <argument><expr><name>pch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" =\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sdp: protocol:%s"</literal></expr></argument>, <argument><expr><name>pch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" =\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>codec_set</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>pch</name> <operator>&amp;&amp;</operator> <name><name>pch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'a'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rtp_payload</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>pch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sdp: payload type:%d"</literal></expr></argument>, <argument><expr><name>rtp_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>codec_set</name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>rtp_payload</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_GSM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec_set</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" =\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pch</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>codec_set</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<while>while<condition>( <expr><name>pch</name> <operator>&amp;&amp;</operator> <name><name>pch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" :=\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sdp: atrribute type:%s"</literal></expr></argument>, <argument><expr><name>pch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><literal type="string">"rtpmap"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" :=\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sdp: payload type:%s"</literal></expr></argument>, <argument><expr><name>pch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" /:=\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sdp: encoding name:%s"</literal></expr></argument>, <argument><expr><name>pch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><literal type="string">"H264"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_H264</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><literal type="string">"GSM"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_GSM</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>pch</name></expr></argument>, <argument><expr><literal type="string">"Speex"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_SPEEX</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><name>codec_set</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Support for codec contained in RTP \

Reception Hint Track RTP stream has not been added"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" :=\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>clock_rate</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>pch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sdp clock rate:%d"</literal></expr></argument>, <argument><expr><name>clock_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name>clock_rate</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pch</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" =\n"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtok_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tims</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>(<argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"tims"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_tims</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tims</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tims</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_timescale</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tims</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_timescale</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Missing mandatory box tims"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tssy</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>(<argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"tssy"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_tssy</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tssy</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>sync_mode</name></name> <operator>=</operator> <operator>(</operator><name>RTP_timstamp_synchronization_t</name><operator>)</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tssy</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_reserved_timestamp_sync</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tsro</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>(<argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"tsro"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_tsro</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tsro</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_tsro_offset</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_tsro</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_offset</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"No tsro box present"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"setting tsro: %"</literal> <name>PRId32</name></expr></argument>, <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_tsro_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>SetupVideoES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_sample_vide_t</name> <modifier>*</modifier></type><name>p_vide</name> <init>= <expr><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_vide</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_vide</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_vide</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <name><name>p_vide</name><operator>-&gt;</operator><name>i_depth</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_width</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_height</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_width</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_height</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_vide</name><operator>-&gt;</operator><name>i_width</name></name> <operator>!=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_width</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_width</name></name> <operator>*</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_height</name></name> <operator>*</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>p_track</name><operator>-&gt;</operator><name>f_rotation</name></name></expr> )</condition> <block>{<block_content>

<case>case <expr><literal type="number">90</literal></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_90</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">180</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_flip</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_VFLIPPED</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_180</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">270</literal></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_ROTATED_270</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>i_flip</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name><name>p_track</name><operator>-&gt;</operator><name>f_rotation</name></name> <operator>!=</operator> <literal type="number">180</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>video_transform_t</name></type> <name>transform</name> <init>= <expr><operator>(</operator><name>video_transform_t</name><operator>)</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>orientation</name></name> <operator>=</operator> <name>ORIENT_HFLIPPED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_TransformBy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>, <argument><expr><name>transform</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>=</operator> <name>PROJECTION_MODE_RECTANGULAR</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_uuid</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_track</name></name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_uuid</name></expr>;</condition> <incr><expr><name>p_uuid</name> <operator>=</operator> <name><name>p_uuid</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_uuid</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_uuid</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>CmpUUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_uuid</name><operator>-&gt;</operator><name>i_uuid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>XML360BoxUUID</name></expr></argument> )</argument_list></call>

<operator>&amp;&amp;</operator> <name><name>p_uuid</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_360</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>=</operator> <name><name>p_uuid</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_360</name><operator>-&gt;</operator><name>i_projection_mode</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>p_uuid</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_360</name><operator>-&gt;</operator><name>e_stereo_mode</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>XML360_STEREOSCOPIC_TOP_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_TB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>XML360_STEREOSCOPIC_LEFT_RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_SBS</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_2D</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_st3d</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"st3d"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_st3d</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_st3d</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_st3d</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_stereo_mode</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ST3D_MONOSCOPIC</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_2D</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ST3D_STEREOSCOPIC_TOP_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_TB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ST3D_STEREOSCOPIC_LEFT_RIGHT</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_SBS</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown stereo mode %d"</literal></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_st3d</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_stereo_mode</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for<control>( <init><expr><name>p_uuid</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument> )</argument_list></call></expr>;</init> <condition><expr><name>p_uuid</name></expr>;</condition>

<incr><expr><name>p_uuid</name> <operator>=</operator> <name><name>p_uuid</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_uuid</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_uuid</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>CmpUUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_uuid</name><operator>-&gt;</operator><name>i_uuid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PS3DDSBoxUUID</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_uuid</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name> <operator>&amp;&amp;</operator>

<name><name>p_uuid</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name><name>p_uuid</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>, <argument><expr><literal type="string">"\x82\x81\x10\x02"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>MULTIVIEW_STEREO_FRAME</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_prhd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"sv3d/proj/prhd"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_prhd</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_prhd</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>yaw</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_prhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>f_pose_yaw_degrees</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>pitch</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_prhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>f_pose_pitch_degrees</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>pose</name><operator>.</operator><name>roll</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_prhd</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>f_pose_roll_degrees</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_equi</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"sv3d/proj/equi"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_cbmp</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"sv3d/proj/cbmp"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_equi</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_equi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>=</operator> <name>PROJECTION_MODE_EQUIRECTANGULAR</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>p_cbmp</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_cbmp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>projection_mode</name></name> <operator>=</operator> <name>PROJECTION_MODE_CUBEMAP_LAYOUT_STANDARD</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_H263</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_YV12</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'y'</literal></expr></argument>,<argument><expr><literal type="char">'u'</literal></expr></argument>,<argument><expr><literal type="char">'v'</literal></expr></argument>,<argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_YUV2</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_ARGB</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x0000FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x00FF00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0xFF0000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'2'</literal></expr></argument>,<argument><expr><literal type="char">'4'</literal></expr></argument>,<argument><expr><literal type="char">'B'</literal></expr></argument>,<argument><expr><literal type="char">'G'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_rmask</name></name> <operator>=</operator> <literal type="number">0x0000FF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_gmask</name></name> <operator>=</operator> <literal type="number">0x00FF00</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bmask</name></name> <operator>=</operator> <literal type="number">0xFF0000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>:</case>

<switch>switch<condition>( <expr><name><name>p_vide</name><operator>-&gt;</operator><name>i_depth</name></name></expr> )</condition> <block>{<block_content>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGB15</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_RGB24</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_ARGB</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_GREY</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized raw video format (depth = %d)"</literal></expr></argument>,

<argument><expr><name><name>p_vide</name><operator>-&gt;</operator><name>i_depth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SetupRTPReceptionHintTrack</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_sample</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_pasp</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"pasp"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pasp</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_pasp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_pasp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_horizontal_spacing</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_pasp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_vertical_spacing</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_pasp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_horizontal_spacing</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_pasp</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_vertical_spacing</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_fiel</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"fiel"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_fiel</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_fiel</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_block_flags</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_fiel</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_colr</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"colr"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_colr</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_colr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_type</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_colr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_type</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator>

<call><name>iso_23001_8_cp_to_vlc_primaries</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>( <argument><expr><name>p_colr</name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>nclc</name><operator>.</operator><name>i_primary_idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator>

<call><name>iso_23001_8_tc_to_vlc_xfer</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>( <argument><expr><name>p_colr</name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>nclc</name><operator>.</operator><name>i_transfer_function_idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator>

<call><name>iso_23001_8_mc_to_vlc_coeffs</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>( <argument><expr><name>p_colr</name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>nclc</name><operator>.</operator><name>i_matrix_idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_colr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_type</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_colr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>nclc</name><operator>.</operator><name>i_full_range</name></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_FULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <name>COLOR_RANGE_LIMITED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetupGlobalExtensions</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_sample</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_esds</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"esds"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_esds</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_esds</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_esds</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_mp4v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetupESDS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_esds</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <switch>switch<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">'n'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name> <argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_MPGV</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_SVQ1</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_SVQ3</name></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'Z'</literal></expr></argument>, <argument><expr><literal type="char">'y'</literal></expr></argument>, <argument><expr><literal type="char">'G'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument> )</argument_list></call></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>p_qt_image_description</name></name></expr></argument>,

<argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_image_description</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'V'</literal></expr></argument>, <argument><expr><literal type="char">'j'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument> )</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_JPEG2000</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'j'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'g'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_MJPG</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_FFV1</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_binary</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"glbl"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_binary</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_binary</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_binary</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_blob</name></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_binary</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_dvc1</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"dvc1"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dvc1</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dvc1</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dvc1</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_vc1</name></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dvc1</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_vc1</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"missing dvc1"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_av01</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>static_assert</name><argument_list>(<argument><expr><name>ATOM_av01</name> <operator>==</operator> <name>VLC_CODEC_AV1</name></expr></argument>, <argument><expr><literal type="string">"VLC_CODEC_AV1 != ATOM_av01"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_av1C</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"av1C"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_av1C</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_av1C</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_av1C</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_profile</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_level</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_av1C</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_av1C</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_av1C</name></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_av1C</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_av1C</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument> )</argument_list></call></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_avcC</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"avcC"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_avcC</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_avcC</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_avcC</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_profile</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_level</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_avcC</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_level</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_avcC</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_avcC</name></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_avcC</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_avcC</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"missing avcC"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument> )</argument_list></call></expr>:</case> 

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_hvcC</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"hvcC"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'v'</literal></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_hvcC</name> <operator>&amp;&amp;</operator> <name><name>p_hvcC</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><name><name>p_hvcC</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>,

<argument><expr><name><name>p_hvcC</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"missing hvcC"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_vp08</name></expr>:</case>

<case>case <expr><name>ATOM_vp09</name></expr>:</case>

<case>case <expr><name>ATOM_vp10</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_vpcC</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"vpcC"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_vpcC</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_vpcC</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_vpcC_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_vpcC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_vp10</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_VP10</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_vp09</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_VP9</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_VP8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_level</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_level</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>colorspacesmapping</name><index>[]</index></name> <init>=

<expr><block>{

<expr><name>COLOR_SPACE_UNDEF</name></expr>,

<expr><name>COLOR_SPACE_BT601</name></expr>,

<expr><name>COLOR_SPACE_BT709</name></expr>,

<expr><name>COLOR_SPACE_SMPTE_170</name></expr>,

<expr><name>COLOR_SPACE_SMPTE_240</name></expr>,

<expr><name>COLOR_SPACE_BT2020</name></expr>,

<expr><name>COLOR_SPACE_BT2020</name></expr>,

<expr><name>COLOR_SPACE_SRGB</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_color_primaries</name></name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>colorspacesmapping</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator> <name><name>colorspacesmapping</name><index>[<expr><name><name>p_data</name><operator>-&gt;</operator><name>i_color_primaries</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_xfer_function</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_BT709</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_xfer_function</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator> <name>TRANSFER_FUNC_SMPTE_ST2084</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name> <operator>=</operator>

<call><name>iso_23001_8_cp_to_vlc_primaries</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_color_primaries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name> <operator>=</operator>

<call><name>iso_23001_8_tc_to_vlc_xfer</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_xfer_function</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name> <operator>=</operator>

<call><name>iso_23001_8_mc_to_vlc_coeffs</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_matrix_coeffs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_fullrange</name></name></expr> ?</condition><then> <expr><name>COLOR_RANGE_FULL</name></expr> </then><else>: <expr><name>COLOR_RANGE_LIMITED</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_bit_depth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_codec_init_data</name></name></expr></argument>,

<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_codec_init_datasize</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_SmDm</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"SmDm"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_SmDm</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_SmDm</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"mdcv"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_SmDm</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_SmDm</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>primaries</name></name></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_SmDm</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>primaries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>white_point</name></name></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_SmDm</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>white_point</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>max_luminance</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_SmDm</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_luminanceMax</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>mastering</name><operator>.</operator><name>min_luminance</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_SmDm</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_luminanceMin</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_CoLL</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"CoLL"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_CoLL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_CoLL</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"clli"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_CoLL</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_CoLL</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxCLL</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_CoLL</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_maxCLL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>lighting</name><operator>.</operator><name>MaxFALL</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_CoLL</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_maxFALL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>ATOM_WMV3</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_asf</name></name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"ASF "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>ATOM_H264</name></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'W'</literal></expr></argument>,<argument><expr><literal type="char">'V'</literal></expr></argument>,<argument><expr><literal type="char">'C'</literal></expr></argument>,<argument><expr><literal type="char">'1'</literal></expr></argument>)</argument_list></call></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_strf</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"strf"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_strf</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_strf</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_strf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>bmiHeader</name><operator>.</operator><name>biWidth</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_strf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>bmiHeader</name><operator>.</operator><name>biHeight</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_bits_per_pixel</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_strf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_strf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_extra</name></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_strf</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_extra</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'q'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><literal type="char">'1'</literal></expr></argument>, <argument><expr><literal type="char">'6'</literal></expr></argument> )</argument_list></call></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>&lt;</operator> <name>UINT16_MAX</name> <operator>&amp;&amp;</operator>

<name>p_fiel</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_fiel</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator>

<call><name>AVCi_create_AnnexB</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr></argument>,

<argument><expr><operator>!</operator><operator>!</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_fiel</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized FourCC %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>SetupAudioFromWaveFormatEx</name><parameter_list>( <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_WMA2</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_WMA2</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_WMA2</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>wf_tag_to_fourcc</name><argument_list>(<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_WMA2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>Format</name><operator>.</operator><name>wFormatTag</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_WMA2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>Format</name><operator>.</operator><name>nChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_WMA2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_WMA2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>Format</name><operator>.</operator><name>nAvgBytesPerSec</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_WMA2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>Format</name><operator>.</operator><name>nBlockAlign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_WMA2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_WMA2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_extra</name></expr></argument>,

<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_WMA2</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_extra</name></expr></argument>,

<argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>SetupAudioES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_sample_soun_t</name> <modifier>*</modifier></type><name>p_soun</name> <init>= <expr><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_soun</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name> <operator>*</operator>

<name><name>p_soun</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_ADPCM_IMA_QT</name></expr>:</case>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_packet</name></name> <operator>=</operator> <literal type="number">34</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">34</literal> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_sample</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MACE3</name></expr>:</case>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_packet</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_sample</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MACE6</name></expr>:</case>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_packet</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_bytes_per_sample</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case<expr><operator>(</operator> <name>ATOM_ac3</name> <operator>)</operator></expr>:</case>

<case>case<expr><operator>(</operator> <name>ATOM_eac3</name> <operator>)</operator></expr>:</case>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0x20</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name> <operator>==</operator> <literal type="number">0xFFFE</literal></expr> )</condition>

<block>{<block_content>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample per packet value for qt_version 1. Broken muxer! %u %u"</literal></expr></argument>,

<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr></argument>, <argument><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_enda</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"wave/enda"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_enda</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_enda</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"enda"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SetupRTPReceptionHintTrack</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_sample</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_agsm</name></expr>:</case> 

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_GSM</name></expr>;</expr_stmt>

<break>break;</break>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'.'</literal></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x55</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_MP3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_XiVs</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_vCtH</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"wave/vCtH"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_vCtd</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"wave/vCt#"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_vCtC</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"wave/vCtC"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>p_vCtH</name> <operator>&amp;&amp;</operator> <name><name>p_vCtH</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name> <operator>&amp;&amp;</operator>

<name>p_vCtd</name> <operator>&amp;&amp;</operator> <name><name>p_vCtd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name> <operator>&amp;&amp;</operator>

<name>p_vCtC</name> <operator>&amp;&amp;</operator> <name><name>p_vCtC</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name><name>headers_sizes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name><name>p_vCtH</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr>,

<expr><name><name>p_vCtd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr>,

<expr><name><name>p_vCtC</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type> <name><name>headers</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name><name>p_vCtH</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr>,

<expr><name><name>p_vCtd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr>,

<expr><name><name>p_vCtC</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>xiph_PackHeaders</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>,

<argument><expr><name>headers_sizes</name></expr></argument>, <argument><expr><name>headers</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_VORBIS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_XiFL</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_fCtS</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"wave/fCtS"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>p_fCtS</name> <operator>&amp;&amp;</operator> <name><name>p_fCtS</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <name><name>p_fCtS</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_extra</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><literal type="string">"fLaC"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_fCtS</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_extra</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_extra</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_fCtS</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>, <argument><expr><name><name>p_fCtS</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_FLAC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_fLaC</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_dfLa</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"dfLa"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dfLa</name> <operator>&amp;&amp;</operator> <name><name>p_dfLa</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<call><name>GetDWBE</name><argument_list>(<argument><expr><name><name>p_dfLa</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extra</name> <init>= <expr><name><name>p_dfLa</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>i_extra</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><name><name>p_dfLa</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>, <argument><expr><name><name>p_dfLa</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><literal type="string">"fLaC"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_FLAC</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case<expr><operator>(</operator> <name>ATOM_eac3</name> <operator>)</operator></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_EAC3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_dec3</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"dec3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dec3</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dec3</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dec3</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_data_rate</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case<expr><operator>(</operator> <name>ATOM_AC3</name> <operator>)</operator></expr>:</case>

<case>case<expr><operator>(</operator> <name>ATOM_ac3</name> <operator>)</operator></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_A52</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_dac3</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"dac3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dac3</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dac3</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>pi_bitrate</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">32</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">56</literal></expr>,

<expr><literal type="number">64</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">112</literal></expr>,

<expr><literal type="number">128</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">224</literal></expr>,

<expr><literal type="number">256</literal></expr>, <expr><literal type="number">320</literal></expr>, <expr><literal type="number">384</literal></expr>, <expr><literal type="number">448</literal></expr>,

<expr><literal type="number">512</literal></expr>, <expr><literal type="number">576</literal></expr>, <expr><literal type="number">640</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dac3</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_bitrate_code</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pi_bitrate</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pi_bitrate</name></expr></argument>)</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>pi_bitrate</name><index>[<expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dac3</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_bitrate_code</name></expr>]</index></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pi_bitrate</name><index>[<expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dac3</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_bitrate_code</name></expr>]</index></name> <operator>==</operator> <literal type="number">640</literal>

<operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dac3</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_acmod</name> <operator>==</operator> <literal type="number">7</literal>

<operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_dac3</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_lfeon</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_dtsc</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_DTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name>PROFILE_DTS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_dtse</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_DTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name>PROFILE_DTS_EXPRESS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_dtsh</name></expr>:</case> 

<case>case <expr><name>ATOM_dtsl</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_DTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name>PROFILE_DTS_HD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument> )</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16L</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0000000</literal></expr>:</case>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'O'</literal></expr></argument>, <argument><expr><literal type="char">'N'</literal></expr></argument>, <argument><expr><literal type="char">'E'</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_soun</name><operator>-&gt;</operator><name>i_samplesize</name></name><operator>+</operator><literal type="number">7</literal><operator>)</operator><operator>/</operator><literal type="number">8</literal> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_U8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_S16B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>!=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"i_timescale (%"</literal><name>PRId32</name><literal type="string">") != i_sampleratehi "</literal>

<literal type="string">"(%u), making both equal (report any problem)."</literal></expr></argument>,

<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>, <argument><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>i_timescale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_in24</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator>

<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>p_enda</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_enda</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_little_endian</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then>

<expr><name>VLC_CODEC_S24L</name></expr> </then><else>: <expr><name>VLC_CODEC_S24B</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ATOM_in32</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator>

<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>p_enda</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_enda</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_little_endian</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then>

<expr><name>VLC_CODEC_S32L</name></expr> </then><else>: <expr><name>VLC_CODEC_S32B</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ATOM_fl32</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator>

<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>p_enda</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_enda</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_little_endian</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then>

<expr><name>VLC_CODEC_F32L</name></expr> </then><else>: <expr><name>VLC_CODEC_F32B</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ATOM_fl64</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator>

<name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <ternary><condition><expr><name>p_enda</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_enda</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_little_endian</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then>

<expr><name>VLC_CODEC_F64L</name></expr> </then><else>: <expr><name>VLC_CODEC_F64B</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_DVD_LPCM</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl>;</decl_stmt>

}</block> <decl><name><name>p_formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>VLC_CODEC_F32L</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>VLC_CODEC_F64L</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal><operator>|</operator><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>VLC_CODEC_F32B</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal><operator>|</operator><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><name>VLC_CODEC_F64B</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>VLC_CODEC_U8</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal><operator>|</operator> <literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>VLC_CODEC_S8</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>VLC_CODEC_U16L</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal><operator>|</operator><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>VLC_CODEC_U16B</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal> <operator>|</operator><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>VLC_CODEC_S16L</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal><operator>|</operator><literal type="number">0x02</literal><operator>|</operator><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>VLC_CODEC_S16B</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>VLC_CODEC_U24L</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal><operator>|</operator><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>VLC_CODEC_U24B</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal> <operator>|</operator><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>VLC_CODEC_S24L</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal><operator>|</operator><literal type="number">0x02</literal><operator>|</operator><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><name>VLC_CODEC_S24B</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>VLC_CODEC_U32L</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal><operator>|</operator><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>VLC_CODEC_U32B</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal> <operator>|</operator><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>VLC_CODEC_S32L</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal><operator>|</operator><literal type="number">0x02</literal><operator>|</operator><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><name>VLC_CODEC_S32B</name></expr> }</block></expr>,

<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bits</name> <operator>==</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_constbitsperchannel</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_soun</name><operator>-&gt;</operator><name>i_formatflags</name></name> <operator>&amp;</operator> <name><name>p_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_mask</name><operator>)</operator> <operator>==</operator> <name><name>p_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_flags</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_formats</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_constbitsperchannel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator>

<name><name>p_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name> <operator>*</operator> <name><name>p_soun</name><operator>-&gt;</operator><name>i_constbitsperchannel</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>=</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_chan</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"chan"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_chan</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_vlc_mapping</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>p_rg_chans_order</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>CoreAudio_Layout_to_vlc</name><argument_list>( <argument><expr><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_chan</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>layout</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_vlc_mapping</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_channels</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_rg_chans_order</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"discarding chan mapping"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_vlc_mapping</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_bps</name> <init>= <expr><call><name>aout_BitsPerSample</name><argument_list>( <argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_bps</name> <operator>&amp;&amp;</operator> <call><name>aout_CheckChannelReorder</name><argument_list>( <argument><expr><name>p_rg_chans_order</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>i_vlc_mapping</name></expr></argument>,

<argument><expr><name><name>p_track</name><operator>-&gt;</operator><name>rgi_chans_reordering</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_chans_reorder</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_bps</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <call><name>vlc_popcount</name><argument_list>(<argument><expr><name>i_vlc_mapping</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>i_vlc_mapping</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetupGlobalExtensions</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_sample</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_esds</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"esds"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_esds</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p_esds</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"wave/esds"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_esds</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_esds</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_esds</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_mp4a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetupESDS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_esds</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <switch>switch<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_AMR_NB</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">8000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_AMR_WB</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">16000</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_QDMC</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_QDM2</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_ALAC</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>p_qt_description</name></name></expr></argument>,

<argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_description</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>==</operator> <literal type="number">56</literal> <operator>&amp;&amp;</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>VLC_CODEC_ALAC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>+</operator> <literal type="number">41</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>+</operator> <literal type="number">52</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>VLC_CODEC_ADPCM_MS</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_ADPCM_IMA_WAV</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_QCELP</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_WMA2</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>SetupAudioFromWaveFormatEx</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>,

<argument><expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"wave/WMA2"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>p_asf</name></name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"wave/ASF "</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"missing WMA2 %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_sample</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_wma</name></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SetupAudioFromWaveFormatEx</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"wfex"</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"missing wfex for wma"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized FourCC %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch></block_content></block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_SA3D</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>(<argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"SA3D"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p_SA3D</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_SA3D</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>channel_type</name></name> <operator>=</operator> <name>AUDIO_CHANNEL_TYPE_AMBISONICS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_QCELP</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name> <operator>=</operator> <literal type="number">0xFFFE</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>SetupSpuES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mp4_track_t</name> <modifier>*</modifier></type><name>p_track</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sample</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'p'</literal></expr></argument>)</argument_list></call></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_TTML</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ATOM_wvtt</name></expr>:</case>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_WEBVTT</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ATOM_c608</name></expr>:</case> 

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_CEA608</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_reorder_depth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ATOM_c708</name></expr>:</case> 

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_CEA708</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_reorder_depth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<case>case<expr><operator>(</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">'g'</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_data_sample_text_t</name> <modifier>*</modifier></type><name>p_text</name> <init>= <expr><name><name>p_sample</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_text</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_text</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_QTXT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_TX3G</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_text</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><name><name>p_text</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0xC0000000</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>b_forced_spu</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CopyExtradata</name><argument_list>( <argument><expr><name><name>p_text</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>,

<argument><expr><name><name>p_text</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_track</name><operator>-&gt;</operator><name>b_mac_encoding</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"MAC"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>psz_encoding</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><literal type="string">"UTF-8"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><name><name>p_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator> <name><name>p_sample</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>SetupGlobalExtensions</name><argument_list>( <argument><expr><name>p_track</name></expr></argument>, <argument><expr><name>p_sample</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_esds</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_sample</name></expr></argument>, <argument><expr><literal type="string">"esds"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_esds</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_esds</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_esds</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetupESDS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_track</name></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_esds</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
