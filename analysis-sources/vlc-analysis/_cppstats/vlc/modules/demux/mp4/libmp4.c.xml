<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mp4\libmp4.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_stream.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libmp4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"languages.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>double</name></type> <name>conv_fx</name><parameter_list>( <parameter><decl><type><name>int32_t</name></type> <name>fx</name></decl></parameter> )</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>fp</name> <init>= <expr><name>fx</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>fp</name> <operator>/=</operator> <literal type="number">65536.</literal></expr>;</expr_stmt>

<return>return <expr><name>fp</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>MP4_Time2Str</name><parameter_list>( <parameter><decl><type><name>stime_t</name></type> <name>i_duration</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_scale</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_time</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_scale</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>i_duration</name> <operator>/</operator> <name>i_scale</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>h</name> <init>= <expr><operator>(</operator> <name>i_time</name> <operator>/</operator><operator>(</operator> <literal type="number">60</literal><operator>*</operator><literal type="number">60</literal> <operator>)</operator> <operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m</name> <init>= <expr><operator>(</operator> <name>i_time</name> <operator>/</operator> <literal type="number">60</literal> <operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>s</name> <init>= <expr><name>i_time</name> <operator>%</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ms</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i_scale</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1000</literal><operator>*</operator><name>i_duration</name> <operator>/</operator> <name>i_scale</name><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><literal type="string">"%u:%.2u:%.2u:%.3u"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>ms</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>out</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GETX_PRIVATE</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>code</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if( (i_read) &gt;= (size) ) { dst = (code); p_peek += (size); i_read -= (size); } else { dst = 0; i_read = 0; } } while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GET1BYTE</name><parameter_list>( <parameter><type><name>dst</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GETX_PRIVATE( dst, *p_peek, 1 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GET2BYTES</name><parameter_list>( <parameter><type><name>dst</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GETX_PRIVATE( dst, GetWBE(p_peek), 2 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GET3BYTES</name><parameter_list>( <parameter><type><name>dst</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GETX_PRIVATE( dst, Get24bBE(p_peek), 3 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GET4BYTES</name><parameter_list>( <parameter><type><name>dst</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GETX_PRIVATE( dst, GetDWBE(p_peek), 4 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GET8BYTES</name><parameter_list>( <parameter><type><name>dst</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GETX_PRIVATE( dst, GetQWBE(p_peek), 8 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GET2BYTESLE</name><parameter_list>( <parameter><type><name>dst</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GETX_PRIVATE( dst, GetWLE(p_peek), 2 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GET4BYTESLE</name><parameter_list>( <parameter><type><name>dst</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GETX_PRIVATE( dst, GetDWLE(p_peek), 4 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GET8BYTESLE</name><parameter_list>( <parameter><type><name>dst</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GETX_PRIVATE( dst, GetQWLE(p_peek), 8 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GETFOURCC</name><parameter_list>( <parameter><type><name>dst</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GET4BYTESLE( dst )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GETVERSIONFLAGS</name><parameter_list>( <parameter><type><name>p_void</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>MP4_GET1BYTE( p_void-&gt;i_version ); MP4_GET3BYTES( p_void-&gt;i_flags )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>mp4_getstringz</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><operator>*</operator><name>size</name> <operator>&lt;=</operator> <name>SSIZE_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>in</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>in</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strnlen</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>*</operator><name>in</name></expr></argument>, <argument><expr><operator>*</operator><name>size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>&gt;=</operator> <operator>*</operator><name>size</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>ret</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>ret</name></expr></argument>, <argument><expr><operator>*</operator><name>in</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>in</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_GETSTRINGZ</name><parameter_list>( <parameter><type><name>p_str</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do (p_str) = mp4_getstringz( &amp;p_peek, &amp;i_read ); while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_BOX_TYPE_ASCII</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>( ((char*)&amp;p_box-&gt;i_type)[0] != (char)0xA9 )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint32_t</name></type> <name>Get24bBE</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return<expr><operator>(</operator> <operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator><literal type="number">16</literal> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>)</operator> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>GetUUID</name><parameter_list>( <parameter><decl><type><name>UUID_t</name> <modifier>*</modifier></type><name>p_uuid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buff</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_uuid</name></expr></argument>, <argument><expr><name>p_buff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mp4_readbox_enter_common</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>typesize</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>release</name>)<parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>readsize</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>headersize</name> <init>= <expr><call><name>mp4_box_headersize</name><argument_list>( <argument><expr><name>box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>readsize</name> <operator>&lt;</operator> <name>headersize</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>unlikely</name><argument_list>(<argument><expr><name>readsize</name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name>readsize</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>readsize</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>val</name> <operator>!=</operator> <name>readsize</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"mp4: wanted %"</literal><name>PRIu64</name><literal type="string">" bytes, got %zd"</literal></expr></argument>, <argument><expr><name>readsize</name></expr></argument>, <argument><expr><name>val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_payload</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>typesize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_payload</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name><name>box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_payload</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>typesize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>box</name><operator>-&gt;</operator><name>pf_free</name></name> <operator>=</operator> <name>release</name></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>buf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mp4_readbox_enter_partial</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>typesize</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>release</name>)<parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>readsize</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>*</operator><name>readsize</name> <operator>&gt;</operator> <name><name>box</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>readsize</name> <operator>=</operator> <name><name>box</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>mp4_readbox_enter_common</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>box</name></expr></argument>, <argument><expr><name>typesize</name></expr></argument>, <argument><expr><name>release</name></expr></argument>, <argument><expr><operator>*</operator><name>readsize</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>mp4_readbox_enter</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>typesize</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>release</name>)<parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>readsize</name> <init>= <expr><name><name>box</name><operator>-&gt;</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>mp4_readbox_enter_common</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>box</name></expr></argument>, <argument><expr><name>typesize</name></expr></argument>, <argument><expr><name>release</name></expr></argument>, <argument><expr><name>readsize</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_READBOX_ENTER_PARTIAL</name><parameter_list>( <parameter><type><name>MP4_Box_data_TYPE_t</name></type></parameter>, <parameter><type><name>maxread</name></type></parameter>, <parameter><type><name>release</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>uint64_t i_read = (maxread); uint8_t *p_buff = mp4_readbox_enter_partial( p_stream, p_box, sizeof( MP4_Box_data_TYPE_t ), release, &amp;i_read ); if( unlikely(p_buff == NULL) ) return 0; const size_t header_size = mp4_box_headersize( p_box ); uint8_t *p_peek = p_buff + header_size; i_read -= header_size</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_READBOX_ENTER</name><parameter_list>( <parameter><type><name>MP4_Box_data_TYPE_t</name></type></parameter>, <parameter><type><name>release</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>uint8_t *p_buff = mp4_readbox_enter( p_stream, p_box, sizeof(MP4_Box_data_TYPE_t), release ); if( unlikely(p_buff == NULL) ) return 0; uint64_t i_read = p_box-&gt;i_size; const size_t header_size = mp4_box_headersize( p_box ); uint8_t *p_peek = p_buff + header_size; i_read -= header_size</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_READBOX_EXIT</name><parameter_list>( <parameter><type><name>i_code</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { free( p_buff ); return( i_code ); } while (0)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_ReadBox</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_ReadBoxUsing</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>MP4_ReadBox_function</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MP4_Box_Read_Specific</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MP4_PeekBoxHeader</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>MP4_Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_canseek</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_canseek</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name> <operator>||</operator>

<name>b_canseek</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_current_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_current_pos</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_pos</name> <operator>&lt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>i_current_pos</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_toread</name> <init>= <expr><name>i_pos</name> <operator>-</operator> <name>i_current_pos</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_toread</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_toread</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">17</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_toread</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>i_toread</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_BoxAddChild</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_childbox</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_parent</name><operator>-&gt;</operator><name>p_first</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_parent</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>p_childbox</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_parent</name><operator>-&gt;</operator><name>p_last</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_childbox</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_parent</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>p_childbox</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_childbox</name><operator>-&gt;</operator><name>p_father</name></name> <operator>=</operator> <name>p_parent</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>MP4_Box_t</name> <modifier>*</modifier></type> <name>MP4_BoxExtract</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_chain</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><operator>*</operator><name>pp_chain</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_box</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>i_type</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_chain</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp_chain</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>vlc_stream_Seek</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vlc_stream_Seek</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__NO__</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_PeekBoxHeader</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_read</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator> <name>i_read</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <literal type="number">8</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_payload</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_shortsize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_shortsize</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_shortsize</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>UINT64_MAX</name> <operator>-</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_uuid</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>GetUUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_ULTRA_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if MP4_BOX_TYPE_ASCII<condition>()</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"found Box: %4.4s size %"</literal><name>PRId64</name><literal type="string">" %"</literal><name>PRId64</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"found Box: c%3.3s size %"</literal><name>PRId64</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_ReadBoxRestricted</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>onlytypes</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>nottypes</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_restrictionhit</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name></type> <name>peekbox</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>MP4_PeekBoxHeader</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peekbox</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>peekbox</name><operator>.</operator><name>i_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"found an invalid sized %"</literal><name>PRIu64</name><literal type="string">" box %4.4s @%"</literal><name>PRIu64</name></expr></argument> ,

<argument><expr><name><name>peekbox</name><operator>.</operator><name>i_size</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peekbox</name><operator>.</operator><name>i_type</name></name></expr></argument>, <argument><expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nottypes</name> <operator>&amp;&amp;</operator> <name><name>nottypes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>nottypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>peekbox</name><operator>.</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pb_restrictionhit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>onlytypes</name> <operator>&amp;&amp;</operator> <name><name>onlytypes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>onlytypes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>peekbox</name><operator>.</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pb_restrictionhit</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_father</name> <operator>&amp;&amp;</operator> <name><name>p_father</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_box_next</name> <init>= <expr><name><name>peekbox</name><operator>.</operator><name>i_size</name></name> <operator>+</operator> <name><name>peekbox</name><operator>.</operator><name>i_pos</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_father_next</name> <init>= <expr><name><name>p_father</name><operator>-&gt;</operator><name>i_size</name></name> <operator>+</operator> <name><name>p_father</name><operator>-&gt;</operator><name>i_pos</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_box_next</name> <operator>&gt;</operator> <name>i_father_next</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"out of bound child %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peekbox</name><operator>.</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><operator>(</operator><name>MP4_Box_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MP4_Box_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_box</name> <operator>=</operator> <name>peekbox</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_next</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name> <operator>=</operator> <name>p_father</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>MP4_Box_Read_Specific</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>p_father</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Failed reading box %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peekbox</name><operator>.</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_next</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_next</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_next</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_next</name> <operator>-</operator> <literal type="number">1</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"truncated box %4.4s discarded"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>peekbox</name><operator>.</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>p_box</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_BoxAddChild</name><argument_list>( <argument><expr><name>p_father</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBoxContainerChildrenIndexed</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,

<parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>excludelist</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_indexed</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_container</name><operator>-&gt;</operator><name>i_size</name></name> <operator>||</operator> <name><name>p_container</name><operator>-&gt;</operator><name>p_father</name></name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>(</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>b_indexed</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">16</literal></expr></then><else>:<expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator> <operator>&gt;</operator>

<operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>p_container</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_container</name><operator>-&gt;</operator><name>i_size</name></name><operator>)</operator> <operator>)</operator></expr>

)</condition>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_last_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_end</name> <init>= <expr><name><name>p_container</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_container</name><operator>-&gt;</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_onexclude</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_continue</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_container</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_tell</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tell</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>b_indexed</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">16</literal></expr></then><else>:<expr><literal type="number">8</literal></expr></else></ternary><operator>)</operator> <operator>&gt;=</operator> <name>i_end</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>b_indexed</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>read</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>read</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>read</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_onexclude</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>p_box</name> <operator>=</operator> <call><name>MP4_ReadBoxRestricted</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_container</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>excludelist</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_onexclude</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_index</name></name> <operator>=</operator> <name>i_index</name></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>stoplist</name> <operator>&amp;&amp;</operator> <name><name>stoplist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name><name>stoplist</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_tell</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_container</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&amp;&amp;</operator> <name>i_tell</name> <operator>&gt;=</operator> <name>i_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_tell</name> <operator>==</operator> <name>i_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_last_pos</name> <operator>==</operator> <name>i_tell</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_last_pos</name> <operator>=</operator> <name>i_tell</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_continue</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while<condition>( <expr><name>b_continue</name></expr> )</condition>;</do>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_onexclude</name> <operator>&amp;&amp;</operator> <name><name>p_container</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_tell</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_tell</name> <operator>!=</operator> <name>i_end</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>MP4_ReadBoxContainerRestricted</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>excludelist</name><index>[]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>MP4_ReadBoxContainerChildrenIndexed</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_container</name></expr></argument>,

<argument><expr><name>stoplist</name></expr></argument>, <argument><expr><name>excludelist</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>MP4_ReadBoxContainerChildren</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>MP4_ReadBoxContainerChildrenIndexed</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_container</name></expr></argument>,

<argument><expr><name>stoplist</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_BoxOffsetUp</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>(<expr><name>p_box</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <name>i_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_BoxOffsetUp</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>p_first</name></name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBoxContainerRawInBox</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buffer</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_container</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_substream</name> <init>= <expr><call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_buffer</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>,

<argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_substream</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_last</name> <init>= <expr><name><name>p_container</name><operator>-&gt;</operator><name>p_last</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_substream</name></expr></argument>, <argument><expr><name>p_container</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_substream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_container</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><ternary><condition><expr><name>p_last</name></expr> ?</condition><then> <expr><name>p_last</name></expr> </then><else>: <expr><name><name>p_container</name><operator>-&gt;</operator><name>p_first</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_BoxOffsetUp</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBoxContainer</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_container</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_container</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><call><name>mp4_box_headersize</name><argument_list>(<argument><expr><name>p_container</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">8</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_container</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator>

<call><name>mp4_box_headersize</name><argument_list>( <argument><expr><name>p_container</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_container</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBoxSkip</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name> <operator>&amp;&amp;</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_root</name> <operator>&amp;&amp;</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_free</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>header_size</name> <init>= <expr><call><name>mp4_box_headersize</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">44</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_read</name> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>header_size</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>+=</operator> <name>header_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>-=</operator> <name>header_size</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_fcc</name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_fcc</name> <operator>==</operator> <name>ATOM_cmov</name> <operator>||</operator> <name>i_fcc</name> <operator>==</operator> <name>ATOM_mvhd</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"detected moov hidden in a free box ..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>ATOM_foov</name></expr>;</expr_stmt>

<return>return <expr><call><name>MP4_ReadBoxContainer</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_ULTRA_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if MP4_BOX_TYPE_ASCII<condition>()</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"skip box: \"%4.4s\""</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"skip box: \"c%3.3s\""</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_ilst</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>&amp;&amp;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_sibling</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_sibling</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sibling</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_hdlr</name> <operator>&amp;&amp;</operator> <name><name>p_sibling</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>=</operator> <name><name>p_sibling</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>i_handler_type</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_sibling</name> <operator>=</operator> <name><name>p_sibling</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"no handler for ilst atom"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>HANDLER_mdta</name></expr>:</case>

<return>return <expr><call><name>MP4_ReadBoxContainerChildrenIndexed</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>HANDLER_mdir</name></expr>:</case>

<return>return <expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Unknown ilst handler type '%4.4s'"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_ftyp</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ftyp</name><operator>-&gt;</operator><name>i_compatible_brands</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_ftyp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_ftyp_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_ftyp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ftyp</name><operator>-&gt;</operator><name>i_major_brand</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ftyp</name><operator>-&gt;</operator><name>i_minor_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ftyp</name><operator>-&gt;</operator><name>i_compatible_brands_count</name></name> <operator>=</operator> <name>i_read</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ftyp</name><operator>-&gt;</operator><name>i_compatible_brands_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tab</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ftyp</name><operator>-&gt;</operator><name>i_compatible_brands</name></name> <operator>=</operator>

<call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ftyp</name><operator>-&gt;</operator><name>i_compatible_brands_count</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>tab</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ftyp</name><operator>-&gt;</operator><name>i_compatible_brands_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ftyp</name><operator>-&gt;</operator><name>i_compatible_brands</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_mvhd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_mvhd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_version</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_creation_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_modification_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_creation_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_modification_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_volume</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_reserved1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_reserved2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_predefined</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_next_track_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_duration</name> <init>= <expr><call><name>MP4_Time2Str</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"mvhd\" timescale %"</literal><name>PRIu32</name><literal type="string">" duration %"</literal><name>PRIu64</name><literal type="string">" (%s) rate %.2f volume %.2f"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>,

<argument><expr><name>psz_duration</name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_rate</name></name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal> <operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name><operator>-&gt;</operator><name>i_volume</name></name> <operator>/</operator> <literal type="number">256</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_mfhd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_mfhd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mvhd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mfhd</name><operator>-&gt;</operator><name>i_sequence_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"mfhd\" sequence number %d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mfhd</name><operator>-&gt;</operator><name>i_sequence_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tfxd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tfxd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tfxd_t</name> <modifier>*</modifier></type><name>p_tfxd_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfxd</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name>p_tfxd_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_tfxd_data</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_tfxd_data</name><operator>-&gt;</operator><name>i_fragment_abs_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_tfxd_data</name><operator>-&gt;</operator><name>i_fragment_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_tfxd_data</name><operator>-&gt;</operator><name>i_fragment_abs_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_tfxd_data</name><operator>-&gt;</operator><name>i_fragment_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"tfxd\" version %d, flags 0x%x, "</literal>\

<literal type="string">"fragment duration %"</literal><name>PRIu64</name><literal type="string">", fragment abs time %"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><name><name>p_tfxd_data</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>,

<argument><expr><name><name>p_tfxd_data</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument>,

<argument><expr><name><name>p_tfxd_data</name><operator>-&gt;</operator><name>i_fragment_duration</name></name></expr></argument>,

<argument><expr><name><name>p_tfxd_data</name><operator>-&gt;</operator><name>i_fragment_abs_time</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_tfrf</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfrf</name><operator>-&gt;</operator><name>p_tfrf_data_fields</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tfrf</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tfxd_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_tfrf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tfrf_t</name> <modifier>*</modifier></type><name>p_tfrf_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfrf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name>p_tfrf_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>i_fragment_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>p_tfrf_data_fields</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>i_fragment_count</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>TfrfBoxDataFields_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>p_tfrf_data_fields</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_tfrf_data</name><operator>-&gt;</operator><name>i_fragment_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>TfrfBoxDataFields_t</name> <modifier>*</modifier></type><name>TfrfBoxDataField</name> <init>= <expr><operator>&amp;</operator><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>p_tfrf_data_fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>TfrfBoxDataField</name><operator>-&gt;</operator><name>i_fragment_abs_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>TfrfBoxDataField</name><operator>-&gt;</operator><name>i_fragment_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>TfrfBoxDataField</name><operator>-&gt;</operator><name>i_fragment_abs_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>TfrfBoxDataField</name><operator>-&gt;</operator><name>i_fragment_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"tfrf\" version %d, flags 0x%x, "</literal>\

<literal type="string">"fragment count %"</literal><name>PRIu8</name></expr></argument>, <argument><expr><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>,

<argument><expr><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument>, <argument><expr><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>i_fragment_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_tfrf_data</name><operator>-&gt;</operator><name>i_fragment_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>TfrfBoxDataFields_t</name> <modifier>*</modifier></type><name>TfrfBoxDataField</name> <init>= <expr><operator>&amp;</operator><name><name>p_tfrf_data</name><operator>-&gt;</operator><name>p_tfrf_data_fields</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"\"tfrf\" fragment duration %"</literal><name>PRIu64</name><literal type="string">", "</literal>\

<literal type="string">"fragment abs time %"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><name><name>TfrfBoxDataField</name><operator>-&gt;</operator><name>i_fragment_duration</name></name></expr></argument>,

<argument><expr><name><name>TfrfBoxDataField</name><operator>-&gt;</operator><name>i_fragment_abs_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_XML360</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_360_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_360_t</name> <modifier>*</modifier></type><name>p_360_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_360</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_rdf</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>psz_rdf</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_rdf</name></expr></argument>, <argument><expr><literal type="string">"Gspherical:Spherical"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_360_data</name><operator>-&gt;</operator><name>i_projection_mode</name></name> <operator>=</operator> <name>PROJECTION_MODE_EQUIRECTANGULAR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_rdf</name></expr></argument>, <argument><expr><literal type="string">"left-right"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Left-right stereo mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_360_data</name><operator>-&gt;</operator><name>e_stereo_mode</name></name> <operator>=</operator> <name>XML360_STEREOSCOPIC_LEFT_RIGHT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_rdf</name></expr></argument>, <argument><expr><literal type="string">"top-bottom"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Top-bottom stereo mode"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_360_data</name><operator>-&gt;</operator><name>e_stereo_mode</name></name> <operator>=</operator> <name>XML360_STEREOSCOPIC_TOP_BOTTOM</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_rdf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_st3d</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_st3d_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_version</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_st3d_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_st3d</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_stereo_mode</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_prhd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_prhd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_version</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_prhd_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_prhd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>fixed16_16</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>fixed16_16</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>f_pose_yaw_degrees</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>fixed16_16</name> <operator>/</operator> <literal type="number">65536.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>fixed16_16</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>f_pose_pitch_degrees</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>fixed16_16</name> <operator>/</operator> <literal type="number">65536.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>fixed16_16</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>f_pose_roll_degrees</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <name>fixed16_16</name> <operator>/</operator> <literal type="number">65536.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_equi</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_equi_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_version</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_equi_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_equi</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_projection_bounds_top</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_projection_bounds_bottom</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_projection_bounds_left</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_projection_bounds_right</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_cbmp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_cbmp_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_version</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_cbmp_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cbmp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_layout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_padding</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_sidx</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sidx</name><operator>-&gt;</operator><name>p_items</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sidx</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_sidx_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_sidx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sidx_t</name> <modifier>*</modifier></type><name>p_sidx_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sidx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name>p_sidx_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_reference_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_earliest_presentation_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_first_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_earliest_presentation_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_first_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_reserved</name></decl>, <decl><type ref="prev"/><name>i_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_reserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name>i_reserved</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_reference_count</name></name> <operator>=</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>p_items</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>MP4_Box_sidx_item_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>p_items</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_sidx_item_t</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>p_items</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>b_reference_type</name></name> <operator>=</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>i_referenced_size</name></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0x7fffffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>item</name><operator>-&gt;</operator><name>i_subsegment_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>tmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>b_starts_with_SAP</name></name> <operator>=</operator> <name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>i_SAP_type</name></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x70</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>i_SAP_delta_time</name></name> <operator>=</operator> <name>tmp</name> <operator>&amp;</operator> <literal type="number">0xfffffff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"sidx\" version %d, flags 0x%x, "</literal>\

<literal type="string">"ref_ID %"</literal><name>PRIu32</name><literal type="string">", timescale %"</literal><name>PRIu32</name><literal type="string">", ref_count %"</literal><name>PRIu16</name><literal type="string">", "</literal>\

<literal type="string">"first subsegmt duration %"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>,

<argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument>,

<argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_reference_ID</name></name></expr></argument>,

<argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>,

<argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>i_reference_count</name></name></expr></argument>,

<argument><expr><name><name>p_sidx_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_subsegment_duration</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tfhd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tfhd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"'tfhd' box with version != 0. "</literal>\

<literal type="string">" Don't know what to do with that, please patch"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_DURATION_IS_EMPTY</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"'duration-is-empty' flag is present "</literal>\

<literal type="string">"=&gt; no samples for this time interval."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>b_empty</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>b_empty</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_BASE_DATA_OFFSET</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_base_data_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_SAMPLE_DESC_INDEX</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_sample_description_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_DURATION</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_default_sample_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_default_sample_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_FLAGS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_default_sample_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name></type> <name><name>psz_base</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_desc</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_dura</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_size</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_flag</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_BASE_DATA_OFFSET</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psz_base</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_base</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"base offset %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_base_data_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_SAMPLE_DESC_INDEX</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psz_desc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sample description index %d"</literal></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_sample_description_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_DURATION</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psz_dura</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_dura</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sample duration %d"</literal></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_default_sample_duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psz_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_size</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sample size %d"</literal></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_default_sample_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TFHD_DFLT_SAMPLE_FLAGS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>psz_flag</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_flag</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"sample flags 0x%x"</literal></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_default_sample_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"tfhd\" version %d flags 0x%x track ID %d %s %s %s %s %s"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfhd</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>,

<argument><expr><name>psz_base</name></expr></argument>, <argument><expr><name>psz_desc</name></expr></argument>, <argument><expr><name>psz_dura</name></expr></argument>, <argument><expr><name>psz_size</name></expr></argument>, <argument><expr><name>psz_flag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_trun</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_trun</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_trun_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_trun</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_trun_t</name> <modifier>*</modifier></type><name>p_trun</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trun</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name>p_trun</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_DATA_OFFSET</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_data_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_FIRST_FLAGS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_first_sample_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_entry_size</name> <init>=

<expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_DURATION</name><operator>)</operator> <operator>+</operator>

<operator>!</operator><operator>!</operator><operator>(</operator><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_SIZE</name><operator>)</operator> <operator>+</operator>

<operator>!</operator><operator>!</operator><operator>(</operator><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_FLAGS</name><operator>)</operator> <operator>+</operator>

<operator>!</operator><operator>!</operator><operator>(</operator><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_TIME_OFFSET</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_entry_size</name> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <name>count</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MP4_descriptor_trun_sample_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_descriptor_trun_sample_t</name> <modifier>*</modifier></type><name>p_sample</name> <init>= <expr><operator>&amp;</operator><name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_DURATION</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_FLAGS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>MP4_TRUN_SAMPLE_TIME_OFFSET</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_composition_time_offset</name><operator>.</operator><name>v0</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_ULTRA_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"trun\" version %u flags 0x%x sample count %"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>,

<argument><expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument>,

<argument><expr><name><name>p_trun</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_descriptor_trun_sample_t</name> <modifier>*</modifier></type><name>p_sample</name> <init>= <expr><operator>&amp;</operator><name><name>p_trun</name><operator>-&gt;</operator><name>p_samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"trun\" sample %4.4u flags 0x%x "</literal>\

<literal type="string">"duration %"</literal><name>PRIu32</name><literal type="string">" size %"</literal><name>PRIu32</name><literal type="string">" composition time offset %"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument>, <argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>,

<argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><name><name>p_sample</name><operator>-&gt;</operator><name>i_composition_time_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tfdt</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tfdt_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfdt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfdt</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfdt</name><operator>-&gt;</operator><name>i_base_media_decode_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfdt</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfdt</name><operator>-&gt;</operator><name>i_base_media_decode_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tkhd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tkhd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_version</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_creation_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_modification_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_reserved</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_creation_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_modification_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_reserved</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_reserved2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_layer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_predefined</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_volume</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_reserved3</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>rotation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>scale</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>matrix</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>det</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>det</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>flip</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name><name>flip</name><index>[<expr><name>j</name> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_flip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>rotation</name> <operator>=</operator> <call><name>atan2</name><argument_list>(<argument><expr><call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">180</literal> <operator>/</operator> <name>M_PI</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rotation</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rotation</name> <operator>+=</operator> <literal type="number">360.</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>f_rotation</name></name> <operator>=</operator> <name>rotation</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>double</name></type> <name><name>translate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>translate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>translate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>conv_fx</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"tkhd\" track #%"</literal><name>PRIu32</name><literal type="string">" duration %"</literal><name>PRIu64</name><literal type="string">" layer %d "</literal>

<literal type="string">"volume %3.1f rotation %3.1f scale %.2fx%.2f translate +%.2f+%.2f size %ux%u. "</literal>

<literal type="string">"Matrix: %i %i %i %i %i %i %i %i %i"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_layer</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_volume</name></name> <operator>/</operator> <literal type="number">256</literal></expr></argument> ,

<argument><expr><name>rotation</name></expr></argument>,

<argument><expr><name><name>scale</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>scale</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>translate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>translate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_width</name></name> <operator>/</operator> <name>BLOCK16x16</name></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_height</name></name> <operator>/</operator> <name>BLOCK16x16</name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tkhd</name><operator>-&gt;</operator><name>i_matrix</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_load</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>!=</operator> <literal type="number">24</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_load_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_load</name><operator>-&gt;</operator><name>i_start_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_load</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_load</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_load</name><operator>-&gt;</operator><name>i_hints</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_mdhd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_language</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_mdhd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_version</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_creation_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_modification_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_creation_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_modification_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name>i_language</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decodeQtLanguageCode</name><argument_list>( <argument><expr><name>i_language</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>rgs_language</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>b_mac_encoding</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_quality</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_duration</name> <init>= <expr><call><name>MP4_Time2Str</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"mdhd\" timescale %"</literal><name>PRIu32</name><literal type="string">" duration %"</literal><name>PRIu64</name><literal type="string">" (%s) language %3.3s"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>,

<argument><expr><name>psz_duration</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mdhd</name><operator>-&gt;</operator><name>rgs_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_hdlr</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_hdlr</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_reserved</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_reserved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_hdlr_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_hdlr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>i_predefined</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>i_handler_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_reserved</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_reserved</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_reserved</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;=</operator> <name>SSIZE_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_copy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>i_predefined</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'h'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i_len</name> <operator>&lt;=</operator> <name>i_read</name><operator>)</operator></expr> ?</condition><then> <expr><name>i_len</name></expr> </then><else>: <expr><name>i_read</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_copy</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>psz</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>psz_name</name><index>[<expr><name>i_copy</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"hdlr\" handler type: \"%4.4s\" name: \"%s\""</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>i_handler_type</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_vmhd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_vmhd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_vmhd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_vmhd</name><operator>-&gt;</operator><name>i_graphics_mode</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_vmhd</name><operator>-&gt;</operator><name>i_opcolor</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"vmhd\" graphics-mode %d opcolor (%d, %d, %d)"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_vmhd</name><operator>-&gt;</operator><name>i_graphics_mode</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_vmhd</name><operator>-&gt;</operator><name>i_opcolor</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_vmhd</name><operator>-&gt;</operator><name>i_opcolor</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_vmhd</name><operator>-&gt;</operator><name>i_opcolor</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_smhd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_smhd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_smhd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_smhd</name><operator>-&gt;</operator><name>i_balance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_smhd</name><operator>-&gt;</operator><name>i_reserved</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"smhd\" balance %f"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_smhd</name><operator>-&gt;</operator><name>i_balance</name></name> <operator>/</operator> <literal type="number">256</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_hmhd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_hmhd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name><operator>-&gt;</operator><name>i_max_PDU_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name><operator>-&gt;</operator><name>i_avg_PDU_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name><operator>-&gt;</operator><name>i_max_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name><operator>-&gt;</operator><name>i_avg_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name><operator>-&gt;</operator><name>i_reserved</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"hmhd\" maxPDU-size %d avgPDU-size %d max-bitrate %d avg-bitrate %d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name><operator>-&gt;</operator><name>i_max_PDU_size</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name><operator>-&gt;</operator><name>i_avg_PDU_size</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name><operator>-&gt;</operator><name>i_max_bitrate</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmhd</name><operator>-&gt;</operator><name>i_avg_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_url</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_url</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_url</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_url_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETSTRINGZ</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_url</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"url\" url: %s"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_url</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_urn</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_urn</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_urn</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_urn</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_urn_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_urn</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_urn</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETSTRINGZ</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_urn</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETSTRINGZ</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_urn</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"urn\" name %s location %s"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_urn</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_urn</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_LtdContainer</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER_PARTIAL</name><argument_list>( <argument><expr><name>MP4_Box_data_lcont_t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_lcont</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_lcont</name><operator>-&gt;</operator><name>i_version</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_lcont</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>i_entry</name> <operator>&lt;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_lcont</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_childbox</name> <init>= <expr><call><name>MP4_ReadBox</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_childbox</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_BoxAddChild</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>p_childbox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_entry</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <name><name>p_childbox</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_read</name> <operator>-=</operator> <name><name>p_childbox</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>i_entry</name> <operator>!=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_lcont</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_lcont</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i_entry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"%4.4s\" entry-count %d"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_lcont</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>( <expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_stts</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>pi_sample_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>pi_sample_delta</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_stts</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_stts_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_stts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>count</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>pi_sample_count</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>pi_sample_delta</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>pi_sample_count</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>pi_sample_delta</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>pi_sample_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"stts\" entry-count %d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stts</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_ctts</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name><operator>-&gt;</operator><name>pi_sample_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name><operator>-&gt;</operator><name>pi_sample_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_ctts</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_ctts_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_ctts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>count</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name><operator>-&gt;</operator><name>pi_sample_count</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name><operator>-&gt;</operator><name>pi_sample_offset</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name><operator>-&gt;</operator><name>pi_sample_count</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name><operator>-&gt;</operator><name>pi_sample_offset</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name><operator>-&gt;</operator><name>pi_sample_count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ctts</name><operator>-&gt;</operator><name>pi_sample_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"ctts\" entry-count %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_cslg</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_cslg_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_version</name></decl>, <decl><type ref="prev"/><name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_CSLG</name><parameter_list>(<parameter><type><name>readbytes</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{readbytes( p_box-&gt;data.p_cslg-&gt;ct_to_dts_shift );readbytes( p_box-&gt;data.p_cslg-&gt;i_least_delta );readbytes( p_box-&gt;data.p_cslg-&gt;i_max_delta );readbytes( p_box-&gt;data.p_cslg-&gt;i_composition_starttime );readbytes( p_box-&gt;data.p_cslg-&gt;i_composition_endtime ); }</cpp:value></cpp:define>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<macro><name>READ_CSLG</name><argument_list>(<argument>MP4_GET4BYTES</argument>)</argument_list></macro></block_content></block>

<if_stmt><else>else<block type="pseudo"><block_content>

<macro><name>READ_CSLG</name><argument_list>(<argument>MP4_GET8BYTES</argument>)</argument_list></macro>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>MP4_ReadLengthDescriptor</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier><specifier>restrict</specifier></type> <name>bufp</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>lenp</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><operator>*</operator><name>bufp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><name>lenp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>value</name> <operator>&gt;</operator> <operator>(</operator><name>UINT64_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>buf</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

while <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>

<expr_stmt><expr><operator>*</operator><name>bufp</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lenp</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_esds</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_esds</name><operator>-&gt;</operator><name>es_descriptor</name><operator>.</operator><name>psz_URL</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_esds</name><operator>-&gt;</operator><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_esds</name><operator>-&gt;</operator><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>p_decoder_specific_info</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_esds</name><operator>-&gt;</operator><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_esds</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>es_descriptor</name></cpp:macro> <cpp:value>p_box-&gt;data.p_esds-&gt;es_descriptor</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_esds_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_esds</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_esds</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <literal type="number">0x03</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>MP4_ReadLengthDescriptor</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_len</name> <operator>==</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"found esds MPEG4ESDescr (%"</literal><name>PRIu64</name><literal type="string">" bytes)"</literal></expr></argument>,

<argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>i_ES_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>b_stream_dependence</name></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>i_flags</name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>b_url</name></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>i_flags</name><operator>&amp;</operator><literal type="number">0x40</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>b_OCRstream</name></name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>i_flags</name><operator>&amp;</operator><literal type="number">0x20</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>i_stream_priority</name></name> <operator>=</operator> <name>i_flags</name><operator>&amp;</operator><literal type="number">0x1f</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es_descriptor</name><operator>.</operator><name>b_stream_dependence</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>i_depend_on_ES_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es_descriptor</name><operator>.</operator><name>b_url</name></name> <operator>&amp;&amp;</operator> <name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_url</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_url</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>psz_URL</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>i_url</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es_descriptor</name><operator>.</operator><name>psz_URL</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>psz_URL</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_url</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>psz_URL</name><index>[<expr><name>i_url</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>+=</operator> <name>i_url</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>-=</operator> <name>i_url</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>psz_URL</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>es_descriptor</name><operator>.</operator><name>b_OCRstream</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>i_OCR_ES_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>!=</operator> <literal type="number">0x04</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>MP4_ReadLengthDescriptor</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_len</name> <operator>==</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"found esds MP4DecConfigDescr (%"</literal><name>PRIu64</name><literal type="string">" bytes)"</literal></expr></argument>,

<argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name> <operator>=</operator>

<call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>MP4_descriptor_decoder_config_t</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>i_objectProfileIndication</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>i_streamType</name></name> <operator>=</operator> <name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>b_upStream</name></name> <operator>=</operator> <operator>(</operator> <name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>i_buffer_sizeDB</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>i_max_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>i_avg_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>!=</operator> <literal type="number">0x05</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>i_decoder_specific_info_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>p_decoder_specific_info</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>MP4_ReadLengthDescriptor</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_len</name> <operator>==</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"found esds MP4DecSpecificDescr (%"</literal><name>PRIu64</name><literal type="string">" bytes)"</literal></expr></argument>,

<argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>i_decoder_specific_info_len</name></name> <operator>=</operator> <name>i_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>p_decoder_specific_info</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>p_decoder_specific_info</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>es_descriptor</name><operator>.</operator><name>p_decConfigDescr</name><operator>-&gt;</operator><name>p_decoder_specific_info</name></name></expr></argument>,

<argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>es_descriptor</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_av1C</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_av1C_t</name> <modifier>*</modifier></type><name>p_av1C</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_av1C</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_av1C</name><operator>-&gt;</operator><name>p_av1C</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_av1C</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_av1C_t</name> <modifier>*</modifier></type><name>p_av1C</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_av1C_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_av1C</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_av1C</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_av1C</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator>

<name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x81</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_av1C</name><operator>-&gt;</operator><name>p_av1C</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_av1C</name><operator>-&gt;</operator><name>p_av1C</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_av1C</name><operator>-&gt;</operator><name>p_av1C</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_av1C</name><operator>-&gt;</operator><name>i_av1C</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_8b</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_8b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_8b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_av1C</name><operator>-&gt;</operator><name>i_profile</name></name> <operator>=</operator> <name>i_8b</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_av1C</name><operator>-&gt;</operator><name>i_level</name></name> <operator>=</operator> <name>i_8b</name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_8b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_8b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_8b</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_av1C</name><operator>-&gt;</operator><name>i_presentation_delay</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>i_8b</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_av1C</name><operator>-&gt;</operator><name>i_presentation_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_avcC</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_avcC_t</name> <modifier>*</modifier></type><name>p_avcC</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_avcC</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>p_avcC</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_avcC</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_avcC_t</name> <modifier>*</modifier></type><name>p_avcC</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_avcC_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_avcC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_avcC</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_avcC</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>p_avcC</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_avcC</name><operator>-&gt;</operator><name>p_avcC</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>p_avcC</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>i_avcC</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>i_profile</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>i_profile_compatibility</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>i_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"avcC\" version=%d profile=0x%x level=0x%x"</literal></expr></argument>,

<argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>, <argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>i_profile</name></name></expr></argument>, <argument><expr><name><name>p_avcC</name><operator>-&gt;</operator><name>i_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_vpcC</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_vpcC</name><operator>-&gt;</operator><name>p_codec_init_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_vpcC</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_vpcC_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_vpcC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_vpcC_t</name> <modifier>*</modifier></type><name>p_vpcC</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_vpcC</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_profile</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_bit_depth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_color_primaries</name></name> <operator>=</operator> <name><name>p_vpcC</name><operator>-&gt;</operator><name>i_bit_depth</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_bit_depth</name></name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_chroma_subsampling</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_xfer_function</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_vpcC</name><operator>-&gt;</operator><name>i_chroma_subsampling</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_fullrange</name></name> <operator>=</operator> <name><name>p_vpcC</name><operator>-&gt;</operator><name>i_chroma_subsampling</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_chroma_subsampling</name></name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_chroma_subsampling</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_vpcC</name><operator>-&gt;</operator><name>i_bit_depth</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_fullrange</name></name> <operator>=</operator> <name><name>p_vpcC</name><operator>-&gt;</operator><name>i_bit_depth</name></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_bit_depth</name></name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_color_primaries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_xfer_function</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_matrix_coeffs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_codec_init_datasize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_codec_init_datasize</name></name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_codec_init_datasize</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>i_codec_init_datasize</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>p_codec_init_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_vpcC</name><operator>-&gt;</operator><name>p_codec_init_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_vpcC</name><operator>-&gt;</operator><name>p_codec_init_data</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_SmDm</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_SmDm_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_SmDm_t</name> <modifier>*</modifier></type><name>p_SmDm</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SmDm</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_mdcv</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>RGB2GBR</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_mdcv</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>RGB2GBR</name><index>[<expr><name>i</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>i</name><operator>%</operator><literal type="number">2</literal></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_SmDm</name><operator>-&gt;</operator><name>primaries</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_mdcv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_SmDm</name><operator>-&gt;</operator><name>primaries</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <literal type="number">50000</literal> <operator>*</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>p_SmDm</name><operator>-&gt;</operator><name>primaries</name><index>[<expr><name>index</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_SmDm</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_mdcv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_SmDm</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">50000</literal> <operator>*</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>p_SmDm</name><operator>-&gt;</operator><name>white_point</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_SmDm</name><operator>-&gt;</operator><name>i_luminanceMax</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_SmDm</name><operator>-&gt;</operator><name>i_luminanceMin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_mdcv</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_SmDm</name><operator>-&gt;</operator><name>i_luminanceMax</name></name> <operator>=</operator> <literal type="number">10000</literal> <operator>*</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>p_SmDm</name><operator>-&gt;</operator><name>i_luminanceMax</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_SmDm</name><operator>-&gt;</operator><name>i_luminanceMin</name></name> <operator>=</operator> <literal type="number">10000</literal> <operator>*</operator>

<operator>(</operator><name>double</name><operator>)</operator><name><name>p_SmDm</name><operator>-&gt;</operator><name>i_luminanceMin</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_CoLL</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_CoLL_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_CoLL_t</name> <modifier>*</modifier></type><name>p_CoLL</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_CoLL</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_clli</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_CoLL</name><operator>-&gt;</operator><name>i_maxCLL</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_CoLL</name><operator>-&gt;</operator><name>i_maxFALL</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_WMA2</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_WMA2</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_WMA2</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_WMA2_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_WMA2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_WMA2_t</name> <modifier>*</modifier></type><name>p_WMA2</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_WMA2</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTESLE</name><argument_list>( <argument><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wFormatTag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTESLE</name><argument_list>( <argument><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nChannels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nSamplesPerSec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nAvgBytesPerSec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTESLE</name><argument_list>( <argument><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>nBlockAlign</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTESLE</name><argument_list>( <argument><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>Format</name><operator>.</operator><name>wBitsPerSample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_cbSize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTESLE</name><argument_list>( <argument><expr><name>i_cbSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_cbSize</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name>i_cbSize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>p_WMA2</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_WMA2</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_strf</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_strf</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_strf</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_strf_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_strf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_strf_t</name> <modifier>*</modifier></type><name>p_strf</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_strf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">40</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biWidth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biHeight</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biPlanes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biBitCount</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biCompression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biSizeImage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biXPelsPerMeter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biYPelsPerMeter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biClrUsed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTESLE</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>bmiHeader</name><operator>.</operator><name>biClrImportant</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_strf</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_strf</name><operator>-&gt;</operator><name>i_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_strf</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>p_strf</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_ASF</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_ASF_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_ASF_t</name> <modifier>*</modifier></type><name>p_asf</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_asf</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_read</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_asf</name><operator>-&gt;</operator><name>i_stream_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_sbgp</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_sbgp_t</name> <modifier>*</modifier></type><name>p_sbgp</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sbgp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_sample_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_group_description_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sbgp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_sbgp_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_sbgp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sbgp_t</name> <modifier>*</modifier></type><name>p_sbgp</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sbgp</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_grouping_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_grouping_type_parameter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>&gt;</operator> <name>i_read</name> <operator>/</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i_read</name> <operator>/</operator> <operator>(</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_sample_count</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_group_description_index</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_sample_count</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_group_description_index</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_FreeBox_sbgp</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_sample_count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_group_description_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"sbgp\" grouping type %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_sbgp</name><operator>-&gt;</operator><name>i_grouping_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_ULTRA_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sbgp</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"\t samples %"</literal> <name>PRIu32</name> <literal type="string">" group %"</literal> <name>PRIu32</name></expr></argument>,

<argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_sample_count</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sbgp</name><operator>-&gt;</operator><name>entries</name><operator>.</operator><name>pi_group_description_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_sgpd</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_sgpd_t</name> <modifier>*</modifier></type><name>p_sgpd</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sgpd</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sgpd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_sgpd_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_sgpd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sgpd_t</name> <modifier>*</modifier></type><name>p_sgpd</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sgpd</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_grouping_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_grouping_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SAMPLEGROUP_rap</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"sgpd\" grouping type %4.4s (unimplemented)"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_grouping_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_default_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_version</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_default_sample_description_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_sgpd</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sgpd</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_description_length</name> <init>= <expr><name>i_default_length</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_default_length</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_description_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_read</name> <operator>&lt;</operator> <name>i_description_length</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_grouping_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SAMPLEGROUP_rap</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_data</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rap</name><operator>.</operator><name>i_num_leading_samples_known</name></name> <operator>=</operator> <name>i_data</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>rap</name><operator>.</operator><name>i_num_leading_samples</name></name> <operator>=</operator> <name>i_data</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>!=</operator> <name><name>p_sgpd</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"sgpd\" grouping type %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_sgpd</name><operator>-&gt;</operator><name>i_grouping_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_stsdext_chan</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_chan_t</name> <modifier>*</modifier></type><name>p_chan</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_chan</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CoreAudio_Layout_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_stsdext_chan</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_chan_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_stsdext_chan</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_chan_t</name> <modifier>*</modifier></type><name>p_chan</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_chan</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>i_channels_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_layout_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_bitmap</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_description_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_descsize</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_description_count</name></name> <operator>*</operator> <name>i_descsize</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>p_descriptions</name></name> <operator>=</operator>

<call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_description_count</name></name></expr></argument>, <argument><expr><name>i_descsize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>p_descriptions</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_description_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">20</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>p_descriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_channel_label</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>p_descriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_channel_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>p_descriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f_coordinates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>p_descriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f_coordinates</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>p_descriptions</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f_coordinates</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i</name><operator>&lt;</operator><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_description_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_description_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"chan\" flags=0x%x tag=0x%x bitmap=0x%x descriptions=%u"</literal></expr></argument>,

<argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>i_channels_flags</name></name></expr></argument>, <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_layout_tag</name></name></expr></argument>,

<argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_bitmap</name></name></expr></argument>, <argument><expr><name><name>p_chan</name><operator>-&gt;</operator><name>layout</name><operator>.</operator><name>i_channels_description_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_dec3</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_dec3_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_dec3_t</name> <modifier>*</modifier></type><name>p_dec3</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_dec3</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_header</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name>i_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>i_data_rate</name></name> <operator>=</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>i_num_ind_sub</name></name> <operator>=</operator> <operator>(</operator><name>i_header</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dec3</name><operator>-&gt;</operator><name>i_num_ind_sub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_fscod</name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bsid</name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bsmod</name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_acmod</name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lfeon</name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_num_dep_sub</name> <operator>=</operator> <operator>(</operator><name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_num_dep_sub</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chan_loc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chan_loc</name> <operator>|=</operator> <operator>(</operator><name>i_header</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chan_loc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"dec3\" bitrate %dkbps %d independent substreams"</literal></expr></argument>,

<argument><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>i_data_rate</name></name></expr></argument>, <argument><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>i_num_ind_sub</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_dec3</name><operator>-&gt;</operator><name>i_num_ind_sub</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"\tstream %d: bsid=0x%x bsmod=0x%x acmod=0x%x lfeon=0x%x "</literal>

<literal type="string">"num dependent subs=%d chan_loc=0x%x"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bsid</name></expr></argument>, <argument><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_bsmod</name></expr></argument>, <argument><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_acmod</name></expr></argument>,

<argument><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lfeon</name></expr></argument>, <argument><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_num_dep_sub</name></expr></argument>, <argument><expr><name><name>p_dec3</name><operator>-&gt;</operator><name>stream</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_chan_loc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_dac3</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_dac3_t</name> <modifier>*</modifier></type><name>p_dac3</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_dac3_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dac3</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_dac3</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_header</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_fscod</name></name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">22</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_bsid</name></name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_bsmod</name></name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_acmod</name></name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_lfeon</name></name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_bitrate_code</name></name> <operator>=</operator> <operator>(</operator> <name>i_header</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"dac3\" fscod=0x%x bsid=0x%x bsmod=0x%x acmod=0x%x lfeon=0x%x bitrate_code=0x%x"</literal></expr></argument>,

<argument><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_fscod</name></name></expr></argument>, <argument><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_bsid</name></name></expr></argument>, <argument><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_bsmod</name></name></expr></argument>, <argument><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_acmod</name></name></expr></argument>, <argument><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_lfeon</name></name></expr></argument>, <argument><expr><name><name>p_dac3</name><operator>-&gt;</operator><name>i_bitrate_code</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_dvc1</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_dvc1</name><operator>-&gt;</operator><name>p_vc1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_dvc1</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_dvc1_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_dvc1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">7</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_dvc1_t</name> <modifier>*</modifier></type><name>p_dvc1</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_dvc1</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_dvc1</name><operator>-&gt;</operator><name>i_profile_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dvc1</name><operator>-&gt;</operator><name>i_vc1</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_dvc1</name><operator>-&gt;</operator><name>i_vc1</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_dvc1</name><operator>-&gt;</operator><name>p_vc1</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_dvc1</name><operator>-&gt;</operator><name>i_vc1</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_dvc1</name><operator>-&gt;</operator><name>p_vc1</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"dvc1\" profile=%"</literal><name>PRIu8</name></expr></argument>, <argument><expr><operator>(</operator><name><name>p_dvc1</name><operator>-&gt;</operator><name>i_profile_level</name></name> <operator>&amp;</operator> <literal type="number">0xf0</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_fiel</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_fiel_t</name> <modifier>*</modifier></type><name>p_fiel</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_fiel_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_fiel</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_fiel</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fiel</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_SINGLE_FIELD</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fiel</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_TOP_FIELD_FIRST</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fiel</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>BLOCK_FLAG_BOTTOM_FIELD_FIRST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_enda</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_enda_t</name> <modifier>*</modifier></type><name>p_enda</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_enda_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_enda</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_enda</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_enda</name><operator>-&gt;</operator><name>i_little_endian</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"enda\" little_endian=%d"</literal></expr></argument>, <argument><expr><name><name>p_enda</name><operator>-&gt;</operator><name>i_little_endian</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_sample_soun</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>p_qt_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sample_soun</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>=</operator> <name>ATOM_soun</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_sample_soun_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_sample_soun</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>p_qt_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_actually_read</name> <init>= <expr><name>i_read</name> <operator>+</operator> <name>header_size</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">28</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_reserved1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_data_reference_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_description</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>p_qt_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>p_qt_description</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>p_qt_description</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_description</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>p_qt_description</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_revision_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_vendor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_reserved3</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sampleratelo</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"soun\" stsd qt_version %"</literal><name>PRIu16</name><literal type="string">" compid=%"</literal><name>PRIx16</name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_read</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_packet</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_sample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"soun\" V1 sample/packet=%d bytes/packet=%d "</literal>

<literal type="string">"bytes/frame=%d bytes/sample=%d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_packet</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_sample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_qt_version</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i_read</name> <operator>&gt;=</operator> <literal type="number">36</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f_sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_dummy64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_channel</name></decl>, <decl><type ref="prev"/><name>i_extoffset</name></decl>, <decl><type ref="prev"/><name>i_dummy32</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name> <operator>!=</operator> <literal type="number">0x3</literal> <operator>||</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_samplesize</name></name> <operator>!=</operator> <literal type="number">0x0010</literal> <operator>||</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_compressionid</name></name> <operator>!=</operator> <literal type="number">0xFFFE</literal> <operator>||</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_reserved3</name></name> <operator>!=</operator> <literal type="number">0x0</literal> <operator>||</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name> <operator>!=</operator> <literal type="number">0x1</literal> <operator>||</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sampleratelo</name></name> <operator>!=</operator> <literal type="number">0x0</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"invalid stsd V2 box defaults"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_extoffset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name>i_dummy64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name>f_sample_rate</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy64</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: %f Hz"</literal></expr></argument>, <argument><expr><name>f_sample_rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><name>f_sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sampleratelo</name></name> <operator>=</operator> <operator>(</operator><name>f_sample_rate</name> <operator>-</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_channel</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name> <operator>=</operator> <name>i_channel</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_dummy32</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_dummy32</name> <operator>!=</operator> <literal type="number">0x7F000000</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"invalid stsd V2 box"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_constbitsperchannel</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_formatflags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_constbytesperaudiopacket</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_constLPCMframesperaudiopacket</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"soun\" V2 rate=%f bitsperchannel=%u "</literal>

<literal type="string">"flags=%u bytesperpacket=%u lpcmframesperpacket=%u"</literal></expr></argument>,

<argument><expr><name>f_sample_rate</name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_constbitsperchannel</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_formatflags</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_constbytesperaudiopacket</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_constLPCMframesperaudiopacket</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name>i_extoffset</name> <operator>&gt;</operator> <name>i_actually_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_extoffset</name> <operator>=</operator> <name>i_actually_read</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_buff</name><index>[<expr><name>i_extoffset</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <name>i_actually_read</name> <operator>-</operator> <name>i_extoffset</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sample_per_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_bytes_per_sample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"soun\" V0 or qt1/2 (rest=%"</literal><name>PRIu64</name><literal type="string">")"</literal></expr></argument>,

<argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_drms</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"DRM protected streams are not supported."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_samr</name> <operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_sawb</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_ReadBoxContainerRawInBox</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name>p_peek</name> <operator>-</operator> <name>p_buff</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"soun\" in stsd channel %d "</literal>

<literal type="string">"sample size %d sample rate %f"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_channelcount</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_samplesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sampleratehi</name></name> <operator>+</operator>

<operator>(</operator><name>float</name><operator>)</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_soun</name><operator>-&gt;</operator><name>i_sampleratelo</name></name> <operator>/</operator> <name>BLOCK16x16</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_sample_vide</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>p_qt_image_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>MP4_ReadBox_sample_vide</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>=</operator> <name>ATOM_vide</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_sample_vide_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_sample_vide</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_actually_read</name> <init>= <expr><name>i_read</name> <operator>+</operator> <name>header_size</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_reserved1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_data_reference_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>p_qt_image_description</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>p_qt_image_description</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_image_description</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>p_qt_image_description</name></name></expr></argument>,

<argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_image_description</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>p_qt_image_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_revision_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_vendor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_temporal_quality</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_spatial_quality</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_horizresolution</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_vertresolution</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_data_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_frame_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">31</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>sz_compressorname</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>sz_compressorname</name><index>[<expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <expr_stmt><expr><name>i_read</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_depth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_qt_color_table</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_drmi</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"DRM protected streams are not supported."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_actually_read</name> <operator>&gt;</operator> <literal type="number">78</literal> <operator>&amp;&amp;</operator> <name>p_peek</name> <operator>-</operator> <name>p_buff</name> <operator>&gt;</operator> <literal type="number">78</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_ReadBoxContainerRawInBox</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name>p_peek</name> <operator>-</operator> <name>p_buff</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"vide\" in stsd %dx%d depth %d (%s)"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>i_depth</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_vide</name><operator>-&gt;</operator><name>sz_compressorname</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sample_mp4s</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>=</operator> <name>ATOM_text</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER_PARTIAL</name><argument_list>( <argument><expr><name>MP4_Box_data_sample_text_t</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>p_peek</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_sample_hint</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_hint</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sample_hint8</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER_PARTIAL</name><argument_list>( <argument><expr><name>MP4_Box_data_sample_hint_t</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>MP4_FreeBox_sample_hint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_hint</name><operator>-&gt;</operator><name>i_reserved1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_hint</name><operator>-&gt;</operator><name>i_data_reference_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_hint</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_hint</name><operator>-&gt;</operator><name>p_data</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_sample_text</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_text</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sample_text</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>=</operator> <name>ATOM_text</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_sample_text_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_sample_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_text</name><operator>-&gt;</operator><name>i_reserved1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_text</name><operator>-&gt;</operator><name>i_reserved2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_text</name><operator>-&gt;</operator><name>i_data_reference_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_text</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_text</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_text</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_text</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"text\" in stsd text"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sample_clcp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>=</operator> <name>ATOM_clcp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_sample_clcp_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_clcp</name><operator>-&gt;</operator><name>i_reserved1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sample_clcp</name><operator>-&gt;</operator><name>i_data_reference_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"clcp\" in stsd"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_stsz</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_entry_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_stsz</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_stsz_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_stsz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_sample_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_sample_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>count</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_entry_size</name></name> <operator>=</operator>

<call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_entry_size</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_entry_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_entry_size</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"stsz\" sample-size %d sample-count %d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_sample_size</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsz</name><operator>-&gt;</operator><name>i_sample_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_stsc</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_first_chunk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_samples_per_chunk</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_sample_description_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_stsc</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_stsc_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_stsc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>count</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_first_chunk</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_samples_per_chunk</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_sample_description_index</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_first_chunk</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_samples_per_chunk</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_sample_description_index</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_first_chunk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_samples_per_chunk</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_sample_description_index</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"stsc\" entry-count %d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsc</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_sdp</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sdp</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sdp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_sdp_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_sdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETSTRINGZ</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sdp</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_rtp</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_moviehintinformation_rtp</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_rtp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_moviehintinformation_rtp_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_rtp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_moviehintinformation_rtp</name><operator>-&gt;</operator><name>i_description_format</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETSTRINGZ</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_moviehintinformation_rtp</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tims</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tims_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tims</name><operator>-&gt;</operator><name>i_timescale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tsro</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tsro_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tsro</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tssy</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tssy_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tssy</name><operator>-&gt;</operator><name>i_reserved_timestamp_sync</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_stco_co64</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_co64</name><operator>-&gt;</operator><name>i_chunk_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_stco_co64</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>sixtyfour</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_stco</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_co64_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_stco_co64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_co64</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><ternary><condition><expr><name>sixtyfour</name></expr> ?</condition><then> <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator> <operator>*</operator> <name>count</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_co64</name><operator>-&gt;</operator><name>i_chunk_offset</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_co64</name><operator>-&gt;</operator><name>i_chunk_offset</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_co64</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>sixtyfour</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_co64</name><operator>-&gt;</operator><name>i_chunk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_co64</name><operator>-&gt;</operator><name>i_chunk_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"co64\" entry-count %d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_co64</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_stss</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stss</name><operator>-&gt;</operator><name>i_sample_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_stss</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_stss_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_stss</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stss</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>count</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stss</name><operator>-&gt;</operator><name>i_sample_number</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stss</name><operator>-&gt;</operator><name>i_sample_number</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stss</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stss</name><operator>-&gt;</operator><name>i_sample_number</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stss</name><operator>-&gt;</operator><name>i_sample_number</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"stss\" entry-count %d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stss</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_stsh</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_shadowed_sample_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_sync_sample_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_stsh</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_stsh_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_stsh</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>count</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_shadowed_sample_number</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_sync_sample_number</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_shadowed_sample_number</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_sync_sample_number</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stss</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_shadowed_sample_number</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_sync_sample_number</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"stsh\" entry-count %d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stsh</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_stdp</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stdp</name><operator>-&gt;</operator><name>i_priority</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_stdp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_stdp_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_stdp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stdp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stdp</name><operator>-&gt;</operator><name>i_priority</name></name> <operator>=</operator>

<call><name>calloc</name><argument_list>( <argument><expr><name>i_read</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stdp</name><operator>-&gt;</operator><name>i_priority</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_read</name> <operator>/</operator> <literal type="number">2</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_stdp</name><operator>-&gt;</operator><name>i_priority</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"stdp\" entry-count %"</literal><name>PRId64</name></expr></argument>,

<argument><expr><name>i_read</name> <operator>/</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_elst</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_segment_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_rate_integer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_rate_fraction</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_elst</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_elst_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_elst</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entries_max</name> <init>= <expr><name>i_read</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>count</name> <operator>&gt;</operator> <name>i_entries_max</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i_entries_max</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_segment_duration</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_time</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_rate_integer</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_rate_fraction</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_segment_duration</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_time</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_rate_integer</name></name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_rate_fraction</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>segment_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>media_time</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>int64_t</name></type> <name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint64_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>u</name></decl>;</union>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name>segment_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>u</name><operator>.</operator><name>u</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>media_time</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<union>union <block>{ <decl_stmt><decl><type><name>int32_t</name></type> <name>s</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>uint32_t</name></type> <name>u</name></decl>;</decl_stmt> }</block> <decl><name>u</name></decl>;</union>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>segment_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>u</name><operator>.</operator><name>u</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>media_time</name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_segment_duration</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>segment_duration</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_time</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>media_time</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_rate_integer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_media_rate_fraction</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"elst\" entry-count %"</literal> <name>PRIu32</name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_elst</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_cprt</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cprt</name><operator>-&gt;</operator><name>psz_notice</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_cprt</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_language</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_mac</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_cprt_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_cprt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cprt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name>i_language</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decodeQtLanguageCode</name><argument_list>( <argument><expr><name>i_language</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cprt</name><operator>-&gt;</operator><name>rgs_language</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_mac</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETSTRINGZ</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cprt</name><operator>-&gt;</operator><name>psz_notice</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cprt\" language %3.3s notice %s"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cprt</name><operator>-&gt;</operator><name>rgs_language</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cprt</name><operator>-&gt;</operator><name>psz_notice</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_dcom</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_dcom_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_dcom</name><operator>-&gt;</operator><name>i_algorithm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"dcom\" compression algorithm : %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_dcom</name><operator>-&gt;</operator><name>i_algorithm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_cmvd</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_cmvd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_cmvd_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_cmvd</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>i_uncompressed_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>i_compressed_size</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>,<argument><expr><name>i_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>b_compressed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmvd\" compressed data size %d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>i_compressed_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_cmov</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_dcom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_cmvd</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream_memory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>z_stream</name></type> <name>z_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmov</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>MP4_Box_data_cmov_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name> <operator>||</operator>

<operator>(</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_moov</name> <operator>&amp;&amp;</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_foov</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Read box: \"cmov\" box alone"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>MP4_ReadBoxContainer</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_dcom</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"dcom"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<operator>(</operator> <name>p_cmvd</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"cmvd"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>p_data</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmov\" incomplete"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dcom</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_dcom</name><operator>-&gt;</operator><name>i_algorithm</name></name> <operator>!=</operator> <name>ATOM_zlib</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmov\" compression algorithm : %4.4s "</literal>

<literal type="string">"not supported"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dcom</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_dcom</name><operator>-&gt;</operator><name>i_algorithm</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ZLIB_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmov\" zlib unsupported"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_data</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>i_uncompressed_size</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>z_data</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>p_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z_data</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>i_compressed_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z_data</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z_data</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>i_uncompressed_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z_data</name><operator>.</operator><name>zalloc</name></name> <operator>=</operator> <operator>(</operator><name>alloc_func</name><operator>)</operator><name>Z_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z_data</name><operator>.</operator><name>zfree</name></name> <operator>=</operator> <operator>(</operator><name>free_func</name><operator>)</operator><name>Z_NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>z_data</name><operator>.</operator><name>opaque</name></name> <operator>=</operator> <operator>(</operator><name>voidpf</name><operator>)</operator><name>Z_NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>inflateInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name>z_data</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmov\" error while uncompressing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>inflate</name><argument_list>( <argument><expr><operator>&amp;</operator><name>z_data</name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>i_result</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmov\" error while uncompressing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>i_uncompressed_size</name></name> <operator>!=</operator> <name><name>z_data</name><operator>.</operator><name>total_out</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmov\" uncompressing data size "</literal>

<literal type="string">"mismatch"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>i_uncompressed_size</name></name> <operator>=</operator> <name><name>z_data</name><operator>.</operator><name>total_out</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>inflateEnd</name><argument_list>( <argument><expr><operator>&amp;</operator><name>z_data</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>Z_OK</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmov\" error while uncompressing "</literal>

<literal type="string">"data (ignored)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>b_compressed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmov\" box successfully uncompressed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_stream_memory</name> <operator>=</operator>

<call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>,

<argument><expr><name><name>p_cmvd</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmvd</name><operator>-&gt;</operator><name>i_uncompressed_size</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmov</name><operator>-&gt;</operator><name>p_moov</name></name> <operator>=</operator> <call><name>MP4_ReadBox</name><argument_list>( <argument><expr><name>p_stream_memory</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_stream_memory</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"cmov\" compressed movie header completed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><ternary><condition><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmov</name><operator>-&gt;</operator><name>p_moov</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_rdrf</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name><operator>-&gt;</operator><name>psz_ref</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_rdrf</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_rdrf_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_rdrf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name><operator>-&gt;</operator><name>i_ref_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_len</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name><operator>-&gt;</operator><name>psz_ref</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name><operator>-&gt;</operator><name>psz_ref</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_len</name><operator>--</operator></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name><operator>-&gt;</operator><name>psz_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name><operator>-&gt;</operator><name>psz_ref</name><index>[<expr><name>i_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name><operator>-&gt;</operator><name>psz_ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"rdrf\" type:%4.4s ref %s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name><operator>-&gt;</operator><name>i_ref_type</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rdrf</name><operator>-&gt;</operator><name>psz_ref</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_rmdr</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_rmdr_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmdr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmdr</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"rmdr\" rate:%d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmdr</name><operator>-&gt;</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_rmqu</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_rmqu_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmqu</name><operator>-&gt;</operator><name>i_quality</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"rmqu\" quality:%d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmqu</name><operator>-&gt;</operator><name>i_quality</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_rmvc</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_rmvc_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmvc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmvc</name><operator>-&gt;</operator><name>i_gestaltType</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmvc</name><operator>-&gt;</operator><name>i_val1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmvc</name><operator>-&gt;</operator><name>i_val2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmvc</name><operator>-&gt;</operator><name>i_checkType</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"rmvc\" gestaltType:%4.4s val1:0x%x val2:0x%x checkType:0x%x"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmvc</name><operator>-&gt;</operator><name>i_gestaltType</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmvc</name><operator>-&gt;</operator><name>i_val1</name></name></expr></argument>,<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmvc</name><operator>-&gt;</operator><name>i_val2</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_rmvc</name><operator>-&gt;</operator><name>i_checkType</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_frma</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_frma_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_frma</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"frma\" i_type:%4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_frma</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_skcr</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_skcr_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_skcr</name><operator>-&gt;</operator><name>i_init</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_skcr</name><operator>-&gt;</operator><name>i_encr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_skcr</name><operator>-&gt;</operator><name>i_decr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"skcr\" i_init:%d i_encr:%d i_decr:%d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_skcr</name><operator>-&gt;</operator><name>i_init</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_skcr</name><operator>-&gt;</operator><name>i_encr</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_skcr</name><operator>-&gt;</operator><name>i_decr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_drms</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_box</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"DRM protected streams are not supported."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_Binary</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_Binary</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_binary_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_Binary</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_read</name></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_data</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_data</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_data</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_data_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_data_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>i_read</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>i_read</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> &gt;</argument_list></name> <name>UINT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_type</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"skipping unknown 'data' atom with type %"</literal><name>PRIu8</name></expr></argument>, <argument><expr><name>i_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>e_wellknowntype</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>locale</name><operator>.</operator><name>i_country</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>locale</name><operator>.</operator><name>i_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read 'data' atom: knowntype=%"</literal><name>PRIu32</name><literal type="string">", country=%"</literal><name>PRIu16</name><literal type="string">" lang=%"</literal><name>PRIu16</name>

<literal type="string">", size %"</literal><name>PRIu64</name><literal type="string">" bytes"</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>e_wellknowntype</name></name></expr></argument>,

<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>locale</name><operator>.</operator><name>i_country</name></name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>locale</name><operator>.</operator><name>i_language</name></name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_data</name><operator>-&gt;</operator><name>p_blob</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_data</name><operator>-&gt;</operator><name>p_blob</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_data</name><operator>-&gt;</operator><name>i_blob</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_data</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_Metadata</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ATOM_data</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>stoplist</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_chpl</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_chpl_t</name> <modifier>*</modifier></type><name>p_chpl</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_chpl</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_chpl</name><operator>-&gt;</operator><name>i_chapter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_chpl</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_chpl_t</name> <modifier>*</modifier></type><name>p_chpl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_dummy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_chpl_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_chpl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_chpl</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_chpl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name>p_chpl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator> <name><name>p_chpl</name><operator>-&gt;</operator><name>i_version</name></name> <operator>!=</operator> <literal type="number">0x1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_dummy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>i_chapter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_chpl</name><operator>-&gt;</operator><name>i_chapter</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_copy</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name>i_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_copy</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_len</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_copy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_copy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>psz_name</name><index>[<expr><name>i_copy</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>+=</operator> <name>i_copy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>-=</operator> <name>i_copy</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i</name> <operator>!=</operator> <name><name>p_chpl</name><operator>-&gt;</operator><name>i_chapter</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_chpl</name><operator>-&gt;</operator><name>i_chapter</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>&gt;</operator> <name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_start</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name> <init>= <expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_start</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_name</name> <operator>=</operator> <name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>=</operator> <name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name> <operator>=</operator> <name>psz</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>chapter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>=</operator> <name>i64</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block> while<condition>( <expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>;</do>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"chpl\" %d chapters"</literal></expr></argument>,

<argument><expr><name><name>p_chpl</name><operator>-&gt;</operator><name>i_chapter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_HMMT</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmmt</name><operator>-&gt;</operator><name>pi_chapter_start</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_HMMT</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHAPTER_COUNT</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<decl_stmt><decl><type><name>MP4_Box_data_HMMT_t</name> <modifier>*</modifier></type><name>p_hmmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_HMMT_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_HMMT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_hmmt</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hmmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>i_chapter_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>i_chapter_count</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>pi_chapter_start</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_read</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>)</operator> <operator>&lt;</operator> <name><name>p_hmmt</name><operator>-&gt;</operator><name>i_chapter_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>i_chapter_count</name></name> <operator>&gt;</operator> <name>MAX_CHAPTER_COUNT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>i_chapter_count</name></name> <operator>=</operator> <name>MAX_CHAPTER_COUNT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>pi_chapter_start</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>i_chapter_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>pi_chapter_start</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_hmmt</name><operator>-&gt;</operator><name>i_chapter_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>pi_chapter_start</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"HMMT\" %d HiLight tags"</literal></expr></argument>, <argument><expr><name><name>p_hmmt</name><operator>-&gt;</operator><name>i_chapter_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_TrackReference</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_track_reference</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_TrackReference</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_trak_reference_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_TrackReference</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_track_reference</name><operator>-&gt;</operator><name>i_track_ID</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <name>i_read</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_track_reference</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_track_reference</name><operator>-&gt;</operator><name>i_track_ID</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name>count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_track_reference</name><operator>-&gt;</operator><name>i_track_ID</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_track_reference</name><operator>-&gt;</operator><name>i_track_ID</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"chap\" %d references"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_track_reference</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tref</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_header</name> <init>= <expr><call><name>mp4_box_headersize</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_header</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>i_header</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_remain</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>i_remain</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_childbox</name> <init>= <expr><call><name>MP4_ReadBoxUsing</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>,

<argument><expr><name>MP4_ReadBox_TrackReference</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_childbox</name> <operator>||</operator> <name>i_remain</name> <operator>&lt;</operator> <name><name>p_childbox</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_childbox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_BoxAddChild</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>p_childbox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_remain</name> <operator>-=</operator> <name><name>p_childbox</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><ternary><condition><expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_keys</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_keys</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_keys_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><name>i_count</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i_count</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_keysize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_keysize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_keysize</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i_keysize</name> <operator>-</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>i_read</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_namespace</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_keysize</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_keysize</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_keysize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>psz_value</name><index>[<expr><name>i_keysize</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>+=</operator> <name>i_keysize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>-=</operator> <name>i_keysize</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_ULTRA_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"read box: \"keys\": %u '%s'"</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_keys</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_colr</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_colr_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>nclc</name><operator>.</operator><name>i_primary_idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>nclc</name><operator>.</operator><name>i_transfer_function_idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>nclc</name><operator>.</operator><name>i_matrix_idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'n'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'x'</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>nclc</name><operator>.</operator><name>i_full_range</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Unhandled colr type: %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_colr</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_irot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_irot_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_irot</name><operator>-&gt;</operator><name>i_ccw_degrees</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_irot</name><operator>-&gt;</operator><name>i_ccw_degrees</name></name> <operator>&amp;=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_irot</name><operator>-&gt;</operator><name>i_ccw_degrees</name></name> <operator>*=</operator> <literal type="number">90</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_meta</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_headersize</name> <init>= <expr><call><name>mp4_box_headersize</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <name>i_headersize</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_headersize</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>i_headersize</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"\0\0\0"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hdlr"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ATOM_hdlr</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>stoplist</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_hdlr</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"hdlr"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_hdlr</name> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_hdlr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_hdlr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_version</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name> <operator>=</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_hdlr</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_handler_type</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_handler</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>HANDLER_pict</name></expr>:</case>

<case>case <expr><name>HANDLER_mdta</name></expr>:</case>

<case>case <expr><name>HANDLER_mdir</name></expr>:</case>

<return>return <expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_iods</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>i_unused</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_iods_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_unused</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_unused</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_object_descriptor</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_OD_profile_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_scene_profile_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_audio_profile_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_visual_profile_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_graphics_profile_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"iods\" objectDescriptorId: %i, OD: %i, scene: %i, audio: %i, "</literal>

<literal type="string">"visual: %i, graphics: %i"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_object_descriptor</name></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_OD_profile_level</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_scene_profile_level</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_audio_profile_level</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_visual_profile_level</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iods</name><operator>-&gt;</operator><name>i_graphics_profile_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_btrt</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_btrt_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>i_read</name> <operator>!=</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_btrt</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_btrt</name><operator>-&gt;</operator><name>i_max_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_btrt</name><operator>-&gt;</operator><name>i_avg_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_pasp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_pasp_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pasp</name><operator>-&gt;</operator><name>i_horizontal_spacing</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pasp</name><operator>-&gt;</operator><name>i_vertical_spacing</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"paps\" %dx%d"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pasp</name><operator>-&gt;</operator><name>i_horizontal_spacing</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pasp</name><operator>-&gt;</operator><name>i_vertical_spacing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_mehd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_mehd_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mehd</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mehd</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mehd</name><operator>-&gt;</operator><name>i_fragment_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mehd</name><operator>-&gt;</operator><name>i_fragment_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"mehd\" frag dur. %"</literal><name>PRIu64</name><literal type="string">""</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mehd</name><operator>-&gt;</operator><name>i_fragment_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_trex</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_trex_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trex</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trex</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trex</name><operator>-&gt;</operator><name>i_default_sample_description_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trex</name><operator>-&gt;</operator><name>i_default_sample_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trex</name><operator>-&gt;</operator><name>i_default_sample_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trex</name><operator>-&gt;</operator><name>i_default_sample_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"trex\" trackID: %"</literal><name>PRIu32</name><literal type="string">""</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_trex</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_sdtp</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sdtp</name><operator>-&gt;</operator><name>p_sample_table</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_sdtp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_count</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_sdtp_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_sdtp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sdtp_t</name> <modifier>*</modifier></type><name>p_sdtp</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sdtp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_sdtp</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sample_count</name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sdtp</name><operator>-&gt;</operator><name>p_sample_table</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_sample_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sdtp</name><operator>-&gt;</operator><name>p_sample_table</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_sample_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_sdtp</name><operator>-&gt;</operator><name>p_sample_table</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"i_sample_count is %"</literal><name>PRIu32</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>i_sample_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_sample_count</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"sdtp\" head: %"</literal><name>PRIx8</name><literal type="string">" %"</literal><name>PRIx8</name><literal type="string">" %"</literal><name>PRIx8</name><literal type="string">" %"</literal><name>PRIx8</name><literal type="string">""</literal></expr></argument>,

<argument><expr><name><name>p_sdtp</name><operator>-&gt;</operator><name>p_sample_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sdtp</name><operator>-&gt;</operator><name>p_sample_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sdtp</name><operator>-&gt;</operator><name>p_sample_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sdtp</name><operator>-&gt;</operator><name>p_sample_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tsel</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tsel_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_version</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_read</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tsel</name><operator>-&gt;</operator><name>i_switch_group</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_mfro</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_mfro_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mfro</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mfro</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"read box: \"mfro\" size: %"</literal><name>PRIu32</name><literal type="string">""</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_mfro</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_tfra</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfra</name><operator>-&gt;</operator><name>p_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfra</name><operator>-&gt;</operator><name>p_moof_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfra</name><operator>-&gt;</operator><name>p_traf_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfra</name><operator>-&gt;</operator><name>p_trun_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfra</name><operator>-&gt;</operator><name>p_sample_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_tfra</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_VARIABLE_LENGTH</name><parameter_list>(<parameter><type><name>lengthvar</name></type></parameter>, <parameter><type><name>p_array</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (lengthvar){case 0:MP4_GET1BYTE( p_array[i] );break;case 1:MP4_GET2BYTES( *((uint16_t *)&amp;p_array[i*2]) );break;case 2:MP4_GET3BYTES( *((uint32_t *)&amp;p_array[i*4]) );break;case 3:MP4_GET4BYTES( *((uint32_t *)&amp;p_array[i*4]) );break;default:goto error;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIX_VARIABLE_LENGTH</name><parameter_list>(<parameter><type><name>lengthvar</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if ( lengthvar == 3 ) lengthvar = 4</cpp:value></cpp:define>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_number_of_entries</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_tfra_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_tfra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tfra_t</name> <modifier>*</modifier></type><name>p_tfra</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfra</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GETVERSIONFLAGS</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_tfra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_version</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_lengths</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name>i_lengths</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_number_of_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_number_of_entries</name> <operator>=</operator> <name><name>p_tfra</name><operator>-&gt;</operator><name>i_number_of_entries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_traf_num</name></name> <operator>=</operator> <name>i_lengths</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_trun_num</name></name> <operator>=</operator> <operator>(</operator> <name>i_lengths</name> <operator>&amp;</operator> <literal type="number">0x0c</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_sample_num</name></name> <operator>=</operator> <name>i_lengths</name> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>i_version</name></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_time</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_number_of_entries</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_moof_offset</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_number_of_entries</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_traf_num</name></name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>( <expr><name>size</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_traf_number</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_number_of_entries</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_trun_num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>size</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_trun_number</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_number_of_entries</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_sample_num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>size</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_sample_number</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_number_of_entries</name></expr></argument>, <argument><expr><name>size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>p_time</name></name> <operator>||</operator> <operator>!</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>p_moof_offset</name></name> <operator>||</operator> <operator>!</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>p_traf_number</name></name>

<operator>||</operator> <operator>!</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>p_trun_number</name></name> <operator>||</operator> <operator>!</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>p_sample_number</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_fields_length</name> <init>= <expr><literal type="number">3</literal> <operator>+</operator> <name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_traf_num</name></name>

<operator>+</operator> <name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_trun_num</name></name>

<operator>+</operator> <name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_sample_num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_number_of_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <name>i_fields_length</name> <operator>+</operator> <literal type="number">16</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>p_time</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>p_moof_offset</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <name>i_fields_length</name> <operator>+</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_time</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_moof_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>READ_VARIABLE_LENGTH</name><argument_list>(<argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_traf_num</name></name></expr></argument>, <argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_traf_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ_VARIABLE_LENGTH</name><argument_list>(<argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_trun_num</name></name></expr></argument>, <argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_trun_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ_VARIABLE_LENGTH</name><argument_list>(<argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_sample_num</name></name></expr></argument>, <argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_sample_number</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name>i</name> <operator>&lt;</operator> <name>i_number_of_entries</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_number_of_entries</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FIX_VARIABLE_LENGTH</name><argument_list>(<argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_traf_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FIX_VARIABLE_LENGTH</name><argument_list>(<argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_trun_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FIX_VARIABLE_LENGTH</name><argument_list>(<argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_length_size_of_sample_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_ULTRA_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_number_of_entries</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"tfra[%"</literal><name>PRIu32</name><literal type="string">"] time[%"</literal><name>PRIu32</name><literal type="string">"]: %"</literal><name>PRIu32</name><literal type="string">", "</literal>

<literal type="string">"moof_offset[%"</literal><name>PRIu32</name><literal type="string">"]: %"</literal><name>PRIu32</name><literal type="string">""</literal></expr></argument>,

<argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_time</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>p_moof_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"tfra[%"</literal><name>PRIu32</name><literal type="string">"] time[%"</literal><name>PRIu32</name><literal type="string">"]: %"</literal><name>PRIu64</name><literal type="string">", "</literal>

<literal type="string">"moof_offset[%"</literal><name>PRIu32</name><literal type="string">"]: %"</literal><name>PRIu64</name><literal type="string">""</literal></expr></argument>,

<argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>p_time</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>p_tfra</name><operator>-&gt;</operator><name>p_moof_offset</name></name><operator>)</operator><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"tfra[%"</literal><name>PRIu32</name><literal type="string">"] %"</literal><name>PRIu32</name><literal type="string">" entries"</literal></expr></argument>,

<argument><expr><name><name>p_tfra</name><operator>-&gt;</operator><name>i_track_ID</name></name></expr></argument>, <argument><expr><name>i_number_of_entries</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ_VARIABLE_LENGTH</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>FIX_VARIABLE_LENGTH</name></cpp:undef>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_pnot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>!=</operator> <literal type="number">20</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_pnot_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pnot</name><operator>-&gt;</operator><name>i_date</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_version</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pnot</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pnot</name><operator>-&gt;</operator><name>i_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_SA3D</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_SA3D_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_version</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SA3D</name><operator>-&gt;</operator><name>i_ambisonic_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SA3D</name><operator>-&gt;</operator><name>i_ambisonic_order</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SA3D</name><operator>-&gt;</operator><name>i_ambisonic_channel_ordering</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SA3D</name><operator>-&gt;</operator><name>i_ambisonic_normalization</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_SA3D</name><operator>-&gt;</operator><name>i_num_channels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_Reference</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_refbox_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_refbox</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_references</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_Reference</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_refbox_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_Reference</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_refbox_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_refbox</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iref</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_from_item_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_from_item_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_reference_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iref</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator> <operator>&lt;</operator>

<name><name>p_data</name><operator>-&gt;</operator><name>i_reference_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_references</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_references</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator>

<name><name>p_data</name><operator>-&gt;</operator><name>i_reference_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_references</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_reference_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iref</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_references</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_to_item_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_references</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_to_item_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_iref</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER_PARTIAL</name><argument_list>( <argument><expr><name>MP4_Box_data_iref_t</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_iref_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iref</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_version</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_read</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_remain</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>i_remain</name> <operator>&gt;</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_childbox</name> <init>= <expr><call><name>MP4_ReadBoxUsing</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>,

<argument><expr><name>MP4_ReadBox_Reference</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_childbox</name> <operator>||</operator> <name>i_remain</name> <operator>&lt;</operator> <name><name>p_childbox</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_childbox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_BoxAddChild</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>p_childbox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_remain</name> <operator>-=</operator> <name><name>p_childbox</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_iloc</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_iloc_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iloc</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_item_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_extents</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_iloc</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_iloc_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_iloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_iloc_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iloc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_foo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_offset_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length_size</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_offset_size</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_offset_size</name></name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_base_offset_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_index_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_index_size</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_base_offset_size</name></name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_base_offset_size</name></name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_offset_size</name></name> <operator>&amp;</operator> <literal type="number">0xF3</literal><operator>)</operator> <operator>||</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_offset_size</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator>

<operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_length_size</name></name> <operator>&amp;</operator> <literal type="number">0xF3</literal><operator>)</operator> <operator>||</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length_size</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator>

<operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_base_offset_size</name></name> <operator>&amp;</operator> <literal type="number">0xF3</literal><operator>)</operator> <operator>||</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_base_offset_size</name></name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>||</operator>

<operator>(</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_index_size</name></name> <operator>&amp;</operator> <literal type="number">0xF3</literal><operator>)</operator> <operator>||</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_index_size</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_version</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>/</operator> <literal type="number">6</literal> <operator>&lt;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_item_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_count</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_item_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_item_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_item_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name>i_foo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_construction_method</name> <operator>=</operator> <name>i_foo</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_construction_method</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_data_reference_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_base_offset_size</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_base_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_base_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_base_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_extent_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_entrysize</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>(</operator> <name>i_version</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_index_size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator>

<name><name>p_data</name><operator>-&gt;</operator><name>i_offset_size</name></name> <operator>+</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_length_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>/</operator> <name>i_entrysize</name> <operator>&lt;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_extent_count</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_extents</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_extent_count</name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_extent_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_index_size</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_extent_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_extent_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_offset_size</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_extent_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_extent_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<switch>switch<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_length_size</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_extent_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>MP4_GET8BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_items</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_extents</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_extent_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_iinf</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_versionpeek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_versionpeek</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_header</name> <init>= <expr><literal type="number">12</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator> <name><name>p_versionpeek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER_PARTIAL</name><argument_list>( <argument><expr><name>MP4_Box_data_iinf_t</name></expr></argument>, <argument><expr><name>i_header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>i_header</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iinf</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iinf</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_read</name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_remain</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>-</operator> <name>i_header</name></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>i_remain</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iinf</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_childbox</name> <init>= <expr><call><name>MP4_ReadBox</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_childbox</name> <operator>||</operator> <name>i_remain</name> <operator>&lt;</operator> <name><name>p_childbox</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_childbox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_iinf</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_BoxAddChild</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>p_childbox</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_remain</name> <operator>-=</operator> <name><name>p_childbox</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_infe</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_infe_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_infe</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_content_encoding</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_content_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_item_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_item_uri_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_infe</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_infe_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_infe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_infe_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_infe</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_protection_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_item_name</name></name> <operator>=</operator> <call><name>mp4_getstringz</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_content_type</name></name> <operator>=</operator> <call><name>mp4_getstringz</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_content_encoding</name></name> <operator>=</operator> <call><name>mp4_getstringz</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

</block_content>}</block>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_protection_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GETFOURCC</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>item_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_item_name</name></name> <operator>=</operator> <call><name>mp4_getstringz</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>item_type</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">'m'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_content_type</name></name> <operator>=</operator> <call><name>mp4_getstringz</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_content_encoding</name></name> <operator>=</operator> <call><name>mp4_getstringz</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>item_type</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'u'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'i'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>psz_item_uri_type</name></name> <operator>=</operator> <call><name>mp4_getstringz</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_pitm</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_pitm_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_pitm_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_pitm</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_item_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_ispe</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_ispe_t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_ispe_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ispe</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_FreeBox_ipma</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_data_ipma_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ipma</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_assocs</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_ipma</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_READBOX_ENTER</name><argument_list>( <argument><expr><name>MP4_Box_data_ipma_t</name></expr></argument>, <argument><expr><name>MP4_FreeBox_ipma</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_ipma_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_ipma</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET3BYTES</name><argument_list>( <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_read</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i_version</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary><operator>)</operator> <operator>&lt;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i_version</name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">5</literal></expr></else></ternary><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>&lt;</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET2BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_item_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>MP4_GET4BYTES</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_item_id</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_association_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>&lt;</operator>

<name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_association_count</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_assocs</name> <operator>=</operator>

<call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_assocs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator>

<name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_association_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_assocs</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_association_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_association_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_assocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_property_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_assocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>b_essential</name> <operator>=</operator>

<name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_assocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_property_index</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_assocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_property_index</name> <operator>&amp;=</operator> <literal type="number">0x7F</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_assocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_property_index</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_low</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_GET1BYTE</name><argument_list>( <argument><expr><name>i_low</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>p_assocs</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>i_property_index</name> <operator>|=</operator> <name>i_low</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>MP4_READBOX_EXIT</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_default</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>unknown</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_stsd</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mdia</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"../../../.."</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_hdlr</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_mdia</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p_mdia</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_mdia</name> <operator>||</operator>

<operator>(</operator><name>p_hdlr</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_mdia</name></expr></argument>, <argument><expr><literal type="string">"hdlr"</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>unknown</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_hdlr</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_hdlr</name><operator>-&gt;</operator><name>i_handler_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ATOM_soun</name></expr>:</case>

<return>return <expr><call><name>MP4_ReadBox_sample_soun</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ATOM_vide</name></expr>:</case>

<case>case <expr><name>ATOM_pict</name></expr>:</case> 

<return>return <expr><call><name>MP4_ReadBox_sample_vide</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ATOM_hint</name></expr>:</case>

<return>return <expr><call><name>MP4_ReadBox_sample_hint8</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>ATOM_text</name></expr>:</case>

<case>case <expr><name>ATOM_subt</name></expr>:</case>

<case>case <expr><name>ATOM_tx3g</name></expr>:</case>

<case>case <expr><name>ATOM_sbtl</name></expr>:</case>

<return>return <expr><call><name>MP4_ReadBox_sample_text</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"unknown handler type in stsd (incompletely loaded)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<label><name>unknown</name>:</label>

<if_stmt><if>if MP4_BOX_TYPE_ASCII<condition>()</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"unknown box type %4.4s (incompletely loaded)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>,

<argument><expr><literal type="string">"unknown box type c%3.3s (incompletely loaded)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>|=</operator> <name>BOX_FLAG_INCOMPLETE</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_ReadBox_uuid</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>CmpUUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TfrfBoxUUID</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>MP4_ReadBox_tfrf</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>CmpUUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>TfxdBoxUUID</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>MP4_ReadBox_tfxd</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>CmpUUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>XML360BoxUUID</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>MP4_ReadBox_XML360</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>CmpUUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>PS3DDSBoxUUID</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name> <operator>==</operator> <literal type="number">28</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>MP4_ReadBox_Binary</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Unknown uuid type box: "</literal>

<literal type="string">"%2.2x%2.2x%2.2x%2.2x-%2.2x%2.2x-%2.2x%2.2x-"</literal>

<literal type="string">"%2.2x%2.2x-%2.2x%2.2x%2.2x%2.2x%2.2x%2.2x"</literal></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_uuid</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"Unknown uuid type box"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_type</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>MP4_ReadBox_function</name> )<parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_parent</name></decl>;</decl_stmt> 

}</block> <decl><name><name>MP4_Box_Function</name> <index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>ATOM_moov</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_foov</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_trak</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_moov</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_trak</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_foov</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mdia</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_trak</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_moof</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_minf</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_mdia</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_stbl</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_minf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dinf</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_minf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dinf</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_edts</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_trak</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_udta</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_nmhd</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_minf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_hnti</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_rmra</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_moov</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_rmda</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_rmra</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tref</name></expr>, <expr><name>MP4_ReadBox_tref</name></expr>, <expr><name>ATOM_trak</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gmhd</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_minf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_mp4a</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_WMA2</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_in24</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_in32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_fl32</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_fl64</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_QDMC</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_QDM2</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_XiFL</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_wave</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_XiVs</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_ilst</name></expr>, <expr><name>MP4_ReadBox_ilst</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mvex</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_moov</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mvex</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_ftyp</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ftyp</name></expr>, <expr><name>MP4_ReadBox_ftyp</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_styp</name></expr>, <expr><name>MP4_ReadBox_ftyp</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_cmov</name></expr>, <expr><name>MP4_ReadBox_cmov</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mvhd</name></expr>, <expr><name>MP4_ReadBox_mvhd</name></expr>, <expr><name>ATOM_moov</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mvhd</name></expr>, <expr><name>MP4_ReadBox_mvhd</name></expr>, <expr><name>ATOM_foov</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tkhd</name></expr>, <expr><name>MP4_ReadBox_tkhd</name></expr>, <expr><name>ATOM_trak</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_load</name></expr>, <expr><name>MP4_ReadBox_load</name></expr>, <expr><name>ATOM_trak</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mdhd</name></expr>, <expr><name>MP4_ReadBox_mdhd</name></expr>, <expr><name>ATOM_mdia</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_hdlr</name></expr>, <expr><name>MP4_ReadBox_hdlr</name></expr>, <expr><name>ATOM_mdia</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_hdlr</name></expr>, <expr><name>MP4_ReadBox_hdlr</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_hdlr</name></expr>, <expr><name>MP4_ReadBox_hdlr</name></expr>, <expr><name>ATOM_minf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vmhd</name></expr>, <expr><name>MP4_ReadBox_vmhd</name></expr>, <expr><name>ATOM_minf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_smhd</name></expr>, <expr><name>MP4_ReadBox_smhd</name></expr>, <expr><name>ATOM_minf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_hmhd</name></expr>, <expr><name>MP4_ReadBox_hmhd</name></expr>, <expr><name>ATOM_minf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_alis</name></expr>, <expr><name>MP4_ReadBoxSkip</name></expr>, <expr><name>ATOM_dref</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_url</name></expr>, <expr><name>MP4_ReadBox_url</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_urn</name></expr>, <expr><name>MP4_ReadBox_urn</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dref</name></expr>, <expr><name>MP4_ReadBox_LtdContainer</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_stts</name></expr>, <expr><name>MP4_ReadBox_stts</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ctts</name></expr>, <expr><name>MP4_ReadBox_ctts</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_cslg</name></expr>, <expr><name>MP4_ReadBox_cslg</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_stsd</name></expr>, <expr><name>MP4_ReadBox_LtdContainer</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_stsz</name></expr>, <expr><name>MP4_ReadBox_stsz</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_stsc</name></expr>, <expr><name>MP4_ReadBox_stsc</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_stco</name></expr>, <expr><name>MP4_ReadBox_stco_co64</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_co64</name></expr>, <expr><name>MP4_ReadBox_stco_co64</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_stss</name></expr>, <expr><name>MP4_ReadBox_stss</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_stsh</name></expr>, <expr><name>MP4_ReadBox_stsh</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_stdp</name></expr>, <expr><name>MP4_ReadBox_stdp</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_elst</name></expr>, <expr><name>MP4_ReadBox_elst</name></expr>, <expr><name>ATOM_edts</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_cprt</name></expr>, <expr><name>MP4_ReadBox_cprt</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_esds</name></expr>, <expr><name>MP4_ReadBox_esds</name></expr>, <expr><name>ATOM_wave</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_esds</name></expr>, <expr><name>MP4_ReadBox_esds</name></expr>, <expr><name>ATOM_mp4a</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_esds</name></expr>, <expr><name>MP4_ReadBox_esds</name></expr>, <expr><name>ATOM_mp4v</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_esds</name></expr>, <expr><name>MP4_ReadBox_esds</name></expr>, <expr><name>ATOM_mp4s</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dcom</name></expr>, <expr><name>MP4_ReadBox_dcom</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dfLa</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_fLaC</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_cmvd</name></expr>, <expr><name>MP4_ReadBox_cmvd</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_av1C</name></expr>, <expr><name>MP4_ReadBox_av1C</name></expr>, <expr><name>ATOM_av01</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_avcC</name></expr>, <expr><name>MP4_ReadBox_avcC</name></expr>, <expr><name>ATOM_avc1</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_avcC</name></expr>, <expr><name>MP4_ReadBox_avcC</name></expr>, <expr><name>ATOM_avc3</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_hvcC</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_jpeC</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_av1C</name></expr>, <expr><name>MP4_ReadBox_av1C</name></expr>, <expr><name>ATOM_ipco</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_vpcC</name></expr>, <expr><name>MP4_ReadBox_vpcC</name></expr>, <expr><name>ATOM_vp08</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vpcC</name></expr>, <expr><name>MP4_ReadBox_vpcC</name></expr>, <expr><name>ATOM_vp09</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vpcC</name></expr>, <expr><name>MP4_ReadBox_vpcC</name></expr>, <expr><name>ATOM_vp10</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_SmDm</name></expr>, <expr><name>MP4_ReadBox_SmDm</name></expr>, <expr><name>ATOM_vpcC</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_mdcv</name></expr>, <expr><name>MP4_ReadBox_SmDm</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_CoLL</name></expr>, <expr><name>MP4_ReadBox_CoLL</name></expr>, <expr><name>ATOM_vpcC</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_clli</name></expr>, <expr><name>MP4_ReadBox_CoLL</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_dac3</name></expr>, <expr><name>MP4_ReadBox_dac3</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dec3</name></expr>, <expr><name>MP4_ReadBox_dec3</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dvc1</name></expr>, <expr><name>MP4_ReadBox_dvc1</name></expr>, <expr><name>ATOM_vc1</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_fiel</name></expr>, <expr><name>MP4_ReadBox_fiel</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_glbl</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_enda</name></expr>, <expr><name>MP4_ReadBox_enda</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_iods</name></expr>, <expr><name>MP4_ReadBox_iods</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_pasp</name></expr>, <expr><name>MP4_ReadBox_pasp</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_btrt</name></expr>, <expr><name>MP4_ReadBox_btrt</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_keys</name></expr>, <expr><name>MP4_ReadBox_keys</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_colr</name></expr>, <expr><name>MP4_ReadBox_colr</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_irot</name></expr>, <expr><name>MP4_ReadBox_irot</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_vCtH</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_wave</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vCtC</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_wave</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vCtd</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_wave</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_fCtS</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_wave</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sbgp</name></expr>, <expr><name>MP4_ReadBox_sbgp</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sbgp</name></expr>, <expr><name>MP4_ReadBox_sbgp</name></expr>, <expr><name>ATOM_traf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sgpd</name></expr>, <expr><name>MP4_ReadBox_sgpd</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sgpd</name></expr>, <expr><name>MP4_ReadBox_sgpd</name></expr>, <expr><name>ATOM_traf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_pnot</name></expr>, <expr><name>MP4_ReadBox_pnot</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_pict</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_PICT</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_thum</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mdat</name></expr>, <expr><name>MP4_ReadBoxSkip</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_skip</name></expr>, <expr><name>MP4_ReadBoxSkip</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_free</name></expr>, <expr><name>MP4_ReadBoxSkip</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wide</name></expr>, <expr><name>MP4_ReadBoxSkip</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_binm</name></expr>, <expr><name>MP4_ReadBoxSkip</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tx3g</name></expr>, <expr><name>MP4_ReadBox_sample_text</name></expr>, <expr><name>ATOM_sbtl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tx3g</name></expr>, <expr><name>MP4_ReadBox_sample_text</name></expr>, <expr><name>ATOM_text</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_c608</name></expr>, <expr><name>MP4_ReadBox_sample_clcp</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vttc</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_wvtt</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_payl</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_vttc</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_soun</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_agsm</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ac3</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_AC3</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_eac3</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_fLaC</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_lpcm</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ms02</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ms11</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ms55</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM__mp3</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mp4a</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_twos</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sowt</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_QDMC</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_QDM2</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ima4</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_IMA4</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dvi</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_alaw</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ulaw</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_MAC3</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_MAC6</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_Qclp</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_samr</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sawb</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_OggS</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_alac</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_WMA2</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_wma</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_Opus</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_chan</name></expr>, <expr><name>MP4_ReadBox_stsdext_chan</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_WMA2</name></expr>, <expr><name>MP4_ReadBox_WMA2</name></expr>, <expr><name>ATOM_wave</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_dOps</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_Opus</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_wfex</name></expr>, <expr><name>MP4_ReadBox_WMA2</name></expr>, <expr><name>ATOM_wma</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_raw</name></expr>, <expr><name>MP4_ReadBox_default</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_drmi</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vide</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mp4v</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_SVQ1</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_SVQ3</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ZyGo</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_DIVX</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_XVID</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_h263</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_s263</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_cvid</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_3IV1</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_3iv1</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_3IV2</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_3iv2</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_3IVD</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_3ivd</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_3VID</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_3vid</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_FFV1</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mjpa</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mjpb</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_qdrw</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mp2v</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_hdv2</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_WMV3</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mjqt</name></expr>, <expr><name>MP4_ReadBox_default</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_mjht</name></expr>, <expr><name>MP4_ReadBox_default</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dvc</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dvp</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dv5n</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_dv5p</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_VP31</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vp31</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_h264</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_jpeg</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vc1</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_av01</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_avc1</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_avc3</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_rrtp</name></expr>, <expr><name>MP4_ReadBox_sample_hint8</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_yv12</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_yuv2</name></expr>, <expr><name>MP4_ReadBox_sample_vide</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_strf</name></expr>, <expr><name>MP4_ReadBox_strf</name></expr>, <expr><name>ATOM_WVC1</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_strf</name></expr>, <expr><name>MP4_ReadBox_strf</name></expr>, <expr><name>ATOM_H264</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_strf</name></expr>, <expr><name>MP4_ReadBox_strf</name></expr>, <expr><name>ATOM_WMV3</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_ASF</name></expr> , <expr><name>MP4_ReadBox_ASF</name></expr>, <expr><name>ATOM_WMV3</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_ASF</name></expr> , <expr><name>MP4_ReadBox_ASF</name></expr>, <expr><name>ATOM_wave</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_mp4s</name></expr>, <expr><name>MP4_ReadBox_sample_mp4s</name></expr>, <expr><name>ATOM_stsd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_hint</name></expr>, <expr><name>MP4_ReadBox_default</name></expr>, <expr><name>ATOM_stbl</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_rtp</name></expr>, <expr><name>MP4_ReadBox_rtp</name></expr>, <expr><name>ATOM_hnti</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sdp</name></expr>, <expr><name>MP4_ReadBox_sdp</name></expr>, <expr><name>ATOM_hnti</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tims</name></expr>, <expr><name>MP4_ReadBox_tims</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tsro</name></expr>, <expr><name>MP4_ReadBox_tsro</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tssy</name></expr>, <expr><name>MP4_ReadBox_tssy</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_rdrf</name></expr>, <expr><name>MP4_ReadBox_rdrf</name></expr>, <expr><name>ATOM_rmda</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_rmdr</name></expr>, <expr><name>MP4_ReadBox_rmdr</name></expr>, <expr><name>ATOM_rmda</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_rmqu</name></expr>, <expr><name>MP4_ReadBox_rmqu</name></expr>, <expr><name>ATOM_rmda</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_rmvc</name></expr>, <expr><name>MP4_ReadBox_rmvc</name></expr>, <expr><name>ATOM_rmda</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_drms</name></expr>, <expr><name>MP4_ReadBox_sample_soun</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sinf</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_schi</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_user</name></expr>, <expr><name>MP4_ReadBox_drms</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_key</name></expr>, <expr><name>MP4_ReadBox_drms</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_iviv</name></expr>, <expr><name>MP4_ReadBox_drms</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_priv</name></expr>, <expr><name>MP4_ReadBox_drms</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_frma</name></expr>, <expr><name>MP4_ReadBox_frma</name></expr>, <expr><name>ATOM_sinf</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_frma</name></expr>, <expr><name>MP4_ReadBox_frma</name></expr>, <expr><name>ATOM_wave</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_skcr</name></expr>, <expr><name>MP4_ReadBox_skcr</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9ART</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9alb</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9cmt</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9com</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9cpy</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9day</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9des</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9enc</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9gen</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9grp</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9lyr</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9nam</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9too</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9trk</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9wrt</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_aART</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_atID</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_cnID</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_covr</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_desc</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_disk</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_flvr</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gnre</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_rtng</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_trkn</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_xid_</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gshh</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_gspm</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gspu</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gssd</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gsst</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gstd</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ITUN</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_purl</name></expr>, <expr><name>MP4_ReadBox_Metadata</name></expr>, <expr><name>ATOM_ilst</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0x40PRM</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0x40PRQ</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9ART</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9alb</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9ard</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9arg</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9aut</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9cak</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9cmt</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9con</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9com</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9cpy</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9day</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9des</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9dir</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9dis</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9dsa</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9fmt</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9gen</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9grp</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9hst</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9inf</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9isr</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9lab</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9lal</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9lnt</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9lyr</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9mak</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9mal</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9mod</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9nam</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9ope</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9phg</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9PRD</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9prd</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9prf</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9pub</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9req</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9sne</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9snm</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9sol</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9src</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9st3</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9swr</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9thx</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9too</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9trk</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9url</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9wrn</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9xpd</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9xyz</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_chpl</name></expr>, <expr><name>MP4_ReadBox_chpl</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_MCPS</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_name</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vndr</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_SDLN</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_HMMT</name></expr>, <expr><name>MP4_ReadBox_HMMT</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_tsel</name></expr>, <expr><name>MP4_ReadBox_tsel</name></expr>, <expr><name>ATOM_udta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_meta</name></expr>, <expr><name>MP4_ReadBox_meta</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ID32</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_data</name></expr>, <expr><name>MP4_ReadBox_data</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_mean</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_ITUN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_name</name></expr>, <expr><name>MP4_ReadBox_Binary</name></expr>, <expr><name>ATOM_ITUN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_traf</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_moof</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mfra</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mfhd</name></expr>, <expr><name>MP4_ReadBox_mfhd</name></expr>, <expr><name>ATOM_moof</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sidx</name></expr>, <expr><name>MP4_ReadBox_sidx</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tfhd</name></expr>, <expr><name>MP4_ReadBox_tfhd</name></expr>, <expr><name>ATOM_traf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_trun</name></expr>, <expr><name>MP4_ReadBox_trun</name></expr>, <expr><name>ATOM_traf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tfdt</name></expr>, <expr><name>MP4_ReadBox_tfdt</name></expr>, <expr><name>ATOM_traf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_trex</name></expr>, <expr><name>MP4_ReadBox_trex</name></expr>, <expr><name>ATOM_mvex</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mehd</name></expr>, <expr><name>MP4_ReadBox_mehd</name></expr>, <expr><name>ATOM_mvex</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sdtp</name></expr>, <expr><name>MP4_ReadBox_sdtp</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_tfra</name></expr>, <expr><name>MP4_ReadBox_tfra</name></expr>, <expr><name>ATOM_mfra</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_mfro</name></expr>, <expr><name>MP4_ReadBox_mfro</name></expr>, <expr><name>ATOM_mfra</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_uuid</name></expr>, <expr><name>MP4_ReadBox_uuid</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_st3d</name></expr>, <expr><name>MP4_ReadBox_st3d</name></expr>, <expr><name>ATOM_avc1</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_st3d</name></expr>, <expr><name>MP4_ReadBox_st3d</name></expr>, <expr><name>ATOM_mp4v</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sv3d</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_avc1</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_sv3d</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_mp4v</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_proj</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_sv3d</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_prhd</name></expr>, <expr><name>MP4_ReadBox_prhd</name></expr>, <expr><name>ATOM_proj</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_equi</name></expr>, <expr><name>MP4_ReadBox_equi</name></expr>, <expr><name>ATOM_proj</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_cbmp</name></expr>, <expr><name>MP4_ReadBox_cbmp</name></expr>, <expr><name>ATOM_proj</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_SA3D</name></expr>, <expr><name>MP4_ReadBox_SA3D</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_idat</name></expr>, <expr><name>MP4_ReadBoxSkip</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_iloc</name></expr>, <expr><name>MP4_ReadBox_iloc</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_iinf</name></expr>, <expr><name>MP4_ReadBox_iinf</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_infe</name></expr>, <expr><name>MP4_ReadBox_infe</name></expr>, <expr><name>ATOM_iinf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_iref</name></expr>, <expr><name>MP4_ReadBox_iref</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_pitm</name></expr>, <expr><name>MP4_ReadBox_pitm</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_iprp</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_meta</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ipco</name></expr>, <expr><name>MP4_ReadBoxContainer</name></expr>, <expr><name>ATOM_iprp</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ispe</name></expr>, <expr><name>MP4_ReadBox_ispe</name></expr>, <expr><name>ATOM_ipco</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_ipma</name></expr>, <expr><name>MP4_ReadBox_ipma</name></expr>, <expr><name>ATOM_iprp</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>MP4_ReadBox_default</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MP4_Box_Read_Specific</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>MP4_Box_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_parent</name> <operator>&amp;&amp;</operator>

<name>p_father</name> <operator>&amp;&amp;</operator> <name><name>p_father</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name><name>MP4_Box_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_parent</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>MP4_Box_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>==</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>)</operator><operator>||</operator>

<operator>(</operator> <name><name>MP4_Box_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name><name>MP4_Box_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>MP4_ReadBox_function</name><operator>)</operator><operator>(</operator> <name>p_stream</name><operator>,</operator> <name>p_box</name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_ReadBoxAllocateCheck</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>MP4_Box_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name>p_box</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>MP4_PeekBoxHeader</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"cannot read one box"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_father</name> <operator>&amp;&amp;</operator> <name><name>p_father</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_father</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_father</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"out of bound child"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"found an empty box (null size)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name> <operator>=</operator> <name>p_father</name></expr>;</expr_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_ReadBoxUsing</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type>(<modifier>*</modifier><name>MP4_ReadBox_function</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><call><name>MP4_ReadBoxAllocateCheck</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_father</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>MP4_ReadBox_function</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_end</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_ReadBox</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><call><name>MP4_ReadBoxAllocateCheck</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_father</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>MP4_Box_Read_Specific</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>p_father</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_end</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_end</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MP4_Box_t</name> <modifier>*</modifier></type> <name>MP4_BoxNew</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>MP4_Box_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>p_box</name> <operator>!=</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_box</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>MP4_BoxFree</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_child</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<for>for<control>( <init><expr><name>p_child</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</init> <condition><expr><name>p_child</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>pf_free</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_box</name><operator>-&gt;</operator><name>pf_free</name></name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_payload</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_BoxGetNextChunk</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_fakeroot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_tmp_box</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_fakeroot</name> <operator>=</operator> <call><name>MP4_BoxNew</name><argument_list>( <argument><expr><name>ATOM_root</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_fakeroot</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_fakeroot</name><operator>-&gt;</operator><name>i_shortsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ATOM_moov</name></expr>, <expr><name>ATOM_moof</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_fakeroot</name></expr></argument>, <argument><expr><name>stoplist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tmp_box</name> <operator>=</operator> <name><name>p_fakeroot</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_tmp_box</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_fakeroot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <while>while<condition>( <expr><name>p_tmp_box</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fakeroot</name><operator>-&gt;</operator><name>i_size</name></name> <operator>+=</operator> <name><name>p_tmp_box</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_tmp_box</name> <operator>=</operator> <name><name>p_tmp_box</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while></block_content></block></else></if_stmt>

<return>return <expr><name>p_fakeroot</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_BoxGetRoot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_vroot</name> <init>= <expr><call><name>MP4_BoxNew</name><argument_list>( <argument><expr><name>ATOM_root</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_vroot</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_vroot</name><operator>-&gt;</operator><name>i_shortsize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_vroot</name><operator>-&gt;</operator><name>i_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ATOM_moov</name></expr>, <expr><name>ATOM_mdat</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><name>stoplist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<if_stmt><if>if<condition>( <expr><name>i_result</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><literal type="string">"moov"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_seekable</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name> <operator>||</operator> <operator>!</operator><name>b_seekable</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"no moov before mdat and the stream is not seekable"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ATOM_moov</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><name>stoplist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_result</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_vroot</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>MP4_BoxCount</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><literal type="string">"moov/mvex"</literal></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ATOM_sidx</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>excludelist</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>ATOM_moof</name></expr>, <expr><name>ATOM_mdat</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MP4_ReadBoxContainerChildrenIndexed</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><name>stoplist</name></expr></argument>, <argument><expr><name>excludelist</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_vroot</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name>MP4_ReadBoxContainerChildren</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_result</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_moov</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_cmov</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>(</operator> <name>p_moov</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><literal type="string">"moov"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>p_cmov</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><literal type="string">"moov/cmov"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>(</operator> <name>p_moov</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><literal type="string">"foov"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>p_cmov</name> <operator>=</operator> <call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument>, <argument><expr><literal type="string">"foov/cmov"</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_moov</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>ATOM_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_moov</name> <operator>=</operator> <name><name>p_cmov</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmov</name><operator>-&gt;</operator><name>p_moov</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cmov</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_cmov</name><operator>-&gt;</operator><name>p_moov</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_moov</name><operator>-&gt;</operator><name>p_father</name></name> <operator>=</operator> <name>p_vroot</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_moov</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name><name>p_vroot</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_vroot</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>p_moov</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_vroot</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>MP4_BoxFree</name><argument_list>( <argument><expr><name>p_vroot</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_Seek</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_BoxDumpStructure_Internal</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>i_level</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_displayedtype</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <call><name>MP4_BOX_TYPE_ASCII</name><argument_list>()</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_displayedtype</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <literal type="char">'c'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_level</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"dumping root Box \"%4.4s\""</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_displayedtype</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_level</name> <operator>&gt;=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i_level</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal><operator>*</operator><name>i_level</name></expr></argument>,

<argument><expr><literal type="string">"+ %4.4s size %"</literal><name>PRIu64</name><literal type="string">" offset %"</literal><name>PRIu64</name><literal type="string">"%s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>i_displayedtype</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_size</name></name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_pos</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_box</name><operator>-&gt;</operator><name>e_flags</name></name> <operator>&amp;</operator> <name>BOX_FLAG_INCOMPLETE</name></expr> ?</condition><then> <expr><literal type="string">" (\?\?\?\?)"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_child</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_BoxDumpStructure_Internal</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_child</name></expr></argument>, <argument><expr><name>i_level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>MP4_BoxDumpStructure</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_BoxDumpStructure_Internal</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>get_token</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_token</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_number</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl> ;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name><name>ppsz_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppsz_token</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strcspn</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_path</name></expr></argument>, <argument><expr><literal type="string">"/["</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_len</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>ppsz_path</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_token</name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_path</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><operator>*</operator><name>ppsz_token</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_path</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><operator>*</operator><name>ppsz_path</name> <operator>==</operator> <literal type="char">'['</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppsz_path</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_number</name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>*</operator><operator>*</operator><name>ppsz_path</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>*</operator><name>ppsz_path</name> <operator>!=</operator> <literal type="char">']'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppsz_path</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>*</operator><operator>*</operator><name>ppsz_path</name> <operator>==</operator> <literal type="char">']'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppsz_path</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while<condition>( <expr><operator>*</operator><operator>*</operator><name>ppsz_path</name> <operator>==</operator> <literal type="char">'/'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppsz_path</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MP4_BoxGet_Internal</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dup</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_path</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_token</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vasprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_path</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_path</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_path</name> <operator>||</operator> <operator>!</operator><name><name>psz_path</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_dup</name> <operator>=</operator> <name>psz_path</name></expr>;</expr_stmt> 

<for>for<control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_number</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>get_token</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_number</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error_box</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_token</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_result</name> <operator>=</operator> <name>p_box</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else

if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument>, <argument><expr><literal type="string">"/"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><name>p_box</name> <operator>&amp;&amp;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_root</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error_box</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

</block_content>}</block></if>

<if type="elseif">else

if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument>, <argument><expr><literal type="string">".."</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error_box</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else

if<condition>( <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_fourcc</name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>psz_token</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>psz_token</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>psz_token</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>psz_token</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error_box</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>i_fourcc</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_number</name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_number</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<if type="elseif">else

if<condition>( <expr><operator>*</operator><name>psz_token</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_box</name></expr> )</condition>

<block>{<block_content>

<goto>goto <name>error_box</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_number</name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_number</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<goto>goto <name>error_box</name>;</goto>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

<label><name>error_box</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_token</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_result</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<macro><name>VLC_FORMAT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<function><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_BoxGet</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_result</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_BoxGet_Internal</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_result</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return<expr><operator>(</operator> <operator>(</operator><name>MP4_Box_t</name> <operator>*</operator><operator>)</operator> <name>p_result</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<macro><name>VLC_FORMAT</name><argument_list>(<argument><literal type="number">2</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>

<function><type><name>unsigned</name></type> <name>MP4_BoxCount</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_result</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MP4_BoxGet_Internal</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_result</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>psz_fmt</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_result</name></expr> )</condition>

<block>{<block_content>

<return>return<expr><operator>(</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_next</name> <operator>=</operator> <name><name>p_result</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</init> <condition><expr><name>p_next</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_next</name> <operator>=</operator> <name><name>p_next</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_next</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name><name>p_result</name><operator>-&gt;</operator><name>i_type</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return<expr><operator>(</operator> <name>i_count</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

</unit>
