<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mp4\libmp4.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"coreaudio.h"</cpp:file></cpp:include>

<typedef>typedef <type><name>int64_t</name></type> <name>stime_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BLOCK16x16</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_3gp4</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'g', 'p', '4' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_3gp5</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'g', 'p', '5' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_3gp6</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'g', 'p', '6' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_3gp7</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'g', 'p', '7' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_isml</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 's', 'm', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_isom</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 's', 'o', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_iso2</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 's', 'o', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_iso6</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 's', 'o', '6' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_qt__</name></cpp:macro> <cpp:value>VLC_FOURCC( 'q', 't', ' ', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_f4v</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', '4', 'v', ' ' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_dash</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'a', 's', 'h' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_smoo</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'm', 'o', 'o' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_mp41</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'p', '4', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_av01</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', '0', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_avc1</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', 'c', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_M4A</name></cpp:macro> <cpp:value>VLC_FOURCC( 'M', '4', 'A', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_piff</name></cpp:macro> <cpp:value>VLC_FOURCC( 'p', 'i', 'f', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_mif1</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'i', 'f', '1' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_msf1</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 's', 'f', '1' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_heic</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'e', 'i', 'c' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_heix</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'e', 'i', 'x' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_hevc</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'e', 'v', 'c' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_hevx</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'e', 'v', 'x' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_jpeg</name></cpp:macro> <cpp:value>VLC_FOURCC( 'j', 'p', 'e', 'g' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_jpgs</name></cpp:macro> <cpp:value>VLC_FOURCC( 'j', 'p', 'g', 's' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_avci</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', 'c', 'i' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_avcs</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', 'c', 's' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_avif</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', 'i', 'f' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BRAND_avis</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', 'i', 's' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_root</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'o', 'o', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_uuid</name></cpp:macro> <cpp:value>VLC_FOURCC( 'u', 'u', 'i', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ftyp</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 't', 'y', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_moov</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'o', 'o', 'v' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_foov</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 'o', 'o', 'v' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_cmov</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'm', 'o', 'v' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dcom</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'c', 'o', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_cmvd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'm', 'v', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_styp</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 'y', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_moof</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'o', 'o', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mdat</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'd', 'a', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_skip</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'k', 'i', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_free</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 'r', 'e', 'e' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_udta</name></cpp:macro> <cpp:value>VLC_FOURCC( 'u', 'd', 't', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_wide</name></cpp:macro> <cpp:value>VLC_FOURCC( 'w', 'i', 'd', 'e' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_binm</name></cpp:macro> <cpp:value>VLC_FOURCC( 0x82, 0x82, 0x7f, 0x7d )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_pnot</name></cpp:macro> <cpp:value>VLC_FOURCC( 'p', 'n', 'o', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_pict</name></cpp:macro> <cpp:value>VLC_FOURCC( 'p', 'i', 'c', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_PICT</name></cpp:macro> <cpp:value>VLC_FOURCC( 'P', 'I', 'C', 'T' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_data</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'a', 't', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_trak</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'r', 'a', 'k' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mvhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'v', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tkhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'k', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tref</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'r', 'e', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_load</name></cpp:macro> <cpp:value>VLC_FOURCC( 'l', 'o', 'a', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mdia</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'd', 'i', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mdhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'd', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_hdlr</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'd', 'l', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_minf</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'i', 'n', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vmhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'm', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_smhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'm', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_hmhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'm', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dinf</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'i', 'n', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_url</name></cpp:macro> <cpp:value>VLC_FOURCC( 'u', 'r', 'l', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_urn</name></cpp:macro> <cpp:value>VLC_FOURCC( 'u', 'r', 'n', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dref</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'r', 'e', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stbl</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 'b', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stts</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 't', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ctts</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 't', 't', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_cslg</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 's', 'l', 'g' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stsd</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 's', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stsz</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 's', 'z' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stz2</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 'z', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stsc</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 's', 'c' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stco</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 'c', 'o' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_co64</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'o', '6', '4' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sbgp</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'b', 'g', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sgpd</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'g', 'p', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stss</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 's', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stsh</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 's', 'h' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_stdp</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 'd', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_edts</name></cpp:macro> <cpp:value>VLC_FOURCC( 'e', 'd', 't', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_elst</name></cpp:macro> <cpp:value>VLC_FOURCC( 'e', 'l', 's', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mvex</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'v', 'e', 'x' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sdtp</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'd', 't', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_trex</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'r', 'e', 'x' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mehd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'e', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mfhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'f', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_traf</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'r', 'a', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sidx</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'i', 'd', 'x' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tfhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'f', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tfdt</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'f', 'd', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_trun</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'r', 'u', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_cprt</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'p', 'r', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_iods</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 'o', 'd', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_pasp</name></cpp:macro> <cpp:value>VLC_FOURCC( 'p', 'a', 's', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mfra</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'f', 'r', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mfro</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'f', 'r', 'o' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tfra</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'f', 'r', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_keys</name></cpp:macro> <cpp:value>VLC_FOURCC( 'k', 'e', 'y', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_st3d</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', '3', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sv3d</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'v', '3', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_proj</name></cpp:macro> <cpp:value>VLC_FOURCC( 'p', 'r', 'o', 'j' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_prhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'p', 'r', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_cbmp</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'b', 'm', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_equi</name></cpp:macro> <cpp:value>VLC_FOURCC( 'e', 'q', 'u', 'i' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_nmhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'n', 'm', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mp2v</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'p', '2', 'v' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mp4v</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'p', '4', 'v' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mp4a</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'p', '4', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mp4s</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'p', '4', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vide</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'i', 'd', 'e' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_soun</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'o', 'u', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_hint</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'i', 'n', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_hdv2</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'd', 'v', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rrtp</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'r', 't', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_hnti</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'n', 't', 'i' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rtp</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 't', 'p', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_btrt</name></cpp:macro> <cpp:value>VLC_FOURCC( 'b', 't', 'r', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sdp</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'd', 'p', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tims</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'i', 'm', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tsro</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 's', 'r', 'o' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tssy</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 's', 's', 'y' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_esds</name></cpp:macro> <cpp:value>VLC_FOURCC( 'e', 's', 'd', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_lpcm</name></cpp:macro> <cpp:value>VLC_FOURCC( 'l', 'p', 'c', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM__mp3</name></cpp:macro> <cpp:value>VLC_FOURCC( '.', 'm', 'p', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ms02</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 's', 0x0, 0x02 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ms11</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 's', 0x0, 0x11 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ms55</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 's', 0x0, 0x55 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_twos</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'w', 'o', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sowt</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'o', 'w', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_QDMC</name></cpp:macro> <cpp:value>VLC_FOURCC( 'Q', 'D', 'M', 'C' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_QDM2</name></cpp:macro> <cpp:value>VLC_FOURCC( 'Q', 'D', 'M', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_XiFL</name></cpp:macro> <cpp:value>VLC_FOURCC( 'X', 'i', 'F', 'L' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_XiVs</name></cpp:macro> <cpp:value>VLC_FOURCC( 'X', 'i', 'V', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ima4</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 'm', 'a', '4' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_IMA4</name></cpp:macro> <cpp:value>VLC_FOURCC( 'I', 'M', 'A', '4' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dvi</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'v', 'i', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_MAC3</name></cpp:macro> <cpp:value>VLC_FOURCC( 'M', 'A', 'C', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_MAC6</name></cpp:macro> <cpp:value>VLC_FOURCC( 'M', 'A', 'C', '6' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_alaw</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'l', 'a', 'w' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ulaw</name></cpp:macro> <cpp:value>VLC_FOURCC( 'u', 'l', 'a', 'w' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_Qclp</name></cpp:macro> <cpp:value>VLC_FOURCC( 'Q', 'c', 'l', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_samr</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'a', 'm', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sawb</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'a', 'w', 'b' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_OggS</name></cpp:macro> <cpp:value>VLC_FOURCC( 'O', 'g', 'g', 'S' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_agsm</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'g', 's', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_alac</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'l', 'a', 'c' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_AC3</name></cpp:macro> <cpp:value>VLC_FOURCC( 'A', 'C', '-', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ac3</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'c', '-', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_eac3</name></cpp:macro> <cpp:value>VLC_FOURCC( 'e', 'c', '-', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dac3</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'a', 'c', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dec3</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'e', 'c', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ddts</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'd', 't', 's' )</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dtsc</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 't', 's', 'c' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dtsh</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 't', 's', 'h' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dtsl</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 't', 's', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dtse</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 't', 's', 'e' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dtsm</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 't', 's', '-' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dtsp</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 't', 's', '+' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vc1</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'c', '-', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dvc1</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'v', 'c', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_WMA2</name></cpp:macro> <cpp:value>VLC_FOURCC( 'W', 'M', 'A', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_wma</name></cpp:macro> <cpp:value>VLC_FOURCC( 'w', 'm', 'a', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_enda</name></cpp:macro> <cpp:value>VLC_FOURCC( 'e', 'n', 'd', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_gnre</name></cpp:macro> <cpp:value>VLC_FOURCC( 'g', 'n', 'r', 'e' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_trkn</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'r', 'k', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_chan</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'h', 'a', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_in24</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 'n', '2', '4' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_in32</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 'n', '3', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_fl32</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 'l', '3', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_fl64</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 'l', '6', '4' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_Opus</name></cpp:macro> <cpp:value>VLC_FOURCC( 'O', 'p', 'u', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_fLaC</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 'L', 'a', 'C' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dfLa</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'f', 'L', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_fCtS</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 'C', 't', 'S' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vCtH</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'C', 't', 'H' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vCtC</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'C', 't', 'C' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vCtd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'C', 't', '#' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_zlib</name></cpp:macro> <cpp:value>VLC_FOURCC( 'z', 'l', 'i', 'b' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_SVQ1</name></cpp:macro> <cpp:value>VLC_FOURCC( 'S', 'V', 'Q', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_SVQ3</name></cpp:macro> <cpp:value>VLC_FOURCC( 'S', 'V', 'Q', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ZyGo</name></cpp:macro> <cpp:value>VLC_FOURCC( 'Z', 'y', 'G', 'o' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_3IV1</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'I', 'V', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_3iv1</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'i', 'v', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_3IV2</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'I', 'V', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_3iv2</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'i', 'v', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_3IVD</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'I', 'V', 'D' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_3ivd</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'i', 'v', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_3VID</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'V', 'I', 'D' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_3vid</name></cpp:macro> <cpp:value>VLC_FOURCC( '3', 'v', 'i', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_FFV1</name></cpp:macro> <cpp:value>VLC_FOURCC( 'F', 'F', 'V', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_h263</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', '2', '6', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_s263</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', '2', '6', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_DIVX</name></cpp:macro> <cpp:value>VLC_FOURCC( 'D', 'I', 'V', 'X' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_XVID</name></cpp:macro> <cpp:value>VLC_FOURCC( 'X', 'V', 'I', 'D' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_cvid</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'v', 'i', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mjpa</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'j', 'p', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mjpb</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'j', 'q', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mjqt</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'j', 'h', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mjht</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'j', 'p', 'b' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_VP31</name></cpp:macro> <cpp:value>VLC_FOURCC( 'V', 'P', '3', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vp31</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'p', '3', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_h264</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', '2', '6', '4' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_H264</name></cpp:macro> <cpp:value>VLC_FOURCC( 'H', '2', '6', '4' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_qdrw</name></cpp:macro> <cpp:value>VLC_FOURCC( 'q', 'd', 'r', 'w' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vp08</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'p', '0', '8' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vp09</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'p', '0', '9' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vp10</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'p', '1', '0' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_WMV3</name></cpp:macro> <cpp:value>VLC_FOURCC( 'W', 'M', 'V', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_WVC1</name></cpp:macro> <cpp:value>VLC_FOURCC( 'W', 'V', 'C', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_av01</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', '0', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_avc1</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', 'c', '1' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_avc3</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', 'c', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_av1C</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', '1', 'C' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_avcC</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'v', 'c', 'C' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vpcC</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'p', 'c', 'C' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_m4ds</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', '4', 'd', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_fiel</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 'i', 'e', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_glbl</name></cpp:macro> <cpp:value>VLC_FOURCC( 'g', 'l', 'b', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_hvcC</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'v', 'c', 'C' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_jpeC</name></cpp:macro> <cpp:value>VLC_FOURCC( 'j', 'p', 'e', 'C' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dvc</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'v', 'c', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dvp</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'v', 'p', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dv5n</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'v', '5', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dv5p</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'v', '5', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_raw</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'a', 'w', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dOps</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'O', 'p', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_wfex</name></cpp:macro> <cpp:value>VLC_FOURCC( 'w', 'f', 'e', 'x' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_jpeg</name></cpp:macro> <cpp:value>VLC_FOURCC( 'j', 'p', 'e', 'g' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_yv12</name></cpp:macro> <cpp:value>VLC_FOURCC( 'y', 'v', '1', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_yuv2</name></cpp:macro> <cpp:value>VLC_FOURCC( 'y', 'u', 'v', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rmra</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'm', 'r', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rmda</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'm', 'd', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rdrf</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'd', 'r', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rmdr</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'm', 'd', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rmvc</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'm', 'v', 'c' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rmcd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'm', 'c', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rmqu</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 'm', 'q', 'u' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_alis</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'l', 'i', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_gmhd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'g', 'm', 'h', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_wave</name></cpp:macro> <cpp:value>VLC_FOURCC( 'w', 'a', 'v', 'e' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_strf</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 't', 'r', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_drms</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'r', 'm', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sinf</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'i', 'n', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_schi</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'c', 'h', 'i' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_user</name></cpp:macro> <cpp:value>VLC_FOURCC( 'u', 's', 'e', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_key</name></cpp:macro> <cpp:value>VLC_FOURCC( 'k', 'e', 'y', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_iviv</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 'v', 'i', 'v' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mean</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'e', 'a', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_name</name></cpp:macro> <cpp:value>VLC_FOURCC( 'n', 'a', 'm', 'e' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_priv</name></cpp:macro> <cpp:value>VLC_FOURCC( 'p', 'r', 'i', 'v' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_drmi</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'r', 'm', 'i' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_frma</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 'r', 'm', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_skcr</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'k', 'c', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ASF</name></cpp:macro> <cpp:value>VLC_FOURCC( 'A', 'S', 'F', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_text</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'e', 'x', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tx3g</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'x', '3', 'g' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_subp</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'u', 'b', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_subt</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'u', 'b', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_sbtl</name></cpp:macro> <cpp:value>VLC_FOURCC( 's', 'b', 't', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_clcp</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'l', 'c', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_c608</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', '6', '0', '8' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_c708</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', '7', '0', '8' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_wvtt</name></cpp:macro> <cpp:value>VLC_FOURCC( 'w', 'v', 't', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vttc</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 't', 't', 'c' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_payl</name></cpp:macro> <cpp:value>VLC_FOURCC( 'p', 'a', 'y', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9nam</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'n', 'a', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9aut</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'a', 'u', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9cpy</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'c', 'p', 'y' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9inf</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'i', 'n', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9isr</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'i', 's', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9lab</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'l', 'a', 'b' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9lal</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'l', 'a', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9ART</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'A', 'R', 'T' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9des</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'd', 'e', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9dir</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'd', 'i', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9cmt</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'c', 'm', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9req</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'r', 'e', 'q' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9day</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'd', 'a', 'y' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9fmt</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'f', 'm', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9prd</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'p', 'r', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9prf</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'p', 'r', 'f' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9src</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 's', 'r', 'c' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9alb</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'a', 'l', 'b' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9dis</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'd', 'i', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9enc</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'e', 'n', 'c' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9trk</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 't', 'r', 'k' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9url</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'u', 'r', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9dsa</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'd', 's', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9hst</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'h', 's', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9ope</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'o', 'p', 'e' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9wrt</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'w', 'r', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9com</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'c', 'o', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9gen</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'g', 'e', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9too</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 't', 'o', 'o' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9wrn</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'w', 'r', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9swr</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 's', 'w', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9mak</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'm', 'a', 'k' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9mal</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'm', 'a', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9mod</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'm', 'o', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9PRD</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'P', 'R', 'D' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9grp</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'g', 'r', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9lyr</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'l', 'y', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9gen</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'g', 'e', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9st3</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 's', 't', '3' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9ard</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'a', 'r', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9arg</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'a', 'r', 'g' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9cak</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'c', 'a', 'k' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9con</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'c', 'o', 'n' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9des</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'd', 'e', 's' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9lnt</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'l', 'n', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9phg</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'p', 'h', 'g' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9pub</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'p', 'u', 'b' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9sne</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 's', 'n', 'e' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9snm</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 's', 'n', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9sol</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 's', 'o', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9thx</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 't', 'h', 'x' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9xpd</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'x', 'p', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0xa9xyz</name></cpp:macro> <cpp:value>VLC_FOURCC( 0xa9, 'x', 'y', 'z' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_aART</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 'A', 'R', 'T' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_chpl</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'h', 'p', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_HMMT</name></cpp:macro> <cpp:value>VLC_FOURCC( 'H', 'M', 'M', 'T' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_desc</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'e', 's', 'c' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_disk</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'i', 's', 'k' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ID32</name></cpp:macro> <cpp:value>VLC_FOURCC( 'I', 'D', '3', '2' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_WLOC</name></cpp:macro> <cpp:value>VLC_FOURCC( 'W', 'L', 'O', 'C' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ITUN</name></cpp:macro> <cpp:value>VLC_FOURCC( '-', '-', '-', '-' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_meta</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'e', 't', 'a' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_atID</name></cpp:macro> <cpp:value>VLC_FOURCC( 'a', 't', 'I', 'D' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ilst</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 'l', 's', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_cnID</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'n', 'I', 'D' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_covr</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'o', 'v', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_flvr</name></cpp:macro> <cpp:value>VLC_FOURCC( 'f', 'l', 'v', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_rtng</name></cpp:macro> <cpp:value>VLC_FOURCC( 'r', 't', 'n', 'g' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_thum</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 'h', 'u', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_tsel</name></cpp:macro> <cpp:value>VLC_FOURCC( 't', 's', 'e', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_xid_</name></cpp:macro> <cpp:value>VLC_FOURCC( 'x', 'i', 'd', ' ' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_gshh</name></cpp:macro> <cpp:value>VLC_FOURCC( 'g', 's', 'h', 'h' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_gspm</name></cpp:macro> <cpp:value>VLC_FOURCC( 'g', 's', 'p', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_gspu</name></cpp:macro> <cpp:value>VLC_FOURCC( 'g', 's', 'p', 'u' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_gssd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'g', 's', 's', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_gsst</name></cpp:macro> <cpp:value>VLC_FOURCC( 'g', 's', 's', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_gstd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'g', 's', 't', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_colr</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'o', 'l', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_irot</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 'r', 'o', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_SmDm</name></cpp:macro> <cpp:value>VLC_FOURCC( 'S', 'm', 'D', 'm' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_CoLL</name></cpp:macro> <cpp:value>VLC_FOURCC( 'C', 'o', 'L', 'L' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mdcv</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'd', 'c', 'v' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_clli</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'l', 'l', 'i' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_purl</name></cpp:macro> <cpp:value>VLC_FOURCC( 'p', 'u', 'r', 'l' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0x40PRM</name></cpp:macro> <cpp:value>VLC_FOURCC( '@', 'P', 'R', 'M' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_0x40PRQ</name></cpp:macro> <cpp:value>VLC_FOURCC( '@', 'P', 'R', 'Q' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_MCPS</name></cpp:macro> <cpp:value>VLC_FOURCC( 'M', 'C', 'P', 'S' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_SDLN</name></cpp:macro> <cpp:value>VLC_FOURCC( 'S', 'D', 'L', 'N' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_vndr</name></cpp:macro> <cpp:value>VLC_FOURCC( 'v', 'n', 'd', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_SA3D</name></cpp:macro> <cpp:value>VLC_FOURCC( 'S', 'A', '3', 'D' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_idat</name></cpp:macro> <cpp:value>VLC_FOURCC('i','d','a','t')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_iloc</name></cpp:macro> <cpp:value>VLC_FOURCC('i','l','o','c')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_iinf</name></cpp:macro> <cpp:value>VLC_FOURCC('i','i','n','f')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_infe</name></cpp:macro> <cpp:value>VLC_FOURCC('i','n','f','e')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_iref</name></cpp:macro> <cpp:value>VLC_FOURCC('i','r','e','f')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_pitm</name></cpp:macro> <cpp:value>VLC_FOURCC('p','i','t','m')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_iprp</name></cpp:macro> <cpp:value>VLC_FOURCC('i','p','r','p')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ipco</name></cpp:macro> <cpp:value>VLC_FOURCC('i','p','c','o')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ispe</name></cpp:macro> <cpp:value>VLC_FOURCC('i','s','p','e')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ipma</name></cpp:macro> <cpp:value>VLC_FOURCC('i','p','m','a')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLER_mdta</name></cpp:macro> <cpp:value>VLC_FOURCC('m', 'd', 't', 'a')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLER_mdir</name></cpp:macro> <cpp:value>VLC_FOURCC('m', 'd', 'i', 'r')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLER_ID32</name></cpp:macro> <cpp:value>ATOM_ID32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLEGROUP_rap</name></cpp:macro> <cpp:value>VLC_FOURCC('r', 'a', 'p', ' ')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_chap</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'h', 'a', 'p' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_dpnd</name></cpp:macro> <cpp:value>VLC_FOURCC( 'd', 'p', 'n', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_hint</name></cpp:macro> <cpp:value>VLC_FOURCC( 'h', 'i', 'n', 't' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_ipir</name></cpp:macro> <cpp:value>VLC_FOURCC( 'i', 'p', 'i', 'r' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_mpod</name></cpp:macro> <cpp:value>VLC_FOURCC( 'm', 'p', 'o', 'd' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_cdsc</name></cpp:macro> <cpp:value>VLC_FOURCC( 'c', 'd', 's', 'c' )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HANDLER_pict</name></cpp:macro> <cpp:value>VLC_FOURCC('p', 'i', 'c', 't')</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_VERBOSE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct_decl>struct <name>MP4_Box_s</name>;</struct_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_MFRO_BOXSIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>UUID_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>b</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>UUID_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_tfxd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_fragment_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_fragment_abs_time</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tfxd_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TfrfBoxDataFields_s</name>

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_fragment_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_fragment_abs_time</name></decl>;</decl_stmt>

}</block></struct></type> <name>TfrfBoxDataFields_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_tfrf_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_fragment_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TfrfBoxDataFields_t</name> <modifier>*</modifier></type><name>p_tfrf_data_fields</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tfrf_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_ftyp_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_major_brand</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_minor_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_compatible_brands_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_compatible_brands</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_ftyp_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_mvhd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_creation_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_modification_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_reserved1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>i_reserved2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>i_matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>i_predefined</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_next_track_id</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_mvhd_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TRACK_ENABLED</name></cpp:macro> <cpp:value>0x000001</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TRACK_IN_MOVIE</name></cpp:macro> <cpp:value>0x000002</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TRACK_IN_PREVIEW</name></cpp:macro> <cpp:value>0x000004</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_tkhd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_creation_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_modification_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_track_ID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_reserved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>i_reserved2</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_layer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_predefined</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_volume</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_reserved3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>i_matrix</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_rotation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_flip</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tkhd_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_start_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_hints</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_load_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_mdhd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_creation_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_modification_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>rgs_language</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_mac_encoding</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_quality</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_mdhd_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_hdlr_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_predefined</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_handler_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MP4_Box_data_hdlr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_vmhd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_graphics_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>i_opcolor</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_vmhd_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_smhd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_balance</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_reserved</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_smhd_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_hmhd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_max_PDU_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_avg_PDU_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_max_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_avg_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_reserved</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_hmhd_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_url_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_location</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_url_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_urn_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_location</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_urn_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_lcont_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_lcont_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_stts_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_sample_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pi_sample_delta</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_stts_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_ctts_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_sample_count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>pi_sample_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_ctts_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_cslg_s</name>

<block>{

<decl_stmt><decl><type><name>int64_t</name></type> <name>ct_to_dts_shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_least_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_max_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_composition_starttime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_composition_endtime</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_cslg_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_colr_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_type</name></decl>;</decl_stmt>

<union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_primary_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_transfer_function_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_matrix_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_full_range</name></decl>;</decl_stmt>

}</block> <decl><name>nclc</name></decl>;</struct>

}</block>;</union>

}</block></struct></type> <name>MP4_Box_data_colr_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_ccw_degrees</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_irot_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_sample_soun_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>i_reserved1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_reference_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_qt_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_qt_revision_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_qt_vendor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_channelcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_samplesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_compressionid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_reserved3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sampleratehi</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sampleratelo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_per_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bytes_per_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bytes_per_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bytes_per_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_constbitsperchannel</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_formatflags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_constbytesperaudiopacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_constLPCMframesperaudiopacket</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_qt_description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_qt_description</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_sample_soun_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_sample_vide_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>i_reserved1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_reference_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_qt_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_qt_revision_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_qt_vendor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_qt_temporal_quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_qt_spatial_quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_horizresolution</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_vertresolution</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_qt_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_qt_frame_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>sz_compressorname</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_qt_color_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_qt_image_description</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_qt_image_description</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_sample_vide_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_DONT_DISPLAY</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_AUTO_SCALE</name></cpp:macro> <cpp:value>(1&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_CLIP_TO_TEXT_BOX</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_USE_MOVIE_BG_COLOR</name></cpp:macro> <cpp:value>(1&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_SHRINK_TEXT_BOX_TO_FIT</name></cpp:macro> <cpp:value>(1&lt;&lt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_SCROLL_IN</name></cpp:macro> <cpp:value>(1&lt;&lt;5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_SCROLL_OUT</name></cpp:macro> <cpp:value>(1&lt;&lt;6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_HORIZONTAL_SCROLL</name></cpp:macro> <cpp:value>(1&lt;&lt;7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_REVERSE_SCROLL</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_CONTINUOUS_SCROLL</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_FLOW_HORIZONTAL</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_CONTINUOUS_KARAOKE</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_DROP_SHADOW</name></cpp:macro> <cpp:value>(1&lt;&lt;12)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_ANTI_ALIAS</name></cpp:macro> <cpp:value>(1&lt;&lt;13)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_KEYED_TEXT</name></cpp:macro> <cpp:value>(1&lt;&lt;14)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_INVERSE_HILITE</name></cpp:macro> <cpp:value>(1&lt;&lt;15)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_COLOR_HILITE</name></cpp:macro> <cpp:value>(1&lt;&lt;16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TEXT_DISPLAY_FLAG_WRITE_VERTICALLY</name></cpp:macro> <cpp:value>(1&lt;&lt;17)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_reserved1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_reserved2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_reference_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_sample_text_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>i_reserved1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_reference_index</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_sample_clcp_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_sample_hint_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>i_reserved1</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_reference_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_sample_hint_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_rrtp_sample_s</name>

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_hinttrackversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_highestcompatibleversion</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_maxpacketsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_additionaldata</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_rrtp_sample_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_timescale_entry_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_timescale_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_time_offset_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_time_offset_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_timestampsynchrony_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_reserved_timestamp_sync</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_timestampsynchrony_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_moviehintinformation_rtp_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_description_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_moviehintinformation_rtp_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_sdp_s</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_sdp_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_tims_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tims_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_tsro_s</name>

<block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tsro_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_tssy_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_reserved_timestamp_sync</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tssy_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_stsd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_stsd_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_stsz_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_entry_size</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MP4_Box_data_stsz_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_stz2_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_field_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_entry_size</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MP4_Box_data_stz2_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_stsc_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_first_chunk</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_samples_per_chunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_sample_description_index</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_stsc_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_co64_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>i_chunk_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_co64_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_stss_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_sample_number</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_stss_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_stsh_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_shadowed_sample_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_sync_sample_number</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_stsh_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_stdp_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>i_priority</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_stdp_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_elst_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>i_segment_duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>i_media_time</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>i_media_rate_integer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>i_media_rate_fraction</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_elst_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_cprt_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>rgs_language</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_notice</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_cprt_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_descriptor_decoder_config_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_objectProfileIndication</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_streamType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_upStream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_buffer_sizeDB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_max_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_avg_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_decoder_specific_info_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_decoder_specific_info</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_descriptor_decoder_config_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_descriptor_SL_config_s</name>

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_dummy</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MP4_descriptor_SL_config_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_descriptor_ES_s</name> 

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_ES_ID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_stream_dependence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_OCRstream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stream_priority</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_depend_on_ES_ID</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psz_URL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_OCR_ES_ID</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_descriptor_decoder_config_t</name> <modifier>*</modifier></type><name>p_decConfigDescr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_descriptor_SL_config_t</name> <modifier>*</modifier></type><name>p_slConfigDescr</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_descriptor_ES_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_esds_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_descriptor_ES_t</name></type> <name>es_descriptor</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_esds_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_dcom_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_algorithm</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MP4_Box_data_dcom_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_cmvd_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_uncompressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_compressed_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_compressed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_cmvd_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_cmov_s</name>

<block>{

<decl_stmt><decl><type><name><name>struct</name> <name>MP4_Box_s</name></name> <modifier>*</modifier></type><name>p_moov</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MP4_Box_data_cmov_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_type</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_frma_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_encr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_decr</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_skcr_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_ref_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ref</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_rdrf_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_rate</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_rmdr_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_gestaltType</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_val1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_val2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_checkType</name></decl>;</decl_stmt> 

}</block></struct></type> <name>MP4_Box_data_rmvc_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_rmcd_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_quality</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_rmqu_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_mfhd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sequence_number</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_mfhd_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_sidx_item_s</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_referenced_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_subsegment_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b_reference_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b_starts_with_SAP</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_SAP_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_SAP_delta_time</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_sidx_item_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_sidx_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_reference_ID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_timescale</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_earliest_presentation_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_first_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_reference_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_sidx_item_t</name> <modifier>*</modifier></type><name>p_items</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_sidx_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TFHD_BASE_DATA_OFFSET</name></cpp:macro> <cpp:value>(1LL&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TFHD_SAMPLE_DESC_INDEX</name></cpp:macro> <cpp:value>(1LL&lt;&lt;1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TFHD_DFLT_SAMPLE_DURATION</name></cpp:macro> <cpp:value>(1LL&lt;&lt;3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TFHD_DFLT_SAMPLE_SIZE</name></cpp:macro> <cpp:value>(1LL&lt;&lt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TFHD_DFLT_SAMPLE_FLAGS</name></cpp:macro> <cpp:value>(1LL&lt;&lt;5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TFHD_DURATION_IS_EMPTY</name></cpp:macro> <cpp:value>(1LL&lt;&lt;16)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TFHD_DEFAULT_BASE_IS_MOOF</name></cpp:macro> <cpp:value>(1LL&lt;&lt;17)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_tfhd_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_track_ID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_base_data_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_description_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tfhd_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TRUN_DATA_OFFSET</name></cpp:macro> <cpp:value>(1&lt;&lt;0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TRUN_FIRST_FLAGS</name></cpp:macro> <cpp:value>(1&lt;&lt;2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TRUN_SAMPLE_DURATION</name></cpp:macro> <cpp:value>(1&lt;&lt;8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TRUN_SAMPLE_SIZE</name></cpp:macro> <cpp:value>(1&lt;&lt;9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TRUN_SAMPLE_FLAGS</name></cpp:macro> <cpp:value>(1&lt;&lt;10)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP4_TRUN_SAMPLE_TIME_OFFSET</name></cpp:macro> <cpp:value>(1&lt;&lt;11)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MP4_descriptor_trun_sample_t</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>v1</name></decl>;</decl_stmt> 

}</block> <decl><name>i_composition_time_offset</name></decl>;</union>

}</block></struct></type> <name>MP4_descriptor_trun_sample_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_trun_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sample_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_data_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_first_sample_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_descriptor_trun_sample_t</name> <modifier>*</modifier></type><name>p_samples</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_trun_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MP4_Box_data_tfdt_s</name>

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_base_media_decode_time</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tfdt_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_date</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_index</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_pnot_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_length</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_string_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_blob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_blob</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_binary_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_track_ID</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_trak_reference_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_chapter</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_start</name></decl>;</decl_stmt>

}</block> <decl><name><name>chapter</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</struct>

}</block></struct></type> <name>MP4_Box_data_chpl_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_chapter_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_chapter_start</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_HMMT_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_profile_compatibility</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_avcC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_avcC</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_avcC_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_presentation_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_av1C</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_av1C</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_av1C_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bit_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_chroma_subsampling</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_color_primaries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_xfer_function</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_matrix_coeffs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_fullrange</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_codec_init_datasize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_codec_init_data</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_vpcC_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>primaries</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>white_point</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_luminanceMax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_luminanceMin</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_SmDm_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_maxCLL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_maxFALL</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_CoLL_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>WAVEFORMATEX</name></type> <name>Format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_WMA2_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>VLC_BITMAPINFOHEADER</name></type> <name>bmiHeader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_extra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_strf_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_number</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_ASF_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_grouping_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_description_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<union>union

<block>{

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_num_leading_samples_known</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_num_leading_samples</name></decl>;</decl_stmt>

}</block> <decl><name>rap</name></decl>;</struct>

}</block> <decl><modifier>*</modifier><name>p_entries</name></decl>;</union>

}</block></struct></type> <name>MP4_Box_data_sgpd_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_grouping_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_grouping_type_parameter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_sample_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_group_description_index</name></decl>;</decl_stmt>

}</block> <decl><name>entries</name></decl>;</struct>

}</block></struct></type> <name>MP4_Box_data_sbgp_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_channels_flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>struct</name> <name>CoreAudio_layout_s</name></name></type> <name>layout</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_chan_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_num_ind_sub</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_fscod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bsmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_acmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_lfeon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_num_dep_sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_chan_loc</name></decl>;</decl_stmt>

}</block> <decl><name><name>stream</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</struct>

}</block></struct></type> <name>MP4_Box_data_dec3_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_fscod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bsid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bsmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_acmod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_lfeon</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bitrate_code</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_dac3_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_profile_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_vc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_vc1</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_dvc1_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_fiel_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_little_endian</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_enda_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_namespace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>p_entries</name></decl>;</struct>

}</block></struct></type> <name>MP4_Box_data_keys_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_object_descriptor</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_OD_profile_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_scene_profile_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_audio_profile_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_visual_profile_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_graphics_profile_level</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_iods_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_max_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_avg_bitrate</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_btrt_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_horizontal_spacing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_vertical_spacing</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_pasp_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_fragment_duration</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_mehd_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_track_ID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_description_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_default_sample_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_trex_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_sample_table</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_sdtp_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_switch_group</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tsel_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_mfro_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_track_ID</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_number_of_entries</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_length_size_of_traf_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_length_size_of_trun_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_length_size_of_sample_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>p_moof_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_traf_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_trun_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_sample_number</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_tfra_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<enum>enum

<block>{

<decl><name>DATA_WKT_RESERVED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>DATA_WKT_UTF8</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>DATA_WKT_UTF16</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>DATA_WKT_SJIS</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>DATA_WKT_UTF8_SORT</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>DATA_WKT_UTF16_SORT</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>DATA_WKT_JPEG</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>,

<decl><name>DATA_WKT_PNG</name> <init>= <expr><literal type="number">14</literal></expr></init></decl>,

<decl><name>DATA_WKT_BE_SIGNED</name> <init>= <expr><literal type="number">21</literal></expr></init></decl>,

<decl><name>DATA_WKT_BE_UNSIGNED</name> <init>= <expr><literal type="number">22</literal></expr></init></decl>,

<decl><name>DATA_WKT_BE_FLOAT32</name> <init>= <expr><literal type="number">23</literal></expr></init></decl>,

<decl><name>DATA_WKT_BE_FLOAT64</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>,

<decl><name>DATA_WKT_BMP</name> <init>= <expr><literal type="number">27</literal></expr></init></decl>,

<decl><name>DATA_WKT_QUICKTIME_METADATA_ATOM</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>,

}</block> <decl><name>e_wellknowntype</name></decl>;</enum>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_country</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_language</name></decl>;</decl_stmt>

}</block> <decl><name>locale</name></decl>;</struct>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_blob</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_blob</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_data_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_projection_mode</name></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>XML360_MONOSCOPIC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>XML360_STEREOSCOPIC_TOP_BOTTOM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>XML360_STEREOSCOPIC_LEFT_RIGHT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

}</block> <decl><name>e_stereo_mode</name></decl>;</enum>

}</block></struct></type> <name>MP4_Box_data_360_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<enum>enum <block>{

<decl><name>ST3D_MONOSCOPIC</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ST3D_STEREOSCOPIC_TOP_BOTTOM</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>ST3D_STEREOSCOPIC_LEFT_RIGHT</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

}</block> <decl><name>e_stereo_mode</name></decl>;</enum>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stereo_mode</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_st3d_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>float</name></type> <name>f_pose_yaw_degrees</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_pose_pitch_degrees</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_pose_roll_degrees</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_prhd_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_projection_bounds_top</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_projection_bounds_bottom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_projection_bounds_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_projection_bounds_right</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_equi_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_padding</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_cbmp_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_ambisonic_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_ambisonic_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_ambisonic_channel_ordering</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_ambisonic_normalization</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_num_channels</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_SA3D_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_from_item_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_reference_count</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_to_item_id</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>p_references</name></decl>;</struct>

}</block></struct></type> <name>MP4_Box_data_refbox_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_iref_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_offset_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_length_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_base_offset_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_index_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_item_count</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_item_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_construction_method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_data_reference_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_base_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_extent_count</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_extent_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_extent_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_extent_length</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>p_extents</name></decl>;</struct>

}</block> <decl><modifier>*</modifier><name>p_items</name></decl>;</struct>

}</block></struct></type> <name>MP4_Box_data_iloc_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_iinf_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_item_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_item_protection_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>item_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_item_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_content_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_content_encoding</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_item_uri_type</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_infe_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_item_id</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_pitm_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_height</name></decl>;</decl_stmt>

}</block></struct></type> <name>MP4_Box_data_ispe_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_entry_count</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_item_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_association_count</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>b_essential</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_property_index</name></decl>;</decl_stmt>

}</block> <decl><modifier>*</modifier><name>p_assocs</name></decl>;</struct>

}</block> <decl><modifier>*</modifier><name>p_entries</name></decl>;</struct>

}</block></struct></type> <name>MP4_Box_data_ipma_t</name>;</typedef>

<typedef>typedef <type><union>union <name>MP4_Box_data_s</name>

<block>{

<decl_stmt><decl><type><name>MP4_Box_data_ftyp_t</name> <modifier>*</modifier></type><name>p_ftyp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_mvhd_t</name> <modifier>*</modifier></type><name>p_mvhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_mfhd_t</name> <modifier>*</modifier></type><name>p_mfhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sidx_t</name> <modifier>*</modifier></type><name>p_sidx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tfhd_t</name> <modifier>*</modifier></type><name>p_tfhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_trun_t</name> <modifier>*</modifier></type><name>p_trun</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tfdt_t</name> <modifier>*</modifier></type><name>p_tfdt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tkhd_t</name> <modifier>*</modifier></type><name>p_tkhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_mdhd_t</name> <modifier>*</modifier></type><name>p_mdhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_hdlr_t</name> <modifier>*</modifier></type><name>p_hdlr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_vmhd_t</name> <modifier>*</modifier></type><name>p_vmhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_smhd_t</name> <modifier>*</modifier></type><name>p_smhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_hmhd_t</name> <modifier>*</modifier></type><name>p_hmhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_url_t</name> <modifier>*</modifier></type><name>p_url</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_urn_t</name> <modifier>*</modifier></type><name>p_urn</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_lcont_t</name> <modifier>*</modifier></type><name>p_lcont</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_stts_t</name> <modifier>*</modifier></type><name>p_stts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_ctts_t</name> <modifier>*</modifier></type><name>p_ctts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_cslg_t</name> <modifier>*</modifier></type><name>p_cslg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_colr_t</name> <modifier>*</modifier></type><name>p_colr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_irot_t</name> <modifier>*</modifier></type><name>p_irot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sbgp_t</name> <modifier>*</modifier></type><name>p_sbgp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sgpd_t</name> <modifier>*</modifier></type><name>p_sgpd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sample_vide_t</name> <modifier>*</modifier></type><name>p_sample_vide</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sample_soun_t</name> <modifier>*</modifier></type><name>p_sample_soun</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sample_text_t</name> <modifier>*</modifier></type><name>p_sample_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sample_clcp_t</name> <modifier>*</modifier></type><name>p_sample_clcp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sample_hint_t</name> <modifier>*</modifier></type><name>p_sample_hint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_esds_t</name> <modifier>*</modifier></type><name>p_esds</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_av1C_t</name> <modifier>*</modifier></type><name>p_av1C</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_avcC_t</name> <modifier>*</modifier></type><name>p_avcC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_dac3_t</name> <modifier>*</modifier></type><name>p_dac3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_dec3_t</name> <modifier>*</modifier></type><name>p_dec3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_dvc1_t</name> <modifier>*</modifier></type><name>p_dvc1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_fiel_t</name> <modifier>*</modifier></type><name>p_fiel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_chan_t</name> <modifier>*</modifier></type><name>p_chan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_enda_t</name> <modifier>*</modifier></type><name>p_enda</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_keys_t</name> <modifier>*</modifier></type><name>p_keys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_iods_t</name> <modifier>*</modifier></type><name>p_iods</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_btrt_t</name> <modifier>*</modifier></type><name>p_btrt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_pasp_t</name> <modifier>*</modifier></type><name>p_pasp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_trex_t</name> <modifier>*</modifier></type><name>p_trex</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_mehd_t</name> <modifier>*</modifier></type><name>p_mehd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sdtp_t</name> <modifier>*</modifier></type><name>p_sdtp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tsel_t</name> <modifier>*</modifier></type><name>p_tsel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_load_t</name> <modifier>*</modifier></type><name>p_load</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_vpcC_t</name> <modifier>*</modifier></type><name>p_vpcC</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_SmDm_t</name> <modifier>*</modifier></type><name>p_SmDm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_CoLL_t</name> <modifier>*</modifier></type><name>p_CoLL</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tfra_t</name> <modifier>*</modifier></type><name>p_tfra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_mfro_t</name> <modifier>*</modifier></type><name>p_mfro</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_sdp_t</name> <modifier>*</modifier></type><name>p_sdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tims_t</name> <modifier>*</modifier></type><name>p_tims</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tsro_t</name> <modifier>*</modifier></type><name>p_tsro</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tssy_t</name> <modifier>*</modifier></type><name>p_tssy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_stsz_t</name> <modifier>*</modifier></type><name>p_stsz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_stz2_t</name> <modifier>*</modifier></type><name>p_stz2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_stsc_t</name> <modifier>*</modifier></type><name>p_stsc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_co64_t</name> <modifier>*</modifier></type><name>p_co64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_stss_t</name> <modifier>*</modifier></type><name>p_stss</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_stsh_t</name> <modifier>*</modifier></type><name>p_stsh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_stdp_t</name> <modifier>*</modifier></type><name>p_stdp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_elst_t</name> <modifier>*</modifier></type><name>p_elst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_cprt_t</name> <modifier>*</modifier></type><name>p_cprt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_dcom_t</name> <modifier>*</modifier></type><name>p_dcom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_cmvd_t</name> <modifier>*</modifier></type><name>p_cmvd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_cmov_t</name> <modifier>*</modifier></type><name>p_cmov</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_moviehintinformation_rtp_t</name> <modifier>*</modifier></type><name>p_moviehintinformation_rtp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_frma_t</name> <modifier>*</modifier></type><name>p_frma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_skcr_t</name> <modifier>*</modifier></type><name>p_skcr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_rdrf_t</name> <modifier>*</modifier></type><name>p_rdrf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_rmdr_t</name> <modifier>*</modifier></type><name>p_rmdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_rmqu_t</name> <modifier>*</modifier></type><name>p_rmqu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_rmvc_t</name> <modifier>*</modifier></type><name>p_rmvc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_pnot_t</name> <modifier>*</modifier></type><name>p_pnot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_chpl_t</name> <modifier>*</modifier></type><name>p_chpl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_HMMT_t</name> <modifier>*</modifier></type><name>p_hmmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_trak_reference_t</name> <modifier>*</modifier></type><name>p_track_reference</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tfrf_t</name> <modifier>*</modifier></type><name>p_tfrf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_tfxd_t</name> <modifier>*</modifier></type><name>p_tfxd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_WMA2_t</name> <modifier>*</modifier></type><name>p_WMA2</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_Box_data_strf_t</name> <modifier>*</modifier></type><name>p_strf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_Box_data_ASF_t</name> <modifier>*</modifier></type><name>p_asf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_Box_data_360_t</name> <modifier>*</modifier></type><name>p_360</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_st3d_t</name> <modifier>*</modifier></type><name>p_st3d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_prhd_t</name> <modifier>*</modifier></type><name>p_prhd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_equi_t</name> <modifier>*</modifier></type><name>p_equi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_cbmp_t</name> <modifier>*</modifier></type><name>p_cbmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_SA3D_t</name> <modifier>*</modifier></type><name>p_SA3D</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_refbox_t</name> <modifier>*</modifier></type><name>p_refbox</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_iref_t</name> <modifier>*</modifier></type><name>p_iref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_iloc_t</name> <modifier>*</modifier></type><name>p_iloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_iinf_t</name> <modifier>*</modifier></type><name>p_iinf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_infe_t</name> <modifier>*</modifier></type><name>p_infe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_pitm_t</name> <modifier>*</modifier></type><name>p_pitm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_ispe_t</name> <modifier>*</modifier></type><name>p_ispe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_Box_data_ipma_t</name> <modifier>*</modifier></type><name>p_ipma</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_Box_data_binary_t</name> <modifier>*</modifier></type><name>p_binary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_data_data_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_payload</name></decl>;</decl_stmt> 

}</block></union></type> <name>MP4_Box_data_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOXDATA</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type-&gt;data.type</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>MP4_Box_s</name></name></type> <name>MP4_Box_t</name>;</typedef>

<struct>struct <name>MP4_Box_s</name>

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_shortsize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_handler</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_index</name></decl>;</decl_stmt> 

<enum>enum

<block>{

<decl><name>BOX_FLAG_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>BOX_FLAG_INCOMPLETE</name></decl>,

}</block> <decl><name>e_flags</name></decl>;</enum>

<decl_stmt><decl><type><name>UUID_t</name></type> <name>i_uuid</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_father</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_first</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>pf_free</name>)<parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>;</function_decl> 

<decl_stmt><decl><type><name>MP4_Box_data_t</name></type> <name>data</name></decl>;</decl_stmt> 

}</block>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>size_t</name></type> <name>mp4_box_headersize</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">8</literal>

<operator>+</operator> <operator>(</operator> <ternary><condition><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_shortsize</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator>

<operator>+</operator> <operator>(</operator> <ternary><condition><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_uuid</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>CmpUUID</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>UUID_t</name> <modifier>*</modifier></type><name>u1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>UUID_t</name> <modifier>*</modifier></type><name>u2</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>u1</name></expr></argument>, <argument><expr><name>u2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UUID_t</name></type> <name>TfrfBoxUUID</name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x95</literal></expr>,

<expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xa7</literal></expr>, <expr><literal type="number">0x9f</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UUID_t</name></type> <name>TfxdBoxUUID</name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0xd5</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xe6</literal></expr>,

<expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xaf</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0xb2</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UUID_t</name></type> <name>XML360BoxUUID</name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x93</literal></expr>,

<expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x1f</literal></expr>, <expr><literal type="number">0xdd</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>UUID_t</name></type> <name>PS3DDSBoxUUID</name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0xd2</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xce</literal></expr>,

<expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x5c</literal></expr>, <expr><literal type="number">0xfa</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x40</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>MP4_Seek</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_BoxGetNextChunk</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_BoxGetRoot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type> <name>MP4_BoxNew</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_type</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>MP4_BoxFree</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>MP4_BoxDumpStructure</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_input</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>MP4_BoxGet</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>unsigned</name></type> <name>MP4_BoxCount</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type> <name>MP4_BoxExtract</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_chain</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_type</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>MP4_ReadBoxContainerChildren</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>MP4_ReadBoxContainerRestricted</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>stoplist</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>excludelist</name><index>[]</index></name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>MP4_ReadBox_sample_vide</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>;</function_decl>

</unit>
