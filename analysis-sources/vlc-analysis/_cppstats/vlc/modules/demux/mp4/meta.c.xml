<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mp4\meta.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mp4.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../meta_engine/ID3Genres.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"languages.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../meta_engine/ID3Tag.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../meta_engine/ID3Meta.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>xa9_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_meta_type_t</name></type> <name>meta_type</name></decl>;</decl_stmt>

}</block> <decl><name><name>xa9typetometa</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>ATOM_0x40PRM</name></expr>, <expr><name>vlc_meta_EncodedBy</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0x40PRQ</name></expr>, <expr><name>vlc_meta_EncodedBy</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9nam</name></expr>, <expr><name>vlc_meta_Title</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9aut</name></expr>, <expr><name>vlc_meta_Artist</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9ART</name></expr>, <expr><name>vlc_meta_Artist</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9cpy</name></expr>, <expr><name>vlc_meta_Copyright</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9day</name></expr>, <expr><name>vlc_meta_Date</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9des</name></expr>, <expr><name>vlc_meta_Description</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9gen</name></expr>, <expr><name>vlc_meta_Genre</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9alb</name></expr>, <expr><name>vlc_meta_Album</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9trk</name></expr>, <expr><name>vlc_meta_TrackNumber</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9cmt</name></expr>, <expr><name>vlc_meta_Description</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9url</name></expr>, <expr><name>vlc_meta_URL</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9too</name></expr>, <expr><name>vlc_meta_EncodedBy</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9enc</name></expr>, <expr><name>vlc_meta_EncodedBy</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_0xa9pub</name></expr>, <expr><name>vlc_meta_Publisher</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9dir</name></expr>, <expr><name>vlc_meta_Director</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_desc</name></expr>, <expr><name>vlc_meta_Description</name></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_MCPS</name></expr>, <expr><name>vlc_meta_EncodedBy</name></expr> }</block></expr>, 

<expr><block>{ <expr><name>ATOM_aART</name></expr>, <expr><name>vlc_meta_AlbumArtist</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>xa9_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>metadata</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>xa9typetoextrameta</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>ATOM_0xa9wrt</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Writer"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9com</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Composer"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9prd</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Producer"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9inf</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Information"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9dis</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Disclaimer"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9req</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Requirements"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9fmt</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Original Format"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9dsa</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Display Source As"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9hst</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Host Computer"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9prf</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Performers"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9ope</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Original Performer"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9src</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Providers Source Content"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9wrn</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Warning"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9swr</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Software"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9lyr</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Lyrics"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9mak</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Record Company"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9mod</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Model"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9PRD</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Product"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9grp</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Grouping"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9gen</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Genre"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9st3</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Sub-Title"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9arg</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Arranger"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9ard</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Art Director"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9cak</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Copyright Acknowledgement"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9con</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Conductor"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9des</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Song Description"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9lnt</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Liner Notes"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9phg</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Phonogram Rights"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9pub</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Publisher"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9sne</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Sound Engineer"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9sol</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Soloist"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9thx</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Thanks"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_0xa9xpd</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Executive Producer"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_aART</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Album Artist"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_flvr</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Encoding Params"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_vndr</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Vendor"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_xid_</name></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Catalog Number"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gshh</name></expr>, <expr><literal type="string">"YouTube Host"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gspm</name></expr>, <expr><literal type="string">"YouTube Ping Message"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gspu</name></expr>, <expr><literal type="string">"YouTube Ping Url"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gssd</name></expr>, <expr><literal type="string">"YouTube Source Data"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gsst</name></expr>, <expr><literal type="string">"YouTube Start Time"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_gstd</name></expr>, <expr><literal type="string">"YouTube Track Duration"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>ATOM_purl</name></expr>, <expr><literal type="string">"Podcast URL"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_naming</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_meta_type_t</name></type> <name>meta_type</name></decl>;</decl_stmt>

}</block> <decl><name><name>com_apple_quicktime_tometa</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"displayname"</literal></expr>, <expr><name>vlc_meta_NowPlaying</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"software"</literal></expr>, <expr><name>vlc_meta_EncodedBy</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Encoded_With"</literal></expr>, <expr><name>vlc_meta_EncodedBy</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"album"</literal></expr>, <expr><name>vlc_meta_Album</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"artist"</literal></expr>, <expr><name>vlc_meta_Artist</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"comment"</literal></expr>, <expr><name>vlc_meta_Description</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"description"</literal></expr>, <expr><name>vlc_meta_Description</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"copyright"</literal></expr>, <expr><name>vlc_meta_Copyright</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"creationdate"</literal></expr>, <expr><name>vlc_meta_Date</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"director"</literal></expr>, <expr><name>vlc_meta_Director</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"genre"</literal></expr>, <expr><name>vlc_meta_Genre</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"publisher"</literal></expr>, <expr><name>vlc_meta_Publisher</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_naming</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_metadata</name></decl>;</decl_stmt>

}</block> <decl><name><name>com_apple_quicktime_toextrameta</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"information"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Information"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"keywords"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Keywords"</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <expr><literal type="string">"make"</literal></expr>, <macro><name>N_</name><argument_list>(<argument><literal type="string">"Vendor"</literal></argument>)</argument_list></macro> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>StringConvert</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_data_data_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_data</name> <operator>||</operator> <operator>!</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_blob</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_data</name><operator>-&gt;</operator><name>e_wellknowntype</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DATA_WKT_UTF8</name></expr>:</case>

<case>case <expr><name>DATA_WKT_UTF8_SORT</name></expr>:</case>

<return>return <expr><call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-8"</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DATA_WKT_UTF16</name></expr>:</case>

<case>case <expr><name>DATA_WKT_UTF16_SORT</name></expr>:</case>

<return>return <expr><call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DATA_WKT_SJIS</name></expr>:</case>

<return>return <expr><call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"SHIFT-JIS"</literal></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>, <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>ExtractString</name><parameter_list>( <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ATOM_data</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>StringConvert</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_data</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>StringConvert</name><argument_list>( <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name> <operator>&amp;&amp;</operator> <name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_utf</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></argument>,

<argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>likely</name><argument_list>( <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EnsureUTF8</name><argument_list>( <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>psz_utf</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>AppleNameToMeta</name><parameter_list>( <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>name</name></decl></parameter>,

<parameter><decl><type><name>vlc_meta_type_t</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type> <name>meta_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type> <name>meta_key</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>meta_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>meta_key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>meta_type</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>com_apple_quicktime_tometa</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>com_apple_quicktime_tometa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_naming</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>meta_type</name> <operator>=</operator> <operator>&amp;</operator><name><name>com_apple_quicktime_tometa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>meta_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>meta_key</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>com_apple_quicktime_toextrameta</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>com_apple_quicktime_toextrameta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_naming</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>meta_key</name> <operator>=</operator> <name><name>com_apple_quicktime_toextrameta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_metadata</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>*</operator><name>meta_type</name> <operator>||</operator> <operator>*</operator><name>meta_key</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>AtomXA9ToMeta</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_type</name></decl></parameter>,

<parameter><decl><type><name>vlc_meta_type_t</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type> <name>meta_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier><modifier>*</modifier></type> <name>meta_key</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>meta_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>meta_key</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><operator>*</operator><name>meta_type</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>xa9typetometa</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>xa9typetometa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xa9_type</name> <operator>==</operator> <name>i_type</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>meta_type</name> <operator>=</operator> <operator>&amp;</operator><name><name>xa9typetometa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>meta_type</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><operator>*</operator><name>meta_key</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>( <argument><expr><name>xa9typetoextrameta</name></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>xa9typetoextrameta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xa9_type</name> <operator>==</operator> <name>i_type</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>meta_key</name> <operator>=</operator> <name><name>xa9typetoextrameta</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>metadata</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>*</operator><name>meta_type</name> <operator>||</operator> <operator>*</operator><name>meta_key</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>SetMeta</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name><modifier>*</modifier></type> <name>p_meta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name><modifier>*</modifier></type> <name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_meta_type_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>key</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>AppleNameToMeta</name><argument_list>( <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name>name</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>AtomXA9ToMeta</name><argument_list>( <argument><expr><name>i_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_utf</name> <init>= <expr><call><name>ExtractString</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_utf</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>type</name></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><operator>*</operator><name>type</name></expr></argument>, <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExtractIntlStrings</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_meta_type_t</name> <specifier>const</specifier><modifier>*</modifier></type> <name>meta_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>meta_key</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AtomXA9ToMeta</name><argument_list>( <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta_key</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>false</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>p_father</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>p_father</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_udta</name> <operator>||</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name><modifier>*</modifier></type> <name>p_meta_intl</name> <init>= <expr><call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_meta_intl</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier><modifier>*</modifier></type> <name>p_peek</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_read</name> <init>= <expr><name><name>p_box</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_read</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_len</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_lang</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&gt;</operator> <name>i_read</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>charset</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <init>= <expr><literal type="string">"MACINTOSH//"</literal></expr></init></decl>;</decl_stmt>

<macro><name>decodeQtLanguageCode</name><argument_list>( <argument>i_lang</argument>, <argument>charset+<literal type="number">11</literal></argument>, <argument>&amp;(bool){<literal type="number">0</literal>}</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if<condition>( <expr><name>i_lang</name> <operator>&gt;=</operator> <literal type="number">0x400</literal> <operator>&amp;&amp;</operator> <name>i_lang</name> <operator>!=</operator> <literal type="number">0x7fff</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>charset</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i_len</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"\xFE\xFF"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>

?</condition><then> <expr><literal type="string">"UTF-8"</literal></expr> </then><else>: <expr><literal type="string">"UTF-16BE"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><call><name>FromCharset</name><argument_list>( <argument><expr><name>charset</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>data</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>meta_type</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta_intl</name></expr></argument>, <argument><expr><operator>*</operator><name>meta_type</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>meta_key</name> <operator>=</operator> <call><name>vlc_meta_TypeToLocalizedString</name><argument_list>( <argument><expr><operator>*</operator><name>meta_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>meta_type</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>key</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="string">"%s (%s)"</literal></expr></argument>, <argument><expr><name>meta_key</name></expr></argument>, <argument><expr><name>charset</name><operator>+</operator><literal type="number">11</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta_intl</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>-=</operator> <name>i_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_Merge</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>p_meta_intl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name>p_meta_intl</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_read</name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ExtractItunesInfoTriplets</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name> <operator>!=</operator> <name>ATOM_ITUN</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_mean</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"mean"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_name</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_mean</name> <operator>||</operator> <name><name>p_mean</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">16</literal> <operator>||</operator>

<operator>!</operator><name>p_name</name> <operator>||</operator> <name><name>p_name</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator>

<operator>!</operator><name>p_data</name> <operator>||</operator> <operator>!</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p_mean</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name><operator>)</operator><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><literal type="string">"com.apple.iTunes"</literal></expr></argument>,

<argument><expr><name><name>p_mean</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>p_name</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>p_blob</name></name><operator>)</operator><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>,

<argument><expr><name><name>p_name</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>p_binary</name><operator>-&gt;</operator><name>i_blob</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><call><name>ExtractString</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_name</name> <operator>&amp;&amp;</operator> <name>psz_value</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupmdirMeta</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_data</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ExtractIntlStrings</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>SetMeta</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ATOM_atID</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>e_wellknowntype</name> <operator>==</operator> <name>DATA_WKT_BE_SIGNED</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_utf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_utf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId32</name></expr></argument>,

<argument><expr><call><name>GetDWBE</name><argument_list>(<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_blob</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"iTunes Account ID"</literal></expr></argument>, <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_cnID</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>e_wellknowntype</name> <operator>==</operator> <name>DATA_WKT_BE_SIGNED</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_utf</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_utf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId32</name></expr></argument>,

<argument><expr><call><name>GetDWBE</name><argument_list>(<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_blob</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"iTunes Catalog ID"</literal></expr></argument>, <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_disk</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name> <operator>&gt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>e_wellknowntype</name> <operator>==</operator> <name>DATA_WKT_RESERVED</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_number</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_number</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_number</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu16</name></expr></argument>, <argument><expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_blob</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_DiscNumber</name></expr></argument>, <argument><expr><name>psz_number</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_number</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_number</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu16</name></expr></argument>, <argument><expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_blob</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_DiscTotal</name></expr></argument>, <argument><expr><name>psz_number</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_gnre</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>e_wellknowntype</name> <operator>==</operator> <name>DATA_WKT_RESERVED</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_genre</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_blob</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_genre</name> <operator>&amp;&amp;</operator> <name>i_genre</name> <operator>&lt;=</operator> <name>ID3_GENRES_COUNT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_SetGenre</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>ID3_ppsz_genres</name><index>[<expr><name>i_genre</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_rtng</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_rating</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><operator>*</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_blob</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x4</literal></expr>:</case>

<expr_stmt><expr><name>psz_rating</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Explicit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2</literal></expr>:</case>

<expr_stmt><expr><name>psz_rating</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Clean"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<case>case <expr><literal type="number">0x0</literal></expr>:</case>

<expr_stmt><expr><name>psz_rating</name> <operator>=</operator> <call><name>N_</name><argument_list>(<argument><expr><literal type="string">"None"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Rating"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>psz_rating</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_trkn</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>e_wellknowntype</name> <operator>==</operator> <name>DATA_WKT_RESERVED</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_trck</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_trck</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_trck</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu16</name></expr></argument>, <argument><expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_blob</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_SetTrackNum</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_trck</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name> <operator>&gt;=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_blob</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name>psz_trck</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>psz_trck</name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu16</name></expr></argument>, <argument><expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_blob</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Set</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>vlc_meta_TrackTotal</name></expr></argument>, <argument><expr><name>psz_trck</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ATOM_ITUN</name></expr>:</case>

<expr_stmt><expr><call><name>ExtractItunesInfoTriplets</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>SetMeta</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>p_box</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupmdtaMeta</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_keys</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_keys</name> <operator>||</operator> <operator>!</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_keys</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_keys</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_box</name><operator>-&gt;</operator><name>i_index</name></name> <operator>||</operator> <name><name>p_box</name><operator>-&gt;</operator><name>i_index</name></name> <operator>&gt;</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_keys</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_entry_count</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_naming</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_keys</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_entries</name><index>[<expr><name><name>p_box</name><operator>-&gt;</operator><name>i_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_value</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_namespace</name> <init>= <expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_keys</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>p_entries</name><index>[<expr><name><name>p_box</name><operator>-&gt;</operator><name>i_index</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_namespace</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_namespace</name> <operator>==</operator> <name>HANDLER_mdta</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><literal type="string">"com.apple.quicktime."</literal></expr></argument>, <argument><expr><name>psz_naming</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetMeta</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>psz_naming</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_namespace</name> <operator>==</operator> <name>ATOM_udta</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_utf</name> <init>= <expr><call><name>ExtractString</name><argument_list>( <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_utf</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_utf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetMeta</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>,

<argument><expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><name><name>psz_utf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>psz_utf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>psz_utf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>psz_utf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_utf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ID3TAG_Parse_Handler</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_payload</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_payload</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_priv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><operator>(</operator><name>vlc_meta_t</name> <operator>*</operator><operator>)</operator> <name>p_priv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ID3HandleTag</name><argument_list>( <argument><expr><name>p_payload</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument>, <argument><expr><name>i_tag</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupID3v2Meta</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_binary</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name>p_box</name></expr></argument>, <argument><expr><literal type="string">"ID32"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_binary</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_binary</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_binary</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">20</literal> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ID3TAG_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_binary</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>p_blob</name><operator>)</operator><index>[<expr><literal type="number">6</literal></expr>]</index></expr></argument>, <argument><expr><call><name>BOXDATA</name><argument_list>(<argument><expr><name>p_binary</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_blob</name> <operator>-</operator> <literal type="number">6</literal></expr></argument>,

<argument><expr><name>ID3TAG_Parse_Handler</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SetupMeta</name><parameter_list>( <parameter><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_udta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_handler</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_udta</name><operator>-&gt;</operator><name>p_father</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_handler</name> <operator>=</operator> <name><name>p_udta</name><operator>-&gt;</operator><name>i_handler</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_box</name> <init>= <expr><name><name>p_udta</name><operator>-&gt;</operator><name>p_first</name></name></expr></init></decl>;</init> <condition><expr><name>p_box</name></expr>;</condition> <incr><expr><name>p_box</name> <operator>=</operator> <name><name>p_box</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_handler</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>HANDLER_mdta</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>MP4_Box_t</name> <modifier>*</modifier></type><name>p_keys</name> <init>= <expr><call><name>MP4_BoxGet</name><argument_list>( <argument><expr><name><name>p_udta</name><operator>-&gt;</operator><name>p_father</name></name></expr></argument>, <argument><expr><literal type="string">"keys"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>SetupmdtaMeta</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument>, <argument><expr><name>p_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>HANDLER_ID32</name></expr>:</case>

<expr_stmt><expr><call><name>SetupID3v2Meta</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>HANDLER_mdir</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>SetupmdirMeta</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>p_box</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
