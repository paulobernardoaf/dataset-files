<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mp4\fragments.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fragments.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>MP4_Fragments_Index_Delete</name><parameter_list>( <parameter><decl><type><name>mp4_fragments_index_t</name> <modifier>*</modifier></type><name>p_index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_index</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>pi_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>p_times</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>mp4_fragments_index_t</name> <modifier>*</modifier></type> <name>MP4_Fragments_Index_New</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>i_tracks</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_num</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_tracks</name> <operator>||</operator> <operator>!</operator><name>i_num</name> <operator>||</operator> <name>SIZE_MAX</name> <operator>/</operator> <name>i_num</name> <operator>&lt;</operator> <name>i_tracks</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>mp4_fragments_index_t</name> <modifier>*</modifier></type><name>p_index</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_index</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_index</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>p_times</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i_num</name> <operator>*</operator> <name>i_tracks</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_index</name><operator>-&gt;</operator><name>p_times</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>pi_pos</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_index</name><operator>-&gt;</operator><name>pi_pos</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_index</name><operator>-&gt;</operator><name>p_times</name></name> <operator>||</operator> <operator>!</operator><name><name>p_index</name><operator>-&gt;</operator><name>pi_pos</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MP4_Fragments_Index_Delete</name><argument_list>( <argument><expr><name>p_index</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>=</operator> <name>i_num</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_last_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>=</operator> <name>i_tracks</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_index</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>stime_t</name></type> <name>MP4_Fragment_Index_GetTrackStartTime</name><parameter_list>( <parameter><decl><type><name>mp4_fragments_index_t</name> <modifier>*</modifier></type><name>p_index</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_track_index</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_moof_pos</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_index</name><operator>-&gt;</operator><name>pi_pos</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>i_moof_pos</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_index</name><operator>-&gt;</operator><name>p_times</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <name>i_track_index</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>stime_t</name></type> <name>MP4_Fragment_Index_GetTrackDuration</name><parameter_list>( <parameter><decl><type><name>mp4_fragments_index_t</name> <modifier>*</modifier></type><name>p_index</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_index</name><operator>-&gt;</operator><name>p_times</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>MP4_Fragments_Index_Lookup</name><parameter_list>( <parameter><decl><type><name>mp4_fragments_index_t</name> <modifier>*</modifier></type><name>p_index</name></decl></parameter>, <parameter><decl><type><name>stime_t</name> <modifier>*</modifier></type><name>pi_time</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_pos</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_track_index</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_time</name> <operator>&gt;=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_last_time</name></name> <operator>||</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator>

<name>i_track_index</name> <operator>&gt;=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_index</name><operator>-&gt;</operator><name>p_times</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <name>i_track_index</name></expr>]</index></name> <operator>&gt;</operator> <operator>*</operator><name>pi_time</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_time</name> <operator>=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>p_times</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <name>i_track_index</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_pos</name> <operator>=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>pi_pos</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pi_time</name> <operator>=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>p_times</name><index>[<expr><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_pos</name> <operator>=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>pi_pos</name><index>[<expr><name><name>p_index</name><operator>-&gt;</operator><name>i_entries</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>MP4_VERBOSE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>void</name></type> <name>MP4_Fragments_Index_Dump</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>mp4_fragments_index_t</name> <modifier>*</modifier></type><name>p_index</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>i_movie_timescale</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_entries</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_starts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_end</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_entries</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_end</name> <operator>=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_last_time</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_end</name> <operator>=</operator> <name><name>p_index</name><operator>-&gt;</operator><name>p_times</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_start</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">0</literal> <operator>&lt;</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_start</name></expr></argument>, <argument><expr><literal type="string">"%s [%u]%"</literal><name>PRId64</name><literal type="string">"ms "</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name>psz_starts</name><operator>)</operator></expr> ?</condition><then> <expr><name>psz_starts</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name>j</name></expr></argument>,

<argument><expr><call><name>INT64_C</name><argument_list>( <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call> <operator>*</operator> <name><name>p_index</name><operator>-&gt;</operator><name>p_times</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_tracks</name></name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>/</operator> <name>i_movie_timescale</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_starts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_starts</name> <operator>=</operator> <name>psz_start</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"fragment offset @%"</literal><name>PRId64</name><literal type="string">" %"</literal><name>PRId64</name><literal type="string">"ms, start %s"</literal></expr></argument>,

<argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>pi_pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>INT64_C</name><argument_list>( <argument><expr><literal type="number">1000</literal></expr></argument> )</argument_list></call> <operator>*</operator> <name>i_end</name> <operator>/</operator> <name>i_movie_timescale</name></expr></argument>, <argument><expr><name>psz_starts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_starts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
