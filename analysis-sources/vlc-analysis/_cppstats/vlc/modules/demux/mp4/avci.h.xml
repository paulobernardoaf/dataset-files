<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mp4\avci.h"><decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>AVCi_HIGH_422_1080p_sps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x98</literal></expr>,

<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0xb9</literal></expr>,

<expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xe3</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xf1</literal></expr>,

<expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x78</literal></expr>,

<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0xe2</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>,

<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x10</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>AVCi_HIGH_422_1080i_sps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x98</literal></expr>,

<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x46</literal></expr>,

<expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x65</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xe9</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x32</literal></expr>,

<expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0xa4</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x82</literal></expr>,

<expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x2b</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x48</literal></expr>,

<expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x2e</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x8c</literal></expr>,

<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0x4c</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x60</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x28</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x20</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>AVCi_HIGH_422_720p_sps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0xc7</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x66</literal></expr>,

<expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x8e</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x42</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x64</literal></expr>,

<expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0xe4</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x90</literal></expr>,

<expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x97</literal></expr>, <expr><literal type="number">0x20</literal></expr>,

<expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0xc2</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x4c</literal></expr>,

<expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x0f</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xec</literal></expr>, <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0x8c</literal></expr>,

<expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x84</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>AVCi_HIGH_10_1080p_sps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x19</literal></expr>,

<expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>,

<expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6b</literal></expr>,

<expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x05</literal></expr>,

<expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x5f</literal></expr>, <expr><literal type="number">0xfc</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x84</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>AVCi_HIGH_10_1080i_sps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x28</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x19</literal></expr>,

<expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>,

<expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0x3e</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x4d</literal></expr>, <expr><literal type="number">0x98</literal></expr>,

<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x9c</literal></expr>, <expr><literal type="number">0x0b</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xc0</literal></expr>,

<expr><literal type="number">0xb5</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x0d</literal></expr>, <expr><literal type="number">0x39</literal></expr>, <expr><literal type="number">0xe0</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x02</literal></expr>,

<expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0xc6</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x34</literal></expr>,

<expr><literal type="number">0x24</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x80</literal></expr>,

<expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xf1</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xa0</literal></expr>,

<expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>,

<expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x80</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>AVCi_HIGH_10_720p_sps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xd4</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x33</literal></expr>,

<expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x62</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x19</literal></expr>,

<expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x8c</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x21</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x56</literal></expr>,

<expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xf9</literal></expr>, <expr><literal type="number">0xbf</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0x6b</literal></expr>,

<expr><literal type="number">0xf3</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x3c</literal></expr>, <expr><literal type="number">0x0f</literal></expr>,

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x38</literal></expr>,

<expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x00</literal></expr>,

<expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x40</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>AVCi_HIGH_422_1080x_pps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xd0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>AVCi_HIGH_422_720p_pps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x11</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>AVCi_HIGH_10_pps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x11</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCI_ENTRY</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{b, A, B, sizeof(A), sizeof(B), a}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVCI_ENTRIES</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_interlace</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_pps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_res</name></decl>;</decl_stmt>

}</block> <decl><name><name>AVCi_lookup_table</name><index>[<expr><name>AVCI_ENTRIES</name></expr>]</index></name> <init>= <expr><block>{

<expr><call><name>AVCI_ENTRY</name><argument_list>(<argument><expr><literal type="number">1920</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>AVCi_HIGH_422_1080i_sps</name></expr></argument>, <argument><expr><name>AVCi_HIGH_422_1080x_pps</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>AVCI_ENTRY</name><argument_list>(<argument><expr><literal type="number">1920</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>AVCi_HIGH_422_1080p_sps</name></expr></argument>, <argument><expr><name>AVCi_HIGH_422_1080x_pps</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>AVCI_ENTRY</name><argument_list>(<argument><expr><literal type="number">1280</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>AVCi_HIGH_422_720p_sps</name></expr></argument>, <argument><expr><name>AVCi_HIGH_422_720p_pps</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>AVCI_ENTRY</name><argument_list>(<argument><expr><literal type="number">1440</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>AVCi_HIGH_10_1080i_sps</name></expr></argument>, <argument><expr><name>AVCi_HIGH_10_pps</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>AVCI_ENTRY</name><argument_list>(<argument><expr><literal type="number">1440</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>AVCi_HIGH_10_1080p_sps</name></expr></argument>, <argument><expr><name>AVCi_HIGH_10_pps</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>AVCI_ENTRY</name><argument_list>(<argument><expr><literal type="number">960</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>AVCi_HIGH_10_720p_sps</name></expr></argument>, <argument><expr><name>AVCi_HIGH_10_pps</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AVCi_lookup</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>i_res</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_i</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_sps</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_sps</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pps</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_pps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>AVCI_ENTRIES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>AVCi_lookup_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_interlace</name> <operator>==</operator> <name>b_i</name> <operator>&amp;&amp;</operator> <name><name>AVCi_lookup_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_res</name> <operator>==</operator> <name>i_res</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_sps</name> <operator>=</operator> <name><name>AVCi_lookup_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_sps</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_sps</name> <operator>=</operator> <name><name>AVCi_lookup_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_sps</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_pps</name> <operator>=</operator> <name><name>AVCi_lookup_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_pps</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_pps</name> <operator>=</operator> <name><name>AVCi_lookup_table</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pps</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVCI_ENTRY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVCI_ENTRIES</name></cpp:undef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

static uint8_t * AVCi_create_avcC( uint16_t i_res, bool b_interlaced, int *pi_avcC )

{

const uint8_t *p_pps, *p_sps;

uint8_t i_sps, i_pps;

uint8_t *p_data = NULL;

if( AVCi_lookup( i_res, b_interlaced,

&amp;p_sps, &amp;i_sps, &amp;p_pps, &amp;i_pps ) )

{

int i_size = 5 + i_pps + i_sps + 2 + 2 * 3;

if( (p_data = (uint8_t *) malloc(i_size)) )

{

*pi_avcC = i_size;

p_data[0] = 0x01;

memcpy(&amp;p_data[1], p_sps, 3);

p_data[4] = 0xff;

p_data[5] = 0xe1; 

p_data[6] = 0x00; p_data[7] = i_sps + 1; 

p_data[8] = 0x67; 

memcpy(&amp;p_data[9], p_sps, i_sps);

p_data[9 + i_sps] = 0x01; 

p_data[10 + i_sps] = 0x00; p_data[11 + i_sps] = i_pps + 1; 

p_data[12 + i_sps] = 0x68; 

memcpy(&amp;p_data[13 + i_sps], p_pps, i_pps);

}

}

return p_data;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>AVCi_create_AnnexB</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>i_res</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_interlaced</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_avcC</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pps</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_sps</name></decl>, <decl><type ref="prev"/><name>i_pps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>rgi_startcode</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVCi_lookup</name><argument_list>( <argument><expr><name>i_res</name></expr></argument>, <argument><expr><name>b_interlaced</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_sps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_pps</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pps</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><name>i_pps</name> <operator>+</operator> <name>i_sps</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>p_data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_avcC</name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>rgi_startcode</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>p_sps</name></expr></argument>, <argument><expr><name>i_sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>i_sps</name></expr>]</index></name></expr></argument>, <argument><expr><name>rgi_startcode</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">9</literal> <operator>+</operator> <name>i_sps</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x68</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">10</literal> <operator>+</operator> <name>i_sps</name></expr>]</index></name></expr></argument>, <argument><expr><name>p_pps</name></expr></argument>, <argument><expr><name>i_pps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_data</name></expr>;</return>

</block_content>}</block></function>

</unit>
