<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mp4\languages.h"><function><type><specifier>static</specifier> <name>bool</name></type> <name>decodeQtLanguageCode</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>i_language_code</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_iso</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>b_mactables</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_qt_to_iso639_2T_lower</name> <init>=

<expr><literal type="string">"eng"</literal> <literal type="string">"fra"</literal> <literal type="string">"deu"</literal> <literal type="string">"ita"</literal> <literal type="string">"nld"</literal>

<literal type="string">"swe"</literal> <literal type="string">"spa"</literal> <literal type="string">"dan"</literal> <literal type="string">"por"</literal> <literal type="string">"nor"</literal> 

<literal type="string">"heb"</literal> <literal type="string">"jpn"</literal> <literal type="string">"ara"</literal> <literal type="string">"fin"</literal> <literal type="string">"gre"</literal>

<literal type="string">"isl"</literal> <literal type="string">"mlt"</literal> <literal type="string">"tur"</literal> <literal type="string">"hrv"</literal> <literal type="string">"zho"</literal> 

<literal type="string">"urd"</literal> <literal type="string">"hin"</literal> <literal type="string">"tha"</literal> <literal type="string">"kor"</literal> <literal type="string">"lit"</literal>

<literal type="string">"pol"</literal> <literal type="string">"hun"</literal> <literal type="string">"est"</literal> <literal type="string">"lav"</literal> <literal type="string">"sme"</literal> 

<literal type="string">"fao"</literal> <literal type="string">"fas"</literal> <literal type="string">"rus"</literal> <literal type="string">"zho"</literal> <literal type="string">"nld"</literal> 

<literal type="string">"gle"</literal> <literal type="string">"sqi"</literal> <literal type="string">"ron"</literal> <literal type="string">"ces"</literal> <literal type="string">"slk"</literal> 

<literal type="string">"slv"</literal> <literal type="string">"yid"</literal> <literal type="string">"srp"</literal> <literal type="string">"mkd"</literal> <literal type="string">"bul"</literal>

<literal type="string">"ukr"</literal> <literal type="string">"bel"</literal> <literal type="string">"uzb"</literal> <literal type="string">"kaz"</literal> <literal type="string">"aze"</literal> 

<literal type="string">"aze"</literal> <literal type="string">"hye"</literal> <literal type="string">"kat"</literal> <literal type="string">"mol"</literal> <literal type="string">"kir"</literal>

<literal type="string">"tgk"</literal> <literal type="string">"tuk"</literal> <literal type="string">"mon"</literal> <literal type="string">"mon"</literal> <literal type="string">"pus"</literal> 

<literal type="string">"kur"</literal> <literal type="string">"kas"</literal> <literal type="string">"snd"</literal> <literal type="string">"bod"</literal> <literal type="string">"nep"</literal>

<literal type="string">"san"</literal> <literal type="string">"mar"</literal> <literal type="string">"ben"</literal> <literal type="string">"asm"</literal> <literal type="string">"guj"</literal> 

<literal type="string">"pan"</literal> <literal type="string">"ori"</literal> <literal type="string">"mal"</literal> <literal type="string">"kan"</literal> <literal type="string">"tam"</literal>

<literal type="string">"tel"</literal> <literal type="string">"sin"</literal> <literal type="string">"mya"</literal> <literal type="string">"khm"</literal> <literal type="string">"lao"</literal> 

<literal type="string">"vie"</literal> <literal type="string">"ind"</literal> <literal type="string">"tgl"</literal> <literal type="string">"msa"</literal> <literal type="string">"msa"</literal>

<literal type="string">"amh"</literal> <literal type="string">"tir"</literal> <literal type="string">"orm"</literal> <literal type="string">"som"</literal> <literal type="string">"swa"</literal> 

<literal type="string">"kin"</literal> <literal type="string">"run"</literal> <literal type="string">"nya"</literal> <literal type="string">"mlg"</literal> <literal type="string">"epo"</literal></expr></init></decl> 

;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_qt_to_iso639_2T_upper</name> <init>=

<expr><literal type="string">"cym"</literal> <literal type="string">"eus"</literal> <literal type="string">"cat"</literal> <literal type="string">"lat"</literal> <literal type="string">"que"</literal> 

<literal type="string">"grn"</literal> <literal type="string">"aym"</literal> <literal type="string">"tat"</literal> <literal type="string">"uig"</literal> <literal type="string">"dzo"</literal>

<literal type="string">"jaw"</literal> <literal type="string">"sun"</literal> <literal type="string">"glg"</literal> <literal type="string">"afr"</literal> <literal type="string">"bre"</literal> 

<literal type="string">"iku"</literal> <literal type="string">"gla"</literal> <literal type="string">"glv"</literal> <literal type="string">"gle"</literal> <literal type="string">"ton"</literal>

<literal type="string">"gre"</literal></expr></init></decl> 

;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_language_code</name> <operator>&lt;</operator> <literal type="number">0x400</literal> <operator>||</operator> <name>i_language_code</name> <operator>==</operator> <literal type="number">0x7FFF</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>b_mactables</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_language_code</name> <operator>&lt;=</operator> <literal type="number">94</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>psz_qt_to_iso639_2T_lower</name> <operator>+</operator> <name>i_language_code</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_language_code</name> <operator>&gt;=</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>i_language_code</name> <operator>&lt;=</operator> <literal type="number">148</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_language_code</name> <operator>-=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>psz_qt_to_iso639_2T_upper</name> <operator>+</operator> <name>i_language_code</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>psz_iso</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>b_mactables</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_language_code</name> <operator>==</operator> <literal type="number">0x55C4</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>psz_iso</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>psz_iso</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name>i_language_code</name> <operator>&gt;&gt;</operator> <operator>(</operator> <operator>(</operator><literal type="number">2</literal><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><literal type="number">5</literal> <operator>)</operator> <operator>)</operator><operator>&amp;</operator><literal type="number">0x1f</literal> <operator>)</operator> <operator>+</operator> <literal type="number">0x60</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

</unit>
