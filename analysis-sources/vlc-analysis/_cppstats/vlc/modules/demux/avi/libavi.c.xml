<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\avi\libavi.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__EVEN</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>(((x) + 1) &amp; ~1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>GetFOURCC</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buff</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_buff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_buff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_buff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_buff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>AVI_ChunkSize</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_ck</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>__EVEN</name><argument_list>(<argument><expr><name><name>p_ck</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">8</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>AVI_ChunkEnd</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_ck</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>p_ck</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_pos</name></name> <operator>+</operator> <call><name>AVI_ChunkSize</name><argument_list>( <argument><expr><name>p_ck</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkReadCommon</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_chk</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>avi_chunk_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <name>i_pos</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"can't peek at %"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"no more data at %"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>=</operator> <call><name>GetFOURCC</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_pos</name></name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>&gt;=</operator> <name>UINT64_MAX</name> <operator>-</operator> <literal type="number">8</literal> <operator>||</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_pos</name></name> <operator>&gt;</operator> <name>UINT64_MAX</name> <operator>-</operator> <literal type="number">8</literal> <operator>||</operator>

<name>UINT64_MAX</name> <operator>-</operator> <name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_pos</name></name> <operator>-</operator> <literal type="number">8</literal> <operator>&lt;</operator> <call><name>__EVEN</name><argument_list>(<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_father</name> <operator>&amp;&amp;</operator> <call><name>AVI_ChunkEnd</name><argument_list>( <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <call><name>AVI_ChunkEnd</name><argument_list>( <argument><expr><name>p_father</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"chunk %4.4s does not fit into parent %"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name></expr></argument>, <argument><expr><call><name>AVI_ChunkEnd</name><argument_list>( <argument><expr><name>p_father</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>!=</operator> <name>AVIFOURCC_RIFF</name> <operator>||</operator>

<name><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<name><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>,

<argument><expr><literal type="string">"found chunk, fourcc: %4.4s size:%"</literal><name>PRIu64</name><literal type="string">" pos:%"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_GotoNextChunk</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_offset</name> <init>= <expr><call><name>AVI_ChunkEnd</name><argument_list>( <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>vlc_stream_Control</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_seekable</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>b_seekable</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name> <init>= <expr><name>i_offset</name> <operator>-</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>i_read</name> <operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>i_read</name><operator>)</operator></expr> ?</condition><then>

<expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_NextChunk</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_t</name></type> <name>chk</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chk</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>AVI_ChunkReadCommon</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chk</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_chk</name> <operator>=</operator> <operator>&amp;</operator><name>chk</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>AVI_GotoNextChunk</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_list</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_container</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_container</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_container</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"empty list chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot peek while reading list chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_seekable</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_container</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <call><name>GetFOURCC</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_container</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_ON2</name> <operator>&amp;&amp;</operator> <name><name>p_container</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>AVIFOURCC_ON2f</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_container</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>=</operator> <name>AVIFOURCC_RIFF</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_container</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>AVIFOURCC_AVI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_container</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_LIST</name> <operator>&amp;&amp;</operator>

<name><name>p_container</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>AVIFOURCC_movi</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_seekable</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"skipping movi chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVI_NextChunk</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_container</name></expr></argument> )</argument_list></call></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">12</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot enter chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>,

<argument><expr><literal type="string">"found LIST chunk: \'%4.4s\'"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_container</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;list \'%4.4s\'&gt;"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_container</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>avi_chunk_u</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name><name>p_container</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_chk</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>avi_chunk_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chk</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AVI_ChunkRead</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument>, <argument><expr><name>p_container</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_ChunkClean</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_chk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>AVI_ZEROSIZED_CHUNK</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_chk</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <name>p_chk</name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name><name>common</name><operator>.</operator><name>p_next</name></name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_container</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <call><name>AVI_ChunkEnd</name><argument_list>( <argument><expr><name>p_container</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_chk</name> <operator>&amp;&amp;</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_LIST</name> <operator>&amp;&amp;</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>AVIFOURCC_movi</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>!</operator><name>b_seekable</name> <operator>||</operator> <name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;/list \'%4.4s\'&gt;%x"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_container</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name></expr></argument>, <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>AVI_ZERO_FOURCC</name> <operator>||</operator> <name>i_ret</name> <operator>==</operator> <name>AVI_ZEROSIZED_CHUNK</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVI_GotoNextChunk</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_container</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>AVI_ChunkFetchIndexes</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_riff</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_movi</name> <init>= <expr><call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name>p_riff</name></expr></argument>, <argument><expr><name>AVIFOURCC_movi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_movi</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_indexpos</name> <init>= <expr><call><name>AVI_ChunkEnd</name><argument_list>( <argument><expr><name>p_movi</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_seekable</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_seekable</name> <operator>||</operator> <call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>i_indexpos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>avi_chunk_u</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name><name>p_riff</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_chk</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>avi_chunk_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chk</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>AVI_ChunkRead</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument>, <argument><expr><name>p_riff</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_ChunkClean</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <name>p_chk</name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name><name>common</name><operator>.</operator><name>p_next</name></name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_pos</name></name> <operator>+</operator>

<call><name>__EVEN</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_indx</name> <operator>||</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_idx1</name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_READCHUNK_ENTER</name></cpp:macro> <cpp:value>int64_t i_read = __EVEN(p_chk-&gt;common.i_chunk_size ) + 8; if( i_read &gt; 100000000 ) { msg_Err( s, "Big chunk ignored" ); return VLC_EGENERIC; } uint8_t *p_read, *p_buff; if( !( p_read = p_buff = malloc(i_read ) ) ) { return VLC_EGENERIC; } i_read = vlc_stream_Read( s, p_read, i_read ); if( i_read &lt; (int64_t)__EVEN(p_chk-&gt;common.i_chunk_size ) + 8 ) { free( p_buff ); return VLC_EGENERIC; }p_read += 8; i_read -= 8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_READ</name><parameter_list>( <parameter><type><name>res</name></type></parameter>, <parameter><type><name>func</name></type></parameter>, <parameter><type><name>size</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>if( i_read &lt; size ) { free( p_buff); return VLC_EGENERIC; } i_read -= size; res = func( p_read ); p_read += size</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_READCHUNK_EXIT</name><parameter_list>( <parameter><type><name>code</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>do { free( p_buff ); return code; } while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint8_t</name></type> <name>GetB</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>*</operator><name>ptr</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_READ1BYTE</name><parameter_list>( <parameter><type><name>i_byte</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>AVI_READ( i_byte, GetB, 1 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_READ2BYTES</name><parameter_list>( <parameter><type><name>i_word</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>AVI_READ( i_word, GetWLE, 2 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_READ4BYTES</name><parameter_list>( <parameter><type><name>i_dword</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>AVI_READ( i_dword, GetDWLE, 4 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_READ8BYTES</name><parameter_list>( <parameter><type><name>i_qword</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>AVI_READ( i_qword, GetQWLE, 8 )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVI_READFOURCC</name><parameter_list>( <parameter><type><name>i_dword</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>AVI_READ( i_dword, GetFOURCC, 4 )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_avih</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>AVI_READCHUNK_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>=</operator> <name>AVIFOURCC_avih</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_microsecperframe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_maxbytespersec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_reserved1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_totalframes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_initialframes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_suggestedbuffersize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_width</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_scale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_start</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>,

<argument><expr><literal type="string">"avih: streams:%d flags:%s%s%s%s %dx%d"</literal></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_streams</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_HASINDEX</name></expr>?</condition><then><expr><literal type="string">" HAS_INDEX"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_MUSTUSEINDEX</name></expr>?</condition><then><expr><literal type="string">" MUST_USE_INDEX"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_ISINTERLEAVED</name></expr>?</condition><then><expr><literal type="string">" IS_INTERLEAVED"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_flags</name></name><operator>&amp;</operator><name>AVIF_TRUSTCKTYPE</name></expr>?</condition><then><expr><literal type="string">" TRUST_CKTYPE"</literal></expr></then><else>:<expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_width</name></name></expr></argument>, <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>avih</name><operator>.</operator><name>i_height</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_strh</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>AVI_READCHUNK_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READFOURCC</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READFOURCC</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_handler</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_reserved1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_initialframes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_scale</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_start</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_suggestedbuffersize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_quality</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_samplesize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>,

<argument><expr><literal type="string">"strh: type:%4.4s handler:0x%8.8x samplesize:%d %.2ffps"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_type</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_handler</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_samplesize</name></name></expr></argument>,

<argument><expr><operator>(</operator> <ternary><condition><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_scale</name></name></expr> ?</condition><then>

<expr><operator>(</operator><name>float</name><operator>)</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_scale</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_strf</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_strh</name></decl>;</decl_stmt>

<expr_stmt><expr><name>AVI_READCHUNK_ENTER</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"malformed avi file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_EGENERIC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_strh</name> <operator>=</operator> <call><name>AVI_ChunkFind</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name></name></expr></argument>, <argument><expr><name>AVIFOURCC_strh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"malformed avi file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><ternary><condition><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>AVI_ZEROSIZED_CHUNK</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_strh</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case<expr><operator>(</operator> <name>AVIFOURCC_auds</name> <operator>)</operator></expr>:</case>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_ENOMEM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AVI_READ2BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ2BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ2BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ2BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>!=</operator> <name>WAVE_FORMAT_PCM</name>

<operator>&amp;&amp;</operator> <name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READ2BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>&gt;</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>=</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name> <operator>==</operator> <name>WAVE_FORMAT_EXTENSIBLE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Extended header found"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> ,

<argument><expr><name>p_buff</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof></expr></argument>, 

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>,

<argument><expr><literal type="string">"strf: audio:0x%4.4x channels:%d %dHz %dbits/sample %dkbps"</literal></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>auds</name><operator>.</operator><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <literal type="number">1000</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case<expr><operator>(</operator> <name>AVIFOURCC_vids</name> <operator>)</operator></expr>:</case>

<expr_stmt><expr><name><name>p_strh</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_samplesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name></name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_ENOMEM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biSize</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ2BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biPlanes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ2BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READFOURCC</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biSizeImage</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biXPelsPerMeter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biYPelsPerMeter</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrImportant</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biSize</name></name> <operator>&gt;</operator> <name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biSize</name></name> <operator>=</operator> <name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_extrasize</name> <init>= <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>p_buff</name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VLC_BITMAPINFOHEADER</name></expr></argument>)</argument_list></sizeof></expr></argument>, 

<argument><expr><name>i_extrasize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>&lt;</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name> <operator>=</operator> <name>UINT16_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_extrasize</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>UINT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>=</operator>

<call><name>__MIN</name><argument_list>( <argument><expr><name>i_extrasize</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>=</operator>

<call><name>__MIN</name><argument_list>( <argument><expr><name>VIDEO_PALETTE_COLORS_MAX</name></expr></argument>, <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biClrUsed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>,

<argument><expr><literal type="string">"strf: video:%4.4s %"</literal><name>PRIu32</name><literal type="string">"x%"</literal><name>PRIu32</name><literal type="string">" planes:%d %dbpp"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biCompression</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biWidth</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name> <operator>&lt;=</operator> <name>INT32_MAX</name></expr> ?</condition><then> <expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr>

</then><else>: <expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biHeight</name></name></expr></else></ternary></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biPlanes</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>vids</name><operator>.</operator><name>p_bih</name><operator>-&gt;</operator><name>biBitCount</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>AVIFOURCC_iavs</name></expr>:</case>

<case>case <expr><name>AVIFOURCC_ivas</name></expr>:</case>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>common</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>UNKNOWN_ES</name></expr>;</expr_stmt>

<break>break;</break>

<case>case<expr><operator>(</operator> <name>AVIFOURCC_txts</name> <operator>)</operator></expr>:</case>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>common</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>SPU_ES</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"unknown stream type: %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_strh</name><operator>-&gt;</operator><name>strh</name><operator>.</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strf</name><operator>.</operator><name>common</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>UNKNOWN_ES</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ChunkFree_strf</name><parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_strf_t</name> <modifier>*</modifier></type><name>p_strf</name> <init>= <expr><operator>(</operator><name>avi_chunk_strf_t</name><operator>*</operator><operator>)</operator><name>p_chk</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_strf</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>auds</name><operator>.</operator><name>p_wf</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_strf</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_strf</name><operator>-&gt;</operator><name>vids</name><operator>.</operator><name>p_bih</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_strd</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"Zero sized pre-JUNK section met"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVI_ZEROSIZED_CHUNK</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>AVI_READCHUNK_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strd</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>strd</name><operator>.</operator><name>p_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strd</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>p_buff</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><ternary><condition><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strd</name><operator>.</operator><name>p_data</name></name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ChunkFree_strd</name><parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>strd</name><operator>.</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_idx1</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl>, <decl><type ref="prev"/><name>i_index</name></decl>;</decl_stmt>

<expr_stmt><expr><name>AVI_READCHUNK_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument>, <argument><expr><name>i_read</name></expr></argument> )</argument_list></call> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_count</name></name> <operator>=</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_max</name></name> <operator>=</operator> <name>i_count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>idx1_entry_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_EGENERIC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_index</name> <operator>&lt;</operator> <name>i_count</name></expr> ;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READFOURCC</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"idx1: index entry:%d"</literal></expr></argument>, <argument><expr><name>i_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ChunkFree_idx1</name><parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>i_entry_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>idx1</name><operator>.</operator><name>entry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_indx</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_dummy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>avi_chunk_indx_t</name> <modifier>*</modifier></type><name>p_indx</name> <init>= <expr><operator>(</operator><name>avi_chunk_indx_t</name><operator>*</operator><operator>)</operator><name>p_chk</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>AVI_READCHUNK_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ2BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_longsperentry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ1BYTE</name> <argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indexsubtype</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ1BYTE</name> <argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>super</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name> <operator>==</operator> <name>AVI_INDEX_OF_CHUNKS</name> <operator>&amp;&amp;</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_indexsubtype</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READ8BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_baseoffset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name>i_dummy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name></expr></argument>, <argument><expr><name>i_read</name> <operator>/</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name> <operator>=</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>indx_std_entry_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name> <operator>==</operator> <name>AVI_INDEX_OF_CHUNKS</name> <operator>&amp;&amp;</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>i_indexsubtype</name></name> <operator>==</operator> <name>AVI_INDEX_2FIELD</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READ8BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_baseoffset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name>i_dummy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name></expr></argument>, <argument><expr><name>i_read</name> <operator>/</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name> <operator>=</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>indx_field_entry_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offsetfield2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name> <operator>==</operator> <name>AVI_INDEX_OF_INDEXES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_baseoffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name>i_dummy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name>i_dummy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name>i_dummy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name></expr></argument>, <argument><expr><name>i_read</name> <operator>/</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name> <operator>=</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>super</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>indx_super_entry_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>super</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READ8BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>super</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>super</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>super</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>i_ret</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"unknown type/subtype index"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"indx: type=%d subtype=%d entry=%d"</literal></expr></argument>,

<argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indextype</name></name></expr></argument>, <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_indexsubtype</name></name></expr></argument>, <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>i_entriesinuse</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>i_ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ChunkFree_indx</name><parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_indx_t</name> <modifier>*</modifier></type><name>p_indx</name> <init>= <expr><operator>(</operator><name>avi_chunk_indx_t</name><operator>*</operator><operator>)</operator><name>p_chk</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>std</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>field</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_indx</name><operator>-&gt;</operator><name>idx</name><operator>.</operator><name>super</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_vprp</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_vprp_t</name> <modifier>*</modifier></type><name>p_vprp</name> <init>= <expr><operator>(</operator><name>avi_chunk_vprp_t</name><operator>*</operator><operator>)</operator><name>p_chk</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>AVI_READCHUNK_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_video_format_token</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_video_standard</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_vertical_refresh</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_h_total_in_t</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_v_total_in_lines</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_frame_aspect_ratio</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_frame_width_in_pixels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_frame_height_in_pixels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_nb_fields_per_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_nb_fields_per_frame</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>field_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_compressed_bm_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>field_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_compressed_bm_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>field_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_valid_bm_height</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>field_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_valid_bm_width</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>field_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_valid_bm_x_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>field_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_valid_bm_y_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>field_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_video_x_offset_in_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>field_info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_video_y_valid_start_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"vprp: format:%d standard:%d"</literal></expr></argument>,

<argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_video_format_token</name></name></expr></argument>, <argument><expr><name><name>p_vprp</name><operator>-&gt;</operator><name>i_video_standard</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_dmlh</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_dmlh_t</name> <modifier>*</modifier></type><name>p_dmlh</name> <init>= <expr><operator>(</operator><name>avi_chunk_dmlh_t</name><operator>*</operator><operator>)</operator><name>p_chk</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>AVI_READCHUNK_ENTER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READ4BYTES</name><argument_list>( <argument><expr><name><name>p_dmlh</name><operator>-&gt;</operator><name>dwTotalFrames</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"dmlh: dwTotalFrames %d"</literal></expr></argument>,

<argument><expr><name><name>p_dmlh</name><operator>-&gt;</operator><name>dwTotalFrames</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name></decl>;</decl_stmt>

}</block> <decl><name><name>AVI_strz_type</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>AVIFOURCC_IARL</name></expr>, <expr><literal type="string">"Archive location"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IART</name></expr>, <expr><literal type="string">"Artist"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICMS</name></expr>, <expr><literal type="string">"Commisioned"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICMT</name></expr>, <expr><literal type="string">"Comments"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICOP</name></expr>, <expr><literal type="string">"Copyright"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICRD</name></expr>, <expr><literal type="string">"Creation date"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICRP</name></expr>, <expr><literal type="string">"Cropped"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IDIM</name></expr>, <expr><literal type="string">"Dimensions"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IDPI</name></expr>, <expr><literal type="string">"Dots per inch"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IENG</name></expr>, <expr><literal type="string">"Engineer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IGNR</name></expr>, <expr><literal type="string">"Genre"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISGN</name></expr>, <expr><literal type="string">"Secondary Genre"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IKEY</name></expr>, <expr><literal type="string">"Keywords"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ILGT</name></expr>, <expr><literal type="string">"Lightness"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IMED</name></expr>, <expr><literal type="string">"Medium"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_INAM</name></expr>, <expr><literal type="string">"Name"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IPLT</name></expr>, <expr><literal type="string">"Palette setting"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IPRD</name></expr>, <expr><literal type="string">"Product"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISBJ</name></expr>, <expr><literal type="string">"Subject"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISFT</name></expr>, <expr><literal type="string">"Software"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISHP</name></expr>, <expr><literal type="string">"Sharpness"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISRC</name></expr>, <expr><literal type="string">"Source"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISRF</name></expr>, <expr><literal type="string">"Source form"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ITCH</name></expr>, <expr><literal type="string">"Technician"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISMP</name></expr>, <expr><literal type="string">"Time code"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IDIT</name></expr>, <expr><literal type="string">"Digitalization time"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IWRI</name></expr>, <expr><literal type="string">"Writer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IPRO</name></expr>, <expr><literal type="string">"Producer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICNM</name></expr>, <expr><literal type="string">"Cinematographer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IPDS</name></expr>, <expr><literal type="string">"Production designer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IEDT</name></expr>, <expr><literal type="string">"Editor"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICDS</name></expr>, <expr><literal type="string">"Costume designer"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IMUS</name></expr>, <expr><literal type="string">"Music"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISTD</name></expr>, <expr><literal type="string">"Production studio"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IDST</name></expr>, <expr><literal type="string">"Distributor"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICNT</name></expr>, <expr><literal type="string">"Country"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISTR</name></expr>, <expr><literal type="string">"Starring"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IFRM</name></expr>, <expr><literal type="string">"Total number of parts"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_strn</name></expr>, <expr><literal type="string">"Stream name"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS1</name></expr>, <expr><literal type="string">"First Language"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS2</name></expr>, <expr><literal type="string">"Second Language"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS3</name></expr>, <expr><literal type="string">"Third Language"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS4</name></expr>, <expr><literal type="string">"Fourth Language"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS5</name></expr>, <expr><literal type="string">"Fifth Language"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS6</name></expr>, <expr><literal type="string">"Sixth Language"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS7</name></expr>, <expr><literal type="string">"Seventh Language"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS8</name></expr>, <expr><literal type="string">"Eighth Language"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS9</name></expr>, <expr><literal type="string">"Ninth Language"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"???"</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_strz</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_chunk_STRING_t</name> <modifier>*</modifier></type><name>p_strz</name> <init>= <expr><operator>(</operator><name>avi_chunk_STRING_t</name><operator>*</operator><operator>)</operator><name>p_chk</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>AVI_READCHUNK_ENTER</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>AVI_strz_type</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>||</operator>

<name><name>AVI_strz_type</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name><name>p_strz</name><operator>-&gt;</operator><name>i_chunk_fourcc</name></name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_type</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>AVI_strz_type</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>psz_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>i_chunk_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_strz</name><operator>-&gt;</operator><name>p_type</name></name> <operator>||</operator> <operator>!</operator><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_EGENERIC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name></expr></argument>, <argument><expr><name>p_read</name></expr></argument>, <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>i_chunk_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name><index>[<expr><name><name>p_strz</name><operator>-&gt;</operator><name>i_chunk_size</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"%4.4s: %s : %s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_strz</name><operator>-&gt;</operator><name>i_chunk_fourcc</name></name></expr></argument>, <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_type</name></name></expr></argument>, <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AVI_READCHUNK_EXIT</name><argument_list>( <argument><expr><name>VLC_SUCCESS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ChunkFree_strz</name><parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_STRING_t</name> <modifier>*</modifier></type><name>p_strz</name> <init>= <expr><operator>(</operator><name>avi_chunk_STRING_t</name><operator>*</operator><operator>)</operator><name>p_chk</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_strz</name><operator>-&gt;</operator><name>p_str</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkRead_nothing</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>AVI_NextChunk</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ChunkFree_nothing</name><parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>AVI_ChunkRead_function</name>)<parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>AVI_ChunkFree_function</name>)<parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>;</function_decl>

}</block> <decl><name><name>AVI_Chunk_Function</name> <index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>AVIFOURCC_RIFF</name></expr>, <expr><name>AVI_ChunkRead_list</name></expr>, <expr><name>AVI_ChunkFree_nothing</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ON2</name></expr>, <expr><name>AVI_ChunkRead_list</name></expr>, <expr><name>AVI_ChunkFree_nothing</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_LIST</name></expr>, <expr><name>AVI_ChunkRead_list</name></expr>, <expr><name>AVI_ChunkFree_nothing</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_avih</name></expr>, <expr><name>AVI_ChunkRead_avih</name></expr>, <expr><name>AVI_ChunkFree_nothing</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ON2h</name></expr>, <expr><name>AVI_ChunkRead_avih</name></expr>, <expr><name>AVI_ChunkFree_nothing</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_strh</name></expr>, <expr><name>AVI_ChunkRead_strh</name></expr>, <expr><name>AVI_ChunkFree_nothing</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_strf</name></expr>, <expr><name>AVI_ChunkRead_strf</name></expr>, <expr><name>AVI_ChunkFree_strf</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_strd</name></expr>, <expr><name>AVI_ChunkRead_strd</name></expr>, <expr><name>AVI_ChunkFree_strd</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_idx1</name></expr>, <expr><name>AVI_ChunkRead_idx1</name></expr>, <expr><name>AVI_ChunkFree_idx1</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_indx</name></expr>, <expr><name>AVI_ChunkRead_indx</name></expr>, <expr><name>AVI_ChunkFree_indx</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_vprp</name></expr>, <expr><name>AVI_ChunkRead_vprp</name></expr>, <expr><name>AVI_ChunkFree_nothing</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_JUNK</name></expr>, <expr><name>AVI_ChunkRead_nothing</name></expr>, <expr><name>AVI_ChunkFree_nothing</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_dmlh</name></expr>, <expr><name>AVI_ChunkRead_dmlh</name></expr>, <expr><name>AVI_ChunkFree_nothing</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IARL</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IART</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICMS</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICMT</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICOP</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICRD</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICRP</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IDIM</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IDPI</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IENG</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IGNR</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISGN</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IKEY</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ILGT</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IMED</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_INAM</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IPLT</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IPRD</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISBJ</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISFT</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISHP</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISRC</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISRF</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ITCH</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISMP</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IDIT</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ILNG</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IRTD</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IWEB</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IPRT</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IWRI</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IPRO</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICNM</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IPDS</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IEDT</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICDS</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IMUS</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISTD</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IDST</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ICNT</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_ISTR</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IFRM</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS1</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS2</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS3</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS4</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS5</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS6</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS7</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS8</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_IAS9</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AVIFOURCC_strn</name></expr>, <expr><name>AVI_ChunkRead_strz</name></expr>, <expr><name>AVI_ChunkFree_strz</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AVI_ChunkFunctionFind</name><parameter_list>( <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i_index</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>AVI_Chunk_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <name>i_fourcc</name> <operator>)</operator><operator>||</operator>

<operator>(</operator> <name><name>AVI_Chunk_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>i_fourcc</name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>i_index</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>AVI_ChunkRead</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chk</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot read null chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_ChunkReadCommon</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument>, <argument><expr><name>p_father</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"found null fourcc chunk (corrupted file?)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVI_ZERO_FOURCC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name></name> <operator>=</operator> <name>p_father</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <call><name>AVI_ChunkFunctionFind</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>AVI_Chunk_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>AVI_ChunkRead_function</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name><name>AVI_Chunk_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><call><name>AVI_ChunkRead_function</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>==</operator> <literal type="char">'x'</literal> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>==</operator> <literal type="char">'i'</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>==</operator> <literal type="char">'x'</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>=</operator> <name>AVIFOURCC_indx</name></expr>;</expr_stmt>

<return>return <expr><call><name>AVI_ChunkRead_indx</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"unknown chunk: %4.4s (not loaded)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVI_NextChunk</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AVI_ChunkClean</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_child</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chk</name></expr> )</condition>

<block>{<block_content>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_child</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_ChunkClean</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <call><name>AVI_ChunkFunctionFind</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>AVI_Chunk_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><name>AVI_ChunkFree_function</name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVI_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"free chunk %4.4s"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>AVI_Chunk_Function</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>.</operator><call><name>AVI_ChunkFree_function</name><argument_list>( <argument><expr><name>p_chk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><literal type="string">"unknown chunk: %4.4s (not unloaded)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>AVI_ChunkDumpDebug_level</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,

<parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_level</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_level</name> <operator>&gt;=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_RIFF</name> <operator>||</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_ON2</name> <operator>||</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_LIST</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i_level</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal><operator>*</operator><name>i_level</name></expr></argument>,

<argument><expr><literal type="string">"%c %4.4s-%4.4s size:%"</literal><name>PRIu64</name><literal type="string">" pos:%"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i_level</name></expr> ?</condition><then> <expr><literal type="char">'+'</literal></expr> </then><else>: <expr><literal type="char">'*'</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><name>i_level</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">4</literal><operator>*</operator><name>i_level</name></expr></argument>,

<argument><expr><literal type="string">"+ %4.4s size:%"</literal><name>PRIu64</name><literal type="string">" pos:%"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument>,

<argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_child</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_ChunkDumpDebug_level</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_child</name></expr></argument>, <argument><expr><name>i_level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>AVI_ChunkReadRoot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>avi_chunk_list_t</name> <modifier>*</modifier></type><name>p_list</name> <init>= <expr><operator>(</operator><name>avi_chunk_list_t</name><operator>*</operator><operator>)</operator><name>p_root</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_seekable</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_chunk_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_chunk_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>UINT64_MAX</name> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_chunk_fourcc</name></name> <operator>=</operator> <name>AVIFOURCC_LIST</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_father</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>avi_chunk_u</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_append</name> <init>= <expr><operator>&amp;</operator><name><name>p_root</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_chk</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>avi_chunk_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chk</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>AVI_ChunkRead</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument>, <argument><expr><name>p_root</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_ChunkClean</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_append</name> <operator>=</operator> <name>p_chk</name></expr>;</expr_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pp_append</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pp_append</name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pp_append</name><operator>)</operator><operator>-&gt;</operator><name><name>common</name><operator>.</operator><name>p_next</name></name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_pos</name></name> <operator>+</operator>

<call><name>__EVEN</name><argument_list>( <argument><expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_size</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>==</operator> <name>AVIFOURCC_RIFF</name> <operator>&amp;&amp;</operator>

<name><name>p_chk</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>AVIFOURCC_AVI</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_seekable</name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_chunk_size</name></name> <operator>=</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVI_ChunkDumpDebug_level</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>s</name></expr></argument>, <argument><expr><name>p_root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AVI_ChunkFreeRoot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>AVI_ChunkClean</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_chk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>AVI_ChunkCount_</name><parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chk</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</init>

<condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_list</name> <operator>&amp;&amp;</operator> <name><name>p_child</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>!=</operator> <name>i_fourcc</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>b_list</name> <operator>||</operator> <name><name>p_child</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <name>i_fourcc</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>AVI_ChunkFind_</name><parameter_list>( <parameter><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_chk</name></decl></parameter>,

<parameter><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_number</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_chk</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>avi_chunk_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name><name>p_chk</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr></init></decl>;</init>

<condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_list</name> <operator>&amp;&amp;</operator> <name><name>p_child</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_chunk_fourcc</name></name> <operator>!=</operator> <name>i_fourcc</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>b_list</name> <operator>||</operator> <name><name>p_child</name><operator>-&gt;</operator><name>list</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <name>i_fourcc</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_number</name><operator>--</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_child</name></expr>;</return></block_content></block></if></if_stmt> 

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
