<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\image.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_image.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mxpeg_helper.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_TEXT</name></cpp:macro> <cpp:value>N_("ES ID")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ID_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Set the ID of the elementary stream")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_TEXT</name></cpp:macro> <cpp:value>N_("Group")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUP_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the group of the elementary stream")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_TEXT</name></cpp:macro> <cpp:value>N_("Decode")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Decode at the demuxer stage")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_TEXT</name></cpp:macro> <cpp:value>N_("Forced chroma")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHROMA_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If non empty and image-decode is true, the image will be " "converted to the specified chroma.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DURATION_TEXT</name></cpp:macro> <cpp:value>N_("Duration in seconds")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DURATION_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Duration in seconds before simulating an end of file. " "A negative value means an unlimited play time.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_TEXT</name></cpp:macro> <cpp:value>N_("Frame rate")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Frame rate of the elementary stream produced.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT_TEXT</name></cpp:macro> <cpp:value>N_("Real-time")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Use real-time mode suitable for being used as a master input and " "real-time input slaves.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"Image demuxer"</literal>)</argument>)</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument>N_(<literal type="string">"Image"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_DEMUX</argument>)</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"image-id"</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>ID_TEXT</argument>, <argument>ID_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_integer</name><argument_list>(<argument><literal type="string">"image-group"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>GROUP_TEXT</argument>, <argument>GROUP_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"image-decode"</literal></argument>, <argument>true</argument>, <argument>DECODE_TEXT</argument>, <argument>DECODE_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"image-chroma"</literal></argument>, <argument><literal type="string">""</literal></argument>, <argument>CHROMA_TEXT</argument>, <argument>CHROMA_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_float</name><argument_list>(<argument><literal type="string">"image-duration"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument>DURATION_TEXT</argument>, <argument>DURATION_LONGTEXT</argument>, <argument>false</argument>)</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_string</name><argument_list>(<argument><literal type="string">"image-fps"</literal></argument>, <argument><literal type="string">"10/1"</literal></argument>, <argument>FPS_TEXT</argument>, <argument>FPS_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_bool</name><argument_list>(<argument><literal type="string">"image-realtime"</literal></argument>, <argument>false</argument>, <argument>RT_TEXT</argument>, <argument>RT_LONGTEXT</argument>, <argument>true</argument>)</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_realtime</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts_next</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Load</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>max_size</name> <init>= <expr><literal type="number">4096</literal> <operator>*</operator> <literal type="number">4096</literal> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_GetSize</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>max_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"image too large (%"</literal><name>PRIu64</name><literal type="string">" &gt; %u), rejected"</literal></expr></argument>,

<argument><expr><name>size</name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>max_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><name>block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Decode</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>,

<parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>image_handler_t</name> <modifier>*</modifier></type><name>handler</name> <init>= <expr><call><name>image_HandlerCreate</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>handler</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>video_format_t</name></type> <name>decoded</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>video_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>image</name> <init>= <expr><call><name>image_Read</name><argument_list>(<argument><expr><name>handler</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>image_HandlerDelete</name><argument_list>(<argument><expr><name>handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>image</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_InitFromVideo</name><argument_list>(<argument><expr><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>video_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>image</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name> <operator>*</operator> <name><name>image</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>image</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>plane_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>&amp;</operator><name><name>image</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>src</name><operator>-&gt;</operator><name>i_visible_lines</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>p_pixels</name><index>[<expr><name>y</name> <operator>*</operator> <name><name>src</name><operator>-&gt;</operator><name>i_pitch</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>src</name><operator>-&gt;</operator><name>i_visible_pitch</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>image</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>data</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>deadline</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>pts_first</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>pts_offset</name></name> <operator>+</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pts_next</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deadline</name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts_next</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>is_realtime</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>deadline</name> <operator>=</operator> <call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>max_wait</name> <init>= <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>deadline</name> <operator>+</operator> <name>max_wait</name> <operator>&lt;</operator> <name>pts_first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>deadline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_tick_wait</name><argument_list>(<argument><expr><name>deadline</name> <operator>+</operator> <name>max_wait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>deadline</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>pts_first</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>pts</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>pts_offset</name></name> <operator>+</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pts</name> <operator>&gt;=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts_offset</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>&gt;=</operator> <name>deadline</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>

<name><name>data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name>pts</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>is_realtime</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>position</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>is_realtime</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>position</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>position</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts_offset</name></name> <operator>+</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>is_realtime</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>time</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><call><name>VLC_CLIP</name><argument_list>(<argument><expr><name>time</name> <operator>-</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts_offset</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_NEXT_DEMUX_TIME</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts_next</name> <init>= <expr><name>VLC_TICK_0</name> <operator>+</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pts_next</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts_offset</name></name> <operator>=</operator> <name>pts_next</name> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts_next</name></name> <operator>=</operator> <name>pts_next</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>fps</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>fps</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name><operator>.</operator><name>i_divider_num</name></name> <operator>/</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name><operator>.</operator><name>i_divider_den</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsBmp</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"BM"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"BA"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"CI"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"CP"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"IC"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"PT"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>file_size</name> <init>= <expr><call><name>GetDWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>data_offset</name> <init>= <expr><call><name>GetDWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>header_size</name> <init>= <expr><call><name>GetDWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>file_size</name> <operator>!=</operator> <literal type="number">14</literal> <operator>&amp;&amp;</operator> <name>file_size</name> <operator>!=</operator> <literal type="number">14</literal> <operator>+</operator> <name>header_size</name> <operator>&amp;&amp;</operator>

<name>file_size</name> <operator>&lt;=</operator> <name>data_offset</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>data_offset</name> <operator>&lt;</operator> <name>header_size</name> <operator>+</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header_size</name> <operator>!=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>header_size</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsPcx</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">66</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">66</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x0A</literal> <operator>||</operator> 

<operator>(</operator><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x02</literal> <operator>&amp;&amp;</operator>

<name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x03</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x05</literal><operator>)</operator> <operator>||</operator> 

<operator>(</operator><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> 

<operator>(</operator><name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator> <operator>||</operator> 

<name><name>header</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> 

<name><name>header</name><index>[<expr><literal type="number">65</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">65</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator> 

<call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsLbm</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"FORM"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">4</literal> <operator>||</operator>

<operator>(</operator><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ILBM"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"PBM "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsPnmBlank</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>v</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>v</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <name>v</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <name>v</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsPnm</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'P'</literal> <operator>||</operator>

<name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'1'</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'6'</literal> <operator>||</operator>

<operator>!</operator><call><name>IsPnmBlank</name><argument_list>(<argument><expr><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>number_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, <decl><type ref="prev"/><name>parsing_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>number_count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IsPnmBlank</name><argument_list>(<argument><expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parsing_number</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>parsing_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>number_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <name><name>header</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>parsing_number</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>number_count</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>FindJpegMarker</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>position</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal> <operator>||</operator> <name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0xff</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name><name>data</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0xff</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsJfif</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FindJpegMarker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xd8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FindJpegMarker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xe0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>position</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"JFIF\0"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsWebP</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"WEBPVP8 "</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsSpiff</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">36</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xd8</literal> <operator>||</operator>

<name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xff</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xe8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"SPIFF\0"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsExif</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FindJpegMarker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xd8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FindJpegMarker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xe1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>position</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><name>position</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Exif\0"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>FindSVGmarker</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>position</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>marker</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>*</operator><name>position</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>marker</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>position</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsSVG</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ext</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="string">".svg"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ext</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>size</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">4096</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>position</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>xml</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;?xml version=\""</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FindSVGmarker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>endxml</name><index>[]</index></name> <init>= <expr><literal type="string">"&gt;\0"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FindSVGmarker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>endxml</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;=</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>svg</name><index>[]</index></name> <init>= <expr><literal type="string">"&lt;svg"</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FindSVGmarker</name><argument_list>(<argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>svg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>position</name> <operator>&lt;</operator> <literal type="number">19</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsTarga</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">18</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>header</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator>

<name><name>header</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator>

<name><name>header</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">11</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> 

<call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator>

<name><name>header</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator>

<name><name>header</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">24</literal> <operator>&amp;&amp;</operator> <name><name>header</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">32</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>header</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xc0</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>size</name> <init>= <expr><call><name>stream_Size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">18</literal> <operator>+</operator> <literal type="number">26</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>can_seek</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Control</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>can_seek</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name>can_seek</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>position</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">26</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>footer</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>footer</name></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">26</literal>

<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>footer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"TRUEVISION-XFILE.\x00"</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>position</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>marker_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>marker</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>detect</name>)<parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>image_format_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_XCF</name></cpp:macro> <cpp:value>VLC_FOURCC('X', 'C', 'F', ' ')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_CODEC_LBM</name></cpp:macro> <cpp:value>VLC_FOURCC('L', 'B', 'M', ' ')</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>image_format_t</name></type> <name><name>formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_XCF</name></expr>,

<expr><operator>.</operator><name>marker_size</name> <operator>=</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>marker</name> <operator>=</operator> <block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">' '</literal></expr>,

<expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="char">'e'</literal></expr>, <expr><literal type="char">'\0'</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_XCF</name></expr>,

<expr><operator>.</operator><name>marker_size</name> <operator>=</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>marker</name> <operator>=</operator> <block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">' '</literal></expr>,

<expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'1'</literal></expr>, <expr><literal type="char">'\0'</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_XCF</name></expr>,

<expr><operator>.</operator><name>marker_size</name> <operator>=</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>marker</name> <operator>=</operator> <block>{ <expr><literal type="char">'g'</literal></expr>, <expr><literal type="char">'i'</literal></expr>, <expr><literal type="char">'m'</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="char">' '</literal></expr>, <expr><literal type="char">'x'</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="char">' '</literal></expr>,

<expr><literal type="char">'v'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'0'</literal></expr>, <expr><literal type="char">'2'</literal></expr>, <expr><literal type="char">'\0'</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_PNG</name></expr>,

<expr><operator>.</operator><name>marker_size</name> <operator>=</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>marker</name> <operator>=</operator> <block>{ <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x50</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x0A</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x0A</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_GIF</name></expr>,

<expr><operator>.</operator><name>marker_size</name> <operator>=</operator> <literal type="number">6</literal></expr>,

<expr><operator>.</operator><name>marker</name> <operator>=</operator> <block>{ <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'7'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_GIF</name></expr>,

<expr><operator>.</operator><name>marker_size</name> <operator>=</operator> <literal type="number">6</literal></expr>,

<expr><operator>.</operator><name>marker</name> <operator>=</operator> <block>{ <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'F'</literal></expr>, <expr><literal type="char">'8'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'a'</literal></expr> }</block></expr>

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_TIFF</name></expr>,

<expr><operator>.</operator><name>marker_size</name> <operator>=</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>marker</name> <operator>=</operator> <block>{ <expr><literal type="char">'I'</literal></expr>, <expr><literal type="char">'I'</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_TIFF</name></expr>,

<expr><operator>.</operator><name>marker_size</name> <operator>=</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>marker</name> <operator>=</operator> <block>{ <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x2a</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_BMP</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsBmp</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_PCX</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsPcx</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_LBM</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsLbm</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_PNM</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsPnm</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_MXPEG</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsMxpeg</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_JPEG</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsJfif</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_JPEG</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsSpiff</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_JPEG</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsExif</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_WEBP</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsWebP</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_BPG</name></expr>,

<expr><operator>.</operator><name>marker_size</name> <operator>=</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>marker</name> <operator>=</operator> <block>{ <expr><literal type="char">'B'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="number">0xFB</literal></expr> }</block></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_SVG</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsSVG</name></expr>,

}</block></expr>,

<expr><block>{ <expr><operator>.</operator><name>codec</name> <operator>=</operator> <name>VLC_CODEC_TARGA</name></expr>,

<expr><operator>.</operator><name>detect</name> <operator>=</operator> <name>IsTarga</name></expr>,

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type> <name>Detect</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>peek_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>image_format_t</name> <modifier>*</modifier></type><name>img</name> <init>= <expr><operator>&amp;</operator><name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>img</name><operator>-&gt;</operator><name>detect</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name><name>img</name><operator>-&gt;</operator><name>detect</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>img</name><operator>-&gt;</operator><name>codec</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>peek_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>peek_size</name> <operator>&lt;</operator> <name><name>img</name><operator>-&gt;</operator><name>marker_size</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>val</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>marker_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>peek_size</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>img</name><operator>-&gt;</operator><name>marker_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>peek_size</name> <operator>&gt;=</operator> <name><name>img</name><operator>-&gt;</operator><name>marker_size</name></name>

<operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>peek</name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>marker</name></name></expr></argument>, <argument><expr><name><name>img</name><operator>-&gt;</operator><name>marker_size</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>img</name><operator>-&gt;</operator><name>codec</name></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>codec</name> <init>= <expr><call><name>Detect</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Detected image: %s"</literal></expr></argument>,

<argument><expr><call><name>vlc_fourcc_GetDescription</name><argument_list>(<argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codec</name> <operator>==</operator> <name>VLC_CODEC_MXPEG</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><call><name>Load</name><argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"image-decode"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"image-chroma"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>chroma</name> <init>= <expr><call><name>vlc_fourcc_GetCodecFromString</name><argument_list>(<argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>string</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>=</operator> <call><name>Decode</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>chroma</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"image-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"image-group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_InheritURational</name><argument_list>(<argument><expr><name>demux</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>,

<argument><expr><literal type="string">"image-fps"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame rate, using 10/1 instead"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Failed to load the image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><call><name>var_InheritFloat</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"image-duration"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_realtime</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"image-realtime"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts_offset</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>is_realtime</name></name></expr> ?</condition><then> <expr><call><name>vlc_tick_now</name><argument_list>()</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts_next</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name></expr></argument>, <argument><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>object</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>object</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
