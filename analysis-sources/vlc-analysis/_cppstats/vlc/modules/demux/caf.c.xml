<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\caf.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_( <literal type="string">"CAF demuxer"</literal> )</argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">140</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"caf"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>frame_span_t</name>

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_desc_bytes</name></decl>;</decl_stmt>

}</block></struct></type> <name>frame_span_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>packet_table_t</name>

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_num_packets</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_num_valid_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_num_priming_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_num_remainder_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_descriptions_start</name></decl>;</decl_stmt>

}</block></struct></type> <name>packet_table_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_max_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_data_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>frame_span_t</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>packet_table_t</name></type> <name>packet_table</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name>kCHUNK_SIZE_EOF</name> <init>= <expr><call><name>UINT64_C</name><argument_list>( <argument><expr><literal type="number">0xffffffffffffffff</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseVarLenInteger</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buff</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buff_len</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_value_out</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_len_out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>i_len_out</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>finished</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_buff_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator> <name>i_value</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>&gt;</operator> <name>UINT32_MAX</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_byte</name> <init>= <expr><name><name>p_buff</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_value</name> <operator>=</operator> <operator>(</operator> <name>i_value</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>|</operator> <operator>(</operator> <name>i_byte</name> <operator>&amp;</operator> <literal type="number">0x7f</literal> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator> <operator>*</operator><name>i_len_out</name> <operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>i_byte</name> <operator>&amp;</operator> <literal type="number">0x80</literal> <operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>finished</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>finished</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_value_out</name> <operator>=</operator> <name>i_value</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>GetDBLBE</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<union>union

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>uint64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dbl</name></decl>;</decl_stmt>

}</block> <decl><name>u_64</name></decl>;</union>

<expr_stmt><expr><name><name>u_64</name><operator>.</operator><name>uint64</name></name> <operator>=</operator> <call><name>GetQWBE</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>u_64</name><operator>.</operator><name>dbl</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ReadBEInt32ToUInt32</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>i_out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_value</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_value</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>i_out</name> <operator>=</operator> <name>i_value</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ReadBEInt64ToUInt64</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>i_out</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_value</name> <init>= <expr><call><name>GetQWBE</name><argument_list>( <argument><expr><name>p</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_value</name> <operator>&gt;</operator> <name>INT64_MAX</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>i_out</name> <operator>=</operator> <name>i_value</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>NeedsPacketTable</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>TotalNumFrames</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>NeedsPacketTable</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_data_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>!=</operator> <name>kCHUNK_SIZE_EOF</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_data_size</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_stream_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_stream_size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>i_stream_size</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_offset</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_data_size</name> <operator>=</operator> <name>i_stream_size</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_offset</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_data_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>i_data_size</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_packets</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>TotalNumSamples</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>NeedsPacketTable</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<return>return <expr><call><name>TotalNumFrames</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<return>return <expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_valid_frames</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_priming_frames</name></name> <operator>+</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_remainder_frames</name></name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_fourcc_t</name></type> <name>ReadFOURCC</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>FrameSpanAddSpan</name><parameter_list>( <parameter><decl><type><name>frame_span_t</name> <modifier>*</modifier></type><name>span1</name></decl></parameter>, <parameter><decl><type><name>frame_span_t</name> <modifier>*</modifier></type><name>span2</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>span1</name><operator>-&gt;</operator><name>i_frames</name></name> <operator>+=</operator> <name><name>span2</name><operator>-&gt;</operator><name>i_frames</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>span1</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>+=</operator> <name><name>span2</name><operator>-&gt;</operator><name>i_samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>span1</name><operator>-&gt;</operator><name>i_bytes</name></name> <operator>+=</operator> <name><name>span2</name><operator>-&gt;</operator><name>i_bytes</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>span1</name><operator>-&gt;</operator><name>i_desc_bytes</name></name> <operator>+=</operator> <name><name>span2</name><operator>-&gt;</operator><name>i_desc_bytes</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FrameSpanAddDescription</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_desc_offset</name></decl></parameter>, <parameter><decl><type><name>frame_span_t</name> <modifier>*</modifier></type><name>span</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>span</name><operator>-&gt;</operator><name>i_bytes</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>span</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>span</name><operator>-&gt;</operator><name>i_frames</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_desc_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_descriptions_start</name></name> <operator>+</operator> <name>i_desc_offset</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Couldn't seek packet description."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_peek_len</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek_len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_peek_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>span</name><operator>-&gt;</operator><name>i_bytes</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_this_int</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParseVarLenInteger</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_this_int</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_desc_size</name> <operator>+=</operator> <name>i_this_int</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>span</name><operator>-&gt;</operator><name>i_bytes</name></name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>span</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_desc_size</name> <operator>&gt;=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>i_peek_len</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_num_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_this_int</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParseVarLenInteger</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>i_desc_size</name></expr></argument>, <argument><expr><name>i_peek_len</name> <operator>-</operator> <name>i_desc_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_num_samples</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_this_int</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_desc_size</name> <operator>+=</operator> <name>i_this_int</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>span</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>+=</operator> <name>i_num_samples</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>span</name><operator>-&gt;</operator><name>i_desc_bytes</name></name> <operator>+=</operator> <name>i_desc_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>span</name><operator>-&gt;</operator><name>i_frames</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>vlc_tick_t</name></type> <name>FrameSpanGetTime</name><parameter_list>( <parameter><decl><type><name>frame_span_t</name> <modifier>*</modifier></type><name>span</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_sample_rate</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_sample_rate</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>span</name><operator>-&gt;</operator><name>i_samples</name></name></expr></argument>, <argument><expr><name>i_sample_rate</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>VLC_TICK_0</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SetSpanWithSample</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>frame_span_t</name> <modifier>*</modifier></type><name>p_span</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_target_sample</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_num_frames</name> <init>= <expr><call><name>TotalNumFrames</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>NeedsPacketTable</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_frame</name> <init>= <expr><name>i_target_sample</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_remaining</name> <init>= <expr><name>i_target_sample</name> <operator>-</operator> <name>i_frame</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_remaining</name> <operator>&gt;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>/</operator> <literal type="number">2</literal> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_frame</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_frame</name> <operator>&gt;</operator> <name>i_num_frames</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_frame</name> <operator>=</operator> <name>i_num_frames</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_span</name><operator>-&gt;</operator><name>i_frames</name></name> <operator>=</operator> <name>i_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_span</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>=</operator> <name>i_frame</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_span</name><operator>-&gt;</operator><name>i_bytes</name></name> <operator>=</operator> <name>i_frame</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_span</name><operator>-&gt;</operator><name>i_desc_bytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_span</name> <operator>=</operator> <operator>(</operator><name>frame_span_t</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

<decl_stmt><decl><type><name>frame_span_t</name></type> <name>prev_span</name></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_span</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>&lt;</operator> <name>i_target_sample</name> <operator>&amp;&amp;</operator> <name><name>p_span</name><operator>-&gt;</operator><name>i_frames</name></name> <operator>&lt;</operator> <name>i_num_frames</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>prev_span</name> <operator>=</operator> <operator>*</operator><name>p_span</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FrameSpanAddDescription</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_span</name><operator>-&gt;</operator><name>i_desc_bytes</name></name></expr></argument>, <argument><expr><name>p_span</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_span</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>&gt;=</operator> <name>i_target_sample</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_this_samples</name> <init>= <expr><name><name>p_span</name><operator>-&gt;</operator><name>i_samples</name></name> <operator>-</operator> <name><name>prev_span</name><operator>.</operator><name>i_samples</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_target_sample</name> <operator>-</operator> <name><name>prev_span</name><operator>.</operator><name>i_samples</name></name> <operator>&lt;</operator> <name>i_this_samples</name> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>p_span</name> <operator>=</operator> <name>prev_span</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>NextChunk</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_fourcc_t</name> <modifier>*</modifier></type><name>p_fcc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_read</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_read</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_fcc</name> <operator>=</operator> <call><name>ReadFOURCC</name><argument_list>( <argument><expr><name>p_read</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name> <init>= <expr><call><name>GetQWBE</name><argument_list>( <argument><expr><name>p_read</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;</operator> <name>INT64_MAX</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_fcc</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>i_size</name> <operator>==</operator> <call><name>UINT64_C</name><argument_list>( <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name>kCHUNK_SIZE_EOF</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDescChunk</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">4</literal> <operator>)</operator></expr>)</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fmt</name> <init>= <expr><call><name>ReadFOURCC</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_fmt_flags</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bits_per_channel</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">28</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bytes_per_packet</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_frames_per_packet</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">20</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_channels_per_frame</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">24</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_fmt</name> <operator>==</operator> <name>VLC_CODEC_DVD_LPCM</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_frames_per_packet</name> <operator>||</operator> <operator>!</operator><name>i_channels_per_frame</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Absurd LPCM parameters (frames_per_packet: %u, channels_per_frame: %u)."</literal></expr></argument>, <argument><expr><name>i_frames_per_packet</name></expr></argument>, <argument><expr><name>i_channels_per_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_unpacked_bits_per_sample</name> <init>= <expr><operator>(</operator> <name>i_bytes_per_packet</name> <operator>/</operator> <name>i_frames_per_packet</name> <operator>/</operator> <name>i_channels_per_frame</name> <operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_float</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator> <name>i_fmt_flags</name> <operator>&amp;</operator> <operator>(</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_be</name> <init>= <expr><operator>!</operator><operator>(</operator> <name>i_fmt_flags</name> <operator>&amp;</operator> <operator>(</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_basic_codec</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_is_float</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_basic_codec</name> <operator>=</operator> <ternary><condition><expr><name>b_is_be</name></expr> ?</condition><then> <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument> )</argument_list></call></expr> </then><else>: <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><call><name>vlc_fourcc_GetCodecAudio</name><argument_list>( <argument><expr><name>i_basic_codec</name></expr></argument>, <argument><expr><name>i_unpacked_bits_per_sample</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_bits_per_channel</name> <operator>==</operator> <literal type="number">32</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_basic_codec</name> <operator>=</operator> <ternary><condition><expr><name>b_is_be</name></expr> ?</condition><then> <expr><name>VLC_CODEC_F32B</name></expr> </then><else>: <expr><name>VLC_CODEC_F32L</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_bits_per_channel</name> <operator>==</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_basic_codec</name> <operator>=</operator> <ternary><condition><expr><name>b_is_be</name></expr> ?</condition><then> <expr><name>VLC_CODEC_F64B</name></expr> </then><else>: <expr><name>VLC_CODEC_F64L</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_basic_codec</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><call><name>vlc_fourcc_GetCodecAudio</name><argument_list>( <argument><expr><name>i_basic_codec</name></expr></argument>, <argument><expr><name>i_bits_per_channel</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_fmt</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>kMP4Audio_AAC_LC_ObjectType</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_fmt_flags</name> <operator>!=</operator> <name>kMP4Audio_AAC_LC_ObjectType</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"The only documented format flag for aac is 2 (kMP4Audio_AAC_LC_ObjectType), but is %i. Continuing anyways."</literal></expr></argument>, <argument><expr><name>i_fmt_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><call><name>vlc_fourcc_GetCodecAudio</name><argument_list>( <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><call><name>vlc_fourcc_GetCodecAudio</name><argument_list>( <argument><expr><name>i_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"could not determine codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d_rate</name> <init>= <expr><call><name>round</name><argument_list>( <argument><expr><call><name>GetDBLBE</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>d_rate</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>d_rate</name> <operator>&gt;</operator> <name>UINT_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>lround</name><argument_list>( <argument><expr><name>d_rate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Sample rate must be non-zero"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name>i_channels_per_frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>=</operator> <name>i_bytes_per_packet</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>=</operator> <name>i_frames_per_packet</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name>i_bits_per_channel</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <name>i_bytes_per_packet</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name>i_bits_per_channel</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator> <name>i_channels_per_frame</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_OPUS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_max_frames</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessALACCookie</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>kALAC_NEW_KUKI_SIZE</name> <init>= <expr><literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>kALAC_LIB_REQ_KUKI_SIZE</name> <init>= <expr><literal type="number">36</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>==</operator> <name>kALAC_NEW_KUKI_SIZE</name> <operator>||</operator> <name>i_size</name> <operator>==</operator> <name>kALAC_LIB_REQ_KUKI_SIZE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_extra</name> <operator>=</operator> <name>kALAC_LIB_REQ_KUKI_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown alac magic cookie. Passing it on to the decoder as is and hoping for the best."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_extra</name> <operator>=</operator> <operator>(</operator> <name>int</name> <operator>)</operator><name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_extra</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><operator>(</operator> <name>uint8_t</name> <operator>*</operator> <operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>==</operator> <name>kALAC_NEW_KUKI_SIZE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name>p_extra</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_extra</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"alac"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetDWBE</name><argument_list>( <argument><expr><name>p_extra</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>p_extra</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AACCookieGetTag</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p_offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p_offset</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>i_size</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_tag</name> <operator>=</operator> <operator>*</operator><operator>(</operator> <name>p</name> <operator>+</operator> <operator>*</operator><name>p_offset</name> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AACCookieTagLen</name><parameter_list>( <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p_tag_len</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>p_offset</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_int_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParseVarLenInteger</name><argument_list>( <argument><expr><name>p</name> <operator>+</operator> <operator>*</operator><name>p_offset</name></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <operator>*</operator><name>p_offset</name></expr></argument>, <argument><expr><name>p_tag_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_int_size</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_offset</name> <operator>+=</operator> <name>i_int_size</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AACCookieChkLen</name><parameter_list>( <parameter><decl><type><name>int64_t</name></type> <name>i_length</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator> <name>i_offset</name> <operator>+</operator> <name>i_length</name> <operator>&lt;=</operator> <name>i_size</name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProcessAACCookie</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>kAAC_ES_DESCR_TAG</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>kAAC_DEC_CONFIG_DESCR_TAG</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>kAAC_DEC_SPEC_INFO_TAG</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_kuki_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_tag_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_tag</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieGetTag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tag</name> <operator>==</operator> <name>kAAC_ES_DESCR_TAG</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieTagLen</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_tag_len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieChkLen</name><argument_list>( <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_flags</name> <init>= <expr><operator>*</operator><operator>(</operator> <name>p</name> <operator>+</operator> <name>i_offset</name><operator>++</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name><operator>&amp;</operator><literal type="number">0x80</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieChkLen</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name><operator>&amp;</operator><literal type="number">0x40</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieChkLen</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_url_len</name> <init>= <expr><operator>*</operator><operator>(</operator> <name>p</name> <operator>+</operator> <name>i_offset</name><operator>++</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <name>i_url_len</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name><operator>&amp;</operator><literal type="number">0x20</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieChkLen</name><argument_list>( <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieGetTag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tag</name> <operator>!=</operator> <name>kAAC_DEC_CONFIG_DESCR_TAG</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieTagLen</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_tag_len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieChkLen</name><argument_list>( <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <operator>(</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieGetTag</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_tag</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tag</name> <operator>!=</operator> <name>kAAC_DEC_SPEC_INFO_TAG</name></expr> )</condition><block type="pseudo"><block_content> 

<goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>AACCookieTagLen</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_tag_len</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>+</operator> <name>i_tag_len</name> <operator>&gt;</operator> <name>i_size</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>aac_kuki_finish</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_kuki_size</name> <operator>=</operator> <name>i_tag_len</name></expr>;</expr_stmt>

<label><name>aac_kuki_finish</name>:</label>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_kuki_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Error parsing aac cookie. Passing it on to the decoder as is and hoping for the best."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_kuki_size</name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>i_kuki_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_kuki_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>i_offset</name></expr></argument>, <argument><expr><name>i_kuki_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadKukiChunk</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Magic Cookie chunk too big"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>i_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Couldn't peek extra data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_ALAC</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>ProcessALACCookie</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>error</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MP4A</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>error</name> <init>= <expr><call><name>ProcessAACCookie</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>error</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>error</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDataChunk</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_offset</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>=</operator> <ternary><condition><expr><name>i_size</name> <operator>==</operator> <name>kCHUNK_SIZE_EOF</name></expr> ?</condition><then> <expr><name>kCHUNK_SIZE_EOF</name></expr> </then><else>: <expr><operator>(</operator> <name>i_size</name> <operator>-</operator> <literal type="number">4</literal> <operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadPaktChunk</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Couldn't peek packet descriptions"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ReadBEInt64ToUInt64</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_packets</name></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid packet table: i_num_packets is negative."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ReadBEInt64ToUInt64</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_valid_frames</name></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid packet table: i_num_valid_frames is negative."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ReadBEInt32ToUInt32</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_priming_frames</name></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid packet table: i_num_priming_frames is negative."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ReadBEInt32ToUInt32</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_remainder_frames</name></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid packet table: i_num_remainder_frames is negative."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_descriptions_start</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_error</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"caff"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_version</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_version</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown caf file version %d."</literal></expr></argument>, <argument><expr><name>i_version</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_flags</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown caf file flags %d."</literal></expr></argument>, <argument><expr><name>i_flags</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><call><name>NextChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_fcc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_handled</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>( <expr><name>i_fcc</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'e'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument> )</argument_list></call></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>i_idx</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"The audio description chunk must be the first chunk in a caf file."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>caf_open_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <call><name>ReadDescChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument> )</argument_list></call></expr>:</case>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <call><name>ReadDataChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'k'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr>:</case>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <call><name>ReadPaktChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'k'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'k'</literal></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument> )</argument_list></call></expr>:</case>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <call><name>ReadKukiChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>b_handled</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>i_error</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>caf_open_end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_handled</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Found '%4.4s' chunk."</literal></expr></argument>, <argument><expr><operator>(</operator> <name>char</name> <operator>*</operator> <operator>)</operator><operator>&amp;</operator><name>i_fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Ignoring '%4.4s' chunk."</literal></expr></argument>, <argument><expr><operator>(</operator> <name>char</name> <operator>*</operator> <operator>)</operator><operator>&amp;</operator><name>i_fcc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>==</operator> <name>kCHUNK_SIZE_EOF</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <name>i_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_idx</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_offset</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>AUDIO_ES</name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>||</operator>

<operator>(</operator> <call><name>NeedsPacketTable</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_descriptions_start</name></name> <operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Did not find all necessary chunks."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>caf_open_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Could not add elementary stream."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_error</name> <operator>=</operator> <name>VLC_EGENERIC</name></expr>;</expr_stmt>

<goto>goto <name>caf_open_end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>caf_open_end</name>:</label>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_error</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>!=</operator> <name>kCHUNK_SIZE_EOF</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>i_bytes</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>frame_span_t</name></type> <name>advance</name> <init>= <expr><operator>(</operator><name>frame_span_t</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_req_samples</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>NeedsPacketTable</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>)</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_req_frames</name> <init>= <expr><operator>(</operator> <name>i_req_samples</name> <operator>+</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator><operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>!=</operator> <name>kCHUNK_SIZE_EOF</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>i_bytes</name></name> <operator>+</operator> <name>i_req_frames</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>)</operator> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_req_frames</name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>i_frames</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>advance</name><operator>.</operator><name>i_frames</name></name> <operator>=</operator> <name>i_req_frames</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>advance</name><operator>.</operator><name>i_samples</name></name> <operator>=</operator> <name>i_req_frames</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>advance</name><operator>.</operator><name>i_bytes</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name> <operator>*</operator> <name><name>advance</name><operator>.</operator><name>i_frames</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_max_frames</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_packets</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>i_frames</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max_frames</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>packet_table</name><operator>.</operator><name>i_num_packets</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>i_frames</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max_frames</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_max_frames</name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_max_frames</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max_frames</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_max_frames</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<do>do

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>FrameSpanAddDescription</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>i_desc_bytes</name></name> <operator>+</operator> <name><name>advance</name><operator>.</operator><name>i_desc_bytes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>advance</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block>

while <condition>( <expr><name>i_req_samples</name> <operator>&gt;</operator> <name><name>advance</name><operator>.</operator><name>i_samples</name></name> <operator>&amp;&amp;</operator> <name><name>advance</name><operator>.</operator><name>i_frames</name></name> <operator>&lt;</operator> <name>i_max_frames</name></expr> )</condition>;</do>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>advance</name><operator>.</operator><name>i_frames</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unexpected end of file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_offset</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>i_bytes</name></name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>==</operator> <name>kCHUNK_SIZE_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot seek data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>advance</name><operator>.</operator><name>i_bytes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot read data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>FrameSpanGetTime</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FrameSpanAddSpan</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>position</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>advance</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>frame_span_t</name></type> <name>position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_num_samples</name> <init>= <expr><call><name>TotalNumSamples</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>

<call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name>i_num_samples</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>

<call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>i_samples</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <ternary><condition><expr><name>i_num_samples</name></expr> ?</condition><then> <expr><operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>position</name><operator>.</operator><name>i_samples</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_num_samples</name></expr> </then><else>: <expr><literal type="number">0.0</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_sample</name> <operator>=</operator> <name>f</name> <operator>*</operator> <name>i_num_samples</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SetSpanWithSample</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>i_sample</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<expr_stmt><expr><name>i_sample</name> <operator>=</operator>

<call><name>samples_from_vlc_tick</name><argument_list>( <argument><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SetSpanWithSample</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>position</name></expr></argument>, <argument><expr><name>i_sample</name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>position</name></name> <operator>=</operator> <name>position</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<return>return <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_GET_META</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_offset</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
