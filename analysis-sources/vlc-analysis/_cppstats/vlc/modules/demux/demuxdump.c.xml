<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\demuxdump.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_sout.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ACCESS_TEXT</name></cpp:macro> <cpp:value>N_("Dump module")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_TEXT</name></cpp:macro> <cpp:value>N_("Dump filename")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Name of the file to which the raw stream will be dumped." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_TEXT</name></cpp:macro> <cpp:value>N_("Append to existing file")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_LONGTEXT</name></cpp:macro> <cpp:value>N_( "If the file already exists, it will not be overwritten." )</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>(<argument><literal type="string">"Dump"</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"File dumper"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>add_module</name><argument_list>(<argument><literal type="string">"demuxdump-access"</literal></argument>, <argument><literal type="string">"sout access"</literal></argument>, <argument><literal type="string">"file"</literal></argument>,

<argument>ACCESS_TEXT</argument>, <argument>ACCESS_TEXT</argument>)</argument_list></macro>

<macro><name>add_savefile</name><argument_list>(<argument><literal type="string">"demuxdump-file"</literal></argument>, <argument><literal type="string">"stream-demux.dump"</literal></argument>,

<argument>FILE_TEXT</argument>, <argument>FILE_LONGTEXT</argument>)</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"demuxdump-append"</literal></argument>, <argument>false</argument>, <argument>APPEND_TEXT</argument>, <argument>APPEND_LONGTEXT</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"dump"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP_BLOCKSIZE</name></cpp:macro> <cpp:value>16384</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>,<parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>access</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"demuxdump-access"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>access</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sout-file-append"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"demuxdump-append"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sout-file-append"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>var_Create</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sout-file-format"</literal></expr></argument>, <argument><expr><name>VLC_VAR_BOOL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"demuxdump-file"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>path</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no dump file name given"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><call><name>sout_AccessOutNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>access</name></expr></argument>, <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>path</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>access</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>out</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot create output"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>out</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sout_AccessOutDelete</name><argument_list>( <argument><expr><name>out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sout_access_out_t</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>DUMP_BLOCKSIZE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>block</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rd</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>DUMP_BLOCKSIZE</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>rd</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>rd</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>rd</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>wr</name> <init>= <expr><call><name>sout_AccessOutWrite</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>wr</name> <operator>!=</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>rd</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot write data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
