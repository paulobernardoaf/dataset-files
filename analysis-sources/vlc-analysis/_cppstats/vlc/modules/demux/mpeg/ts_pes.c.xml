<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\ts_pes.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>block_Split</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_block</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_remain</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><operator>*</operator><name>pp_block</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_split</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_remain</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_tocopy</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tocopy</name> <operator>&gt;</operator> <name>i_offset</name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_split</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_split</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_split</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_remain</name> <operator>=</operator> <name>p_block</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_block</name> <operator>=</operator> <name>p_split</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_tocopy</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_split</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_tocopy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_split</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_split</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_tocopy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_tocopy</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_remain</name> <operator>=</operator> <name>p_split</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>pes_sync</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>MayHaveStartCodeOnEnd</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buf</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i_buf</name> <operator>&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><operator>(</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>p_buf</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>p_buf</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><operator>--</operator><name>p_buf</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>FindNextPESHeader</name><parameter_list>( <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_buffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_end</name> <init>= <expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><name>i_buffer</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_bitflow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_buf</name> <operator>!=</operator> <name>p_end</name></expr>;</condition> <incr><expr><name>p_buf</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>i_bitflow</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>p_buf</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_bitflow</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>p_buf</name> <operator>==</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>i_bitflow</name> <operator>&amp;</operator> <literal type="number">0x06</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x06</literal></expr> )</condition> 

<block>{<block_content>

<return>return <expr><name>p_buf</name> <operator>-</operator> <literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ts_pes_Push</name><parameter_list>( <parameter><decl><type><name>ts_pes_parse_callback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,

<parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_unit_start</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>b_unit_start</name> <operator>&amp;&amp;</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_datachain</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_gathered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>cb</name><operator>-&gt;</operator><name>pf_parse</name></name><argument_list>( <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>p_obj</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>priv</name></name></expr></argument>, <argument><expr><name>p_datachain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pkt</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>b_ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_unit_start</name> <operator>&amp;&amp;</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>pp_last</name></name></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_gathered</name></name> <operator>+=</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_gathered</name></name> <operator>&gt;=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ts_pes_Push</name><argument_list>( <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_pes_Drain</name><parameter_list>( <parameter><decl><type><name>ts_pes_parse_callback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>, <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>ts_pes_Push</name><argument_list>( <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_pes_Gather</name><parameter_list>( <parameter><decl><type><name>ts_pes_parse_callback</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>,

<parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_unit_start</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_valid_scrambling</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_single_payload</name> <init>= <expr><name>b_unit_start</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_aligned_ts_payload</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>b_broken_PUSI_conformance</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_aligned_ts_payload</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_single_payload</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_SCRAMBLED</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>b_valid_scrambling</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ts_pes_Push</name><argument_list>( <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_SOURCE_RANDOM_ACCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b_ret</name> <operator>|=</operator> <call><name>ts_pes_Push</name><argument_list>( <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_aligned_ts_payload</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_pkt</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pkt</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>saved</name></name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>bool</name></type> <name>b_first_sync_done</name> <init>= <expr><name>false</name></expr></init></decl>;</init> <condition><expr><name>p_pkt</name></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>b_unit_start</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_first_sync_done</name> <operator>&amp;&amp;</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>b_aligned_ts_payload</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>pes_sync</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name> <init>= <expr><call><name>FindNextPESHeader</name><argument_list>( <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_buf</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>MayHaveStartCodeOnEnd</name><argument_list>( <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>=</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>saved</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>p_buf</name> <operator>-</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>=</operator> <name>p_buf</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_first_sync_done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt> 

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>&gt;</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_gathered</name></name> <operator>||</operator>

<name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>&gt;</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_gathered</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_single_payload</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_remain</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>-</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_gathered</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <name>i_remain</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_ret</name> <operator>|=</operator> <call><name>ts_pes_Push</name><argument_list>( <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pkt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_split</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>block_Split</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_split</name></expr></argument>, <argument><expr><name>i_remain</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_ret</name> <operator>|=</operator> <call><name>ts_pes_Push</name><argument_list>( <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pkt</name> <operator>=</operator> <name>p_split</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_first_sync_done</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>b_aligned_ts_payload</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>b_unit_start</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_ret</name> <operator>|=</operator> <call><name>ts_pes_Push</name><argument_list>( <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">6</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>b_ret</name> <operator>|=</operator> <call><name>ts_pes_Push</name><argument_list>( <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><name>b_unit_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pkt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_pkt</name> <operator>&amp;&amp;</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><name>b_single_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>=</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>saved</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pkt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
