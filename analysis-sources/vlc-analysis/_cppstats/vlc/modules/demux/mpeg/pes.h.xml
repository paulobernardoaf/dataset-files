<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\pes.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timestamps.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>stime_t</name></type> <name>GetPESTimestamp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0e</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator><operator>|</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">22</literal><operator>)</operator><operator>|</operator>

<operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xfe</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>|</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator><operator>|</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>ExtractPESTimestamp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_flags</name></decl></parameter>, <parameter><decl><type><name>stime_t</name> <modifier>*</modifier></type><name>ret</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x01</literal> <operator>||</operator>

<operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x01</literal> <operator>||</operator>

<operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x01</literal> <operator>||</operator>

<operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x30</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> 

<operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&gt;</operator> <name>i_flags</name></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ret</name> <operator>=</operator> <call><name>GetPESTimestamp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>stime_t</name></type> <name>ExtractPackHeaderTimestamp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x38</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">27</literal><operator>)</operator><operator>|</operator>

<operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x03</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">28</literal><operator>)</operator><operator>|</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>|</operator>

<operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xf8</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator><operator>|</operator>

<operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x03</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator><operator>|</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>inline</specifier>

<specifier>static</specifier> <name>int</name></type> <name>ParsePESHeader</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_header</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_header</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_skip</name></decl></parameter>, <parameter><decl><type><name>stime_t</name> <modifier>*</modifier></type><name>pi_dts</name></decl></parameter>, <parameter><decl><type><name>stime_t</name> <modifier>*</modifier></type><name>pi_pts</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pi_stream_id</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_pes_scambling</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_skip</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_header</name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_stream_id</name> <operator>=</operator> <name><name>p_header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0xBC</literal></expr>:</case> 

<case>case <expr><literal type="number">0xBE</literal></expr>:</case> 

<case>case <expr><literal type="number">0xBF</literal></expr>:</case> 

<case>case <expr><literal type="number">0xF0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xF1</literal></expr>:</case> 

<case>case <expr><literal type="number">0xFF</literal></expr>:</case> 

<case>case <expr><literal type="number">0xF2</literal></expr>:</case> 

<case>case <expr><literal type="number">0xF8</literal></expr>:</case> 

<expr_stmt><expr><name>i_skip</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pb_pes_scambling</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pb_pes_scambling</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xC0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x80</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_skip</name> <operator>=</operator> <name><name>p_header</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pb_pes_scambling</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pb_pes_scambling</name> <operator>=</operator> <name><name>p_header</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_header</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_header</name> <operator>&gt;=</operator> <literal type="number">9</literal> <operator>+</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ExtractPESTimestamp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_header</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_header</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>pi_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_header</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x40</literal> <operator>)</operator> <operator>&amp;&amp;</operator> 

<name>i_header</name> <operator>&gt;=</operator> <literal type="number">14</literal> <operator>+</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ExtractPESTimestamp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_header</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><name>pi_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_skip</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>pb_pes_scambling</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pb_pes_scambling</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name>i_skip</name> <operator>&lt;</operator> <literal type="number">23</literal> <operator>&amp;&amp;</operator> <name><name>p_header</name><index>[<expr><name>i_skip</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xff</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_skip</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_header</name> <operator>&lt;</operator> <name>i_skip</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>==</operator> <literal type="number">23</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">"too much MPEG-1 stuffing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_header</name><index>[<expr><name>i_skip</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_header</name> <operator>&lt;</operator> <name>i_skip</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_header</name><index>[<expr><name>i_skip</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x20</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_header</name> <operator>&gt;=</operator> <name>i_skip</name> <operator>+</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ExtractPESTimestamp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_header</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_header</name><index>[<expr><name>i_skip</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pi_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_header</name><index>[<expr><name>i_skip</name></expr>]</index></name><operator>&amp;</operator><literal type="number">0x10</literal> <operator>)</operator> <operator>&amp;&amp;</operator> 

<name>i_header</name> <operator>&gt;=</operator> <name>i_skip</name> <operator>+</operator> <literal type="number">10</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>ExtractPESTimestamp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_header</name><index>[<expr><name>i_skip</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><name>pi_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_header</name><index>[<expr><name>i_skip</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x0F</literal></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>pi_skip</name> <operator>=</operator> <name>i_skip</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
