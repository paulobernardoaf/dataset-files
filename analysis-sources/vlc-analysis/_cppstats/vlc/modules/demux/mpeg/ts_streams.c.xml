<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\ts_streams.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams_private.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DVBPSI_DVBPSI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dvbpsi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DVBPSI_DEMUX_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/demux.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/descriptor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pmt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../mux/mpeg/dvbpsi_compat.h"</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es_out.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sections.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_psip.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>handle_Init</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <call><name>dvbpsi_new</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dvbpsi_messages</name></expr></argument>, <argument><expr><name>DVBPSI_MSG_DEBUG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>handle</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>handle</name><operator>)</operator><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>p_demux</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>ts_pat_New</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>pat</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ts_pat_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pat</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>handle_Init</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pat</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>i_ts_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pat</name><operator>-&gt;</operator><name>b_generated</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>( <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>programs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>pat</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_pat_Del</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>pat</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>dvbpsi_decoder_present</name><argument_list>( <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dvbpsi_pat_detach</name><argument_list>( <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_delete</name><argument_list>( <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>pat</name><operator>-&gt;</operator><name>programs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>ts_pat_Get_pmt</name><parameter_list>( <parameter><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>pat</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_number</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_pmt</name> <operator>=</operator> <name><name>pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name> <operator>==</operator> <name>i_number</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_pmt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>ts_pmt_New</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>pmt</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ts_pmt_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pmt</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>handle_Init</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pmt</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>( <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>e_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>i_number</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>=</operator> <literal type="number">0x1FFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>iod</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>od</name><operator>.</operator><name>i_version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>( <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>od</name><operator>.</operator><name>objects</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <name>TS_TICK_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>i_last_dts_byte</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>p_atsc_si_basepid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>p_si_sdt_pid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <name>TS_TICK_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>=</operator> <name>TS_TICK_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_disable</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first_dts</name></name> <operator>=</operator> <name>TS_TICK_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_fix_done</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>i_download_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pmt</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>i_logo_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>pmt</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_pmt_Del</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>pmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>dvbpsi_decoder_present</name><argument_list>( <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dvbpsi_pmt_detach</name><argument_list>( <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_delete</name><argument_list>( <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>e_streams</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pmt</name><operator>-&gt;</operator><name>p_atsc_si_basepid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>p_atsc_si_basepid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pmt</name><operator>-&gt;</operator><name>p_si_sdt_pid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>p_si_sdt_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pmt</name><operator>-&gt;</operator><name>iod</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ODFree</name><argument_list>( <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>iod</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>pmt</name><operator>-&gt;</operator><name>od</name><operator>.</operator><name>objects</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ODFree</name><argument_list>( <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>od</name><operator>.</operator><name>objects</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>od</name><operator>.</operator><name>objects</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pmt</name><operator>-&gt;</operator><name>i_number</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_DEL_GROUP</name></expr></argument>, <argument><expr><name><name>pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ts_es_t</name> <modifier>*</modifier></type> <name>ts_es_New</name><parameter_list>( <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_program</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_es</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_es</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name> <operator>=</operator> <name>p_program</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_extraes</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>b_interlaced</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>i_service_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_es</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_pes_es_Clean</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES_STATE</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_stream_Add_es</name><parameter_list>( <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_extra</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_es</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>b_extra</name> <operator>&amp;&amp;</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name><operator>)</operator></expr> ?</condition><then> 

<expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>p_extraes</name></name></expr> </then><else>:

<expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><operator>!</operator><operator>*</operator><name>pp_es</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_es</name> <operator>=</operator> <name>p_es</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><operator>(</operator><operator>*</operator><name>pp_es</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pp_es</name><operator>)</operator><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_es</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>ts_es_t</name> <modifier>*</modifier></type> <name>ts_stream_Find_es</name><parameter_list>( <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</init> <condition><expr><name>p_es</name></expr>;</condition> <incr><expr><name>p_es</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name> <operator>==</operator> <name>p_pmt</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_es</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ts_es_t</name> <modifier>*</modifier></type> <name>ts_stream_Extract_es</name><parameter_list>( <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_prev</name> <init>= <expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</init> <condition><expr><name>p_es</name></expr>;</condition> <incr><expr><name>p_es</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name> <operator>==</operator> <name>p_pmt</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pp_prev</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>p_es</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pp_prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>ts_Count_es</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_active</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_es</name></expr>;</condition> <incr><expr><name>p_es</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator> <name>b_active</name> <operator>)</operator></expr> ?</condition><then> <expr><operator>!</operator><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr> </then><else>: <expr><operator>(</operator> <ternary><condition><expr><operator>(</operator> <operator>!</operator><name>p_pmt</name> <operator>||</operator> <name>p_pmt</name> <operator>==</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary> <operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <call><name>ts_Count_es</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_extraes</name></name></expr></argument>, <argument><expr><name>b_active</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ts_pes_ChainDelete_es</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>p_es</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_pes_ChainDelete_es</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_extraes</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_pes_es_Clean</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_es</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>ts_stream_New</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_program</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>pes</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ts_stream_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pes</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>ts_es_New</name><argument_list>( <argument><expr><name>p_program</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pes</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>TS_TRANSPORT_PES</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_gathered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>b_broken_PUSI_conformance</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>b_always_receive</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>p_sections_proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>p_proc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pes</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pes</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>pes</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_stream_Del</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>pes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ts_pes_ChainDelete_es</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pes</name><operator>-&gt;</operator><name>p_sections_proc</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ts_sections_processor_ChainDelete</name><argument_list>( <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>p_sections_proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pes</name><operator>-&gt;</operator><name>p_proc</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ts_stream_processor_Delete</name><argument_list>( <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>p_proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pes</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>pes</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ts_si_t</name> <modifier>*</modifier></type><name>ts_si_New</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_si_t</name> <modifier>*</modifier></type><name>si</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ts_si_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>si</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>handle_Init</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>si</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>si</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>eitpid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>tdtpid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>si</name><operator>-&gt;</operator><name>cdtpid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>si</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_si_Del</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_si_t</name> <modifier>*</modifier></type><name>si</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>dvbpsi_decoder_present</name><argument_list>( <argument><expr><name><name>si</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dvbpsi_DetachDemux</name><argument_list>( <argument><expr><name><name>si</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_delete</name><argument_list>( <argument><expr><name><name>si</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>si</name><operator>-&gt;</operator><name>eitpid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>eitpid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>si</name><operator>-&gt;</operator><name>tdtpid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>tdtpid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>si</name><operator>-&gt;</operator><name>cdtpid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>si</name><operator>-&gt;</operator><name>cdtpid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>si</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_psip_Del</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_psip_t</name> <modifier>*</modifier></type><name>psip</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>psip</name><operator>-&gt;</operator><name>p_ctx</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ts_psip_context_Delete</name><argument_list>( <argument><expr><name><name>psip</name><operator>-&gt;</operator><name>p_ctx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ts_pes_ChainDelete_es</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>psip</name><operator>-&gt;</operator><name>p_eas_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psip</name><operator>-&gt;</operator><name>handle</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ATSC_Detach_Dvbpsi_Decoders</name><argument_list>( <argument><expr><name><name>psip</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_delete</name><argument_list>( <argument><expr><name><name>psip</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>psip</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>psip</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>psip</name><operator>-&gt;</operator><name>eit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>ts_psip_t</name> <modifier>*</modifier></type><name>ts_psip_New</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_psip_t</name> <modifier>*</modifier></type><name>psip</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ts_psip_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psip</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>handle_Init</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>psip</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>( <argument><expr><name><name>psip</name><operator>-&gt;</operator><name>eit</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psip</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psip</name><operator>-&gt;</operator><name>p_eas_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psip</name><operator>-&gt;</operator><name>p_ctx</name></name> <operator>=</operator> <call><name>ts_psip_context_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>psip</name><operator>-&gt;</operator><name>p_ctx</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ts_psip_Del</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psip</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>psip</name></expr>;</return>

</block_content>}</block></function>

</unit>
