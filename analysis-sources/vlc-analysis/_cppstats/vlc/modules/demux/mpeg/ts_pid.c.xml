<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\ts_pid.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timestamps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PID_ALLOC_CHUNK</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ts_pid_list_Init</name><parameter_list>( <parameter><decl><type><name>ts_pid_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>dummy</name><operator>.</operator><name>i_pid</name></name> <operator>=</operator> <literal type="number">8191</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>dummy</name><operator>.</operator><name>i_flags</name></name> <operator>=</operator> <name>FLAG_SEEN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>base_si</name><operator>.</operator><name>i_pid</name></name> <operator>=</operator> <literal type="number">0x1FFB</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_all</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_all_alloc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_last_pid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_pid_list_Release</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_all</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name> <init>= <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_FREE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PID %d type %d not freed refcount %d"</literal></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>searchkey</name>

<block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>i_pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>pp_last</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ts_bsearch_searchkey_Compare</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>other</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>searchkey</name></name> <modifier>*</modifier></type><name>p_key</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>key</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>pp_pid</name> <init>= <expr><name>other</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><operator>*</operator><name>pp_pid</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_key</name><operator>-&gt;</operator><name>pp_last</name></name> <operator>=</operator> <name>other</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator> <name><name>p_key</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>&gt;=</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>)</operator></expr> ?</condition><then> <expr><name><name>p_key</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>-</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>ts_pid_t</name> <modifier>*</modifier></type> <name>ts_pid_Get</name><parameter_list>( <parameter><decl><type><name>ts_pid_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_pid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name>i_pid</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>pat</name></name></expr>;</return>

<case>case <expr><literal type="number">0x1FFB</literal></expr>:</case>

<return>return <expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>base_si</name></name></expr>;</return>

<case>case <expr><literal type="number">0x1FFF</literal></expr>:</case>

<return>return <expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>dummy</name></name></expr>;</return>

<default>default:</default>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>i_last_pid</name></name> <operator>==</operator> <name>i_pid</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_list</name><operator>-&gt;</operator><name>p_last</name></name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>searchkey</name></name></type> <name>pidkey</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pidkey</name><operator>.</operator><name>i_pid</name></name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pidkey</name><operator>.</operator><name>pp_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_pidk</name> <init>= <expr><call><name>bsearch</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pidkey</name></expr></argument>, <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name></name></expr></argument>, <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_all</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ts_pid_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>ts_bsearch_searchkey_Compare</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>pp_pidk</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_pid</name> <operator>=</operator> <operator>*</operator><name>pp_pidk</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <operator>(</operator><name><name>pidkey</name><operator>.</operator><name>pp_last</name></name> <operator>-</operator> <name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pid</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>i_all</name></name> <operator>&gt;=</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_all_alloc</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_list</name><operator>-&gt;</operator><name>i_all_alloc</name></name> <operator>+</operator> <name>PID_ALLOC_CHUNK</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ts_pid_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_realloc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_all_alloc</name></name> <operator>+=</operator> <name>PID_ALLOC_CHUNK</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_pid</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_pid</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pid</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>i_all</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name><index>[<expr><name>i_index</name></expr>]</index></name><operator>-&gt;</operator><name>i_pid</name> <operator>&lt;</operator> <name>i_pid</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name><index>[<expr><name>i_index</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name><index>[<expr><name>i_index</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_list</name><operator>-&gt;</operator><name>i_all</name></name> <operator>-</operator> <name>i_index</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>ts_pid_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name><index>[<expr><name>i_index</name></expr>]</index></name> <operator>=</operator> <name>p_pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_all</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>p_pid</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_last_pid</name></name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt>

<return>return <expr><name>p_pid</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>ts_pid_t</name> <modifier>*</modifier></type> <name>ts_pid_Next</name><parameter_list>( <parameter><decl><type><name>ts_pid_list_t</name> <modifier>*</modifier></type><name>p_list</name></decl></parameter>, <parameter><decl><type><name>ts_pid_next_context_t</name> <modifier>*</modifier></type><name>p_ctx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_list</name><operator>-&gt;</operator><name>i_all</name></name> <operator>&amp;&amp;</operator> <name>p_ctx</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>&lt;</operator> <name><name>p_list</name><operator>-&gt;</operator><name>i_all</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_list</name><operator>-&gt;</operator><name>pp_all</name><index>[<expr><name><name>p_ctx</name><operator>-&gt;</operator><name>i_pos</name></name><operator>++</operator></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PIDReset</name><parameter_list>( <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_dup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FLAG_SCRAMBLED</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TYPE_FREE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>prevpktbytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PREVPKTKEEPBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>PIDSetup</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_type_t</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>pid</name> <operator>==</operator> <name>p_parent</name> <operator>||</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <literal type="number">0x1FFF</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_FREE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>TYPE_FREE</name></expr>:</case> 

<expr_stmt><expr><call><name>PIDReset</name><argument_list>( <argument><expr><name>pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>TYPE_CAT</name></expr>:</case>

<return>return <expr><name>true</name></expr>;</return>

<case>case <expr><name>TYPE_PAT</name></expr>:</case>

<expr_stmt><expr><call><name>PIDReset</name><argument_list>( <argument><expr><name>pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pat</name></name> <operator>=</operator> <call><name>ts_pat_New</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pat</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_PMT</name></expr>:</case>

<expr_stmt><expr><call><name>PIDReset</name><argument_list>( <argument><expr><name>pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name> <operator>=</operator> <call><name>ts_pmt_New</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_STREAM</name></expr>:</case>

<expr_stmt><expr><call><name>PIDReset</name><argument_list>( <argument><expr><name>pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name> <operator>=</operator> <call><name>ts_stream_New</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_parent</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_SI</name></expr>:</case>

<expr_stmt><expr><call><name>PIDReset</name><argument_list>( <argument><expr><name>pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name></name> <operator>=</operator> <call><name>ts_si_New</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_PSIP</name></expr>:</case>

<expr_stmt><expr><call><name>PIDReset</name><argument_list>( <argument><expr><name>pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_psip</name></name> <operator>=</operator> <call><name>ts_psip_New</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_psip</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>i_type</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>i_type</name> <operator>&amp;&amp;</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>&lt;</operator> <name>UINT16_MAX</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_FREE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Tried to redeclare pid %d with another type"</literal></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>PIDRelease</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_FREE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_FREE</name> <operator>&amp;&amp;</operator> <name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_PAT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>i_refcount</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<default>default:</default>

<case>case <expr><name>TYPE_FREE</name></expr>:</case> 

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_FREE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_CAT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>TYPE_PAT</name></expr>:</case>

<expr_stmt><expr><call><name>ts_pat_Del</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pat</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pat</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_PMT</name></expr>:</case>

<expr_stmt><expr><call><name>ts_pmt_Del</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_STREAM</name></expr>:</case>

<expr_stmt><expr><call><name>ts_stream_Del</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_SI</name></expr>:</case>

<expr_stmt><expr><call><name>ts_si_Del</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_PSIP</name></expr>:</case>

<expr_stmt><expr><call><name>ts_psip_Del</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_psip</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_psip</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>SetPIDFilter</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PIDReset</name><argument_list>( <argument><expr><name>pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>UpdateHWFilter</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_SET_PRIVATE_ID_STATE</name></expr></argument>,

<argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>FLAG_FILTERED</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>SetPIDFilter</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_selected</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_selected</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>FLAG_FILTERED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FLAG_FILTERED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>UpdateHWFilter</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
