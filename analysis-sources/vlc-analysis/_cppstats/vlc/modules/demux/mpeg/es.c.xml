<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\es.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/a52.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/dts_header.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../meta_engine/ID3Tag.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../meta_engine/ID3Text.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../meta_engine/ID3Meta.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenAudio</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenVideo</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_TEXT</name></cpp:macro> <cpp:value>N_("Frames per Second")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FPS_LONGTEXT</name></cpp:macro> <cpp:value>N_("This is the frame rate used as a fallback when " "playing MPEG video elementary streams.")</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"MPEG-I/II/4 / A52 / DTS / MLP audio"</literal> )</argument> )</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Audio ES"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">155</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenAudio</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"mpga"</literal></argument>, <argument><literal type="string">"mp3"</literal></argument>,

<argument><literal type="string">"m4a"</literal></argument>, <argument><literal type="string">"mp4a"</literal></argument>, <argument><literal type="string">"aac"</literal></argument>,

<argument><literal type="string">"ac3"</literal></argument>, <argument><literal type="string">"a52"</literal></argument>,

<argument><literal type="string">"eac3"</literal></argument>,

<argument><literal type="string">"dts"</literal></argument>,

<argument><literal type="string">"mlp"</literal></argument>, <argument><literal type="string">"thd"</literal></argument> )</argument_list></macro>

<macro><name>add_submodule</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"MPEG-4 video"</literal> )</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">5</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>OpenVideo</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_float</name><argument_list>( <argument><literal type="string">"es-fps"</literal></argument>, <argument><literal type="number">25</literal></argument>, <argument>FPS_TEXT</argument>, <argument>FPS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"m4v"</literal></argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"mp4v"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAV_PROBE_SIZE</name></cpp:macro> <cpp:value>(512*1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE_PROBE_SIZE</name></cpp:macro> <cpp:value>(8000)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAV_EXTRA_PROBE_SIZE</name></cpp:macro> <cpp:value>(44000/2*2*2)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_use_word</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_probe</name>)<parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_init</name>)<parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

}</block></struct></type> <name>codec_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_version</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_lowpass</name></decl>;</decl_stmt>

}</block></struct></type> <name>lame_extra_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>br</name></decl>;</decl_stmt>

}</block></struct></type> <name>sync_table_ctx_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_frames_btw_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_bytes_btw_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_ms_btw_refs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bits_per_bytes_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bits_per_ms_dev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sync_table_ctx_t</name></type> <name>current</name></decl>;</decl_stmt>

}</block></struct></type> <name>sync_table_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>p_seekpoint</name></decl>;</decl_stmt>

}</block></struct></type> <name>chap_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>codec_t</name></type> <name>codec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_original</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_t</name> <modifier>*</modifier></type><name>p_packetizer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_packetized_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_big_endian</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_estimate_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bitrate_avg</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_initial_sync_failed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_packet_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_stream_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_demux_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_fps</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_bitrate_avg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>lame_extra_t</name></type> <name>lame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_lame</name></decl>;</decl_stmt>

}</block> <decl><name>xing</name></decl>;</struct>

<decl_stmt><decl><type><name>float</name></type> <name><name>rgf_replay_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>rgf_replay_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sync_table_t</name></type> <name>mllt</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_current</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>chap_entry_t</name> <modifier>*</modifier></type><name>p_entry</name></decl>;</decl_stmt>

}</block> <decl><name>chapters</name></decl>;</struct>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MpgaProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MpgaInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AacProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>AacInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>EA52Probe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>A52Probe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>A52Init</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DtsProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DtsInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MlpProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ThdProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>MlpInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>Parse</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_output</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>SeekByMlltTable</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_time</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>codec_t</name></type> <name><name>p_codecs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>VLC_CODEC_MP4A</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"mp4 audio"</literal></expr>, <expr><name>AacProbe</name></expr>, <expr><name>AacInit</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MPGA</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"mpeg audio"</literal></expr>, <expr><name>MpgaProbe</name></expr>, <expr><name>MpgaInit</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_A52</name></expr>, <expr><name>true</name></expr>, <expr><literal type="string">"a52 audio"</literal></expr>, <expr><name>A52Probe</name></expr>, <expr><name>A52Init</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_EAC3</name></expr>, <expr><name>true</name></expr>, <expr><literal type="string">"eac3 audio"</literal></expr>, <expr><name>EA52Probe</name></expr>, <expr><name>A52Init</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_DTS</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"dts audio"</literal></expr>, <expr><name>DtsProbe</name></expr>, <expr><name>DtsInit</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_MLP</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"mlp audio"</literal></expr>, <expr><name>MlpProbe</name></expr>, <expr><name>MlpInit</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VLC_CODEC_TRUEHD</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"TrueHD audio"</literal></expr>, <expr><name>ThdProbe</name></expr>, <expr><name>MlpInit</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>VideoInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>codec_t</name></type> <name>codec_m4v</name> <init>= <expr><block>{

<expr><name>VLC_CODEC_MP4V</name></expr>, <expr><name>false</name></expr>, <expr><literal type="string">"mp4 video"</literal></expr>, <expr><name>NULL</name></expr>, <expr><name>VideoInit</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenCommon</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_cat</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>codec_t</name> <modifier>*</modifier></type><name>p_codec</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_bs_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DEMUX_INIT_COMMON</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p_sys</name> <operator>=</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <operator>*</operator><name>p_codec</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_start</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_offset</name></name> <operator>=</operator> <name>i_bs_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_estimate_bitrate</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_big_endian</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name> <operator>=</operator> <call><name>var_InheritFloat</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"es-fps"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TAB_INIT</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>p_entry</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_offset</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name><operator>.</operator><name>pf_init</name></name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected format %4.4s"</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>i_cat</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_original</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name> <operator>=</operator> <call><name>demux_PacketizerNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name><operator>.</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AUDIO_REPLAY_GAIN_MAX</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pf_gain</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pb_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio_replay_gain</name><operator>.</operator><name>pf_peak</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_peak</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>Parse</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenAudio</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_codecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_codecs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pf_probe</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_offset</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_codecs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenVideo</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_m4v_ext</name> <init>= <expr><call><name>demux_IsPathExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".m4v"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_re4_ext</name> <init>= <expr><operator>!</operator><name>b_m4v_ext</name> <operator>&amp;&amp;</operator> <call><name>demux_IsPathExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".re4"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_m4v_forced</name> <init>= <expr><call><name>demux_IsForced</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"m4v"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>demux_IsForced</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mp4v"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_m4v_ext</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_m4v_forced</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_re4_ext</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_off</name> <init>= <expr><ternary><condition><expr><name>b_re4_ext</name></expr> ?</condition><then> <expr><literal type="number">220</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_off</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_off</name> <operator>+</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><name>i_off</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><name>i_off</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><name>i_off</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x01</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_m4v_forced</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">"this doesn't look like an MPEG ES stream, continuing anyway"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>OpenCommon</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codec_m4v</name></expr></argument>, <argument><expr><name>i_off</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>IncreaseChapter</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_current</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>chap_entry_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>p_entry</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_current</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>!=</operator> <name>UINT32_MAX</name> <operator>&amp;&amp;</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>i_offset</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>i_time</name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>p_seekpoint</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>+</operator> <name>VLC_TICK_0</name> <operator>&gt;</operator> <name>i_time</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_current</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_demux_flags</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_out</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block_out</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><call><name>Parse</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_block_out</name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>IncreaseChapter</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>p_block_out</name></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>+</operator> <name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name></expr>

</then><else>: <expr><name>VLC_TICK_INVALID</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_block_out</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_fps</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>p_block_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_estimate_bitrate</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bytes</name></name>

<operator>/</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bytes</name></name> <operator>+=</operator> <name><name>p_block_out</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block_out</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_seekpoint_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>p_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_seekpoint</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>TAB_CLEAN</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>p_entry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>p_bits</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>p_bits</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>demux_PacketizerDestroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MovetoTimePos</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_offset</name></name> <operator>+</operator> <name>i_pos</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <name>i_time</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_demux_flags</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>

<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name> <argument_list>( <argument><expr><name>ap</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_offset</name></name></expr></argument>,

<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>ap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>( <argument><expr><name>ap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f_pos</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>/</operator>

<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>f_pos</name> <operator>&lt;</operator> <literal type="number">0.01f</literal> <operator>||</operator>

<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_time_offset</name></name><operator>)</operator> <operator>&lt;</operator> <call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator>

<operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_time_offset</name></name><operator>)</operator> <operator>/</operator> <name>f_pos</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>p_bits</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name> <init>= <expr><call><name>SeekByMlltTable</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_time</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>MovetoTimePos</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_time</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_title</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pp_title</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>pp_title</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_title</name> <operator>=</operator> <call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>pp_title</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pp_title</name><operator>)</operator><operator>-&gt;</operator><name>seekpoint</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>seekpoint_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><operator>(</operator><operator>*</operator><name>pp_title</name><operator>)</operator><operator>-&gt;</operator><name>seekpoint</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>pp_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>pp_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>seekpoint_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>vlc_seekpoint_Duplicate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>p_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_seekpoint</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pp_title</name><operator>)</operator><operator>-&gt;</operator><name>seekpoint</name></name><index>[<expr><name><operator>(</operator><operator>*</operator><name>pp_title</name><operator>)</operator><operator>-&gt;</operator><name>i_seekpoint</name></name><operator>++</operator></expr>]</index> <operator>=</operator> <name>s</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_title_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <name>pp_title</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_TITLE</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_SEEKPOINT</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call><operator>)</operator> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_current</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TITLE</name></expr>:</case>

<return>return <expr><ternary><condition><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>DEMUX_SET_SEEKPOINT</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><name>i</name><operator>&gt;=</operator><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>chap_entry_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>p_entry</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>p_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>==</operator> <name>UINT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_SET_TIME</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_seekpoint</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name><init>= <expr><call><name>MovetoTimePos</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_seekpoint</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_offset</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_ret</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_ret</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>flags</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_demux_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_demux_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>*</operator><name>flags</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_offset</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_SET_POSITION</name> <operator>||</operator> <name>i_query</name> <operator>==</operator> <name>DEMUX_SET_TIME</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_time</name> <init>= <expr><call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">8000000</literal></expr></argument>)</argument_list></call>

<operator>*</operator> <operator>(</operator> <call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_stream_offset</name></name> <operator>)</operator>

<operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <name>i_time</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetized_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_demux_flags</name></name> <operator>|=</operator> <name>INPUT_UPDATE_SEEKPOINT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>Parse</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_output</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block_in</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_block_out</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_output</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name><operator>.</operator><name>b_use_word</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_pos</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block_in</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_eof</name> <init>= <expr><name>p_block_in</name> <operator>==</operator> <name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block_in</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>codec</name><operator>.</operator><name>b_use_word</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_big_endian</name></name> <operator>&amp;&amp;</operator> <name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>old</name> <init>= <expr><name>p_block_in</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_block_in</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block_in</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>( <argument><expr><name>p_block_in</name></expr></argument>, <argument><expr><name>old</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>swab</name><argument_list>( <argument><expr><name><name>old</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>old</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>old</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block_in</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block_in</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator>

<name><name>p_block_in</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_start</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_initial_sync_failed</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name>VLC_TICK_0</name></expr> </then><else>: <expr><name>VLC_TICK_INVALID</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_initial_sync_failed</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_start</name></name></expr>;</expr_stmt> 

<while>while<condition>( <expr><operator>(</operator> <name>p_block_out</name> <operator>=</operator> <call><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>pf_packetize</name></name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>p_block_in</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>p_block_in</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_initial_sync_failed</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_block_out</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_bytes</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_frames</name></name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_frame_samples</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_bytes</name></name> <operator>*</operator> <call><name>INT64_C</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_frames</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_frame_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_estimate_bitrate</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_estimate_bitrate</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_bitrate_avg</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_packetizer</name><operator>-&gt;</operator><name>fmt_out</name><operator>.</operator><name>i_bitrate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_block_out</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_block_out</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_output</name></expr></argument>, <argument><expr><name>p_block_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block_out</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_initial_sync_failed</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"did not sync on first block"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_start</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>b_eof</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GenericFormatCheck</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_format</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_head</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_format</name> <operator>==</operator> <name>WAVE_FORMAT_PCM</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>GetWLE</name><argument_list>( <argument><expr><name>p_head</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_head</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">44100</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>WavSkipHeader</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_skip</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>rgi_twocc</name><index>[]</index></name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_format_check</name>)<parameter_list>( <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_peek</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_skip</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">12</literal><operator>+</operator><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>||</operator> <call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"WAVE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<while>while<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>i_peek</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"fmt "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>i_peek</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&gt;</operator> <name>WAV_PROBE_SIZE</name> <operator>||</operator> <name>i_peek</name> <operator>+</operator> <name>i_len</name> <operator>&gt;</operator> <name>WAV_PROBE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>+=</operator> <name>i_len</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>i_peek</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>i_peek</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&gt;</operator> <name>WAV_PROBE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>+=</operator> <name>i_len</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>i_peek</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_twocc</name> <init>= <expr><call><name>GetWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>i_peek</name> <operator>-</operator> <name>i_len</name> <operator>-</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_format_idx</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i_format_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>rgi_twocc</name><index>[<expr><name>i_format_idx</name></expr>]</index></name> <operator>!=</operator> <name>WAVE_FORMAT_UNKNOWN</name></expr>;</condition> <incr><expr><name>i_format_idx</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_twocc</name> <operator>==</operator> <name><name>rgi_twocc</name><index>[<expr><name>i_format_idx</name></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>rgi_twocc</name><index>[<expr><name>i_format_idx</name></expr>]</index></name> <operator>==</operator> <name>WAVE_FORMAT_UNKNOWN</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pf_format_check</name> <operator>&amp;&amp;</operator>

<call><name>pf_format_check</name><argument_list>( <argument><expr><name>i_twocc</name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <name>i_peek</name> <operator>-</operator> <name>i_len</name> <operator>-</operator> <literal type="number">6</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>i_peek</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>i_peek</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&gt;</operator> <name>WAV_PROBE_SIZE</name> <operator>||</operator> <name>i_peek</name> <operator>+</operator> <name>i_len</name> <operator>&gt;</operator> <name>WAV_PROBE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>+=</operator> <name>i_len</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator> <name>i_peek</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>pi_skip</name> <operator>=</operator> <name>i_peek</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>GenericProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>ppsz_name</name><index>[]</index></name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_check</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_check_size</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_base_probing</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_wav_extra_probing</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_use_word</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>pi_twocc</name><index>[]</index></name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_format_check</name>)<parameter_list>( <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_forced_demux</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_skip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_forced_demux</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>b_forced_demux</name> <operator>|=</operator> <call><name>demux_IsForced</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>ppsz_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>WavSkipHeader</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>, <argument><expr><name>pi_twocc</name></expr></argument>, <argument><expr><name>pf_format_check</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_forced_demux</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_wav</name> <init>= <expr><name>i_skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_probe</name> <init>= <expr><name>i_skip</name> <operator>+</operator> <name>i_check_size</name> <operator>+</operator> <name>i_base_probing</name> <operator>+</operator> <operator>(</operator> <ternary><condition><expr><name>b_wav</name></expr> ?</condition><then> <expr><name>i_wav_extra_probing</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_probe</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <name>i_skip</name> <operator>+</operator> <name>i_check_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot peek"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>+</operator> <name>i_check_size</name> <operator>&gt;</operator> <name>i_peek</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_forced_demux</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_size</name> <init>= <expr><call><name>pf_check</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_samples</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> 

<name>i_skip</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <operator>!</operator><operator>!</operator><name>b_wav</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>t</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>i_samples</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <name>i_samples</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>+</operator> <name>i_check_size</name> <operator>+</operator> <name>i_size</name> <operator>&lt;=</operator> <name>i_peek</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <call><name>pf_check</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_skip</name><operator>+</operator><name>i_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_ok</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_ok</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_use_word</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>i_offset</name> <operator>+</operator> <name>i_skip</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_skip</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_wav</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_forced_demux</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>=</operator> <name>i_offset</name> <operator>+</operator> <name>i_skip</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MpgaCheckSync</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>h</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>(</operator><operator>(</operator> <name>h</name> <operator>&gt;&gt;</operator> <literal type="number">21</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x07FF</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x07FF</literal> <operator>)</operator> 

<operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">19</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x03</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal> <operator>)</operator> 

<operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">17</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x03</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator> 

<operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x0F</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x0F</literal> <operator>)</operator> 

<operator>||</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>h</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x03</literal> <operator>)</operator> 

<operator>||</operator> <operator>(</operator><operator>(</operator><name>h</name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x02</literal> <operator>)</operator></expr>)</condition> 

<block>{<block_content>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPGA_VERSION</name><parameter_list>( <parameter><type><name>h</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( 1 - (((h)&gt;&gt;19)&amp;0x01) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MPGA_MODE</name><parameter_list>(<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((h)&gt;&gt; 6)&amp;0x03)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MpgaGetFrameSamples</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_layer</name> <init>= <expr><literal type="number">3</literal> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>h</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">17</literal><operator>)</operator><operator>&amp;</operator><literal type="number">0x03</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_layer</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><literal type="number">384</literal></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<return>return <expr><literal type="number">1152</literal></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<return>return <expr><ternary><condition><expr><call><name>MPGA_VERSION</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">576</literal></expr> </then><else>: <expr><literal type="number">1152</literal></expr></else></ternary></expr>;</return>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MpgaProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>rgi_twocc</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WAVE_FORMAT_MPEG</name></expr>, <expr><name>WAVE_FORMAT_MPEGLAYER3</name></expr>, <expr><name>WAVE_FORMAT_UNKNOWN</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_forced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_forced_demux</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_forced</name> <operator>=</operator> <call><name>demux_IsPathExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".mp3"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_forced_demux</name> <operator>=</operator> <call><name>demux_IsForced</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mp3"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>demux_IsForced</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mpga"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>WavSkipHeader</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>, <argument><expr><name>rgi_twocc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_forced_demux</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_skip</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>i_peek</name> <operator>&lt;</operator> <name>i_skip</name> <operator>+</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>MpgaCheckSync</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ok</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_forced_demux</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_forced</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_skip</name> <operator>+</operator> <literal type="number">8096</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>i_peek</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_skip</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>i_peek</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>MpgaCheckSync</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_ok</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_skip</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_ok</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_forced_demux</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>=</operator> <name>i_offset</name> <operator>+</operator> <name>i_skip</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>MpgaXingSkip</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_xing</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_xing</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_count</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i_count</name> <operator>&gt;</operator> <operator>*</operator><name>pi_xing</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <operator>*</operator><name>pi_xing</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp_xing</name><operator>)</operator> <operator>+=</operator> <name>i_count</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_xing</name><operator>)</operator> <operator>-=</operator> <name>i_count</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>MpgaXingGetDWBE</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_xing</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_xing</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_default</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_xing</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_default</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><operator>*</operator><name>pp_xing</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MpgaXingSkip</name><argument_list>( <argument><expr><name>pp_xing</name></expr></argument>, <argument><expr><name>pi_xing</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint16_t</name></type> <name>MpgaXingGetWBE</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_xing</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_xing</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_default</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_xing</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>i_default</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>*</operator><name>pp_xing</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MpgaXingSkip</name><argument_list>( <argument><expr><name>pp_xing</name></expr></argument>, <argument><expr><name>pi_xing</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>MpgaXingLameConvertGain</name><parameter_list>( <parameter><decl><type><name>uint16_t</name></type> <name>x</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>gain</name> <init>= <expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x1FF</literal><operator>)</operator> <operator>/</operator> <literal type="number">10.0</literal></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x200</literal></expr> ?</condition><then> <expr><operator>-</operator><name>gain</name></expr> </then><else>: <expr><name>gain</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>MpgaXingLameConvertPeak</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><name>x</name> <operator>/</operator> <literal type="number">8388608.0</literal></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>SeekByMlltTable</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi_time</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sync_table_ctx_t</name> <modifier>*</modifier></type><name>p_cur</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>current</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_time</name> <operator>&lt;</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_time</name></name> <operator>||</operator> <operator>!</operator><name><name>p_cur</name><operator>-&gt;</operator><name>br</name><operator>.</operator><name>p</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_cur</name><operator>-&gt;</operator><name>br</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>p_bits</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>(<expr><call><name>bs_remain</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_cur</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits_per_bytes_dev</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits_per_ms_dev</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_bytesdev</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_cur</name><operator>-&gt;</operator><name>br</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits_per_bytes_dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_msdev</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_cur</name><operator>-&gt;</operator><name>br</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits_per_ms_dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_deltatime</name> <init>= <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_ms_btw_refs</name></name> <operator>+</operator> <name>i_msdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_time</name></name> <operator>+</operator> <name>i_deltatime</name> <operator>&gt;</operator> <operator>*</operator><name>pi_time</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_time</name></name> <operator>+=</operator> <name>i_deltatime</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_pos</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bytes_btw_refs</name></name> <operator>+</operator> <name>i_bytesdev</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>pi_time</name> <operator>=</operator> <name><name>p_cur</name><operator>-&gt;</operator><name>i_time</name></name></expr>;</expr_stmt>

<return>return <expr><name><name>p_cur</name><operator>-&gt;</operator><name>i_pos</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ID3TAG_Parse_Handler</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_payload</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_payload</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_priv</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator> <name>p_priv</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tag</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'M'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'L'</literal></expr></argument>, <argument><expr><literal type="char">'T'</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_payload</name> <operator>&gt;</operator> <literal type="number">20</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_frames_btw_refs</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><name>p_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bytes_btw_refs</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_payload</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_ms_btw_refs</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_payload</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FFFFFF</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_frames_btw_refs</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bytes_btw_refs</name></name> <operator>||</operator>

<operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_ms_btw_refs</name></name> <operator>||</operator>

<name><name>p_payload</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator> <name><name>p_payload</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>||</operator> 

<operator>(</operator><operator>(</operator><name><name>p_payload</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>p_payload</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>||</operator> <name><name>p_payload</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>p_payload</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits_per_bytes_dev</name></name> <operator>=</operator> <name><name>p_payload</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits_per_ms_dev</name></name> <operator>=</operator> <name><name>p_payload</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>p_bits</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>i_payload</name> <operator>-</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>p_bits</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits</name></name> <operator>=</operator> <name>i_payload</name> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>p_bits</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_payload</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"read MLLT sync table with %zu entries"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits_per_bytes_dev</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>mllt</name><operator>.</operator><name>i_bits_per_ms_dev</name></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_tag</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'T'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>, <argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_meta</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_updated</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ID3HandleTag</name><argument_list>( <argument><expr><name>p_payload</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument>, <argument><expr><name>i_tag</name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_updated</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type> <name>ppsz_keys</name> <init>= <expr><call><name>vlc_meta_CopyExtraNames</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ppsz_keys</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>pf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_TRACK_GAIN"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_TRACK_PEAK"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_ALBUM_GAIN"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"REPLAYGAIN_ALBUM_PEAK"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pf</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_val</name> <init>= <expr><call><name>vlc_meta_GetExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_val</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <call><name>us_atof</name><argument_list>( <argument><expr><name>psz_val</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>ppsz_keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>ppsz_keys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_tag</name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'H'</literal></expr></argument>, <argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i_payload</name> <operator>&gt;=</operator> <literal type="number">17</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_title</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_payload</name></expr></argument>, <argument><expr><name>i_payload</name> <operator>-</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><ternary><condition><expr><name>psz_title</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_payload</name><index>[<expr><name>i_offset</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>chap_entry_t</name></type> <name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>e</name><operator>.</operator><name>p_seekpoint</name></name> <operator>=</operator> <call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>e</name><operator>.</operator><name>p_seekpoint</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>e</name><operator>.</operator><name>p_seekpoint</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>psz_title</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>.</operator><name>p_seekpoint</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_payload</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i_offset</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>.</operator><name>i_offset</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_payload</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <name>i_offset</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_payload</name> <operator>+=</operator> <name>i_offset</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_payload</name> <operator>-=</operator> <name>i_offset</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">12</literal> <operator>&lt;</operator> <name>i_payload</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"TIT2"</literal></expr></argument>, <argument><expr><name>p_payload</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_title</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>ID3TextConvert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_payload</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_payload</name><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_title</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>e</name><operator>.</operator><name>p_seekpoint</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>.</operator><name>p_seekpoint</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>psz_title</name><operator>)</operator></expr> ?</condition><then> <expr><name>psz_title</name></expr> </then><else>: <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>i_count</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>chapters</name><operator>.</operator><name>p_entry</name></name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ID3Parse</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_callback</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_tags</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_GET_TAGS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_tags</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_tags</name></expr>;</condition> <incr><expr><name>p_tags</name> <operator>=</operator> <name><name>p_tags</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ID3TAG_Parse</name><argument_list>( <argument><expr><name><name>p_tags</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_tags</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>, <argument><expr><name>pf_callback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MpgaInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ID3Parse</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>ID3TAG_Parse_Handler</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">1024</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">21</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>header</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>MpgaCheckSync</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_xing</name> <init>= <expr><name>p_peek</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_xing</name> <init>= <expr><name>i_peek</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_skip</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>MPGA_VERSION</name><argument_list>( <argument><expr><name>header</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_skip</name> <operator>=</operator> <ternary><condition><expr><call><name>MPGA_MODE</name><argument_list>( <argument><expr><name>header</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">36</literal></expr> </then><else>: <expr><literal type="number">21</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_skip</name> <operator>=</operator> <ternary><condition><expr><call><name>MPGA_MODE</name><argument_list>( <argument><expr><name>header</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">21</literal></expr> </then><else>: <expr><literal type="number">13</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;=</operator> <name>i_xing</name> <operator>||</operator> <call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_xing</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"Xing"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>i_flags</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_xing</name><index>[<expr><name>i_skip</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MpgaXingSkip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><name>i_skip</name> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name><operator>&amp;</operator><literal type="number">0x01</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_frames</name></name> <operator>=</operator> <call><name>MpgaXingGetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name><operator>&amp;</operator><literal type="number">0x02</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_bytes</name></name> <operator>=</operator> <call><name>MpgaXingGetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name><operator>&amp;</operator><literal type="number">0x04</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>MpgaXingSkip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_flags</name><operator>&amp;</operator><literal type="number">0x08</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_bitrate_avg</name></name> <operator>=</operator> <call><name>MpgaXingGetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"xing vbr value present (%d)"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_bitrate_avg</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_frames</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_frame_samples</name></name> <operator>=</operator> <call><name>MpgaGetFrameSamples</name><argument_list>( <argument><expr><name>header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"xing frames&amp;bytes value present "</literal>

<literal type="string">"(%d bytes, %d frames, %d samples/frame)"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_bytes</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_frames</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>i_frame_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_xing</name> <operator>&gt;=</operator> <literal type="number">20</literal> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>p_xing</name></expr></argument>, <argument><expr><literal type="string">"LAME"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>b_lame</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>lame_extra_t</name> <modifier>*</modifier></type><name>p_lame</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>xing</name><operator>.</operator><name>lame</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_lame</name><operator>-&gt;</operator><name>psz_version</name></name></expr></argument>, <argument><expr><name>p_xing</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_lame</name><operator>-&gt;</operator><name>psz_version</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MpgaXingSkip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MpgaXingSkip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_lame</name><operator>-&gt;</operator><name>i_lowpass</name></name> <operator>=</operator> <operator>(</operator><operator>*</operator><name>p_xing</name><operator>)</operator> <operator>*</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MpgaXingSkip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>peak</name> <init>= <expr><call><name>MpgaXingGetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>track</name> <init>= <expr><call><name>MpgaXingGetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>album</name> <init>= <expr><call><name>MpgaXingGetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_peak</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>MpgaXingLameConvertPeak</name><argument_list>( <argument><expr><name>peak</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_TRACK</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>MpgaXingLameConvertGain</name><argument_list>( <argument><expr><name>track</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>rgf_replay_gain</name><index>[<expr><name>AUDIO_REPLAY_GAIN_ALBUM</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator> <call><name>MpgaXingLameConvertGain</name><argument_list>( <argument><expr><name>album</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MpgaXingSkip</name><argument_list>( <argument><expr><operator>&amp;</operator><name>p_xing</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_xing</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AacProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_forced</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_forced_demux</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<expr_stmt><expr><name>b_forced</name> <operator>=</operator> <call><name>demux_IsPathExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".aac"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>demux_IsPathExtension</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">".aacp"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_forced_demux</name> <operator>=</operator> <call><name>demux_IsForced</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"m4a"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>demux_IsForced</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"aac"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>demux_IsForced</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mp4a"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_forced_demux</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_forced</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">10</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot peek"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"ADIF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ADIF file. Not yet supported. (Please report)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_offset</name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>AacInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_original</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'H'</literal></expr></argument>,<argument><expr><literal type="char">'E'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>A52CheckSync</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_big_endian</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_eac3</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_a52_header_t</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>p_tmp</name><index>[<expr><name>VLC_A52_MIN_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p_big_endian</name> <operator>=</operator> <name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x0b</literal> <operator>&amp;&amp;</operator> <name><name>p_peek</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x77</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>p_big_endian</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>swab</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>p_tmp</name></expr></argument>, <argument><expr><name>VLC_A52_MIN_HEADER_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>=</operator> <name>p_tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_a52_header_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>VLC_A52_MIN_HEADER_SIZE</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>header</name><operator>.</operator><name>b_eac3</name></name> <operator>!=</operator> <operator>!</operator><name>b_eac3</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_samples</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_samples</name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>i_samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>header</name><operator>.</operator><name>i_size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EA52CheckSyncProbe</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_dummy</name></decl>;</decl_stmt>

<return>return <expr><call><name>A52CheckSync</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_dummy</name></expr></argument>, <argument><expr><name>pi_samples</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EA52Probe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_name</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"eac3"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>rgi_twocc</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><name>WAVE_FORMAT_A52</name></expr>, <expr><name>WAVE_FORMAT_UNKNOWN</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>GenericProbe</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pi_offset</name></expr></argument>, <argument><expr><name>ppsz_name</name></expr></argument>, <argument><expr><name>EA52CheckSyncProbe</name></expr></argument>,

<argument><expr><name>VLC_A52_MIN_HEADER_SIZE</name></expr></argument>,

<argument><expr><literal type="number">1920</literal> <operator>+</operator> <name>VLC_A52_MIN_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>WAV_EXTRA_PROBE_SIZE</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><name>rgi_twocc</name></expr></argument>, <argument><expr><name>GenericFormatCheck</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>A52CheckSyncProbe</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_dummy</name></decl>;</decl_stmt>

<return>return <expr><call><name>A52CheckSync</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_dummy</name></expr></argument>, <argument><expr><name>pi_samples</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>A52Probe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_name</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"a52"</literal></expr>, <expr><literal type="string">"ac3"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>rgi_twocc</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><name>WAVE_FORMAT_A52</name></expr>, <expr><name>WAVE_FORMAT_UNKNOWN</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>GenericProbe</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pi_offset</name></expr></argument>, <argument><expr><name>ppsz_name</name></expr></argument>, <argument><expr><name>A52CheckSyncProbe</name></expr></argument>,

<argument><expr><name>VLC_A52_MIN_HEADER_SIZE</name></expr></argument>,

<argument><expr><literal type="number">1920</literal> <operator>+</operator> <name>VLC_A52_MIN_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>WAV_EXTRA_PROBE_SIZE</name></expr></argument>,

<argument><expr><name>true</name></expr></argument>, <argument><expr><name>rgi_twocc</name></expr></argument>, <argument><expr><name>GenericFormatCheck</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>A52Init</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_big_endian</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>VLC_A52_MIN_HEADER_SIZE</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <name>VLC_A52_MIN_HEADER_SIZE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>A52CheckSync</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_big_endian</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DtsCheckSync</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>pi_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_dts_header_t</name></type> <name>dts</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_dts_header_Parse</name><argument_list>( <argument><expr><operator>&amp;</operator><name>dts</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>VLC_DTS_HEADER_SIZE</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name>

<operator>&amp;&amp;</operator> <name><name>dts</name><operator>.</operator><name>i_frame_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dts</name><operator>.</operator><name>i_frame_size</name></name> <operator>&lt;=</operator> <literal type="number">8192</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>pi_samples</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_samples</name> <operator>=</operator> <name><name>dts</name><operator>.</operator><name>i_frame_length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>dts</name><operator>.</operator><name>i_frame_size</name></name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DtsProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_name</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"dts"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>rgi_twocc</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><name>WAVE_FORMAT_DTS</name></expr>, <expr><name>WAVE_FORMAT_UNKNOWN</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>GenericProbe</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pi_offset</name></expr></argument>, <argument><expr><name>ppsz_name</name></expr></argument>, <argument><expr><name>DtsCheckSync</name></expr></argument>,

<argument><expr><name>VLC_DTS_HEADER_SIZE</name></expr></argument>,

<argument><expr><literal type="number">16384</literal> <operator>+</operator> <name>VLC_DTS_HEADER_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>WAV_EXTRA_PROBE_SIZE</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>, <argument><expr><name>rgi_twocc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DtsInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MlpCheckSync</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xf8</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x72</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x6f</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xbb</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>pi_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ThdCheckSync</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xf8</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x72</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x6f</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">4</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0xba</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>pi_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MlpProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_name</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"mlp"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>rgi_twocc</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><name>WAVE_FORMAT_UNKNOWN</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>GenericProbe</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pi_offset</name></expr></argument>, <argument><expr><name>ppsz_name</name></expr></argument>, <argument><expr><name>MlpCheckSync</name></expr></argument>,

<argument><expr><literal type="number">4</literal><operator>+</operator><literal type="number">28</literal><operator>+</operator><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>BASE_PROBE_SIZE</name></expr></argument>, <argument><expr><name>WAV_EXTRA_PROBE_SIZE</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>, <argument><expr><name>rgi_twocc</name></expr></argument>, <argument><expr><name>GenericFormatCheck</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ThdProbe</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>pi_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_name</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"thd"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>rgi_twocc</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>WAVE_FORMAT_PCM</name></expr>, <expr><name>WAVE_FORMAT_UNKNOWN</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>GenericProbe</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pi_offset</name></expr></argument>, <argument><expr><name>ppsz_name</name></expr></argument>, <argument><expr><name>ThdCheckSync</name></expr></argument>,

<argument><expr><literal type="number">4</literal><operator>+</operator><literal type="number">28</literal><operator>+</operator><literal type="number">16</literal><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>BASE_PROBE_SIZE</name></expr></argument>, <argument><expr><name>WAV_EXTRA_PROBE_SIZE</name></expr></argument>,

<argument><expr><name>false</name></expr></argument>, <argument><expr><name>rgi_twocc</name></expr></argument>, <argument><expr><name>GenericFormatCheck</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MlpInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>VideoInit</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
