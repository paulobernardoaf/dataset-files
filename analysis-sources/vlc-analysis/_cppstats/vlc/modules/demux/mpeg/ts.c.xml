<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\ts.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_psi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_si.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_psip.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_hotfixes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_sl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_metadata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sections.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timestamps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/scte18.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../opus.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../mux/mpeg/csa.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARIBB24</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb24/aribb24.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMT_TEXT</name></cpp:macro> <cpp:value>N_("Extra PMT")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Allows a user to specify an extra pmt (pmt_pid=pid:stream_type[,...])." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PID_TEXT</name></cpp:macro> <cpp:value>N_("Set id of ES to PID")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PID_LONGTEXT</name></cpp:macro> <cpp:value>N_("Set the internal ID of each elementary stream" " handled by VLC to the same value as the PID in" " the TS stream, instead of 1, 2, 3, etc. Useful to" " do \'#duplicate{..., select=\"es=&lt;pid&gt;\"}\'.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSA_TEXT</name></cpp:macro> <cpp:value>N_("CSA Key")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSA_LONGTEXT</name></cpp:macro> <cpp:value>N_("CSA encryption key. This must be a " "16 char string (8 hexadecimal bytes).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSA2_TEXT</name></cpp:macro> <cpp:value>N_("Second CSA Key")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSA2_LONGTEXT</name></cpp:macro> <cpp:value>N_("The even CSA encryption key. This must be a " "16 char string (8 hexadecimal bytes).")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPKT_TEXT</name></cpp:macro> <cpp:value>N_("Packet size in bytes to decrypt")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CPKT_LONGTEXT</name></cpp:macro> <cpp:value>N_("Specify the size of the TS packet to decrypt. " "The decryption routines subtract the TS-header from the value before " "decrypting." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLIT_ES_TEXT</name></cpp:macro> <cpp:value>N_("Separate sub-streams")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLIT_ES_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Separate teletex/dvbs pages into independent ES. " "It can be useful to turn off this option when using stream output." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEEK_PERCENT_TEXT</name></cpp:macro> <cpp:value>N_("Seek based on percent not time")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEEK_PERCENT_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Seek and position based on a percent byte position, not a PCR generated " "time position. If seeking doesn't work property, turn on this option." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_CHECK_TEXT</name></cpp:macro> <cpp:value>"Check packets continuity counter"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CC_CHECK_LONGTEXT</name></cpp:macro> <cpp:value>"Detect discontinuities and drop packet duplicates. " "(bluRay sources are known broken and have false positives). "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_PATFIX_TEXT</name></cpp:macro> <cpp:value>"Try to generate PAT/PMT if missing"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_SKIP_GHOST_PROGRAM_TEXT</name></cpp:macro> <cpp:value>"Only create ES on program sending data"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_OFFSETFIX_TEXT</name></cpp:macro> <cpp:value>"Try to fix too early PCR (or late DTS)"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_GENERATED_PCR_OFFSET_TEXT</name></cpp:macro> <cpp:value>"Offset in ms for generated PCR"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCR_TEXT</name></cpp:macro> <cpp:value>N_("Trust in-stream PCR")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCR_LONGTEXT</name></cpp:macro> <cpp:value>N_("Use the stream PCR as a reference.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ts_standards_list</name><index>[]</index></name> <init>=

<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"mpeg"</literal></expr>, <expr><literal type="string">"dvb"</literal></expr>, <expr><literal type="string">"arib"</literal></expr>, <expr><literal type="string">"atsc"</literal></expr>, <expr><literal type="string">"tdmb"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ts_standards_list_text</name><index>[]</index></name> <init>=

<expr><block>{ <expr><call><name>N_</name><argument_list>(<argument><expr><literal type="string">"Auto"</literal></expr></argument>)</argument_list></call></expr>, <expr><literal type="string">"MPEG"</literal></expr>, <expr><literal type="string">"DVB"</literal></expr>, <expr><literal type="string">"ARIB"</literal></expr>, <expr><literal type="string">"ATSC"</literal></expr>, <expr><literal type="string">"T-DMB"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STANDARD_TEXT</name></cpp:macro> <cpp:value>N_("Digital TV Standard")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STANDARD_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Selects mode for digital TV standard. " "This feature affects EPG information and subtitles." )</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"MPEG Transport Stream demuxer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_shortname</name> <argument_list>( <argument><literal type="string">"MPEG-TS"</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"ts-standard"</literal></argument>, <argument><literal type="string">"auto"</literal></argument>, <argument>STANDARD_TEXT</argument>, <argument>STANDARD_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>ts_standards_list</argument>, <argument>ts_standards_list_text</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"ts-extra-pmt"</literal></argument>, <argument>NULL</argument>, <argument>PMT_TEXT</argument>, <argument>PMT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ts-trust-pcr"</literal></argument>, <argument>true</argument>, <argument>PCR_TEXT</argument>, <argument>PCR_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ts-es-id-pid"</literal></argument>, <argument>true</argument>, <argument>PID_TEXT</argument>, <argument>PID_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_obsolete_string</name><argument_list>( <argument><literal type="string">"ts-out"</literal></argument> )</argument_list></macro> 

<macro><name>add_obsolete_integer</name><argument_list>( <argument><literal type="string">"ts-out-mtu"</literal></argument> )</argument_list></macro> 

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"ts-csa-ck"</literal></argument>, <argument>NULL</argument>, <argument>CSA_TEXT</argument>, <argument>CSA_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"ts-csa2-ck"</literal></argument>, <argument>NULL</argument>, <argument>CSA2_TEXT</argument>, <argument>CSA2_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_integer</name><argument_list>( <argument><literal type="string">"ts-csa-pkt"</literal></argument>, <argument><literal type="number">188</literal></argument>, <argument>CPKT_TEXT</argument>, <argument>CPKT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_safe</name><argument_list>()</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ts-split-es"</literal></argument>, <argument>true</argument>, <argument>SPLIT_ES_TEXT</argument>, <argument>SPLIT_ES_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ts-seek-percent"</literal></argument>, <argument>false</argument>, <argument>SEEK_PERCENT_TEXT</argument>, <argument>SEEK_PERCENT_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ts-cc-check"</literal></argument>, <argument>true</argument>, <argument>CC_CHECK_TEXT</argument>, <argument>CC_CHECK_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ts-pmtfix-waitdata"</literal></argument>, <argument>true</argument>, <argument>TS_SKIP_GHOST_PROGRAM_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ts-patfix"</literal></argument>, <argument>true</argument>, <argument>TS_PATFIX_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"ts-pcr-offsetfix"</literal></argument>, <argument>true</argument>, <argument>TS_OFFSETFIX_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"ts-generated-pcr-offset"</literal></argument>, <argument><literal type="number">120</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">500</literal></argument>,

<argument>TS_GENERATED_PCR_OFFSET_TEXT</argument>, <argument>NULL</argument>, <argument>true</argument> )</argument_list></macro>

<expr_stmt><expr><call><name>add_obsolete_bool</name><argument_list>( <argument><expr><literal type="string">"ts-silent"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"ts"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ChangeKeyCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>PIDReferencedByProgram</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>UpdatePESFilters</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_all</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>FlushESBuffer</name><parameter_list>( <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>UpdatePIDScrambledState</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>PIDGet</name><parameter_list>( <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x1f</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">8</literal> <operator>)</operator><operator>|</operator><name><name>p</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>stime_t</name></type> <name>GetPCR</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>ProcessTSPacket</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GatherSectionsData</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GatherPESData</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ProgramSetPCR</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_prg</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_pcr</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>block_t</name><modifier>*</modifier></type> <name>ReadTSPacket</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SeekToTime</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>time</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ReadyQueuesPostSeek</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PCRHandle</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>stime_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PCRFixHandle</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_PACKET_SIZE_188</name></cpp:macro> <cpp:value>188</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_PACKET_SIZE_192</name></cpp:macro> <cpp:value>192</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_PACKET_SIZE_204</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_PACKET_SIZE_MAX</name></cpp:macro> <cpp:value>204</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TS_HEADER_SIZE</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROBE_CHUNK_COUNT</name></cpp:macro> <cpp:value>500</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROBE_MAX</name></cpp:macro> <cpp:value>(PROBE_CHUNK_COUNT * 10)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DetectPacketSize</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_header_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_offset</name> <operator>+</operator> <name>TS_PACKET_SIZE_MAX</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>i_offset</name> <operator>+</operator> <name>TS_PACKET_SIZE_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_sync</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_sync</name> <operator>&lt;</operator> <name>TS_PACKET_SIZE_MAX</name></expr>;</condition> <incr><expr><name>i_sync</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0x47</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_peek</name> <init>= <expr><name>i_offset</name> <operator>+</operator> <name>TS_PACKET_SIZE_MAX</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>&lt;</operator> <name>i_peek</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot peek"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>TS_PACKET_SIZE_188</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal> <operator>&amp;&amp;</operator>

<name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>TS_PACKET_SIZE_188</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal> <operator>&amp;&amp;</operator>

<name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>TS_PACKET_SIZE_188</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>TS_PACKET_SIZE_188</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>TS_PACKET_SIZE_192</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal> <operator>&amp;&amp;</operator>

<name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>TS_PACKET_SIZE_192</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal> <operator>&amp;&amp;</operator>

<name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>TS_PACKET_SIZE_192</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_sync</name> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_header_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<return>return <expr><name>TS_PACKET_SIZE_192</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>TS_PACKET_SIZE_204</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal> <operator>&amp;&amp;</operator>

<name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>TS_PACKET_SIZE_204</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal> <operator>&amp;&amp;</operator>

<name><name>p_peek</name><index>[<expr><name>i_offset</name> <operator>+</operator> <name>i_sync</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>TS_PACKET_SIZE_204</name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>TS_PACKET_SIZE_204</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"this does not look like a TS stream, continuing"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>TS_PACKET_SIZE_188</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"TS module discarded (lost sync)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOPFIELD_HEADER_SIZE</name></cpp:macro> <cpp:value>3712</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DetectPVRHeadersAndHeaderSize</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_header_size</name></decl></parameter>, <parameter><decl><type><name>vdr_info_t</name> <modifier>*</modifier></type><name>p_vdr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_header_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_packet_size</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>TS_PACKET_SIZE_MAX</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>TS_PACKET_SIZE_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"TFrc"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_peek</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>TOPFIELD_HEADER_SIZE</name> <operator>+</operator> <name>TS_PACKET_SIZE_MAX</name></expr></argument> )</argument_list></call>

<operator>==</operator> <name>TOPFIELD_HEADER_SIZE</name> <operator>+</operator> <name>TS_PACKET_SIZE_MAX</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_service</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_packet_size</name> <operator>=</operator> <call><name>DetectPacketSize</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pi_header_size</name></expr></argument>, <argument><expr><name>TOPFIELD_HEADER_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_packet_size</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"this is a topfield file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

int i_duration, i_name;

char *psz_name = xmalloc(25);

char *psz_event_name;

char *psz_event_text = xmalloc(130);

char *psz_ext_text = xmalloc(1025);

i_duration = (int) (p_peek[8] &lt;&lt; 8) | p_peek[9];

msg_Dbg( p_demux, "Topfield recording length: +/- %d minutes", i_duration);

memcpy( psz_name, &amp;p_peek[28], 24 );

psz_name[24] = '\0';

msg_Dbg( p_demux, "recordingname=%s", psz_name );

i_name = (int)(p_peek[89]&amp;~0x81);

msg_Dbg( p_demux, "event name length = %d", i_name);

psz_event_name = xmalloc( i_name+1 );

memcpy( psz_event_name, &amp;p_peek[91], i_name );

psz_event_name[i_name] = '\0';

memcpy( psz_event_text, &amp;p_peek[91+i_name], 129-i_name );

psz_event_text[129-i_name] = '\0';

msg_Dbg( p_demux, "event name=%s", psz_event_name );

msg_Dbg( p_demux, "event text=%s", psz_event_text );

memcpy( psz_ext_text, p_peek+372, 1024 );

psz_ext_text[1024] = '\0';

msg_Dbg( p_demux, "extended event text=%s", psz_ext_text );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_vdr</name><operator>-&gt;</operator><name>i_service</name></name> <operator>=</operator> <name>i_service</name></expr>;</expr_stmt>

<return>return <expr><name>i_packet_size</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>DetectPacketSize</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pi_header_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_packet_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_packet_header_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>patpid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vdr_info_t</name></type> <name>vdr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_packet_size</name> <operator>=</operator> <call><name>DetectPVRHeadersAndHeaderSize</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_packet_header_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vdr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_packet_size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_end_preparse</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_default_selection</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time_update</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vdr</name></name> <operator>=</operator> <name>vdr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>b25stream</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_pid_list_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>=</operator> <name>i_packet_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_header_size</name></name> <operator>=</operator> <name>i_packet_header_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_ts_read</name></name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_start_record</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>i_first_dts</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>i_timesourcepid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>status</name></name> <operator>=</operator> <ternary><condition><expr><call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-patfix"</literal></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><name>PAT_WAITING</name></expr> </then><else>: <expr><name>PAT_FIXTRIED</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>patpid</name> <operator>=</operator> <call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>PIDSetup</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>TYPE_PAT</name></expr></argument>, <argument><expr><name>patpid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ts_psi_PAT_Attach</name><argument_list>( <argument><expr><name>patpid</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>patpid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name> <operator>=</operator> <operator>(</operator> <name>VLC_SUCCESS</name> <operator>==</operator> <call><name>SetPIDFilter</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>patpid</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>=</operator> <name>PROGRAM_AUTO_DEFAULT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_es_id_pid</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-es-id-pid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_extraid</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_trust_pcr</name></name> <operator>=</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-trust-pcr"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_check_pcr_offset</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_trust_pcr</name></name> <operator>&amp;&amp;</operator> <call><name>var_CreateGetBool</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-pcr-offsetfix"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_generated_pcr_dpb_offset</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-generated-pcr-offset"</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_string</name> <init>= <expr><call><name>var_CreateGetString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-extra-pmt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_user_pmt</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>UserPmt</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>var_CreateGetStringCommand</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-csa-ck"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_string</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_string</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>psz_csa2</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name> <operator>=</operator> <call><name>csa_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_csa2</name> <operator>=</operator> <call><name>var_CreateGetStringCommand</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-csa2-ck"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_res</name> <operator>=</operator> <call><name>csa_SetCW</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_res</name> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator> <name>psz_csa2</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_csa2</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>csa_SetCW</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name>psz_csa2</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>csa_SetCW</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_res</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>csa_SetCW</name><argument_list>( <argument><expr><operator>(</operator><name>vlc_object_t</name><operator>*</operator><operator>)</operator><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>csa_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-csa-ck"</literal></expr></argument>, <argument><expr><name>ChangeKeyCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_AddCallback</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-csa2-ck"</literal></expr></argument>, <argument><expr><name>ChangeKeyCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pkt</name> <init>= <expr><call><name>var_CreateGetInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-csa-pkt"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>i_pkt</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>i_pkt</name></expr></argument> &gt;</argument_list></name> <literal type="number">188</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"wrong packet size %d specified."</literal></expr></argument>, <argument><expr><name>i_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"using default packet size of 188 bytes"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name> <operator>=</operator> <literal type="number">188</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name> <operator>=</operator> <name>i_pkt</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"decrypting %d bytes of packet"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_csa2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_split_es</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-split-es"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_canseek</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_canfastseek</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_lowdelay</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"low-delay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_time_for_positions</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-seek-percent"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_cc_check</name></name> <operator>=</operator> <call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-cc-check"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>=</operator> <name>TS_STANDARD_AUTO</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_standard</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-standard"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_standard</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ts_standards_list</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_standard</name></expr></argument>, <argument><expr><name><name>ts_standards_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TsChangeStandard</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>TS_STANDARD_AUTO</name> <operator>+</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Standard set to %s"</literal></expr></argument>, <argument><expr><name><name>ts_standards_list_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_standard</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_AUTO</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="string">"atsc"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument>, <argument><expr><literal type="string">"usdigital"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TsChangeStandard</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>TS_STANDARD_ATSC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_canseek</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_FASTSEEK</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_canfastseek</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name> <operator>&amp;&amp;</operator> <call><name>var_CreateGetBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-pmtfix-waitdata"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_creation</name></name> <operator>=</operator> <name>DELAY_ES</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_creation</name></name> <operator>=</operator> <name>CREATE_ES</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_demux</name><operator>-&gt;</operator><name>b_preparsing</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_canseek</name></name></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_end_preparse</name></name></expr> )</condition><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><call><name>Demux</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_DEMUXER_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FreeDictAttachment</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_input_attachment_Delete</name><argument_list>( <argument><expr><operator>(</operator><name>input_attachment_t</name> <operator>*</operator><operator>)</operator> <name>p_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-csa-ck"</literal></expr></argument>, <argument><expr><name>ChangeKeyCallback</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>var_DelCallback</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ts-csa2-ck"</literal></expr></argument>, <argument><expr><name>ChangeKeyCallback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>csa_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARIBB24</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>p_instance</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>arib_instance_destroy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>b25stream</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>b25stream</name><operator>-&gt;</operator><name>s</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>b25stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_pid_list_Release</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pids</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_dictionary_clear</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>, <argument><expr><name>FreeDictAttachment</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ChangeKeyCallback</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name>psz_cmd</name></decl></parameter>,

<parameter><decl><type><name>vlc_value_t</name></type> <name>oldval</name></decl></parameter>, <parameter><decl><type><name>vlc_value_t</name></type> <name>newval</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>psz_cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>oldval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_tmp</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name>p_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_tmp</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>csa_SetCW</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_tmp</name> <operator>=</operator> <call><name>csa_SetCW</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name><name>newval</name><operator>.</operator><name>psz_string</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_tmp</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_wait_es</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SEEN</name><argument_list>(<argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>PAT_MISSING</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>MissingPATPMTFixup</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>PAT_FIXTRIED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name><operator>-&gt;</operator><name>b_generated</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_pkt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_pkt</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_ts_read</name></name></expr>;</condition> <incr><expr><name>i_pkt</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_frame</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_header</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator><name>p_pkt</name> <operator>=</operator> <call><name>ReadTSPacket</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_start_record</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_SET_RECORD_STATE</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,

<argument><expr><literal type="string">"ts"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_start_record</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>TS_PACKET_SIZE_188</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"transport_error_indicator set (pid=%d)"</literal></expr></argument>,

<argument><expr><call><name>PIDGet</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><call><name>GetPID</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><call><name>PIDGet</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SEEN</name><argument_list>(<argument><expr><name>p_pid</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_FREE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"pid[%d] unknown"</literal></expr></argument>, <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>FLAG_SEEN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <literal type="number">0x01</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_valid_scrambling</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_pkt</name> <operator>=</operator> <call><name>ProcessTSPacket</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pkt</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SCRAMBLED</name><argument_list>(<argument><expr><operator>*</operator><name>p_pid</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>!</operator><operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_SCRAMBLED</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>UpdatePIDScrambledState</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_SCRAMBLED</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pcr</name> <init>= <expr><call><name>GetPCR</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pcr</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PCRHandle</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name>i_pcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SEEN</name><argument_list>( <argument><expr><call><name>GetPID</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>i_timesourcepid</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xD0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x10</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>ProbePES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <name>TS_HEADER_SIZE</name></expr></argument>,

<argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>TS_HEADER_SIZE</name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>TYPE_PAT</name></expr>:</case>

<case>case <expr><name>TYPE_PMT</name></expr>:</case>

<expr_stmt><expr><call><name>ts_psi_Packet_Push</name><argument_list>( <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_STREAM</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_end_preparse</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_creation</name></name> <operator>==</operator> <name>DELAY_ES</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Creating delayed ES"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AddAndCreateES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdatePESFilters</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>==</operator> <name>PROGRAM_ALL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>FLAG_FILTERED</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>TS_TRANSPORT_PES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_frame</name> <operator>=</operator> <call><name>GatherPESData</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><name>i_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>transport</name></name> <operator>==</operator> <name>TS_TRANSPORT_SECTIONS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_frame</name> <operator>=</operator> <call><name>GatherSectionsData</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><name>i_header</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_SI</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_SCRAMBLED</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ts_si_Packet_Push</name><argument_list>( <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_PSIP</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_SCRAMBLED</name><operator>|</operator><name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ts_psip_Packet_Push</name><argument_list>( <argument><expr><name>p_pid</name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TYPE_CAT</name></expr>:</case>

<default>default:</default>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>b_frame</name> <operator>||</operator> <operator>(</operator> <name>b_wait_es</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>demux_UpdateTitleFromStream</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EITCurrentEventTime</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>,

<parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>pi_time</name></decl></parameter>, <parameter><decl><type><name>time_t</name> <modifier>*</modifier></type><name>pi_length</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>p_pmt</name> <operator>||</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_length</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_start</name></name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name> <operator>&lt;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_start</name></name> <operator>+</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_length</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>pi_length</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_length</name> <operator>=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pi_time</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_time</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name> <operator>-</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_time</name> <operator>+=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time_update</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>HasSelectedES</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_stream_selected</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_es</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>pb_stream_selected</name></expr>;</condition> <incr><expr><name>p_es</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ES_OUT_GET_ES_STATE</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>pb_stream_selected</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>HasSelectedES</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_extraes</name></name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>pb_stream_selected</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>UpdatePESFilters</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_all</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pmt_pid</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pmt_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pmt_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FLAG_FILTERED</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>FLAG_FILTERED</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>&amp;=</operator> <operator>~</operator><name>FLAG_FILTERED</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pmt_pid</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pmt_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_default_selection</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name><operator>)</operator> <operator>||</operator> <name>b_all</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>b_selected</name></name> <operator>=</operator> <call><name>ProgramIsSelected</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>b_selected</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>FLAG_FILTERED</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>espid</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name> <init>= <expr><name><name>espid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_stream_selected</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pes</name><operator>-&gt;</operator><name>b_always_receive</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_all</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>HasSelectedES</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_stream_selected</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_stream_selected</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"enabling pid %d from program %d"</literal></expr></argument>, <argument><expr><name><name>espid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>espid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>FLAG_FILTERED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i_flags</name> <operator>|=</operator> <name>FLAG_FILTERED</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"enabling pcr pid %d from program %d"</literal></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pmt_pid</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pmt_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UpdateHWFilter</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>p_pmt_pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>espid</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>UpdateHWFilter</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>espid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>espid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>FLAG_FILTERED</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FlushESBuffer</name><argument_list>( <argument><expr><name><name>espid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>UpdateHWFilter</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_bool</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pb_bool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_int</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_pmt</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name><operator>-&gt;</operator><name>b_selected</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_pmt</name> <operator>=</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_canseek</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TITLE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>current_title</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_SEEKPOINT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>current_seekpoint</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>i_time</name></decl>, <decl><type ref="prev"/><name>i_length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EITCurrentEventTime</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_length</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>i_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_time</name><operator>/</operator><operator>(</operator><name>double</name><operator>)</operator><name>i_length</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_time_for_positions</name></name> <operator>&amp;&amp;</operator>

<name>p_pmt</name> <operator>&amp;&amp;</operator>

<name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>SETANDVALID</name><argument_list>(<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>i_length</name> <init>= <expr><call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_length</name> <operator>+=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>i_pos</name> <init>= <expr><call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <name>i_pos</name> <operator>/</operator> <name>i_length</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i64</name> <operator>=</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>offset</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i64</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_canseek</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_time_for_positions</name></name> <operator>&amp;&amp;</operator> <name>b_bool</name> <operator>&amp;&amp;</operator> <name>p_pmt</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>i_time</name></decl>, <decl><type ref="prev"/><name>i_length</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EITCurrentEventTime</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_time</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_length</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<name>i_length</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>SeekToTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>TO_SCALE</name><argument_list>( <argument><expr><call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>i_length</name> <operator>*</operator> <name>f</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ReadyQueuesPostSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr></argument>,

<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>TO_SCALE</name><argument_list>( <argument><expr><call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>i_length</name> <operator>*</operator> <name>f</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_time_for_positions</name></name> <operator>&amp;&amp;</operator> <name>b_bool</name> <operator>&amp;&amp;</operator> <name>p_pmt</name> <operator>&amp;&amp;</operator>

<name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>SETANDVALID</name><argument_list>(<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_length</name> <init>= <expr><call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i_length</name> <operator>*</operator> <name>f</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i64</name> <operator>&lt;=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SeekToTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ReadyQueuesPostSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr></argument>, <argument><expr><call><name>FROM_SCALE</name><argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i64</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i64</name> <operator>*</operator> <name>f</name><operator>)</operator></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ReadyQueuesPostSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_canseek</name></name> <operator>&amp;&amp;</operator> <name>p_pmt</name> <operator>&amp;&amp;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>SeekToTime</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>+</operator> <call><name>TO_SCALE</name><argument_list>(<argument><expr><name>i_time</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ReadyQueuesPostSeek</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_NEXT_DISPLAY_TIME</name></expr></argument>,

<argument><expr><call><name>FROM_SCALE</name><argument_list>(<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>i_time</name> <operator>-</operator> <name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>i_event_start</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EITCurrentEventTime</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_event_start</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>i_event_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pmt</name> <operator>&amp;&amp;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pcr</name> <init>= <expr><call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>(<argument><expr><name>i_pcr</name> <operator>-</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_NORMAL_TIME</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>EITCurrentEventTime</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator>

<operator>||</operator> <operator>(</operator><operator>!</operator><name>p_pmt</name> <operator>||</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>i_event_duration</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>EITCurrentEventTime</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_event_duration</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>i_event_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_ignore_time_for_positions</name></name> <operator>&amp;&amp;</operator>

<name>p_pmt</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first_dts</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_start</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr> </then><else>:

<expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first_dts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_last</name> <init>= <expr><call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_last</name> <operator>+=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>(<argument><expr><name>i_last</name> <operator>-</operator> <name>i_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_GROUP_DEFAULT</name></expr>:</case>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DEMUX_SET_GROUP_%s"</literal></expr></argument>, <argument><expr><literal type="string">"DEFAULT"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_default_selection</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>=</operator> <name>PROGRAM_AUTO_DEFAULT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_GROUP_ALL</name></expr>:</case> 

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DEMUX_SET_GROUP_%s"</literal></expr></argument>, <argument><expr><literal type="string">"ALL"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pat</name> <operator>=</operator> <call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument>, <argument><expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>=</operator> <name>PROGRAM_ALL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdatePESFilters</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_default_selection</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_GROUP_LIST</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>count</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>pids</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DEMUX_SET_GROUP_%s"</literal></expr></argument>, <argument><expr><literal type="string">"LIST"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>=</operator> <name>PROGRAM_LIST</name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument>, <argument><expr><name><name>pids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>UpdatePESFilters</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_default_selection</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_ES</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_ES_LIST</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_query</name> <operator>==</operator> <name>DEMUX_SET_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_int</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DEMUX_SET_ES %d"</literal></expr></argument>, <argument><expr><name>i_int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"DEMUX_SET_ES_LIST"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>!=</operator> <name>PROGRAM_ALL</name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>UpdatePESFilters</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>input_title_t</name></name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>v</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr>struct <name>input_title_t</name><operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

<return>return <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_GET_TITLE_INFO</name></expr></argument>, <argument><expr><name>v</name></expr></argument>,

<argument><expr><name>c</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_SET_TITLE</name></expr>:</case>

<return>return <expr><call><name>vlc_stream_vaControl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_SET_TITLE</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_SET_SEEKPOINT</name></expr>:</case>

<return>return <expr><call><name>vlc_stream_vaControl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_SET_SEEKPOINT</name></expr></argument>,

<argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>flags</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>*</operator><name>flags</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<return>return <expr><call><name>vlc_stream_vaControl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_GET_META</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>

<expr_stmt><expr><name>pb_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_RECORD_STATE</name></expr>:</case>

<expr_stmt><expr><name>b_bool</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_bool</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_SET_RECORD_STATE</name></expr></argument>,

<argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_start_record</name></name> <operator>=</operator> <name>b_bool</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_SIGNAL</name></expr>:</case>

<return>return <expr><call><name>vlc_stream_vaControl</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_GET_SIGNAL</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>ppp_attach</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_attachment_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_int</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <call><name>vlc_dictionary_keys_count</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_int</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ppp_attach</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>( <argument><expr><operator>*</operator><name>pi_int</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>input_attachment_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>ppp_attach</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_int</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>vlc_dictionary_entry_t</name> <modifier>*</modifier></type><name>p_entry</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name><operator>.</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init>

<condition><expr><name>p_entry</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"GET ATTACHMENT %s"</literal></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppp_attach</name><operator>)</operator><index>[<expr><operator>*</operator><name>pi_int</name></expr>]</index> <operator>=</operator> <call><name>vlc_input_attachment_Duplicate</name><argument_list>(

<argument><expr><operator>(</operator><name>input_attachment_t</name> <operator>*</operator><operator>)</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><name>ppp_attach</name><operator>)</operator><index>[<expr><operator>*</operator><name>pi_int</name></expr>]</index></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_int</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int16_t</name></type> <name>read_opus_flag</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>ret</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">3</literal><operator>&lt;&lt;</operator><literal type="number">13</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>Opus_Parse</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_chain_last</name> <init>= <expr><operator>&amp;</operator><name>p_chain</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0x3ff</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>start_trim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>end_trim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_trim_flag</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_trim_flag</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>control_extension_flag</name> <init>= <expr><operator>(</operator><name><name>buf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>au_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>buf</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>au_size</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>start_trim_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start_trim</name> <operator>=</operator> <call><name>read_opus_flag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>start_trim</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid start trimming flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_trim_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_trim</name> <operator>=</operator> <call><name>read_opus_flag</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_trim</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid end trimming flag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>control_extension_flag</name> <operator>&amp;&amp;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>l</name> <init>= <expr><operator>*</operator><name>buf</name><operator>++</operator></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid control extension length %d &gt; %zu"</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>l</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>au_size</name> <operator>||</operator> <name>au_size</name> <operator>&gt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid Opus AU size %d (PES %zu)"</literal></expr></argument>, <argument><expr><name>au_size</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>au</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>au_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>au</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>au</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>au_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_CopyProperties</name><argument_list>(<argument><expr><name>au</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name>pp_chain_last</name></expr></argument>, <argument><expr><name>au</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>au</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>=</operator> <call><name>opus_frame_duration</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>au_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_trim</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator> <name>end_trim</name> <operator>&lt;=</operator> <name><name>au</name><operator>-&gt;</operator><name>i_nb_samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>au</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>end_trim</name></expr>;</expr_stmt></block_content></block></if> 

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>au</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_trim</name> <operator>&amp;&amp;</operator> <name>start_trim</name> <operator>&lt;</operator> <operator>(</operator><name><name>au</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>-</operator> <name><name>au</name><operator>-&gt;</operator><name>i_length</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>au</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>-=</operator> <name>start_trim</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>au</name><operator>-&gt;</operator><name>i_nb_samples</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>au</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_PREROLL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>au_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>au_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_chain</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>J2K_Parse</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_interlaced</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_buf</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>b_interlaced</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">48</literal></expr> </then><else>: <expr><literal type="number">38</literal></expr></else></ternary><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_buf</name></expr></argument>, <argument><expr><literal type="string">"elsmfrat"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_den</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_num</name> <init>= <expr><call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_buf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_den</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>invalid</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name>i_den</name></expr></argument>, <argument><expr><name>i_num</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <ternary><condition><expr><operator>(</operator><name>b_interlaced</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">48</literal></expr> </then><else>: <expr><literal type="number">38</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <ternary><condition><expr><operator>(</operator><name>b_interlaced</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">48</literal></expr> </then><else>: <expr><literal type="number">38</literal></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

<label><name>invalid</name>:</label>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid J2K header, dropping codestream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_tick_t</name></type> <name>GetTimeForUntimed</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_ts</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_stream_t</name> <modifier>*</modifier></type><name>p_cand</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>FLAG_FILTERED</name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>SEEN</name><argument_list>(<argument><expr><name>p_pid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STREAM</name> <operator>&amp;&amp;</operator>

<name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name> <operator>&amp;&amp;</operator>

<call><name>SETANDVALID</name><argument_list>(<argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cand</name> <operator>||</operator> <operator>(</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>&amp;&amp;</operator>

<name><name>p_cand</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>VIDEO_ES</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_cand</name> <operator>=</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ts</name> <operator>=</operator> <name><name>p_cand</name><operator>-&gt;</operator><name>i_last_dts</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_ts</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>ConvertPESBlock</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_pes_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_stream_id</name></decl></parameter>,

<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p_block</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SUBT</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_pes_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name>i_pes_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_pes_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_TELETEXT</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr</name> <init>= <expr><call><name>FROM_SCALE</name><argument_list>(<argument><expr><call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>i_pcr</name> <argument_list type="generic">&lt; <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>||</operator> <name>i_pcr</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> &gt;</argument_list></name> <name>CLOCK_FREQ</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_ts</name> <init>= <expr><call><name>GetTimeForUntimed</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SETANDVALID</name><argument_list>(<argument><expr><name>i_ts</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ts</name> <operator>=</operator> <call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name>i_ts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>(<argument><expr><name>i_ts</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_ARIB_A</name> <operator>||</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_ARIB_C</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_pes_size</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name>i_pes_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_pes_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_OPUS</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>Opus_Parse</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_JPEG2000</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_stream_id</name> <operator>!=</operator> <literal type="number">0xBD</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>J2K_Parse</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>b_interlaced</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SendDataChain</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_chain</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>p_chain</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_chain</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_PRIVATE_MASK</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_lowdelay</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_AU_END</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es_send</name> <init>= <expr><name>p_es</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es_send</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name><name>p_es_send</name><operator>-&gt;</operator><name>i_next_block_flags</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es_send</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>p_es_send</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_es_send</name><operator>-&gt;</operator><name>p_program</name><operator>-&gt;</operator><name>b_selected</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_extra_es</name> <init>= <expr><name><name>p_es_send</name><operator>-&gt;</operator><name>p_extraes</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_extra_es</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_extra_es</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dup</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_extra_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_extra_es</name> <operator>=</operator> <name><name>p_extra_es</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_es_send</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_es_send</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_dup</name> <init>= <expr><call><name>block_Duplicate</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dup</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_es_send</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_es_send</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_es_send</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_es_send</name> <operator>=</operator> <name><name>p_es_send</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParsePESDataChain</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_pes_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_dts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_pes_scrambling</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_mpeg4_descriptor_t</name> <modifier>*</modifier></type><name>p_mpeg4desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_max</name> <init>= <expr><call><name>block_ChainExtract</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_max</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><operator>(</operator><name><name>p_pes</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_SCRAMBLED</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid header [0x%02x:%02x:%02x:%02x] (pid: %d)"</literal></expr></argument>,

<argument><expr><name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>header</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>BLOCK_FLAG_SCRAMBLED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParsePESHeader</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>i_max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stream_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_pes_scrambling</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_pes_scrambling</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_SCRAMBLED</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_mpeg4desc</name> <operator>=</operator> <call><name>GetMPEG4DescByEsId</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'c'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SUBT</name> <operator>&amp;&amp;</operator> <name>p_mpeg4desc</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>decoder_config_descriptor_t</name> <modifier>*</modifier></type><name>dcd</name> <init>= <expr><operator>&amp;</operator><name><name>p_mpeg4desc</name><operator>-&gt;</operator><name>dec_descr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>dcd</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>dcd</name><operator>-&gt;</operator><name>p_extra</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>dcd</name><operator>-&gt;</operator><name>p_extra</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x10</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>i_skip</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_length</name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>i_skip</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pes_size</name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>p_pes</name> <operator>&amp;&amp;</operator> <name>i_skip</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;=</operator> <name>i_skip</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>-=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pes</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_skip</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i_dts</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_pes</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_pmt</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>(<argument><expr><name>i_dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>(<argument><expr><name>i_pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><name>i_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_chain</name> <init>= <expr><call><name>block_ChainGather</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<while>while <condition>( <expr><name>p_chain</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name>p_chain</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_chain</name> <operator>=</operator> <name><name>p_chain</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_fix_done</name></name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>PCRFixHandle</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_disable</name></name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>pp_last</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_chain</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>pp_last</name></name></expr></argument>, <argument><expr><name>p_chain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_chain</name> <operator>=</operator> <name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_disable</name></name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>==</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>||</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>==</operator> <literal type="number">0x1FFF</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pcr</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_generated_pcr_dpb_offset</name></name> <operator>)</operator></expr>

?</condition><then> <expr><call><name>TO_SCALE</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_generated_pcr_dpb_offset</name></name></expr></argument>)</argument_list></call></expr>

</then><else>: <expr><call><name>TO_SCALE</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ProgramSetPCR</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>i_pcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<call><name>SETANDVALID</name><argument_list>(<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name> <operator>||</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_dts27</name> <init>= <expr><call><name>TO_SCALE</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_dts27</name> <operator>=</operator> <call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name>i_dts27</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pcr</name> <init>= <expr><call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts27</name> <operator>&lt;</operator> <name>i_pcr</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name> <operator>=</operator> <name>i_pcr</name> <operator>-</operator> <name>i_dts27</name> <operator>+</operator> <call><name>TO_SCALE_NZ</name><argument_list>(<argument><expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Broken stream: pid %d sends packets with dts %"</literal><name>PRId64</name>

<literal type="string">"us later than pcr, applying delay"</literal></expr></argument>,

<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>+=</operator> <call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>+=</operator> <call><name>FROM_SCALE_NZ</name><argument_list>(<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_proc</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ts_stream_processor_Reset</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>ts_stream_processor_Push</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_proc</name></name></expr></argument>, <argument><expr><name>i_stream_id</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <call><name>ConvertPESBlock</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>i_pes_size</name></expr></argument>, <argument><expr><name>i_stream_id</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>SendDataChain</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_fix_done</name></name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>PCRFixHandle</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainLastAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>pp_last</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"empty pes"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PESDataChainHandle</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ParsePESDataChain</name><argument_list>( <argument><expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></argument>, <argument><expr><operator>(</operator><name>ts_pid_t</name> <operator>*</operator><operator>)</operator> <name>priv</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name><modifier>*</modifier></type> <name>ReadTSPacket</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_pkt</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>size</name> <operator>==</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"EOF at %"</literal><name>PRIu64</name></expr></argument>, <argument><expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Can't read TS packet at %"</literal><name>PRIu64</name></expr></argument>, <argument><expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&lt;</operator> <name>TS_HEADER_SIZE</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_header_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_header_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_header_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0x47</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"lost synchro"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_peek</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>i_peek</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"eof ?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><name>i_skip</name> <operator>&lt;</operator> <name>i_peek</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><name>i_skip</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_header_size</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal> <operator>&amp;&amp;</operator>

<name><name>p_peek</name><index>[<expr><name>i_skip</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_header_size</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">0x47</literal></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_skip</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"skipping %d bytes of garbage"</literal></expr></argument>, <argument><expr><name>i_skip</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_skip</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>i_skip</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>&lt;</operator> <name>i_peek</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>p_pkt</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"eof ?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_pkt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>stime_t</name></type> <name>GetPCR</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pcr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x20</literal> <operator>)</operator> <operator>&amp;&amp;</operator> 

<operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x10</literal> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_pcr</name> <operator>=</operator> <operator>(</operator> <operator>(</operator><name>stime_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">25</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator> <operator>(</operator><name>stime_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">17</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator> <operator>(</operator><name>stime_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">9</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator> <operator>(</operator><name>stime_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator> <operator>(</operator><name>stime_t</name><operator>)</operator><name><name>p</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_pcr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>UpdateESScrambledState</name><parameter_list>( <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_scrambled</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p_es</name></expr>;</condition> <incr><expr><name>p_es</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES_SCRAMBLED_STATE</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>b_scrambled</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>UpdateESScrambledState</name><argument_list>( <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_extraes</name></name></expr></argument>, <argument><expr><name>b_scrambled</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>UpdatePIDScrambledState</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_scrambled</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SCRAMBLED</name><argument_list>(<argument><expr><operator>*</operator><name>p_pid</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>!</operator><name>b_scrambled</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"scrambled state changed on pid %d (%d-&gt;%d)"</literal></expr></argument>,

<argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><call><name>SCRAMBLED</name><argument_list>(<argument><expr><operator>*</operator><name>p_pid</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b_scrambled</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_scrambled</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>FLAG_SCRAMBLED</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>FLAG_SCRAMBLED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STREAM</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>UpdateESScrambledState</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>b_scrambled</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>FlushESBuffer</name><parameter_list>( <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_gathered</name></name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_saved</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_proc</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ts_stream_processor_Reset</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ReadyQueuesPostSeek</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name> <init>= <expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_STREAM</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</init> <condition><expr><name>p_es</name></expr>;</condition> <incr><expr><name>p_es</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_next_block_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_dup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_ChainRelease</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>pp_last</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_sections_processor_Reset</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_sections_proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_stream_processor_Reset</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FlushESBuffer</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SeekToTime</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_scaledtime</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>==</operator> <name>i_scaledtime</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_canseek</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_stream_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_canfastseek</name></name> <operator>||</operator> <name>i_stream_size</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_initial_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_head_pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_tail_pos</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>i_stream_size</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_head_pos</name> <operator>&gt;=</operator> <name>i_tail_pos</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>i_head_pos</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name><operator>)</operator> <operator>&lt;=</operator> <name>i_tail_pos</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_found</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_splitpos</name> <init>= <expr><name>i_head_pos</name> <operator>+</operator> <operator>(</operator><name>i_tail_pos</name> <operator>-</operator> <name>i_head_pos</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_div</name> <init>= <expr><name>i_splitpos</name> <operator>%</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_splitpos</name> <operator>-=</operator> <name>i_div</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>i_splitpos</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name> <init>= <expr><name>i_splitpos</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_pos</name> <operator>&lt;</operator> <name>i_tail_pos</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pcr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name> <init>= <expr><call><name>ReadTSPacket</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pkt</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_head_pos</name> <operator>=</operator> <name>i_tail_pos</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pid</name> <init>= <expr><call><name>PIDGet</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pid</name> <operator>!=</operator> <literal type="number">0x1FFF</literal> <operator>&amp;&amp;</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STREAM</name> <operator>&amp;&amp;</operator>

<call><name>ts_stream_Find_es</name><argument_list>( <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xD0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x10</literal></expr> 

)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_skip</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>==</operator> <name>i_pid</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pcr</name> <operator>=</operator> <call><name>GetPCR</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">182</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pcr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_dts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>VLC_SUCCESS</name> <operator>==</operator> <call><name>ParsePESHeader</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_skip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stream_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pcr</name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pcr</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_diff</name> <init>= <expr><name>i_scaledtime</name> <operator>-</operator> <call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name>i_pcr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_diff</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_tail_pos</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i_splitpos</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>i_splitpos</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_diff</name> <operator>&lt;</operator> <call><name>TO_SCALE</name><argument_list>(<argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_head_pos</name> <operator>=</operator> <name>i_pos</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_found</name> <operator>&amp;&amp;</operator> <name>i_pos</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>&gt;</operator> <name>i_tail_pos</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_tail_pos</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i_splitpos</name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>i_splitpos</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_found</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Seek():cannot find a time position."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>i_initial_pos</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Can't seek back to %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>i_initial_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ProbeChunk</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_program</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_end</name></decl></parameter>, <parameter><decl><type><name>stime_t</name> <modifier>*</modifier></type><name>pi_pcr</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_found</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_pcr</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_count</name><operator>++</operator> <operator>&gt;</operator> <name>PROBE_CHUNK_COUNT</name> <operator>||</operator> <operator>!</operator><operator>(</operator> <name>p_pkt</name> <operator>=</operator> <call><name>ReadTSPacket</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_size</name></name> <operator>&lt;</operator> <name>TS_PACKET_SIZE_188</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_pid</name> <init>= <expr><call><name>PIDGet</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>FLAG_SEEN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pid</name> <operator>!=</operator> <literal type="number">0x1FFF</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_pcrresult</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_adaptfield</name> <init>= <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_adaptfield</name> <operator>&amp;&amp;</operator> <name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_pcr</name> <operator>=</operator> <call><name>GetPCR</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_pcr</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xC0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x40</literal> <operator>&amp;&amp;</operator> 

<operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xD0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> 

<name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STREAM</name> <operator>&amp;&amp;</operator>

<name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>UNKNOWN_ES</name></expr>

)</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_pcrresult</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_dts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_skip</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>b_adaptfield</name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">182</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>VLC_SUCCESS</name> <operator>==</operator> <call><name>ParsePESHeader</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-</operator> <name>i_skip</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stream_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_pcr</name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name>i_pts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pi_pcr</name> <operator>=</operator> <name>i_pts</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pi_pcr</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>==</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>||</operator>

<operator>(</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>==</operator> <literal type="number">0x1FFF</literal> <operator>&amp;&amp;</operator>

<call><name>PIDReferencedByProgram</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call> <operator>)</operator></expr>

)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_end</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <operator>*</operator><name>pi_pcr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts_byte</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>b_pcrresult</name> <operator>&amp;&amp;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>=</operator> <operator>*</operator><name>pi_pcr</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first_dts</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first_dts</name></name> <operator>=</operator> <operator>*</operator><name>pi_pcr</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_program</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_program</name> <operator>==</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pb_found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ProbeStart</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_program</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_initial_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_stream_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_probe_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pcr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>*</operator> <name>i_probe_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><name>i_stream_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ProbeChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_program</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pcr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_found</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_probe_count</name> <operator>+=</operator> <name>PROBE_CHUNK_COUNT</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>i_pos</name> <operator>&lt;</operator> <name>i_stream_size</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_found</name> <operator>&amp;&amp;</operator>

<name>i_probe_count</name> <operator>&lt;</operator> <name>PROBE_MAX</name></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>i_initial_pos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>b_found</name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ProbeEnd</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_program</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_initial_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_stream_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_probe_count</name> <init>= <expr><name>PROBE_CHUNK_COUNT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pcr</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <name>i_stream_size</name> <operator>-</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_packet_size</name></name> <operator>*</operator> <name>i_probe_count</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ProbeChunk</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_program</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pcr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b_found</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_probe_count</name> <operator>+=</operator> <name>PROBE_CHUNK_COUNT</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>i_pos</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_found</name> <operator>&amp;&amp;</operator>

<name>i_probe_count</name> <operator>&lt;</operator> <name>PROBE_MAX</name></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>i_initial_pos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>b_found</name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ProgramSetPCR</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_pcr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_fix_done</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_mindts</name> <init>= <expr><name>VLC_TICK_INVALID</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_opmt</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_opmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><name><name>p_opmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>prepcr</name><operator>.</operator><name>p_head</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_block</name> <operator>&amp;&amp;</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>==</operator> <name>VLC_TICK_INVALID</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name>p_block</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i_mindts</name> <operator>==</operator> <name>VLC_TICK_INVALID</name> <operator>||</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>&lt;</operator> <name>i_mindts</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_mindts</name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_mindts</name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Program %d PCR prequeue fixup %"</literal><name>PRId64</name><literal type="string">"-&gt;%"</literal><name>PRId64</name></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument>, <argument><expr><call><name>TO_SCALE</name><argument_list>(<argument><expr><name>i_mindts</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i_pcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pcr</name> <operator>=</operator> <call><name>TO_SCALE</name><argument_list>(<argument><expr><name>i_mindts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <name>i_pcr</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name> <operator>=</operator> <name>i_pcr</name></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_GROUP_PCR</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument>, <argument><expr><call><name>FROM_SCALE</name><argument_list>(<argument><expr><name>i_pcr</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_access_control</name></name> <operator>==</operator> <name>false</name> <operator>&amp;&amp;</operator>

<call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts_byte</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts_byte</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts_byte</name></name> <operator>=</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <name>i_pcr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts_byte</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>IsVideoEnd</name><parameter_list>( <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name> <operator>||</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>p_next</name><operator>-&gt;</operator><name>p_next</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>p_next</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tail</name><index>[ <expr><literal type="number">188</literal></expr> ]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_tail</name> <init>= <expr><call><name>block_ChainExtract</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>tail</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>tail</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_tail</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator> <name><name>tail</name><index>[ <expr><name>i_tail</name> <operator>-</operator> <literal type="number">4</literal></expr> ]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tail</name><index>[ <expr><name>i_tail</name> <operator>-</operator> <literal type="number">3</literal></expr> ]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>tail</name><index>[ <expr><name>i_tail</name> <operator>-</operator> <literal type="number">2</literal></expr> ]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>tail</name><index>[ <expr><name>i_tail</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>==</operator> <literal type="number">0xb7</literal> <operator>||</operator> <name><name>tail</name><index>[ <expr><name>i_tail</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>==</operator> <literal type="number">0x0a</literal> <operator>)</operator> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PCRCheckDTS</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_pcr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_STREAM</name> <operator>||</operator> <call><name>SCRAMBLED</name><argument_list>(<argument><expr><operator>*</operator><name>p_pid</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name> <init>= <expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>i_data_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_MPGV</name> <operator>&amp;&amp;</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_H264</name> <operator>&amp;&amp;</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>!=</operator> <name>VLC_CODEC_VC1</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>header</name><index>[<expr><literal type="number">34</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_max</name> <init>= <expr><call><name>block_ChainExtract</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>gather</name><operator>.</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">34</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_max</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>header</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_dts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_pts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_id</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ParsePESHeader</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><name>i_max</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_pts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stream_id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_EGENERIC</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_dts</name> <operator>+=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pts</name> <operator>+=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_dts</name> <operator>=</operator> <call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name>i_pcr</name></expr></argument>, <argument><expr><name>i_dts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pts</name> <operator>=</operator> <call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name>i_pcr</name></expr></argument>, <argument><expr><name>i_pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>(</operator> <name>i_dts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_dts</name> <operator>&lt;=</operator> <name>i_pcr</name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name>i_pts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i_pts</name> <operator>&lt;=</operator> <name>i_pcr</name> <operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>IsVideoEnd</name><argument_list>( <argument><expr><name>p_pid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"send queued data for pid %d: TS %"</literal><name>PRId64</name><literal type="string">" &lt;= PCR %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>i_dts</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>i_dts</name></expr> </then><else>: <expr><name>i_pts</name></expr></else></ternary></expr></argument>, <argument><expr><name>i_pcr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_pes_parse_callback</name></type> <name>cb</name> <init>= <expr><block>{ <expr><operator>.</operator><name>p_obj</name> <operator>=</operator> <call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv</name> <operator>=</operator> <name>p_pid</name></expr>,

<expr><operator>.</operator><name>pf_parse</name> <operator>=</operator> <name>PESDataChainHandle</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_pes_Drain</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PCRHandle</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_pcr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_pcr_count</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>TYPE_PAT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_disable</name></name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_program_pcr</name> <init>= <expr><call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name>i_pcr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>==</operator> <literal type="number">0x1FFF</literal></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>PIDReferencedByProgram</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>ProgramSetPCR</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>i_program_pcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>==</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>PCRCheckDTS</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>i_pcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ProgramSetPCR</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>i_program_pcr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>FindPCRCandidate</name><parameter_list>( <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_cand</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_previous</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SEEN</name><argument_list>(<argument><expr><name>p_pid</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>!=</operator> <name>i_previous</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_pcr_count</name></name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cand</name> <operator>||</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_pcr_count</name></name> <operator>&gt;</operator> <name><name>p_cand</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_pcr_count</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_cand</name> <operator>=</operator> <name>p_pid</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cand</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_cand</name> <operator>=</operator> <name>p_pid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_cand</name> <operator>||</operator> <name><name>p_cand</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_cand</name> <operator>=</operator> <name>p_pid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>p_cand</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_cand</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><literal type="number">0x1FFF</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PCRFixHandle</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_check_pcr_offset</name></name> <operator>&amp;&amp;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_pcroffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_disable</name></name> <operator>||</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_fix_done</name></name></expr> )</condition>

<block>{<block_content>

<return>return;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first_dts</name></name> <operator>==</operator> <name>TS_TICK_UNKNOWN</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first_dts</name></name> <operator>=</operator> <call><name>TO_SCALE</name><argument_list>(<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <call><name>FROM_SCALE</name><argument_list>(<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first_dts</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<call><name>GetPID</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>probed</name><operator>.</operator><name>i_pcr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_cand</name> <init>= <expr><call><name>FindPCRCandidate</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>=</operator> <name>i_cand</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>GetPID</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name></expr></argument> )</argument_list></call><operator>-&gt;</operator><name><name>probed</name><operator>.</operator><name>i_pcr_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_disable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"No PCR received for program %d, set up workaround using pid %d"</literal></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument>, <argument><expr><name>i_cand</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>UpdatePESFilters</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>==</operator> <name>PROGRAM_ALL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_fix_done</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type> <name>ProcessTSPacket</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_skip</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_adaptation</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_payload</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_scrambled</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0xc0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_cc</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>b_discontinuity</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><operator>*</operator><name>pi_skip</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Dbg( p_demux, "pid=%d unit_start=%d adaptation=%d payload=%d "

"cc=0x%x", pid-&gt;i_pid, b_unit_start, b_adaptation,

b_payload, i_cc );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <literal type="number">0x1FFF</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>TS_PACKET_SIZE_188</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_scrambled</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>csa_Decrypt</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>csa</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_csa_pkt_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>csa_lock</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_SCRAMBLED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_adaptation</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pi_skip</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal> <operator>&gt;</operator> <literal type="number">188</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_discontinuity</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><name>true</name></expr> </then><else>: <expr><name>false</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_discontinuity</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"discontinuity indicator (pid=%d) "</literal></expr></argument>,

<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>p</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x82</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"VLC_DISCONTINU"</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_SOURCE_RANDOM_ACCESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if( p[5]&amp;0x40 )

msg_Dbg( p_demux, "random access indicator (pid=%d) ", pid-&gt;i_pid );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_payload</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_cc_check</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_diff</name> <init>= <expr><operator>(</operator> <name>i_cc</name> <operator>-</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_diff</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>=</operator> <operator>(</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_dup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>==</operator> <literal type="number">0xff</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"first packet for pid=%d cc=0x%x"</literal></expr></argument>,

<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><name>i_cc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>=</operator> <name>i_cc</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_diff</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_dup</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>prevpktbytes</name></name></expr></argument>, 

<argument><expr><operator>&amp;</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>PREVPKTKEEPBYTES</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_dup</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_diff</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_discontinuity</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"discontinuity received 0x%x instead of 0x%x (pid=%d)"</literal></expr></argument>,

<argument><expr><name>i_cc</name></expr></argument>, <argument><expr><operator>(</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x0f</literal></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>=</operator> <name>i_cc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_dup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>=</operator> <name>i_cc</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pid</name><operator>-&gt;</operator><name>prevpktbytes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>PREVPKTKEEPBYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_discontinuity</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>i_cc</name></name> <operator>=</operator> <name>i_cc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>b_payload</name> <operator>||</operator> <name>b_adaptation</name><operator>)</operator></expr></argument>)</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>p_pkt</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GatherPESData</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_skip</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pes_parse_callback</name></type> <name>cb</name> <init>= <expr><block>{ <expr><operator>.</operator><name>p_obj</name> <operator>=</operator> <call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>priv</name> <operator>=</operator> <name>p_pid</name></expr>,

<expr><operator>.</operator><name>pf_parse</name> <operator>=</operator> <name>PESDataChainHandle</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_unit_start</name> <init>= <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+=</operator> <name>i_skip</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>-=</operator> <name>i_skip</name></expr>;</expr_stmt>

<return>return <expr><call><name>ts_pes_Gather</name><argument_list>( <argument><expr><operator>&amp;</operator><name>cb</name></expr></argument>, <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument>,

<argument><expr><name>p_pkt</name></expr></argument>, <argument><expr><name>b_unit_start</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_valid_scrambling</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>GatherSectionsData</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_pkt</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_skip</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_skip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>BLOCK_FLAG_DISCONTINUITY</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ts_sections_processor_Reset</name><argument_list>( <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_sections_proc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_pkt</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>BLOCK_FLAG_SCRAMBLED</name> <operator>|</operator> <name>BLOCK_FLAG_CORRUPTED</name><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ts_sections_processor_Push</name><argument_list>( <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_sections_proc</name></name></expr></argument>, <argument><expr><name><name>p_pkt</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_pkt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b_ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>TsChangeStandard</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>ts_standards_e</name></type> <name>v</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>!=</operator> <name>TS_STANDARD_AUTO</name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>!=</operator> <name>v</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ProgramIsSelected</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_pgrm</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>==</operator> <name>PROGRAM_ALL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i_pgrm</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>PIDReferencedByProgram</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_pid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_pid</name> <operator>==</operator> <name>i_pid</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>DoCreateES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ts_es_t</name> <modifier>*</modifier></type><name>p_parent_es</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_es</name></expr> ;</condition> <incr><expr><name>p_es</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_parent_es</name></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_es_id_pid</name></name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_extraid</name></name><operator>++</operator> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator> <operator>|</operator> <name><name>p_parent_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>p_parent_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>DoCreateES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>p_extraes</name></name></expr></argument>, <argument><expr><name>p_es</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>AddAndCreateES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_create_delayed</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_create_delayed</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_creation</name></name> <operator>=</operator> <name>CREATE_ES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>pid</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>es_creation</name></name> <operator>==</operator> <name>CREATE_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>DoCreateES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_default_selection</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_default_selection</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_first_program</name> <init>= <expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>i_first_program</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i_first_program</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Default program is %d"</literal></expr></argument>, <argument><expr><name>i_first_program</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_create_delayed</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>DoCreateES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name><index>[<expr><name>j</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
