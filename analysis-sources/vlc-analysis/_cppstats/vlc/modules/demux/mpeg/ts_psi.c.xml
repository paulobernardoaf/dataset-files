<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\ts_psi.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DVBPSI_DVBPSI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dvbpsi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/descriptor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pmt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_psi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_strings.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timestamps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/jpeg2000.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../codec/opus_header.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../packetizer/dts_header.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sections.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_sl.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_scte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_psip.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_si.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_metadata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_descriptions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../access/dtv/en50221_capmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PIDFillFormat</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_stream_type</name></decl></parameter>, <parameter><decl><type><name>ts_transport_type_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PMTCallBack</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_pmt_t</name> <modifier>*</modifier></type><name>p_dvbpsipmt</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>ts_standards_e</name></type> <name>ProbePMTStandard</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_t</name> <modifier>*</modifier></type><name>p_dvbpsipmt</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>PATCheck</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_pat_t</name> <modifier>*</modifier></type><name>p_pat</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_prev_pid</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>dvbpsi_pat_program_t</name> <modifier>*</modifier></type> <name>p_program</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>p_first_program</name></name></expr></init></decl>;</init>

<condition><expr><name>p_program</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>p_program</name> <operator>=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_program</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <name>i_prev_pid</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PAT check failed: duplicate program pid %d"</literal></expr></argument>, <argument><expr><name>i_prev_pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_prev_pid</name> <operator>=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PATCallBack</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_pat_t</name> <modifier>*</modifier></type><name>p_dvbpsipat</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_pat_program_t</name> <modifier>*</modifier></type><name>p_program</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>patpid</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>patpid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>FLAG_SEEN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PATCallBack called"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>TYPE_PAT</name></expr></argument> )</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PATCallBack called on invalid pid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pat</name><operator>-&gt;</operator><name>b_generated</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>i_version</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>i_version</name></name> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>i_ts_id</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>i_ts_id</name></name> <operator>!=</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>i_ts_id</name></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_pat_delete</name><argument_list>( <argument><expr><name>p_dvbpsipat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Replacing generated PAT with one received from stream"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>b_current_next</name></name> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_user_pmt</name></name> <operator>||</operator>

<call><name>PATCheck</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsipat</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_pat_delete</name><argument_list>( <argument><expr><name>p_dvbpsipat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"new PAT ts_id=%d version=%d current_next=%d"</literal></expr></argument>,

<argument><expr><name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>b_current_next</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<macro><name>DECL_ARRAY</name><argument_list>(<argument>ts_pid_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>old_pmt_rm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_pmt_rm</name><operator>.</operator><name>i_alloc</name></name> <operator>=</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_alloc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_pmt_rm</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>old_pmt_rm</name><operator>.</operator><name>p_elems</name></name> <operator>=</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_force_reselect</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>==</operator> <name>PROGRAM_AUTO_DEFAULT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_force_reselect</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_program</name> <operator>=</operator> <name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>p_first_program</name></name></expr>;</init> <condition><expr><name>p_program</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>p_program</name> <operator>=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_force_reselect</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_force_reselect</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>p_program</name> <operator>=</operator> <name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>p_first_program</name></name></expr>;</init> <condition><expr><name>p_program</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>p_program</name> <operator>=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * number=%d pid=%d"</literal></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument>,

<argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pmtpid</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_existing</name> <init>= <expr><operator>(</operator><name><name>pmtpid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PMT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>PIDSetup</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>TYPE_PMT</name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument>, <argument><expr><name>patpid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * number=%d pid=%d (ignored)"</literal></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument>,

<argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_existing</name> <operator>||</operator> <name><name>pmtpid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name> <operator>!=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_existing</name> <operator>&amp;&amp;</operator> <name><name>pmtpid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name> <operator>!=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dvbpsi_pmt_detach</name><argument_list>(<argument><expr><name><name>pmtpid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_pmt_attach</name><argument_list>( <argument><expr><name><name>pmtpid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument>, <argument><expr><name>PMTCallBack</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PATCallback failed attaching PMTCallback to program %d"</literal></expr></argument>,

<argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pmtpid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name> <operator>=</operator> <name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name></name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>ProgramIsSelected</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"temporary receiving program %d"</literal></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_default_selection</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name></name></expr></argument>, <argument><expr><name><name>p_program</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetPIDFilter</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_creation</name></name> <operator>==</operator> <name>DELAY_ES</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_creation</name></name> <operator>=</operator> <name>CREATE_ES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_pat</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>i_version</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pat</name><operator>-&gt;</operator><name>i_ts_id</name></name> <operator>=</operator> <name><name>p_dvbpsipat</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pat</name><operator>-&gt;</operator><name>b_generated</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>old_pmt_rm</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>old_pmt_rm</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>(<argument><expr><name>old_pmt_rm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_force_reselect</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_GROUP</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_pat_delete</name><argument_list>( <argument><expr><name>p_dvbpsipat</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMT_DESC_PREFIX</name></cpp:macro> <cpp:value>" * PMT descriptor: "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PMT_DESC_INDENT</name></cpp:macro> <cpp:value>" : "</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParsePMTRegistrations</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_firstdr</name></decl></parameter>,

<parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>ts_pmt_registration_type_t</name> <modifier>*</modifier></type><name>p_registration_type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pmt_registration_type_t</name></type> <name>registration_type</name> <init>= <expr><operator>*</operator><name>p_registration_type</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_arib_score_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name>p_firstdr</name></expr></init></decl>;</init> <condition><expr><name>p_dr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>PMT_DESC_PREFIX</name> <literal type="string">"%s (0x%x)"</literal></expr></argument>,

<argument><expr><call><name>ISO13818_1_Get_Descriptor_Description</name><argument_list>(<argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>!=</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>PMT_DESC_INDENT</name> <literal type="string">"invalid registration descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>rgs</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_pmt_registration_type_t</name></type> <name>reg</name></decl>;</decl_stmt>

}</block> <decl><name><name>regs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><block>{ <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'M'</literal></expr>, <expr><literal type="char">'V'</literal></expr> }</block></expr>, <expr><name>TS_PMT_REGISTRATION_BLURAY</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="char">'H'</literal></expr>, <expr><literal type="char">'D'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'R'</literal></expr> }</block></expr>, <expr><name>TS_PMT_REGISTRATION_BLURAY</name></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="char">'9'</literal></expr>, <expr><literal type="char">'4'</literal></expr> }</block></expr>, <expr><name>TS_PMT_REGISTRATION_ATSC</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>regs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name><name>regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rgs</name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>registration_type</name> <operator>=</operator> <name><name>regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reg</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>PMT_DESC_INDENT</name> <literal type="string">"%4.4s registration"</literal></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="number">0x09</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_ca_dr_t</name> <modifier>*</modifier></type><name>p_cadr</name> <init>= <expr><call><name>dvbpsi_DecodeCADr</name><argument_list>( <argument><expr><operator>(</operator><name>dvbpsi_descriptor_t</name> <operator>*</operator><operator>)</operator> <name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>PMT_DESC_INDENT</name> <literal type="string">"CA System ID 0x%x"</literal></expr></argument>, <argument><expr><name><name>p_cadr</name><operator>-&gt;</operator><name>i_ca_system_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_arib_score_flags</name> <operator>|=</operator> <operator>(</operator><name><name>p_cadr</name><operator>-&gt;</operator><name>i_ca_system_id</name></name> <operator>==</operator> <literal type="number">0x05</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="number">0x1d</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>iod</name></name> <operator>=</operator> <call><name>IODNew</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xC1</literal></expr>:</case>

<expr_stmt><expr><name>i_arib_score_flags</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xF6</literal></expr>:</case>

<expr_stmt><expr><name>i_arib_score_flags</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_AUTO</name> <operator>&amp;&amp;</operator>

<name>registration_type</name> <operator>==</operator> <name>TS_PMT_REGISTRATION_NONE</name> <operator>&amp;&amp;</operator>

<name>i_arib_score_flags</name> <operator>==</operator> <literal type="number">0x07</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>registration_type</name> <operator>=</operator> <name>TS_PMT_REGISTRATION_ARIB</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_registration_type</name> <operator>=</operator> <name>registration_type</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParsePMTPrivateRegistrations</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_firstdr</name></decl></parameter>,

<parameter><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>ts_standards_e</name></type> <name>i_standard</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_pmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name>p_firstdr</name></expr></init></decl>;</init> <condition><expr><name>p_dr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>&lt;</operator> <literal type="number">0x40</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_standard</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>TS_STANDARD_ARIB</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_desc</name> <init>= <expr><call><name>ARIB_B10_Get_PMT_Descriptor_Description</name><argument_list>( <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_desc</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>PMT_DESC_PREFIX</name> <literal type="string">"%s (0x%x)"</literal></expr></argument>, <argument><expr><name>psz_desc</name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>PMT_DESC_PREFIX</name> <literal type="string">"Unknown Private (0x%x)"</literal></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>TS_STANDARD_DVB</name></expr>:</case>

<case>case <expr><name>TS_STANDARD_AUTO</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x88</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>PMT_DESC_PREFIX</name> <literal type="string">"EACEM Simulcast HD"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>PMT_DESC_PREFIX</name> <literal type="string">"Unknown Private (0x%x)"</literal></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>PMTEsFindDescriptor</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_tag</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr></init></decl>;</decl_stmt><empty_stmt>;</empty_stmt>

<while>while<condition>( <expr><name>p_dr</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>!=</operator> <name>i_tag</name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>p_dr</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>PMTEsHasRegistration</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tag</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dr</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid Registration Descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_tag</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>psz_tag</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>PMTEsHasComponentTagBetween</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_low</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_high</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_es</name></expr></argument>, <argument><expr><literal type="number">0x52</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dr</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>dvbpsi_stream_identifier_dr_t</name> <modifier>*</modifier></type><name>p_si</name> <init>= <expr><call><name>dvbpsi_DecodeStreamIdentifierDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_si</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>p_si</name><operator>-&gt;</operator><name>i_component_tag</name></name> <operator>&gt;=</operator> <name>i_low</name> <operator>&amp;&amp;</operator> <name><name>p_si</name><operator>-&gt;</operator><name>i_component_tag</name></name> <operator>&lt;=</operator> <name>i_high</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>ts_standards_e</name></type> <name>ProbePMTStandard</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_t</name> <modifier>*</modifier></type><name>p_dvbpsipmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_dvbpsies</name> <operator>=</operator> <name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>p_first_es</name></name></expr>;</init> <condition><expr><name>p_dvbpsies</name></expr>;</condition> <incr><expr><name>p_dvbpsies</name> <operator>=</operator> <name><name>p_dvbpsies</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0x06</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0xFD</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_data_component_id</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_data_component_id</name> <operator>==</operator> <literal type="number">0x0008</literal> <operator>&amp;&amp;</operator>

<call><name>PMTEsHasComponentTagBetween</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x37</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name>i_data_component_id</name> <operator>==</operator> <literal type="number">0x0012</literal> <operator>&amp;&amp;</operator>

<call><name>PMTEsHasComponentTagBetween</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>TS_STANDARD_ARIB</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>TS_STANDARD_AUTO</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupAudioExtendedDescriptors</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_AUTO</name> <operator>||</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_DVB</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x7F</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0x06</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>editorial_classification_coding</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>DESC_MAIN_AUDIO</name></expr>,

<expr><name>DESC_AUDIO_DESC_VISUALLY_IMPAIRED</name></expr>,

<expr><name>DESC_CLEAN_AUDIO_HEARING_IMPAIRED</name></expr>,

<expr><name>DESC_SPOKEN_SUBTITLES_VISUAL_IMP</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_audio_type</name> <init>= <expr><operator>(</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_audio_type</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>editorial_classification_coding</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>editorial_classification_coding</name><index>[<expr><name>i_audio_type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_audio_type</name> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_DEFAULTABLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;=</operator> <literal type="number">5</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" found language: %s"</literal></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GetIso639AudioTypeDesc</name><parameter_list>( <parameter><decl><type><name>uint8_t</name></type> <name>type</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>audio_type</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>DESC_CLEAN_EFFECTS</name></expr>,

<expr><name>DESC_CLEAN_AUDIO_HEARING_IMPAIRED</name></expr>,

<expr><name>DESC_VISUAL_IMPAIRED_COMMENTS</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>type</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>type</name> <operator>&gt;=</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>audio_type</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>strdup</name><argument_list>( <argument><expr><name><name>audio_type</name><index>[ <expr><operator>--</operator><name>type</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupISO639Descriptor</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_iso639_dr_t</name> <modifier>*</modifier></type><name>p_decoded</name> <init>= <expr><call><name>dvbpsi_DecodeISO639Dr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_decoded</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" Failed to decode a ISO 639 descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument>, <argument><expr><name><name>p_decoded</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>iso_639_code</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" found language: %s"</literal></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name> <init>= <expr><name><name>p_decoded</name><operator>-&gt;</operator><name>code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_audio_type</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <call><name>GetIso639AudioTypeDesc</name><argument_list>( <argument><expr><name>type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0x00</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_SELECTABLE_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra_languages</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra_languages</name></name> <operator>=</operator> <name><name>p_decoded</name><operator>-&gt;</operator><name>i_code_count</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra_languages</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra_languages</name></name> <operator>=</operator>

<call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra_languages</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator>

<name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra_languages</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra_languages</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra_languages</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>extra_languages_t</name> <modifier>*</modifier></type><name>p_lang</name> <init>= <expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra_languages</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>p_lang</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_lang</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument>, <argument><expr><name><name>p_decoded</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>iso_639_code</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_lang</name><operator>-&gt;</operator><name>psz_language</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_lang</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>GetIso639AudioTypeDesc</name><argument_list>( <argument><expr><name><name>p_decoded</name><operator>-&gt;</operator><name>code</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_audio_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupStandardESDescriptors</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr></init></decl>;</init>

<condition><expr><name>p_dr</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetupISO639Descriptor</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_es</name></expr></argument>, <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0E</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_max_bitrate_dr_t</name> <modifier>*</modifier></type><name>p_btdr</name> <init>= <expr><call><name>dvbpsi_DecodeMaxBitrateDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_btdr</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <name><name>p_btdr</name><operator>-&gt;</operator><name>i_max_bitrate</name></name> <operator>*</operator> <literal type="number">50</literal> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupISO14496Descriptors</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_dr</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_length</name> <init>= <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x1f</literal></expr>:</case> 

<while>while<condition>( <expr><name>i_length</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_length</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - found FMC_descriptor mapping es_id=%"</literal><name>PRIu16</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<break>break;</break>

<case>case <expr><literal type="number">0x1e</literal></expr>:</case> 

<if_stmt><if>if<condition>( <expr><name>i_length</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>|</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - found SL_descriptor mapping es_id=%"</literal><name>PRIu16</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0x12</literal></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_proc</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_proc</name></name> <operator>=</operator> <call><name>SL_stream_processor_New</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0x13</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>ts_sections_processor_Add</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_sections_proc</name></name></expr></argument>, <argument><expr><literal type="number">0x05</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,

<argument><expr><name>SLPackets_Section_Handler</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>b_always_receive</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_mpeg4_descriptor_t</name> <modifier>*</modifier></type><name>p_mpeg4desc</name> <init>= <expr><call><name>GetMPEG4DescByEsId</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_mpeg4desc</name> <operator>&amp;&amp;</operator> <name><name>p_mpeg4desc</name><operator>-&gt;</operator><name>b_ok</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SetupISO14496LogicalStream</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_mpeg4desc</name><operator>-&gt;</operator><name>dec_descr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - IOD not yet available for es_id=%"</literal><name>PRIu16</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_sl_es_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case> 

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - SL/FMC descriptor not found/matched"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - SL/FMC descriptor not found/matched"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupMetadataDescriptors</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x26</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;=</operator> <literal type="number">13</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><literal type="string">"\xFF\xFFID3 \xFFID3 "</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'I'</literal></expr></argument>, <argument><expr><literal type="char">'D'</literal></expr></argument>, <argument><expr><literal type="char">'3'</literal></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>i_service_id</name></name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - found Metadata_descriptor type ID3 with service_id=0x%"</literal><name>PRIx8</name></expr></argument>,

<argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>p_proc</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_proc</name></name> <operator>=</operator> <call><name>Metadata_stream_processor_New</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupAVCDescriptors</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x28</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;=</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_level</name></name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - found AVC_video_descriptor profile=0x%"</literal><name>PRIx8</name><literal type="string">" level=0x%"</literal><name>PRIx8</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupJ2KDescriptors</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x32</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;=</operator> <literal type="number">24</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_JPEG2000</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_level</name></name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <call><name>GetDWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>j2k_fill_color_profile</name><argument_list>( <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>primaries</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>transfer</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>space</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>b_interlaced</name></name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">24</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - found J2K_video_descriptor profile=0x%"</literal><name>PRIx8</name><literal type="string">" level=0x%"</literal><name>PRIx8</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_profile</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_level</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SetupTTMLExtendedDescriptor</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz</name></decl>;</decl_stmt>

}</block> <decl><name><name>subtitle_purpose</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><name>DESC_SUBS_SAME_LANG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><name>DESC_SUBS_FOREIGN_LANG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><name>DESC_SUBS_ALL_LANG</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><name>DESC_SUBS_HEARING_IMPAIRED</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x11</literal></expr>, <expr><name>DESC_SUBS_HEARING_IMPAIRED</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x12</literal></expr>, <expr><name>DESC_SUBS_HEARING_IMPAIRED</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><name>DESC_SUBS_AUDIO_DESCRIPTION_TRANS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x31</literal></expr>, <expr><name>DESC_SUBS_COMMENTARY</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - found TTML_descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" language: %s"</literal></expr></argument>, <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name> <init>= <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_profiles_count</name> <init>= <expr><operator>(</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;=</operator> <name>i_profiles_count</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_profiles_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_profiles_count</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;=</operator> <literal type="number">1U</literal> <operator>||</operator> <name>i_data</name> <operator>&lt;=</operator> <literal type="number">1U</literal> <operator>+</operator> <name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">1U</literal> <operator>||</operator> <name>i_data</name> <operator>&lt;</operator> <literal type="number">1U</literal> <operator>+</operator> <name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>subtitle_purpose</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>subtitle_purpose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>==</operator> <operator>(</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>subtitle_purpose</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_magazine</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_page</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>p_iso639</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>ts_teletext_page_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_teletext_type</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">""</literal></expr>,

<expr><name>DESC_TELETEXT</name></expr>,

<expr><name>DESC_TELETEXT_SUBTITLES</name></expr>,

<expr><name>DESC_TELETEXT_ADDTNL_INFO</name></expr>,

<expr><name>DESC_TELETEXT_SCHEDULE</name></expr>,

<expr><name>DESC_TELETEXT_SUBS_HEARING_IMPAIRED</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTSetupEsTeletext</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_teletext_page_t</name></type> <name><name>p_page</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i_tag_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_tag_idx</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i_tag_idx</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_dr</name> <operator>=</operator> <call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i_tag_idx</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0x46</literal></expr> </then><else>: <expr><literal type="number">0x56</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dr</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>dvbpsi_teletext_dr_t</name> <modifier>*</modifier></type><name>p_sub</name> <init>= <expr><call><name>dvbpsi_DecodeTeletextDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sub</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sub</name><operator>-&gt;</operator><name>i_pages_number</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_teletextpage_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>&amp;</operator><name><name>p_sub</name><operator>-&gt;</operator><name>p_pages</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_teletext_type</name></name> <operator>&gt;=</operator> <literal type="number">0x06</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_page</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>p_page</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_page</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_teletext_page_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><operator>&amp;</operator><name><name>p_page</name><index>[<expr><name>i_page</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_teletext_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_magazine</name></name> <operator>=</operator> <ternary><condition><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_teletext_magazine_number</name></name></expr>

?</condition><then> <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_teletext_magazine_number</name></name></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_page</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_teletext_page_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>p_iso639</name></name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_iso6392_language_code</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>p_dr</name> <operator>=</operator> <call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dr</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_subtitling_dr_t</name> <modifier>*</modifier></type><name>p_sub</name> <init>= <expr><call><name>dvbpsi_DecodeSubtitlingDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p_sub</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_sub</name><operator>-&gt;</operator><name>i_subtitles_number</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_subtitle_t</name> <modifier>*</modifier></type><name>p_src</name> <init>= <expr><operator>&amp;</operator><name><name>p_sub</name><operator>-&gt;</operator><name>p_subtitle</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_subtitling_type</name></name> <operator>&lt;</operator> <literal type="number">0x01</literal> <operator>||</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_subtitling_type</name></name> <operator>&gt;</operator> <literal type="number">0x03</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_page</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>p_page</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>p_page</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_teletext_page_t</name> <modifier>*</modifier></type><name>p_dst</name> <init>= <expr><operator>&amp;</operator><name><name>p_page</name><index>[<expr><name>i_page</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_src</name><operator>-&gt;</operator><name>i_subtitling_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_magazine</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_composition_page_id</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>

?</condition><then> <expr><operator>(</operator><name><name>p_src</name><operator>-&gt;</operator><name>i_composition_page_id</name></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_dst</name><operator>-&gt;</operator><name>i_page</name></name> <operator>=</operator> <name><name>p_src</name><operator>-&gt;</operator><name>i_composition_page_id</name></name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_dst</name><operator>-&gt;</operator><name>p_iso639</name></name></expr></argument>, <argument><expr><name><name>p_src</name><operator>-&gt;</operator><name>i_iso6392_language_code</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>(<argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_TELETEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_split_es</name></name> <operator>||</operator> <name>i_page</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_magazine</name></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_page</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>ppsz_teletext_type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dr</name> <operator>=</operator> <call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dr</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_dr</name> <operator>=</operator> <call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_split_es</name></name> <operator>&amp;&amp;</operator> <name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_page_es</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></init></decl>;</decl_stmt>

<enum>enum <name>txt_pass_s</name>

<block>{

<decl><name>TXT_SUBTITLES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TXT_INDEX_PAGE</name></decl>,

<decl><name>TXT_OTHER</name></decl>,

}</block>;</enum>

<for>for<control>( <init><decl><type><name><name>enum</name> <name>txt_pass_s</name></name></type> <name>pass</name> <init>= <expr><name>TXT_SUBTITLES</name></expr></init></decl>;</init> <condition><expr><name>pass</name> <operator>&lt;=</operator> <name>TXT_OTHER</name></expr>;</condition> <incr><expr><name>pass</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_page</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_teletext_page_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_page</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>i_type</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>pass</name> <operator>!=</operator> <name>TXT_INDEX_PAGE</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case>

<case>case <expr><literal type="number">0x05</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><name>pass</name> <operator>!=</operator> <name>TXT_SUBTITLES</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><name>pass</name> <operator>!=</operator> <name>TXT_OTHER</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_page_es</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_page_es</name> <operator>=</operator> <call><name>ts_es_New</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_page_es</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_stream_Add_es</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_page_es</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pass</name> <operator>==</operator> <name>TXT_SUBTITLES</name><operator>)</operator></expr> ?</condition><then>

<expr><name>ES_PRIORITY_SELECTABLE_MIN</name></expr> </then><else>: <expr><name>ES_PRIORITY_NOT_DEFAULTABLE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><name><name>p</name><operator>-&gt;</operator><name>p_iso639</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><call><name>vlc_gettext</name><argument_list>(<argument><expr><name><name>ppsz_teletext_type</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>i_type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_magazine</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>i_magazine</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>teletext</name><operator>.</operator><name>i_page</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>i_page</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">" * ttxt type=%s lan=%s page=%d%02x"</literal></expr></argument>,

<argument><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name></expr></argument>,

<argument><expr><name><name>p_page_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument>,

<argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_magazine</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>i_page</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_page_es</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTSetupEsDvbSubtitle</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DVBS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_page</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_subtitling_dr_t</name> <modifier>*</modifier></type><name>p_sub</name> <init>= <expr><call><name>dvbpsi_DecodeSubtitlingDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p_sub</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_sub</name><operator>-&gt;</operator><name>i_subtitles_number</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_type</name> <init>= <expr><name><name>p_sub</name><operator>-&gt;</operator><name>p_subtitle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitling_type</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_type</name> <operator>&gt;=</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> <name>i_type</name> <operator>&lt;=</operator> <literal type="number">0x14</literal> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <name>i_type</name> <operator>&gt;=</operator> <literal type="number">0x20</literal> <operator>&amp;&amp;</operator> <name>i_type</name> <operator>&lt;=</operator> <literal type="number">0x24</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_page</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_split_es</name></name> <operator>||</operator> <name>i_page</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>subs</name><operator>.</operator><name>dvb</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DVB subtitles"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_split_es</name></name> <operator>&amp;&amp;</operator> <name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sub</name><operator>-&gt;</operator><name>i_subtitles_number</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_subs_es</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_subs_es</name> <operator>=</operator> <name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_subs_es</name> <operator>=</operator> <call><name>ts_es_New</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subs_es</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Copy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_subs_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_subs_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_subs_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subs_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subs_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_stream_Add_es</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_subs_es</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_subtitle_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>p_sub</name><operator>-&gt;</operator><name>p_subtitle</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_subs_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>i_iso6392_language_code</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p</name><operator>-&gt;</operator><name>i_subtitling_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<case>case <expr><literal type="number">0x12</literal></expr>:</case> 

<case>case <expr><literal type="number">0x13</literal></expr>:</case> 

<case>case <expr><literal type="number">0x14</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_subs_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DVB subtitles"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case> 

<case>case <expr><literal type="number">0x21</literal></expr>:</case> 

<case>case <expr><literal type="number">0x22</literal></expr>:</case> 

<case>case <expr><literal type="number">0x23</literal></expr>:</case> 

<case>case <expr><literal type="number">0x24</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_subs_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"DVB subtitles: hearing impaired"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_subs_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>dvb</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>i_composition_page_id</name></name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>)</operator> <operator>|</operator>

<operator>(</operator> <name><name>p</name><operator>-&gt;</operator><name>i_ancillary_page_id</name></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vlc_ceil_log2</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>val</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">31</literal> <operator>-</operator> <call><name>clz</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>)</operator> <operator>!=</operator> <name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>n</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>OpusSetup</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>OpusHeader</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>map</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>stream_map</name></name></expr></argument>, <argument><expr><name>map</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>mapping</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>csc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stream_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ccc</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>ccc</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <name>ccc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <name>channels</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>p_csc</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>csc</name> <operator>=</operator> <name><name>p_csc</name><index>[<expr><name>channels</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_count</name> <operator>=</operator> <name>channels</name> <operator>-</operator> <name>csc</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>maps</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">4</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">7</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>.</operator><name>stream_map</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>maps</name><index>[<expr><name>channels</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>channels</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ccc</name> <operator>==</operator> <literal type="number">0x81</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>explicit_config_too_short</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>csc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mapping</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><call><name>vlc_ceil_log2</name><argument_list>(<argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>i_left</name></name> <operator>&lt;</operator> <name>bits</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>explicit_config_too_short</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>stream_count</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>vlc_ceil_log2</name><argument_list>(<argument><expr><name>stream_count</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>i_left</name></name> <operator>&lt;</operator> <name>bits</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>explicit_config_too_short</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>csc</name> <operator>=</operator> <call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channel_bits</name> <init>= <expr><call><name>vlc_ceil_log2</name><argument_list>(<argument><expr><name>stream_count</name> <operator>+</operator> <name>csc</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>.</operator><name>i_left</name></name> <operator>&lt;</operator> <name>channels</name> <operator>*</operator> <name>channel_bits</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>explicit_config_too_short</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>silence</name> <init>= <expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>stream_count</name> <operator>+</operator> <name>csc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>m</name> <init>= <expr><call><name>bs_read</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>channel_bits</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <name>silence</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>stream_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ccc</name> <operator>&gt;=</operator> <literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <name>ccc</name> <operator>&lt;=</operator> <literal type="number">0x88</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <name>ccc</name> <operator>-</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>mapping</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>channels</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>csc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>stream_count</name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Opus channel configuration 0x%.2x is reserved"</literal></expr></argument>, <argument><expr><name>ccc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Opus channel configuration 0x%.2x not supported yet"</literal></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>opus_prepare_header</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>preskip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>input_sample_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>nb_coupled</name></name> <operator>=</operator> <name>csc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>nb_streams</name></name> <operator>=</operator> <name>channels</name> <operator>-</operator> <name>csc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>channel_mapping</name></name> <operator>=</operator> <name>mapping</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>.</operator><name>channels</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extra</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>opus_write_header</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_extra</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>p_extra</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>(<argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_OPUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <name>p_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name>i_extra</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>h</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">48000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return;</return>

<label><name>explicit_config_too_short</name>:</label>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Opus descriptor too short"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTSetupEs0x02</name><parameter_list>( <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x02</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dr</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_vstream_dr_t</name> <modifier>*</modifier></type><name>p_vdr</name> <init>= <expr><call><name>dvbpsi_DecodeVStreamDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_vdr</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_vdr</name><operator>-&gt;</operator><name>i_frame_rate_code</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>p_vdr</name><operator>-&gt;</operator><name>i_frame_rate_code</name></name> <operator>&lt;</operator> <literal type="number">9</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>p_vdr</name><operator>-&gt;</operator><name>b_multiple_frame_rate</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>code_to_frame_rate</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>code_to_frame_rate</name><index>[<expr><name><name>p_vdr</name><operator>-&gt;</operator><name>i_frame_rate_code</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>code_to_frame_rate</name><index>[<expr><name><name>p_vdr</name><operator>-&gt;</operator><name>i_frame_rate_code</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_vdr</name><operator>-&gt;</operator><name>b_mpeg2</name></name> <operator>&amp;&amp;</operator> <name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_MPGV</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name>VLC_CODEC_MP1V</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_dr</name> <operator>=</operator> <call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x34</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>video_multiview_mode_t</name></type> <name>mode</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x03</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_SBS</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x04</literal></expr>:</case>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_STEREO_TB</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name>MULTIVIEW_2D</name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>multiview_mode</name></name> <operator>=</operator> <name>mode</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTSetupEs0x05PrivateData</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_DVB</name> <operator>||</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_AUTO</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_ait_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x6F</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_ait_dr</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_ait_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint8_t</name></type> <name>i_data</name> <init>= <expr><name><name>p_ait_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></init></decl>;</init> <condition><expr><name>i_data</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i_data</name> <operator>-=</operator> <literal type="number">3</literal></expr><operator>,</operator> <expr><name>p_data</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_app_type</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - Application type 0x%"</literal><name>PRIx16</name><literal type="string">" version %"</literal><name>PRIu8</name></expr></argument>,

<argument><expr><name>i_app_type</name></expr></argument>, <argument><expr><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTSetupEs0x06</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_subs_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x59</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"EAC3"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x7a</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_EAC3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"AC-3"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x6a</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x81</literal></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_A52</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"DTS1"</literal></expr></argument> )</argument_list></call> <operator>||</operator> 

<call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"DTS2"</literal></expr></argument> )</argument_list></call> <operator>||</operator> 

<call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"DTS3"</literal></expr></argument> )</argument_list></call> <operator>||</operator> 

<call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x73</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"BSSD"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>p_subs_dr</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_302M</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"HEVC"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_HEVC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator><name>desc</name> <operator>=</operator> <call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x7f</literal></expr></argument> )</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>desc</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>desc</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x80</literal></expr>:</case> 

<if_stmt><if>if<condition>( <expr><call><name>PMTEsHasRegistration</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"Opus"</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>OpusSetup</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>desc</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0E</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_profile</name></name> <operator>=</operator> <name>PROFILE_DTS_HD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0F</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x15</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>, <argument><expr><literal type="char">'C'</literal></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="char">'4'</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x20</literal></expr>:</case>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_TTML_TS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetupTTMLExtendedDescriptor</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>p_fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_ARIB</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0xFD</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name>i_data_component_id</name> <init>= <expr><call><name>GetWBE</name><argument_list>(<argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data_component_id</name> <operator>==</operator> <literal type="number">0x0008</literal> <operator>&amp;&amp;</operator>

<call><name>PMTEsHasComponentTagBetween</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x30</literal></expr></argument>, <argument><expr><literal type="number">0x37</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_ARIB_A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strndup</name> <argument_list>( <argument><expr><literal type="string">"jpn"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ARIB subtitles"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_data_component_id</name> <operator>==</operator> <literal type="number">0x0012</literal> <operator>&amp;&amp;</operator>

<call><name>PMTEsHasComponentTagBetween</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x87</literal></expr></argument>, <argument><expr><literal type="number">0x88</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_ARIB_C</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>=</operator> <call><name>strndup</name> <argument_list>( <argument><expr><literal type="string">"jpn"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><call><name>_</name><argument_list>(<argument><expr><literal type="string">"ARIB subtitles"</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_subtitling_dr_t</name> <modifier>*</modifier></type><name>p_sub</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_subs_dr</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>p_sub</name> <operator>=</operator> <call><name>dvbpsi_DecodeSubtitlingDr</name><argument_list>( <argument><expr><name>p_subs_dr</name></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sub</name><operator>-&gt;</operator><name>i_subtitles_number</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>UNKNOWN_ES</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_sub</name><operator>-&gt;</operator><name>p_subtitle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitling_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<case>case <expr><literal type="number">0x02</literal></expr>:</case> 

<case>case <expr><literal type="number">0x03</literal></expr>:</case> 

<expr_stmt><expr><call><name>PMTSetupEsTeletext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<case>case <expr><literal type="number">0x12</literal></expr>:</case> 

<case>case <expr><literal type="number">0x13</literal></expr>:</case> 

<case>case <expr><literal type="number">0x14</literal></expr>:</case> 

<case>case <expr><literal type="number">0x20</literal></expr>:</case> 

<case>case <expr><literal type="number">0x21</literal></expr>:</case> 

<case>case <expr><literal type="number">0x22</literal></expr>:</case> 

<case>case <expr><literal type="number">0x23</literal></expr>:</case> 

<case>case <expr><literal type="number">0x24</literal></expr>:</case> 

<expr_stmt><expr><call><name>PMTSetupEsDvbSubtitle</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized DVB subtitle type (0x%x)"</literal></expr></argument>,

<argument><expr><name><name>p_sub</name><operator>-&gt;</operator><name>p_subtitle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_subtitling_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>UNKNOWN_ES</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x45</literal></expr></argument> )</argument_list></call> <operator>||</operator> 

<call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x46</literal></expr></argument> )</argument_list></call> <operator>||</operator> 

<call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x56</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>PMTSetupEsTeletext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x52</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x52</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_stream_identifier_dr_t</name> <modifier>*</modifier></type><name>p_si</name> <init>= <expr><call><name>dvbpsi_DecodeStreamIdentifierDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * Stream Component Identifier: %d"</literal></expr></argument>, <argument><expr><name><name>p_si</name><operator>-&gt;</operator><name>i_component_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTSetupEs0xEA</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"VC-1"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Registration descriptor not found or invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_VC1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTSetupEs0xD1</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"drac"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Registration descriptor not found or invalid"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DIRAC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTSetupEs0xA0</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0xa0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_dr</name> <operator>||</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">"private MSCODEC (vlc) without bih private descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>,

<argument><expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <call><name>GetWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>,

<argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>-</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>b_packetized</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTSetupEs0x83</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_pid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_program_number</name></name> <operator>==</operator> <literal type="number">0x1</literal> <operator>&amp;&amp;</operator>

<name><name>p_pmt</name><operator>-&gt;</operator><name>i_pcr_pid</name></name> <operator>==</operator> <literal type="number">0x1000</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>i_pid</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0x11</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_WIDI_LPCM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DVD_LPCM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>PMTSetupEsHDMV</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x80</literal></expr>:</case>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_BD_LPCM</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x81</literal></expr>:</case>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_A52</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x85</literal></expr>:</case> 

<case>case <expr><literal type="number">0x86</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_profile</name></name> <operator>=</operator> <name>PROFILE_DTS_HD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x82</literal></expr>:</case>

<case>case <expr><literal type="number">0xA2</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x83</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_TRUEHD</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x84</literal></expr>:</case> 

<case>case <expr><literal type="number">0xA1</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_EAC3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x90</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_BD_PG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x91</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><literal type="number">0x92</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_BD_TEXT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xEA</literal></expr>:</case>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_VC1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Info</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"HDMV registration not implemented for pid 0x%x type 0x%x"</literal></expr></argument>,

<argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>PMTSetupEsRegistration</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_tag</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>es_format_category_e</name></name></type> <name>i_cat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_codec</name></decl>;</decl_stmt>

}</block> <decl><name><name>p_regs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"AC-3"</literal></expr>, <expr><name>AUDIO_ES</name></expr>, <expr><name>VLC_CODEC_A52</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"EAC3"</literal></expr>, <expr><name>AUDIO_ES</name></expr>, <expr><name>VLC_CODEC_EAC3</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DTS1"</literal></expr>, <expr><name>AUDIO_ES</name></expr>, <expr><name>VLC_CODEC_DTS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DTS2"</literal></expr>, <expr><name>AUDIO_ES</name></expr>, <expr><name>VLC_CODEC_DTS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DTS3"</literal></expr>, <expr><name>AUDIO_ES</name></expr>, <expr><name>VLC_CODEC_DTS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"BSSD"</literal></expr>, <expr><name>AUDIO_ES</name></expr>, <expr><name>VLC_CODEC_302M</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"VC-1"</literal></expr>, <expr><name>VIDEO_ES</name></expr>, <expr><name>VLC_CODEC_VC1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"drac"</literal></expr>, <expr><name>VIDEO_ES</name></expr>, <expr><name>VLC_CODEC_DIRAC</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><name>UNKNOWN_ES</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name> <operator>!=</operator> <name>UNKNOWN_ES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><name><name>p_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_tag</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>p_fmt</name></expr></argument>, <argument><expr><name><name>p_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_cat</name></expr></argument>, <argument><expr><name><name>p_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_regs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_codec</name> <operator>==</operator> <name>VLC_CODEC_A52</name> <operator>&amp;&amp;</operator> <name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <literal type="number">0x87</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_codec</name></name> <operator>=</operator> <name>VLC_CODEC_EAC3</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PIDFillFormat</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_stream_type</name></decl></parameter>, <parameter><decl><type><name>ts_transport_type_t</name> <modifier>*</modifier></type><name>p_datatype</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_stream_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name>VLC_CODEC_MP1V</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> 

<case>case <expr><literal type="number">0x80</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGV</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x03</literal></expr>:</case> 

<case>case <expr><literal type="number">0x04</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x10</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4V</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x11</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'L'</literal></expr></argument>,<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'M'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1B</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_H264</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1C</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MP4A</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x24</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_HEVC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x42</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_CAVS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x81</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_A52</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x82</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_SCTE_27</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_datatype</name> <operator>=</operator> <name>TS_TRANSPORT_SECTIONS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_sections_processor_Add</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_sections_proc</name></name></expr></argument>, <argument><expr><literal type="number">0xC6</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>,

<argument><expr><name>SCTE27_Section_Callback</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x84</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_SDDS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x85</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x87</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_EAC3</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x8a</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_DTS</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x91</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'5'</literal></expr></argument>, <argument><expr><literal type="char">'2'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x92</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'p'</literal></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x94</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'d'</literal></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa0</literal></expr>:</case> 

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x06</literal></expr>:</case> 

<case>case <expr><literal type="number">0x12</literal></expr>:</case> 

<case>case <expr><literal type="number">0xEA</literal></expr>:</case> 

<default>default:</default>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>UNKNOWN_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>FillPESFromDvbpsiES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_t</name> <modifier>*</modifier></type><name>p_dvbpsipmt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl></parameter>,

<parameter><decl><type><name>ts_pmt_registration_type_t</name></type> <name>registration_type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter>,

<parameter><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_transport_type_t</name></type> <name>type_change</name> <init>= <expr><name>TS_TRANSPORT_PES</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PIDFillFormat</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type_change</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>i_stream_type</name></name> <operator>=</operator> <name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_registration_applied</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>registration_type</name> <operator>==</operator> <name>TS_PMT_REGISTRATION_BLURAY</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator> <name>b_registration_applied</name> <operator>=</operator> <call><name>PMTSetupEsHDMV</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" + HDMV registration applied to pid %d type 0x%x"</literal></expr></argument>,

<argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator> <name>b_registration_applied</name> <operator>=</operator> <call><name>PMTSetupEsRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" + registration applied to pid %d type 0x%x"</literal></expr></argument>,

<argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>b_registration_applied</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>type_change</name></expr>;</expr_stmt> 

<switch>switch<condition>( <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x02</literal></expr>:</case>

<expr_stmt><expr><call><name>PMTSetupEs0x02</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>TS_TRANSPORT_SECTIONS</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PMTSetupEs0x05PrivateData</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x06</literal></expr>:</case>

<expr_stmt><expr><call><name>PMTSetupEs0x06</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x0a</literal></expr>:</case> 

<case>case <expr><literal type="number">0x0b</literal></expr>:</case>

<case>case <expr><literal type="number">0x0c</literal></expr>:</case>

<case>case <expr><literal type="number">0x0d</literal></expr>:</case>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>TS_TRANSPORT_IGNORE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x13</literal></expr>:</case> 

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>transport</name></name> <operator>=</operator> <name>TS_TRANSPORT_SECTIONS</name></expr>;</expr_stmt>

<case>case <expr><literal type="number">0x0f</literal></expr>:</case>

<case>case <expr><literal type="number">0x10</literal></expr>:</case>

<case>case <expr><literal type="number">0x11</literal></expr>:</case>

<case>case <expr><literal type="number">0x12</literal></expr>:</case>

<expr_stmt><expr><call><name>SetupISO14496Descriptors</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x15</literal></expr>:</case>

<expr_stmt><expr><call><name>SetupMetadataDescriptors</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x1b</literal></expr>:</case>

<expr_stmt><expr><call><name>SetupAVCDescriptors</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x21</literal></expr>:</case>

<expr_stmt><expr><call><name>SetupJ2KDescriptors</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x83</literal></expr>:</case>

<expr_stmt><expr><call><name>PMTSetupEs0x83</name><argument_list>( <argument><expr><name>p_dvbpsipmt</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xa0</literal></expr>:</case>

<expr_stmt><expr><call><name>PMTSetupEs0xA0</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xd1</literal></expr>:</case>

<expr_stmt><expr><call><name>PMTSetupEs0xD1</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xEA</literal></expr>:</case>

<expr_stmt><expr><call><name>PMTSetupEs0xEA</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>SetupAudioExtendedDescriptors</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SetupStandardESDescriptors</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>registration_type</name> <operator>==</operator> <name>TS_PMT_REGISTRATION_BLURAY</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <literal type="number">0x1015</literal> <operator>&amp;&amp;</operator>

<call><name>PMTEsHasRegistration</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="string">"HDMV"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_DEFAULTABLE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>&gt;=</operator> <literal type="number">0x1a00</literal> <operator>&amp;&amp;</operator> <name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>&lt;=</operator> <literal type="number">0x1a1f</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>&gt;=</operator> <literal type="number">0x1b00</literal> <operator>&amp;&amp;</operator> <name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>&lt;=</operator> <literal type="number">0x1b1f</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <name>ES_PRIORITY_NOT_DEFAULTABLE</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_priority</name></name> <operator>=</operator> <literal type="number">0xFFFF</literal> <operator>-</operator> <operator>(</operator><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>&amp;</operator> <literal type="number">0xFFFF</literal><operator>)</operator> <operator>+</operator>

<name>ES_PRIORITY_SELECTABLE_MIN</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>i_program_number</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_es_id_pid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>en50221_capmt_info_t</name> <modifier>*</modifier></type> <name>CreateCAPMTInfo</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_en</name> <init>= <expr><call><name>en50221_capmt_New</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_program_number</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_en</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_en</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr></init></decl>;</init>

<condition><expr><name>p_dr</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x09</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>en50221_capmt_AddCADescriptor</name><argument_list>( <argument><expr><name>p_en</name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>p_first_es</name></name></expr></init></decl>;</init>

<condition><expr><name>p_es</name></expr>;</condition> <incr><expr><name>p_es</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>en50221_capmt_es_info_t</name> <modifier>*</modifier></type><name>p_enes</name> <init>= <expr><call><name>en50221_capmt_EsAdd</name><argument_list>( <argument><expr><name>p_en</name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>,

<argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_enes</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr></init></decl>;</init>

<condition><expr><name>p_dr</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x09</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>en50221_capmt_AddESCADescriptor</name><argument_list>( <argument><expr><name>p_enes</name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>p_en</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>PMTCallBack</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_pmt_t</name> <modifier>*</modifier></type><name>p_dvbpsipmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pmtpid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PMTCallBack called for program %d"</literal></expr></argument>, <argument><expr><name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>i_program_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>TYPE_PAT</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>TYPE_PAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_delete</name><argument_list>(<argument><expr><name>p_dvbpsipmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>!</operator><name>pmtpid</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_pmt_prgnumber</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pmt_prgnumber</name> <operator>!=</operator> <name>TS_USER_PMT_NUMBER</name> <operator>&amp;&amp;</operator>

<name>i_pmt_prgnumber</name> <operator>==</operator> <name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>i_program_number</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>pmtpid</name> <operator>=</operator> <name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>pmtpid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_pmt</name> <operator>=</operator> <name><name>pmtpid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>pmtpid</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unreferenced program (broken stream)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_delete</name><argument_list>(<argument><expr><name>p_dvbpsipmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pmtpid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>FLAG_SEEN</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_version</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>(</operator> <operator>!</operator><name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>b_current_next</name></name> <operator>||</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>i_version</name></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_pmt_delete</name><argument_list>( <argument><expr><name>p_dvbpsipmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<macro><name>DECL_ARRAY</name><argument_list>(<argument>ts_pid_t *</argument>)</argument_list></macro> <expr_stmt><expr><name>pid_to_decref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_to_decref</name><operator>.</operator><name>i_alloc</name></name> <operator>=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_alloc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_to_decref</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid_to_decref</name><operator>.</operator><name>p_elems</name></name> <operator>=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>p_elems</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>p_atsc_si_basepid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name>pid_to_decref</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>p_atsc_si_basepid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>p_si_sdt_pid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name>pid_to_decref</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>p_si_sdt_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ARRAY_INIT</name><argument_list>(<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>iod</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ODFree</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>iod</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>iod</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"new PMT program number=%d version=%d pid_pcr=%d"</literal></expr></argument>,

<argument><expr><name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>i_program_number</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>i_pcr_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>=</operator> <name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>i_pcr_pid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>i_version</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ProgramIsSelected</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>SetPIDFilter</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><name>ts_pmt_registration_type_t</name></type> <name>registration_type</name> <init>= <expr><name>TS_PMT_REGISTRATION_NONE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ParsePMTRegistrations</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>registration_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_AUTO</name></expr> )</condition>

<block>{<block_content>

<switch>switch<condition>( <expr><name>registration_type</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>TS_PMT_REGISTRATION_BLURAY</name></expr>:</case>

<expr_stmt><expr><call><name>TsChangeStandard</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>TS_STANDARD_MPEG</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TS_PMT_REGISTRATION_ARIB</name></expr>:</case>

<expr_stmt><expr><call><name>TsChangeStandard</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>TS_STANDARD_ARIB</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TS_PMT_REGISTRATION_ATSC</name></expr>:</case>

<expr_stmt><expr><call><name>TsChangeStandard</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>TS_STANDARD_ATSC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><call><name>SEEN</name><argument_list>(<argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>ATSC_BASE_PID</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TsChangeStandard</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>TS_STANDARD_ATSC</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>=</operator> <call><name>ProbePMTStandard</name><argument_list>( <argument><expr><name>p_dvbpsipmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ParsePMTPrivateRegistrations</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>dvbpsi_pmt_es_t</name> <modifier>*</modifier></type><name>p_dvbpsies</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>p_dvbpsies</name> <operator>=</operator> <name><name>p_dvbpsipmt</name><operator>-&gt;</operator><name>p_first_es</name></name></expr>;</init> <condition><expr><name>p_dvbpsies</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_dvbpsies</name> <operator>=</operator> <name><name>p_dvbpsies</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pespid</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>pespid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_STREAM</name> <operator>&amp;&amp;</operator> <name><name>pespid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_FREE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * PMT wants to create PES on pid %d used by non PES"</literal></expr></argument>, <argument><expr><name><name>pespid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type> <name>psz_typedesc</name> <init>= <expr><call><name>ISO13818_1_Get_StreamType_Description</name><argument_list>( <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * pid=%d type=0x%x %s"</literal></expr></argument>,

<argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><name>psz_typedesc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr></init></decl>;</init>

<condition><expr><name>p_dr</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>registration_type</name> <operator>==</operator> <name>TS_PMT_REGISTRATION_ARIB</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_desc</name> <operator>=</operator> <call><name>ARIB_B10_Get_PMT_Descriptor_Description</name><argument_list>( <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_desc</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - ES descriptor %s 0x%x"</literal></expr></argument>, <argument><expr><name>psz_desc</name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - ES descriptor tag 0x%x"</literal></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_pid_inuse</name> <init>= <expr><operator>(</operator> <name><name>pespid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_STREAM</name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>PIDSetup</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>TYPE_STREAM</name></expr></argument>, <argument><expr><name>pespid</name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * pid=%d type=0x%x %s (skipped)"</literal></expr></argument>,

<argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_type</name></name></expr></argument>, <argument><expr><name>psz_typedesc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>b_pid_inuse</name></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>p_pes</name> <operator>=</operator> <call><name>ts_stream_New</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_pes</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pespid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><name>p_pes</name> <operator>=</operator> <name><name>pespid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name></name></expr></argument>, <argument><expr><name>pespid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pespid</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <call><name>SEEN</name><argument_list>(<argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FillPESFromDvbpsiES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_dvbpsipmt</name></expr></argument>, <argument><expr><name>p_dvbpsies</name></expr></argument>,

<argument><expr><name>registration_type</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>UNKNOWN_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" =&gt; pid %d content is *unknown*"</literal></expr></argument>,

<argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_typedesc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" =&gt; pid %d has now es fcc=%4.4s"</literal></expr></argument>,

<argument><expr><name><name>p_dvbpsies</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name> <init>= <expr><call><name>PMTEsFindDescriptor</name><argument_list>( <argument><expr><name>p_dvbpsies</name></expr></argument>, <argument><expr><literal type="number">0x09</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_dr</name> <operator>&amp;&amp;</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - ES descriptor : CA (0x9) SysID 0x%x"</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_create_es</name> <init>= <expr><operator>(</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>!=</operator> <name>UNKNOWN_ES</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_pid_inuse</name></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_existing_es</name> <init>= <expr><call><name>ts_stream_Find_es</name><argument_list>( <argument><expr><name><name>pespid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_existing_es</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>ofmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_existing_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>nfmt</name> <init>= <expr><operator>&amp;</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_canreuse</name> <init>= <expr><call><name>es_format_IsSimilar</name><argument_list>( <argument><expr><name>ofmt</name></expr></argument>, <argument><expr><name>nfmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b_canreuse</name> <operator>=</operator> <name>b_canreuse</name> <operator>&amp;&amp;</operator>

<operator>(</operator>

<name><name>ofmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>==</operator> <name><name>nfmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>ofmt</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>memcmp</name><argument_list>( <argument><expr><name><name>ofmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>nfmt</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name><name>nfmt</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator>

<operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b_canreuse</name> <operator>=</operator> <name>b_canreuse</name> <operator>&amp;&amp;</operator>

<operator>(</operator>

<operator>(</operator> <operator>!</operator><operator>!</operator><name><name>ofmt</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>==</operator> <operator>!</operator><operator>!</operator><name><name>nfmt</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>ofmt</name><operator>-&gt;</operator><name>psz_language</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>ofmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument>, <argument><expr><name><name>nfmt</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call> <operator>)</operator>

<operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b_canreuse</name> <operator>=</operator> <name>b_canreuse</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <call><name>ts_Count_es</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>p_extraes</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call> <operator>==</operator>

<call><name>ts_Count_es</name><argument_list>( <argument><expr><name><name>p_existing_es</name><operator>-&gt;</operator><name>p_extraes</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call>

<operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_canreuse</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ts_stream_Del</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><call><name>ts_stream_Extract_es</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_old</name> <init>= <expr><call><name>ts_stream_Extract_es</name><argument_list>( <argument><expr><name><name>pespid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ts_stream_Add_es</name><argument_list>( <argument><expr><name><name>pespid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p_old</name> <operator>==</operator> <name>p_existing_es</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ts_Count_es</name><argument_list>(<argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_stream_Add_es</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_old</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_stream_Del</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>ts_Count_es</name><argument_list>(<argument><expr><name><name>pespid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_new</name> <init>= <expr><call><name>ts_stream_Extract_es</name><argument_list>( <argument><expr><name>p_pes</name></expr></argument>, <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>p_new</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_stream_Add_es</name><argument_list>( <argument><expr><name><name>pespid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>p_new</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ts_stream_Del</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_pes</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_create_es</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AddAndCreateES</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pespid</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><call><name>ProgramIsSelected</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>en50221_capmt_info_t</name> <modifier>*</modifier></type><name>p_en</name> <init>= <expr><call><name>CreateCAPMTInfo</name><argument_list>( <argument><expr><name>p_dvbpsipmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_en</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name></expr></argument>, <argument><expr><name>STREAM_SET_PRIVATE_ID_CA</name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>p_en</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>en50221_capmt_Delete</name><argument_list>( <argument><expr><name>p_en</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_ARIB</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>b25stream</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>b25stream</name></name> <operator>=</operator> <call><name>vlc_stream_FilterNew</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="string">"aribcam"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>stream</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>b25stream</name></name> <operator>)</operator></expr> ?</condition><then> <expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>b25stream</name></name></expr> </then><else>: <expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_ATSC</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>atsc_base_pid</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>ATSC_BASE_PID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>PIDSetup</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>TYPE_PSIP</name></expr></argument>, <argument><expr><name>atsc_base_pid</name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_psip_t</name> <modifier>*</modifier></type><name>p_psip</name> <init>= <expr><name><name>atsc_base_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_psip</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ATSC_Attach_Dvbpsi_Base_Decoders</name><argument_list>( <argument><expr><name><name>p_psip</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>atsc_base_pid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"dvbpsi_atsc_AttachMGT/STT failed for program %d"</literal></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>atsc_base_pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>p_atsc_si_basepid</name></name> <operator>=</operator> <name>atsc_base_pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPIDFilter</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>, <argument><expr><name>atsc_base_pid</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * pid=%d listening for MGT/STT"</literal></expr></argument>, <argument><expr><name><name>atsc_base_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name><operator>.</operator><name>i_size</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_eas_es</name> <init>= <expr><call><name>ts_es_New</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>p_eas_es</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_eas_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_SCTE_18</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_eas_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name>ATSC_BASE_PID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_eas_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_eas_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>SCTE18_DESCRIPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_psip</name><operator>-&gt;</operator><name>p_eas_es</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_psip</name><operator>-&gt;</operator><name>p_eas_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_psip</name><operator>-&gt;</operator><name>p_eas_es</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_eas_es</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_eas_es</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_psip</name><operator>-&gt;</operator><name>p_eas_es</name></name> <operator>=</operator> <name>p_eas_es</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * pid=%d listening for EAS events"</literal></expr></argument>, <argument><expr><name>ATSC_BASE_PID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>atsc_base_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_FREE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"can't attach PSIP table handlers"</literal>

<literal type="string">"on already in use ATSC base pid %d"</literal></expr></argument>, <argument><expr><name>ATSC_BASE_PID</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>!=</operator> <name>TS_STANDARD_MPEG</name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>!=</operator> <name>TS_STANDARD_TDMB</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_sdt_pid</name> <init>= <expr><call><name>ts_pid_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pids</name></name></expr></argument>, <argument><expr><name>TS_SI_SDT_PID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>PIDSetup</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>TYPE_SI</name></expr></argument>, <argument><expr><name>p_sdt_pid</name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ts_attach_SI_Tables_Decoders</name><argument_list>( <argument><expr><name>p_sdt_pid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Can't attach SI table decoders from program %d"</literal></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_sdt_pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>p_si_sdt_pid</name></name> <operator>=</operator> <name>p_sdt_pid</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SetPIDFilter</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></argument>, <argument><expr><name>p_sdt_pid</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * pid=%d listening for SDT"</literal></expr></argument>, <argument><expr><name><name>p_sdt_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sdt_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_FREE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"can't attach SI SDT table handler"</literal>

<literal type="string">"on already in used pid %d (Not DVB ?)"</literal></expr></argument>, <argument><expr><name><name>p_sdt_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pid_to_decref</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pid_to_decref</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>ARRAY_RESET</name><argument_list>( <argument><expr><name>pid_to_decref</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_trust_pcr</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_cand</name> <init>= <expr><call><name>FindPCRCandidate</name><argument_list>( <argument><expr><name>p_pmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>=</operator> <name>i_cand</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>b_disable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PCR not trusted for program %d, set up workaround using pid %d"</literal></expr></argument>,

<argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument>, <argument><expr><name>i_cand</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>UpdatePESFilters</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>seltype</name></name> <operator>==</operator> <name>PROGRAM_ALL</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_canfastseek</name></name> <operator>&amp;&amp;</operator> <name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>==</operator> <name>TS_TICK_UNKNOWN</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_last_dts</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ProbeStart</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ProbeEnd</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dvbpsi_pmt_delete</name><argument_list>( <argument><expr><name>p_dvbpsipmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>UserPmt</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_dup</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_fmt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><name>psz_dup</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_number</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_dup</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>i_pid</name> <init>= <expr><call><name>strtoul</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pid</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>i_pid</name> <operator>&gt;=</operator> <literal type="number">8192</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">':'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_number</name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pmtpid</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"user pmt specified (pid=%lu,number=%d)"</literal></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>, <argument><expr><name>i_number</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>PIDSetup</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>TYPE_PMT</name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument>, <argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>pmtpid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_number</name></name> <operator>=</operator> <ternary><condition><expr><name>i_number</name> <operator>!=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_number</name></expr> </then><else>: <expr><name>TS_USER_PMT_NUMBER</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_pmt_attach</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,

<argument><expr><operator>(</operator><operator>(</operator><ternary><condition><expr><name>i_number</name> <operator>!=</operator> <name>TS_USER_PMT_NUMBER</name></expr> ?</condition><then> <expr><name>i_number</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></argument>,

<argument><expr><name>PMTCallBack</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>PIDRelease</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name><operator>-&gt;</operator><name>programs</name></name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while<condition>( <expr><name>psz</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_next</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_next</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psz_next</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_pid</name> <operator>=</operator> <call><name>strtoul</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>||</operator> <name>i_pid</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <name>i_pid</name> <operator>&gt;=</operator> <literal type="number">8192</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>next</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_opt</name> <init>= <expr><operator>&amp;</operator><name><name>psz</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_opt</name></expr></argument>, <argument><expr><literal type="string">"pcr"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>type</name> <operator>==</operator> <name>TYPE_FREE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_arg</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_opt</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_arg</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>psz_arg</name><operator>++</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>PIDSetup</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>TYPE_STREAM</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>pmtpid</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>e_streams</name></name></expr></argument>, <argument><expr><name>pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>i_pid_pcr</name></name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name> <init>= <expr><operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_arg</name> <operator>&amp;&amp;</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_arg</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_fourcc_t</name></type> <name>i_codec</name> <init>= <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>psz_arg</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>psz_arg</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>psz_arg</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>psz_arg</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name> <init>= <expr><name>UNKNOWN_ES</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_opt</name></expr></argument>, <argument><expr><literal type="string">"video"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_opt</name></expr></argument>, <argument><expr><literal type="string">"audio"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name>psz_opt</name></expr></argument>, <argument><expr><literal type="string">"spu"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_cat</name> <operator>=</operator> <name>SPU_ES</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Change</name><argument_list>( <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>i_cat</name></expr></argument>, <argument><expr><name>i_codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>b_packetized</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_stream_type</name> <init>= <expr><call><name>strtol</name><argument_list>( <argument><expr><name>psz_opt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>PIDFillFormat</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name></name></expr></argument>, <argument><expr><name>i_stream_type</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>transport</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_group</name></name> <operator>=</operator> <name>i_number</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_es_id_pid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fmt</name><operator>-&gt;</operator><name>i_id</name></name> <operator>=</operator> <name>i_pid</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fmt</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>!=</operator> <name>UNKNOWN_ES</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * es pid=%lu fcc=%4.4s"</literal></expr></argument>, <argument><expr><name>i_pid</name></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>fmt</name><operator>-&gt;</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_stream</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pmt_es</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>next</name>:</label>

<expr_stmt><expr><name>psz</name> <operator>=</operator> <name>psz_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_user_pmt</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_dup</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_psi_PAT_Attach</name><parameter_list>( <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>patpid</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cbdata</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>patpid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_PAT</name> <operator>||</operator> <name><name>patpid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>!=</operator> <name>TS_PSI_PAT_PID</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvbpsi_pat_attach</name><argument_list>( <argument><expr><name><name>patpid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pat</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>PATCallBack</name></expr></argument>, <argument><expr><name>cbdata</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ts_psi_Packet_Push</name><parameter_list>( <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pktbuffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PAT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dvbpsi_packet_push</name><argument_list>( <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pat</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>p_pktbuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PMT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dvbpsi_packet_push</name><argument_list>( <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>p_pktbuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
