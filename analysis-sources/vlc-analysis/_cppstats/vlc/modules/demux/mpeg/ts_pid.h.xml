<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\ts_pid.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid_fwd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_ES_PID</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ES_PID</name></cpp:macro> <cpp:value>8190</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>demux_sys_t</name></name></type> <name>demux_sys_t</name>;</typedef>

<typedef>typedef <type><enum>enum

<block>{

<decl><name>TYPE_FREE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>TYPE_CAT</name></decl>,

<decl><name>TYPE_PAT</name></decl>,

<decl><name>TYPE_PMT</name></decl>,

<decl><name>TYPE_STREAM</name></decl>,

<decl><name>TYPE_SI</name></decl>,

<decl><name>TYPE_PSIP</name></decl>,

}</block></enum></type> <name>ts_pid_type_t</name>;</typedef>

<enum>enum

<block>{

<decl><name>FLAGS_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>FLAG_SEEN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>FLAG_SCRAMBLED</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>FLAG_FILTERED</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEEN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)-&gt;i_flags &amp; FLAG_SEEN)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCRAMBLED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x).i_flags &amp; FLAG_SCRAMBLED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREVPKTKEEPBYTES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<struct>struct <name>ts_pid_t</name>

<block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_cc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_dup</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>prevpktbytes</name><index>[<expr><name>PREVPKTKEEPBYTES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_refcount</name></decl>;</decl_stmt>

<union>union

<block>{

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_si_t</name> <modifier>*</modifier></type><name>p_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_psip_t</name> <modifier>*</modifier></type><name>p_psip</name></decl>;</decl_stmt>

}</block> <decl><name>u</name></decl>;</union>

<struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_original_fourcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_cat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pcr_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_id</name></decl>;</decl_stmt>

}</block> <decl><name>probed</name></decl>;</struct>

}</block>;</struct>

<struct>struct <name>ts_pid_list_t</name>

<block>{

<decl_stmt><decl><type><name>ts_pid_t</name></type> <name>pat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name></type> <name>dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name></type> <name>base_si</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_all</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_all</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_all_alloc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_last_pid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_last</name></decl>;</decl_stmt>

}</block>;</struct>

<function_decl><type><name>void</name></type> <name>ts_pid_list_Init</name><parameter_list>( <parameter><decl><type><name>ts_pid_list_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ts_pid_list_Release</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_pid_list_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>ts_pid_t</name> <modifier>*</modifier></type> <name>ts_pid_Get</name><parameter_list>( <parameter><decl><type><name>ts_pid_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>i_pid</name></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name></decl>;</decl_stmt>

}</block></struct></type> <name>ts_pid_next_context_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ts_pid_NextContextInitValue</name></cpp:macro> <cpp:value>{ 0 }</cpp:value></cpp:define>

<function_decl><type><name>ts_pid_t</name> <modifier>*</modifier></type> <name>ts_pid_Next</name><parameter_list>( <parameter><decl><type><name>ts_pid_list_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_pid_next_context_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetPID</name><parameter_list>(<parameter><type><name>p_sys</name></type></parameter>, <parameter><type><name>i_pid</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ts_pid_Get((&amp;(p_sys)-&gt;pids), i_pid)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>UpdateHWFilter</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>SetPIDFilter</name><parameter_list>( <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_selected</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>PIDSetup</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_type_t</name></type> <name>i_type</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_parent</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>PIDRelease</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter> )</parameter_list>;</function_decl>

</unit>
