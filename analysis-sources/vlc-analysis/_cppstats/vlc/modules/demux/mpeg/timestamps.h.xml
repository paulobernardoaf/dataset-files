<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\timestamps.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_SCALE_NZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vlc_tick_t)((x) * 100 / 9))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_SCALE_NZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) * 9 / 100)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FROM_SCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(VLC_TICK_0 + FROM_SCALE_NZ(x))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TO_SCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>TO_SCALE_NZ((x) - VLC_TICK_0)</cpp:value></cpp:define>

<typedef>typedef <type><name>int64_t</name></type> <name>stime_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>stime_t</name></type> <name>TimeStampWrapAround</name><parameter_list>( <parameter><decl><type><name>stime_t</name></type> <name>i_first_pcr</name></decl></parameter>, <parameter><decl><type><name>stime_t</name></type> <name>i_time</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_adjust</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_first_pcr</name> <operator>&gt;</operator> <literal type="number">0x0FFFFFFFF</literal> <operator>&amp;&amp;</operator> <name>i_time</name> <operator>&lt;</operator> <literal type="number">0x0FFFFFFFF</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_adjust</name> <operator>=</operator> <literal type="number">0x1FFFFFFFF</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_time</name> <operator>+</operator> <name>i_adjust</name></expr>;</return>

</block_content>}</block></function>

</unit>
