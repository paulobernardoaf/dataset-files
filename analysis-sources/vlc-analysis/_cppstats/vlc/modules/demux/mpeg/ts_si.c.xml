<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\ts_si.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_epg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DVBPSI_DVBPSI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dvbpsi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/descriptor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/sdt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/eit.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/tot.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dr.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/psi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_si.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_arib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_decoders.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../dvb-text.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARIBB24</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;aribb24/decoder.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>SI_DEBUG_EIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_DEBUG_TIMESHIFT</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>time_t</name></type> <name>i_eit_debug_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SI_DEBUG_TIMESHIFT</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {if( i_eit_debug_offset == 0 )i_eit_debug_offset = time(NULL) - t;t = t + i_eit_debug_offset;} while(0);</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>SINewTableCallBack</name><parameter_list>( <parameter><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_table_id</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>i_extension</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_pid_cbdata</name></decl></parameter> )</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>ts_si_Packet_Push</name><parameter_list>( <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pktbuffer</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_SI</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>dvbpsi_decoder_present</name><argument_list>( <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dvbpsi_packet_push</name><argument_list>( <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>p_pktbuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>EITConvertToUTF8</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>psz_instring</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_length</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_broken</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_ARIBB24</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_ARIB</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>p_instance</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>p_instance</name></name> <operator>=</operator> <call><name>arib_instance_new</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>p_instance</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>arib_decoder_t</name> <modifier>*</modifier></type><name>p_decoder</name> <init>= <expr><call><name>arib_get_decoder</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>p_instance</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_decoder</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_outstring</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_out</name> <operator>=</operator> <name>i_length</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_outstring</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_out</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_outstring</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>arib_initialize_decoder</name><argument_list>( <argument><expr><name>p_decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_out</name> <operator>=</operator> <call><name>arib_decode_buffer</name><argument_list>( <argument><expr><name>p_decoder</name></expr></argument>, <argument><expr><name>psz_instring</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument>,

<argument><expr><name>psz_outstring</name></expr></argument>, <argument><expr><name>i_out</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>arib_finalize_decoder</name><argument_list>( <argument><expr><name>p_decoder</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_outstring</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>b_broken</name> <operator>=</operator> <name>b_broken</name> <operator>&amp;&amp;</operator> <name>i_length</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_instring</name> <operator>&gt;</operator> <literal type="number">0x20</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_broken</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"ISO_8859-1"</literal></expr></argument>, <argument><expr><name>psz_instring</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>vlc_from_EIT</name><argument_list>( <argument><expr><name>psz_instring</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>attach_SI_decoders</name><parameter_list>(<parameter><type><name>i_pid</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>member</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {ts_pid_t *pid = GetPID(p_sys, i_pid);if ( PIDSetup( p_demux, TYPE_SI, pid, NULL ) ){if( !ts_attach_SI_Tables_Decoders( pid ) ){msg_Err( p_demux, "Can't attach SI table decoders for pid %d", i_pid );PIDRelease( p_demux, pid );}else{sdt-&gt;u.p_si-&gt;member = pid;SetPIDFilter( p_demux-&gt;p_sys, pid, true );msg_Dbg( p_demux, " * pid=%d listening for "name, i_pid );}}} while(0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SDTCallBack</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_sdt_t</name> <modifier>*</modifier></type><name>p_sdt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>sdt</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>TS_SI_SDT_PID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>ts_pid_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pids</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_sdt_service_t</name> <modifier>*</modifier></type><name>p_srv</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"SDTCallBack called"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es_creation</name></name> <operator>!=</operator> <name>CREATE_ES</name> <operator>||</operator>

<operator>!</operator><name><name>p_sdt</name><operator>-&gt;</operator><name>b_current_next</name></name> <operator>||</operator>

<name><name>p_sdt</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <name><name>sdt</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name><operator>-&gt;</operator><name>i_version</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_sdt_delete</name><argument_list>( <argument><expr><name>p_sdt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sdt</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name><operator>-&gt;</operator><name>i_version</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>attach_SI_decoders</name><argument_list>( <argument><expr><name>TS_SI_EIT_PID</name></expr></argument>, <argument><expr><literal type="string">"EIT"</literal></expr></argument>, <argument><expr><name>eitpid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>attach_SI_decoders</name><argument_list>( <argument><expr><name>TS_SI_TDT_PID</name></expr></argument>, <argument><expr><literal type="string">"TDT"</literal></expr></argument>, <argument><expr><name>tdtpid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_ARIB</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>attach_SI_decoders</name><argument_list>( <argument><expr><name>TS_ARIB_CDT_PID</name></expr></argument>, <argument><expr><literal type="string">"CDT"</literal></expr></argument>, <argument><expr><name>cdtpid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"new SDT ts_id=%"</literal><name>PRIu16</name><literal type="string">" version=%"</literal><name>PRIu8</name><literal type="string">" current_next=%d "</literal>

<literal type="string">"network_id=%"</literal><name>PRIu16</name></expr></argument>,

<argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_extension</name></name></expr></argument>,

<argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>, <argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>b_current_next</name></name></expr></argument>,

<argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_network_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_srv</name> <operator>=</operator> <name><name>p_sdt</name><operator>-&gt;</operator><name>p_first_service</name></name></expr>;</init> <condition><expr><name>p_srv</name></expr>;</condition> <incr><expr><name>p_srv</name> <operator>=</operator> <name><name>p_srv</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><call><name>ts_pat_Get_pmt</name><argument_list>( <argument><expr><name>p_pat</name></expr></argument>, <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_service_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_status</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * service id=%"</literal><name>PRIu16</name><literal type="string">" eit schedule=%d present=%d "</literal>

<literal type="string">"running=%"</literal><name>PRIu8</name><literal type="string">" free_ca=%d"</literal></expr></argument>,

<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_service_id</name></name></expr></argument>, <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>b_eit_schedule</name></name></expr></argument>,

<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>b_eit_present</name></name></expr></argument>, <argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_running_status</name></name></expr></argument>,

<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>b_free_ca</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>vdr</name><operator>.</operator><name>i_service</name></name> <operator>&amp;&amp;</operator> <name><name>p_srv</name><operator>-&gt;</operator><name>i_service_id</name></name> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>vdr</name><operator>.</operator><name>i_service</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * service id=%d skipped (not declared in vdr header)"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>vdr</name><operator>.</operator><name>i_service</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_meta</name> <operator>=</operator> <call><name>vlc_meta_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_dr</name> <operator>=</operator> <name><name>p_srv</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr>;</init> <condition><expr><name>p_dr</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <literal type="number">0x48</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_type</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Reserved"</literal></expr>,

<expr><literal type="string">"Digital television service"</literal></expr>,

<expr><literal type="string">"Digital radio sound service"</literal></expr>,

<expr><literal type="string">"Teletext service"</literal></expr>,

<expr><literal type="string">"NVOD reference service"</literal></expr>,

<expr><literal type="string">"NVOD time-shifted service"</literal></expr>,

<expr><literal type="string">"Mosaic service"</literal></expr>,

<expr><literal type="string">"PAL coded signal"</literal></expr>,

<expr><literal type="string">"SECAM coded signal"</literal></expr>,

<expr><literal type="string">"D/D2-MAC"</literal></expr>,

<expr><literal type="string">"FM Radio"</literal></expr>,

<expr><literal type="string">"NTSC coded signal"</literal></expr>,

<expr><literal type="string">"Data broadcast service"</literal></expr>,

<expr><literal type="string">"Reserved for Common Interface Usage"</literal></expr>,

<expr><literal type="string">"RCS Map (see EN 301 790 [35])"</literal></expr>,

<expr><literal type="string">"RCS FLS (see EN 301 790 [35])"</literal></expr>,

<expr><literal type="string">"DVB MHP service"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dvbpsi_service_dr_t</name> <modifier>*</modifier></type><name>pD</name> <init>= <expr><call><name>dvbpsi_DecodeServiceDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_network_id</name></name> <operator>==</operator> <literal type="number">133</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>ppsz_broken_providers</name><index>[]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"CSAT"</literal></expr>, 

<expr><literal type="string">"GR1"</literal></expr>, 

<expr><literal type="string">"MULTI4"</literal></expr>, 

<expr><literal type="string">"MR5"</literal></expr>, 

<expr><literal type="string">""</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>*</operator><name><name>ppsz_broken_providers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>ppsz_broken_providers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_provider_name_length</name></name> <operator>==</operator> <name>i_length</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>pD</name><operator>-&gt;</operator><name>i_service_provider_name</name></name></expr></argument>, <argument><expr><name><name>ppsz_broken_providers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>str1</name> <operator>=</operator> <call><name>EITConvertToUTF8</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_provider_name</name></name></expr></argument>,

<argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_provider_name_length</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>str2</name> <operator>=</operator> <call><name>EITConvertToUTF8</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_name</name></name></expr></argument>,

<argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_name_length</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - type=%"</literal><name>PRIu8</name><literal type="string">" provider=%s name=%s"</literal></expr></argument>,

<argument><expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_type</name></name></expr></argument>, <argument><expr><name>str1</name></expr></argument>, <argument><expr><name>str2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>str2</name> <operator>||</operator> <call><name>strcmp</name><argument_list>( <argument><expr><literal type="string">"Service01"</literal></expr></argument>, <argument><expr><name>str2</name></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_SetTitle</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>str2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_SetPublisher</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>str1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_type</name></name> <operator>&gt;=</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name><name>pD</name><operator>-&gt;</operator><name>i_service_type</name></name> <operator>&lt;=</operator> <literal type="number">0x10</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <name><name>ppsz_type</name><index>[<expr><name><name>pD</name><operator>-&gt;</operator><name>i_service_type</name></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>str1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>str2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_ARIB</name> <operator>&amp;&amp;</operator>

<name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name> <operator>==</operator> <name>TS_ARIB_DR_LOGO_TRANSMISSION</name> <operator>&amp;&amp;</operator> <name>p_pmt</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_arib_logo_dr_t</name> <modifier>*</modifier></type><name>p_logodr</name> <init>= <expr><call><name>ts_arib_logo_dr_Decode</name><argument_list>( <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_logodr</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_logodr</name><operator>-&gt;</operator><name>i_transmission_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>i_logo_id</name></name> <operator>=</operator> <name><name>p_logodr</name><operator>-&gt;</operator><name>i_logo_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>i_download_id</name></name> <operator>=</operator> <name><name>p_logodr</name><operator>-&gt;</operator><name>i_download_data_id</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_logodr</name><operator>-&gt;</operator><name>i_transmission_mode</name></name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>i_logo_id</name></name> <operator>=</operator> <name><name>p_logodr</name><operator>-&gt;</operator><name>i_logo_id</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>i_logo_id</name></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"attachment://onid[%"</literal><name>PRIx16</name><literal type="string">"]_channel_logo_id[%"</literal><name>PRIx16</name><literal type="string">"]q[%d]"</literal></expr></argument>,

<argument><expr><name><name>p_sdt</name><operator>-&gt;</operator><name>i_network_id</name></name></expr></argument>, <argument><expr><name><name>p_logodr</name><operator>-&gt;</operator><name>i_logo_id</name></name></expr></argument>,

<argument><expr><name>TS_ARIB_LOGO_TYPE_HD_LARGE</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_SetArtURL</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"ARTURL"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ts_arib_logo_dr_Delete</name><argument_list>( <argument><expr><name>p_logodr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_running_status</name></name> <operator>&gt;=</operator> <literal type="number">0x01</literal> <operator>&amp;&amp;</operator> <name><name>p_srv</name><operator>-&gt;</operator><name>i_running_status</name></name> <operator>&lt;=</operator> <literal type="number">0x04</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_status</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"Unknown"</literal></expr>,

<expr><literal type="string">"Not running"</literal></expr>,

<expr><literal type="string">"Starts in a few seconds"</literal></expr>,

<expr><literal type="string">"Pausing"</literal></expr>,

<expr><literal type="string">"Running"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_status</name> <operator>=</operator> <name><name>ppsz_status</name><index>[<expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_running_status</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_type</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"Type"</literal></expr></argument>, <argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_status</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"Status"</literal></expr></argument>, <argument><expr><name>psz_status</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_GROUP_META</name></expr></argument>,

<argument><expr><name><name>p_srv</name><operator>-&gt;</operator><name>i_service_id</name></name></expr></argument>, <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_meta_Delete</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sdt</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <name><name>p_sdt</name><operator>-&gt;</operator><name>i_version</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_sdt_delete</name><argument_list>( <argument><expr><name>p_sdt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EITDecodeMjd</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>i_mjd</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_y</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_m</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>p_d</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>yp</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i_mjd</name> <operator>-</operator> <literal type="number">15078.2</literal><operator>)</operator><operator>/</operator><literal type="number">365.25</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mp</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>i_mjd</name> <operator>-</operator> <literal type="number">14956.1</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>yp</name> <operator>*</operator> <literal type="number">365.25</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <literal type="number">30.6001</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name>mp</name> <operator>==</operator> <literal type="number">14</literal> <operator>||</operator> <name>mp</name> <operator>==</operator> <literal type="number">15</literal> <operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>p_y</name> <operator>=</operator> <literal type="number">1900</literal> <operator>+</operator> <name>yp</name> <operator>+</operator> <name>c</name><operator>*</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_m</name> <operator>=</operator> <name>mp</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>c</name><operator>*</operator><literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p_d</name> <operator>=</operator> <name>i_mjd</name> <operator>-</operator> <literal type="number">14956</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>yp</name><operator>*</operator><literal type="number">365.25</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>mp</name><operator>*</operator><literal type="number">30.6001</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CVT_FROM_BCD</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((((v) &gt;&gt; 4)&amp;0xf)*10 + ((v)&amp;0xf))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>EITConvertStartTime</name><parameter_list>( <parameter><decl><type><name>uint64_t</name></type> <name>i_date</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_mjd</name> <init>= <expr><name>i_date</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <call><name>CVT_FROM_BCD</name><argument_list>(<argument><expr><name>i_date</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <call><name>CVT_FROM_BCD</name><argument_list>(<argument><expr><name>i_date</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <call><name>CVT_FROM_BCD</name><argument_list>(<argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_date</name> <operator>==</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xffffffffff</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>EITDecodeMjd</name><argument_list>( <argument><expr><name>i_mjd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_year</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_mon</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>-=</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tm</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>timegm</name><argument_list>( <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>EITConvertDuration</name><parameter_list>( <parameter><decl><type><name>uint32_t</name></type> <name>i_duration</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>CVT_FROM_BCD</name><argument_list>(<argument><expr><name>i_duration</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator>

<call><name>CVT_FROM_BCD</name><argument_list>(<argument><expr><name>i_duration</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator>

<call><name>CVT_FROM_BCD</name><argument_list>(<argument><expr><name>i_duration</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CVT_FROM_BCD</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TDTCallBack</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_tot_t</name> <modifier>*</modifier></type><name>p_tdt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name> <operator>=</operator> <call><name>EITConvertStartTime</name><argument_list>( <argument><expr><name><name>p_tdt</name><operator>-&gt;</operator><name>i_utc_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time_update</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_ARIB</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name> <operator>+=</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">3600</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name> <init>= <expr><call><name>ts_pid_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pids</name></name></expr></argument>, <argument><expr><name>TS_SI_TDT_PID</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_decoder_reset</name><argument_list>( <argument><expr><name><name>pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name><operator>-&gt;</operator><name>handle</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_tot_delete</name><argument_list>(<argument><expr><name>p_tdt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_EPG_TIME</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EITExtractDrDescItems</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_extended_event_dr_t</name> <modifier>*</modifier></type><name>pE</name></decl></parameter>,

<parameter><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_evt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pE</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_prev</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_description_items</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ppsz_prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_description_items</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>psz_value</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pE</name><operator>-&gt;</operator><name>i_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>b_appending</name> <init>= <expr><operator>(</operator> <name><name>pE</name><operator>-&gt;</operator><name>i_item_description_length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_appending</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>p_evt</name><operator>-&gt;</operator><name>i_description_items</name></name> <operator>&lt;</operator> <name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name></name></expr></argument>)</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_realloc</name> <operator>=</operator> <call><name>realloc</name><argument_list>( <argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>p_evt</name><operator>-&gt;</operator><name>i_description_items</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name></name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_realloc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_key</name> <operator>=</operator> <call><name>EITConvertToUTF8</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_item_description</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_item_description_length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_key</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>ppsz_prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>ppsz_prev</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_itm</name> <init>= <expr><call><name>EITConvertToUTF8</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_item</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_item_length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_itm</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_key</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ppsz_prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - desc='%s' item='%s'"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>psz_key</name></expr> ?</condition><then> <expr><name>psz_key</name></expr> </then><else>: <expr><literal type="string">"(null)"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>psz_itm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_appending</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><operator>*</operator><name>ppsz_prev</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>psz_itm</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_prev</name></expr></argument>, <argument><expr><name>i_total</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_realloc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ppsz_prev</name> <operator>=</operator> <name>psz_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz_prev</name></expr></argument>, <argument><expr><name>psz_itm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_itm</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_description_items</name></name></expr>]</index></name><operator>.</operator><name>psz_key</name> <operator>=</operator> <name>psz_key</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_description_items</name></name></expr>]</index></name><operator>.</operator><name>psz_value</name> <operator>=</operator> <name>psz_itm</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ppsz_prev</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_evt</name><operator>-&gt;</operator><name>description_items</name><index>[<expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_description_items</name></name></expr>]</index></name><operator>.</operator><name>psz_value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_description_items</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>EITCallBack</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>dvbpsi_eit_t</name> <modifier>*</modifier></type><name>p_eit</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_eit_event_t</name> <modifier>*</modifier></type><name>p_evt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_runevt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_fallbackevt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_epg_t</name> <modifier>*</modifier></type><name>p_epg</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"EITCallBack called"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_eit</name><operator>-&gt;</operator><name>b_current_next</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_eit_delete</name><argument_list>( <argument><expr><name>p_eit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"new EIT service_id=%"</literal><name>PRIu16</name><literal type="string">" version=%"</literal><name>PRIu8</name><literal type="string">" current_next=%d "</literal>

<literal type="string">"ts_id=%"</literal><name>PRIu16</name><literal type="string">" network_id=%"</literal><name>PRIu16</name><literal type="string">" segment_last_section_number=%"</literal><name>PRIu8</name><literal type="string">" "</literal>

<literal type="string">"last_table_id=%"</literal><name>PRIu8</name></expr></argument>,

<argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_extension</name></name></expr></argument>,

<argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_version</name></name></expr></argument>, <argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>b_current_next</name></name></expr></argument>,

<argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_ts_id</name></name></expr></argument>, <argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_network_id</name></name></expr></argument>,

<argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_segment_last_section_number</name></name></expr></argument>, <argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_last_table_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_epg</name> <operator>=</operator> <call><name>vlc_epg_New</name><argument_list>( <argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_table_id</name></name></expr></argument>, <argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_extension</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_epg</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_eit_delete</name><argument_list>( <argument><expr><name>p_eit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>p_evt</name> <operator>=</operator> <name><name>p_eit</name><operator>-&gt;</operator><name>p_first_event</name></name></expr>;</init> <condition><expr><name>p_evt</name></expr>;</condition> <incr><expr><name>p_evt</name> <operator>=</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_descriptor_t</name> <modifier>*</modifier></type><name>p_dr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_duration</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_start</name> <operator>=</operator> <call><name>EITConvertStartTime</name><argument_list>( <argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_start_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SI_DEBUG_TIMESHIFT</name><argument_list>(<argument><expr><name>i_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_duration</name> <operator>=</operator> <call><name>EITConvertDuration</name><argument_list>( <argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_ARIB</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_start</name> <operator>+=</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">3600</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" * event id=%"</literal><name>PRIu16</name><literal type="string">" start_time:%"</literal><name>PRId64</name><literal type="string">" duration=%d "</literal>

<literal type="string">"running=%"</literal><name>PRIu8</name><literal type="string">" free_ca=%d"</literal></expr></argument>,

<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_event_id</name></name></expr></argument>, <argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_duration</name></expr></argument>,

<argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_running_status</name></name></expr></argument>, <argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>b_free_ca</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_epg_event_t</name> <modifier>*</modifier></type><name>p_epgevt</name> <init>= <expr><call><name>vlc_epg_event_New</name><argument_list>( <argument><expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_event_id</name></name></expr></argument>,

<argument><expr><name>i_start</name></expr></argument>, <argument><expr><name>i_duration</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_epgevt</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_epg_AddEvent</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><name>p_epgevt</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_epg_event_Delete</name><argument_list>( <argument><expr><name>p_epgevt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>p_dr</name> <operator>=</operator> <name><name>p_evt</name><operator>-&gt;</operator><name>p_first_descriptor</name></name></expr>;</init> <condition><expr><name>p_dr</name></expr>;</condition> <incr><expr><name>p_dr</name> <operator>=</operator> <name><name>p_dr</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<switch>switch<condition>(<expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x4d</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_short_event_dr_t</name> <modifier>*</modifier></type><name>pE</name> <init>= <expr><call><name>dvbpsi_DecodeShortEventDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz</name> <init>= <expr><operator>&amp;</operator><name><name>p_epgevt</name><operator>-&gt;</operator><name>psz_name</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz</name> <operator>=</operator> <call><name>EITConvertToUTF8</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_event_name</name></name></expr></argument>, <argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_event_name_length</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ppsz</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_epgevt</name><operator>-&gt;</operator><name>psz_short_description</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>*</operator><name>ppsz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz</name> <operator>=</operator> <call><name>EITConvertToUTF8</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_text</name></name></expr></argument>, <argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_text_length</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - short event lang=%3.3s '%s' : '%s'"</literal></expr></argument>,

<argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_iso_639_code</name></name></expr></argument>, <argument><expr><name><name>p_epgevt</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><operator>*</operator><name>ppsz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="number">0x4e</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_extended_event_dr_t</name> <modifier>*</modifier></type><name>pE</name> <init>= <expr><call><name>dvbpsi_DecodeExtendedEventDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>pE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - extended event lang=%3.3s [%"</literal><name>PRIu8</name><literal type="string">"/%"</literal><name>PRIu8</name><literal type="string">"]"</literal></expr></argument>,

<argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_iso_639_code</name></name></expr></argument>,

<argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_descriptor_number</name></name></expr></argument>, <argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_last_descriptor_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pE</name><operator>-&gt;</operator><name>i_text_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><call><name>EITConvertToUTF8</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_text</name></name></expr></argument>, <argument><expr><name><name>pE</name><operator>-&gt;</operator><name>i_text_length</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_broken_charset</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_text</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - text='%s'"</literal></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_epgevt</name><operator>-&gt;</operator><name>psz_description</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_total</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_epgevt</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_epgevt</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>, <argument><expr><name>i_total</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_realloc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_epgevt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <name>psz_realloc</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_realloc</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_epgevt</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>EITExtractDrDescItems</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>pE</name></expr></argument>, <argument><expr><name>p_epgevt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><literal type="number">0x55</literal></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>dvbpsi_parental_rating_dr_t</name> <modifier>*</modifier></type><name>pR</name> <init>= <expr><call><name>dvbpsi_DecodeParentalRatingDr</name><argument_list>( <argument><expr><name>p_dr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>pR</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_min_age</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pR</name><operator>-&gt;</operator><name>i_ratings_number</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>dvbpsi_parental_rating_t</name> <modifier>*</modifier></type><name>p_rating</name> <init>= <expr><operator>&amp;</operator> <name><name>pR</name><operator>-&gt;</operator><name>p_parental_rating</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_rating</name><operator>-&gt;</operator><name>i_rating</name></name> <operator>&gt;</operator> <literal type="number">0x00</literal> <operator>&amp;&amp;</operator> <name><name>p_rating</name><operator>-&gt;</operator><name>i_rating</name></name> <operator>&lt;=</operator> <literal type="number">0x0F</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_rating</name><operator>-&gt;</operator><name>i_rating</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;</operator> <name>i_min_age</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_min_age</name> <operator>=</operator> <name><name>p_rating</name><operator>-&gt;</operator><name>i_rating</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - parental control set to %d years"</literal></expr></argument>,

<argument><expr><name>i_min_age</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_epgevt</name><operator>-&gt;</operator><name>i_rating</name></name> <operator>=</operator> <name>i_min_age</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" - event unknown dr 0x%"</literal><name>PRIx8</name><literal type="string">"(%"</literal><name>PRIu8</name><literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument>, <argument><expr><name><name>p_dr</name><operator>-&gt;</operator><name>i_tag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<switch>switch <condition>( <expr><name><name>p_evt</name><operator>-&gt;</operator><name>i_running_status</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>TS_SI_RUNSTATUS_RUNNING</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>i_runevt</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_runevt</name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>TS_SI_RUNSTATUS_UNDEFINED</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_fallbackevt</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>i_start</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_network_time</name></name> <operator>&lt;</operator> <name>i_start</name> <operator>+</operator> <name>i_duration</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_fallbackevt</name> <operator>=</operator> <name>i_start</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_runevt</name> <operator>||</operator> <name>i_fallbackevt</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_epg_SetCurrent</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name>i_runevt</name><operator>)</operator></expr> ?</condition><then> <expr><name>i_runevt</name></expr> </then><else>: <expr><name>i_fallbackevt</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>i_event</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_epg</name><operator>-&gt;</operator><name>b_present</name></name> <operator>&amp;&amp;</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>ts_pid_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pids</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><call><name>ts_pat_Get_pmt</name><argument_list>(<argument><expr><name>p_pat</name></expr></argument>, <argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_extension</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>p_pmt</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_start</name></name> <operator>=</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name><operator>-&gt;</operator><name>i_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>eit</name><operator>.</operator><name>i_event_length</name></name> <operator>=</operator> <name><name>p_epg</name><operator>-&gt;</operator><name>p_current</name><operator>-&gt;</operator><name>i_duration</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_epg</name><operator>-&gt;</operator><name>b_present</name></name> <operator>=</operator> <operator>(</operator><name><name>p_eit</name><operator>-&gt;</operator><name>i_table_id</name></name> <operator>==</operator> <literal type="number">0x4e</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_GROUP_EPG</name></expr></argument>, <argument><expr><name><name>p_eit</name><operator>-&gt;</operator><name>i_extension</name></name></expr></argument>, <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_epg_Delete</name><argument_list>( <argument><expr><name>p_epg</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dvbpsi_eit_delete</name><argument_list>( <argument><expr><name>p_eit</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ARIB_CDT_RawCallback</name><parameter_list>( <parameter><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_psi_section_t</name><modifier>*</modifier></type> <name>p_section</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_cdtpid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_cdtpid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator> <name><name>p_handle</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_pat_t</name> <modifier>*</modifier></type><name>p_pat</name> <init>= <expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>p_section</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name><name>p_section</name><operator>-&gt;</operator><name>p_payload_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_data</name> <init>= <expr><name><name>p_section</name><operator>-&gt;</operator><name>p_payload_end</name></name> <operator>-</operator> <name><name>p_section</name><operator>-&gt;</operator><name>p_payload_start</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">6U</literal> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <name>TS_ARIB_CDT_DATA_TYPE_LOGO</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_onid</name> <init>= <expr><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_dr_len</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name><name>p_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>i_dr_len</name> <operator>+</operator> <operator>(</operator><literal type="number">6U</literal> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_dmb</name> <init>= <expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <name>i_dr_len</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_dmb</name> <init>= <expr><name>i_data</name> <operator>-</operator> <literal type="number">5</literal> <operator>-</operator> <name>i_dr_len</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>i_dmb</name> <operator>&gt;</operator> <literal type="number">7</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_logo_type</name> <init>= <expr><name><name>p_dmb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_logo_id</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>p_dmb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_dmb</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_size</name> <init>= <expr><operator>(</operator><name><name>p_dmb</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>p_dmb</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><literal type="number">7U</literal> <operator>+</operator> <name>i_size</name> <operator>&gt;</operator> <name>i_dmb</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>i_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pat</name><operator>-&gt;</operator><name>programs</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pmt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>arib</name><operator>.</operator><name>i_logo_id</name></name> <operator>==</operator> <name>i_logo_id</name> <operator>&amp;&amp;</operator> <name>i_logo_type</name> <operator>==</operator> <name>TS_ARIB_LOGO_TYPE_HD_LARGE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"onid[%"</literal><name>PRIx16</name><literal type="string">"]_channel_logo_id[%"</literal><name>PRIx16</name><literal type="string">"]q[%d]"</literal></expr></argument>,

<argument><expr><name>i_onid</name></expr></argument>, <argument><expr><name>i_logo_id</name></expr></argument>, <argument><expr><name>i_logo_type</name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_png</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>size_t</name></type> <name>i_png</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>vlc_dictionary_has_key</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>ts_arib_inject_png_palette</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_dmb</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i_size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_png</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_png</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_attachment_t</name> <modifier>*</modifier></type><name>p_att</name> <init>= <expr><call><name>vlc_input_attachment_New</name><argument_list>(

<argument><expr><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"image/png"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_png</name></expr></argument>, <argument><expr><name>i_png</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_att</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_dictionary_insert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>attachments</name></name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument>, <argument><expr><name>p_att</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_META</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_png</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_dmb</name> <operator>-=</operator> <literal type="number">7</literal> <operator>+</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_dmb</name> <operator>+=</operator> <literal type="number">7</literal> <operator>+</operator> <name>i_size</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>p_section</name> <operator>=</operator> <name><name>p_section</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SINewTableCallBack</name><parameter_list>( <parameter><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_table_id</name></decl></parameter>,

<parameter><decl><type><name>uint16_t</name></type> <name>i_extension</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_pid_cbdata</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>h</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><operator>(</operator><name>ts_pid_t</name> <operator>*</operator><operator>)</operator> <name>p_pid_cbdata</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Dbg( p_demux, "SINewTableCallback: table 0x%"PRIx8"(%"PRIu16") ext=0x%"PRIx16"(%"PRIu16")",

i_table_id, i_table_id, i_extension, i_extension );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <name>TS_SI_SDT_PID</name> <operator>&amp;&amp;</operator> <name>i_table_id</name> <operator>==</operator> <literal type="number">0x42</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_sdt_attach</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_table_id</name></expr></argument>, <argument><expr><name>i_extension</name></expr></argument>, <argument><expr><operator>(</operator><name>dvbpsi_sdt_callback</name><operator>)</operator><name>SDTCallBack</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"SINewTableCallback: failed attaching SDTCallback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <name>TS_SI_EIT_PID</name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name>i_table_id</name> <operator>==</operator> <literal type="number">0x4e</literal> <operator>||</operator> 

<operator>(</operator><name>i_table_id</name> <operator>&gt;=</operator> <literal type="number">0x50</literal> <operator>&amp;&amp;</operator> <name>i_table_id</name> <operator>&lt;=</operator> <literal type="number">0x5f</literal><operator>)</operator> <operator>)</operator></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_eit_attach</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_table_id</name></expr></argument>, <argument><expr><name>i_extension</name></expr></argument>,

<argument><expr><operator>(</operator><name>dvbpsi_eit_callback</name><operator>)</operator><name>EITCallBack</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"SINewTableCallback: failed attaching EITCallback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <name>TS_SI_TDT_PID</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>i_table_id</name> <operator>==</operator> <name>TS_SI_TDT_TABLE_ID</name> <operator>||</operator> <name>i_table_id</name> <operator>==</operator> <name>TS_SI_TOT_TABLE_ID</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>dvbpsi_tot_attach</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_table_id</name></expr></argument>, <argument><expr><name>i_extension</name></expr></argument>, <argument><expr><operator>(</operator><name>dvbpsi_tot_callback</name><operator>)</operator><name>TDTCallBack</name></expr></argument>, <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"SINewTableCallback: failed attaching TDTCallback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>==</operator> <name>TS_ARIB_CDT_PID</name> <operator>&amp;&amp;</operator> <name>i_table_id</name> <operator>==</operator> <name>TS_ARIB_CDT_TABLE_ID</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>dvbpsi_demuxGetSubDec</name><argument_list>( <argument><expr><operator>(</operator><name>dvbpsi_demux_t</name> <operator>*</operator><operator>)</operator> <name><name>h</name><operator>-&gt;</operator><name>p_decoder</name></name></expr></argument>, <argument><expr><name>i_table_id</name></expr></argument>, <argument><expr><name>i_extension</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ts_dvbpsi_AttachRawSubDecoder</name><argument_list>( <argument><expr><name>h</name></expr></argument>, <argument><expr><name>i_table_id</name></expr></argument>, <argument><expr><name>i_extension</name></expr></argument>, <argument><expr><name>ARIB_CDT_RawCallback</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"SINewTableCallback: failed attaching ARIB_CDT_RawCallback"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>ts_attach_SI_Tables_Decoders</name><parameter_list>( <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_SI</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>dvbpsi_decoder_present</name><argument_list>( <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name><operator>-&gt;</operator><name>handle</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>dvbpsi_AttachDemux</name><argument_list>( <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_si</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name>SINewTableCallBack</name></expr></argument>, <argument><expr><name>p_pid</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
