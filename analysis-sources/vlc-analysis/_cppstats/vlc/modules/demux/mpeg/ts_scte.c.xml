<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\ts_scte.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DVBPSI_DVBPSI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dvbpsi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/psi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_scte.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timestamps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>SCTE18_Section_Callback</name><parameter_list>( <parameter><decl><type><name>dvbpsi_t</name> <modifier>*</modifier></type><name>p_handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>dvbpsi_psi_section_t</name><modifier>*</modifier></type> <name>p_section</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_base_pid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator> <name><name>p_handle</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><operator>(</operator><name>ts_pid_t</name> <operator>*</operator><operator>)</operator> <name>p_base_pid</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_psip_t</name> <modifier>*</modifier></type><name>p_psip</name> <init>= <expr><name><name>p_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_psip</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_PSIP</name> <operator>||</operator> <operator>!</operator><name><name>p_psip</name><operator>-&gt;</operator><name>p_eas_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init> <condition><expr><name>p_section</name></expr>;</condition> <incr><expr><name>p_section</name> <operator>=</operator> <name><name>p_section</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_payload</name> <init>= <expr><name><name>p_section</name><operator>-&gt;</operator><name>p_payload_end</name></name> <operator>-</operator> <name><name>p_section</name><operator>-&gt;</operator><name>p_payload_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_priority</name> <init>= <expr><call><name>scte18_get_EAS_priority</name><argument_list>( <argument><expr><name><name>p_section</name><operator>-&gt;</operator><name>p_payload_start</name></name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Received EAS Alert with priority %d"</literal></expr></argument>, <argument><expr><name>i_priority</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_priority</name> <operator>!=</operator> <name>EAS_PRIORITY_HIGH</name> <operator>&amp;&amp;</operator> <name>i_priority</name> <operator>!=</operator> <name>EAS_PRIORITY_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>ts_es_t</name> <modifier>*</modifier></type><name>p_es</name> <init>= <expr><name><name>p_psip</name><operator>-&gt;</operator><name>p_eas_es</name></name></expr></init></decl>;</init> <condition><expr><name>p_es</name></expr>;</condition> <incr><expr><name>p_es</name> <operator>=</operator> <name><name>p_es</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_es</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>stime_t</name></type> <name>i_date</name> <init>= <expr><call><name>TimeStampWrapAround</name><argument_list>( <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_first</name></name></expr></argument>, <argument><expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_section</name><operator>-&gt;</operator><name>p_payload_end</name></name> <operator>-</operator> <name><name>p_section</name><operator>-&gt;</operator><name>p_payload_start</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_section</name><operator>-&gt;</operator><name>p_payload_start</name></name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>( <argument><expr><name>i_date</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>ES_OUT_SET_ES_STATE</name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>SCTE27_Section_Callback</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_sectiondata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_sectiondata</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_payloaddata</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_payloaddata</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_pes_cb_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_payloaddata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>i_payloaddata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_stream_t</name> <modifier>*</modifier></type><name>p_pes</name> <init>= <expr><operator>(</operator><name>ts_stream_t</name> <operator>*</operator><operator>)</operator> <name>p_pes_cb_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SCTE_27</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ts_pmt_t</name> <modifier>*</modifier></type><name>p_pmt</name> <init>= <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>p_program</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_date</name> <init>= <expr><name><name>p_pmt</name><operator>-&gt;</operator><name>pcr</name><operator>.</operator><name>i_current</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_content</name> <init>= <expr><call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_sectiondata</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_content</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_content</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>p_sectiondata</name></expr></argument>, <argument><expr><name>i_sectiondata</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_offset</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_content</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_index</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>p_content</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> 

<name><name>p_content</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_index</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_content</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;</operator> <name>i_offset</name> <operator>+</operator> <literal type="number">8</literal></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>is_immediate</name> <init>= <expr><name><name>p_content</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>is_immediate</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_display_in</name> <init>= <expr><call><name>GetDWBE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_content</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name>i_offset</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_display_in</name> <operator>&lt;</operator> <name>i_date</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_date</name> <operator>=</operator> <name>i_display_in</name> <operator>+</operator> <operator>(</operator><literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_date</name> <operator>=</operator> <name>i_display_in</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_content</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>p_content</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>FROM_SCALE</name><argument_list>(<argument><expr><name>i_date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_pes</name><operator>-&gt;</operator><name>p_es</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>p_content</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_content</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

</unit>
