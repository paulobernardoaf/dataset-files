<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\mpeg4_iod.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_bits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4_iod.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>od_debug</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>OD_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_GenericVa</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>VLC_MSG_DBG</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>ODDescriptorLength</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>*</operator><name>pi_data</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<do>do

<block>{<block_content>

<expr_stmt><expr><name>i_b</name> <operator>=</operator> <operator>*</operator><operator>*</operator><name>pp_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp_data</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_data</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <operator>(</operator> <name>i_len</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name>i_b</name><operator>&amp;</operator><literal type="number">0x7f</literal> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block> while<condition>( <expr><name>i_b</name><operator>&amp;</operator><literal type="number">0x80</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>pi_data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>i_len</name> <operator>&gt;</operator> <operator>*</operator><name>pi_data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <operator>*</operator><name>pi_data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>ODGetBytes</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>pi_data</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>bytes</name><operator>--</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>*</operator><operator>*</operator><name>pp_data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pp_data</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>pi_data</name><operator>)</operator><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>ODGetURL</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>len</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><name>pi_data</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <operator>*</operator><name>pi_data</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><name>pi_data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>strndup</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>*</operator><name>pp_data</name></expr></argument>, <argument><expr><name>len</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_data</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_data</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><name>url</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODTag_ObjectDescr</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODTag_InitialObjectDescr</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODTag_ESDescr</name></cpp:macro> <cpp:value>0x03</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODTag_DecConfigDescr</name></cpp:macro> <cpp:value>0x04</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODTag_DecSpecificDescr</name></cpp:macro> <cpp:value>0x05</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODTag_SLDescr</name></cpp:macro> <cpp:value>0x06</cpp:value></cpp:define>

<typedef>typedef <type><union>union

<block>{

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_od</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_ods</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_mpeg4_descriptor_t</name> <modifier>*</modifier></type><name>es_descr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>decoder_config_descriptor_t</name> <modifier>*</modifier></type><name>p_dec_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>sl_config_descriptor_t</name> <modifier>*</modifier></type><name>sl_descr</name></decl>;</decl_stmt>

}</block></union></type> <name>od_read_params_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name>OD_Desc_Read</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type></decl></parameter>, <parameter><decl><type><name>od_read_params_t</name></type> <name>params</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_Predefined_Custom</name></cpp:macro> <cpp:value>0x00</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_Predefined_NULL</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_Predefined_MP4</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>OD_SLDesc_Read</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,

<parameter><decl><type><name>od_read_params_t</name></type> <name>params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sl_config_descriptor_t</name> <modifier>*</modifier></type><name>sl_descr</name> <init>= <expr><name><name>params</name><operator>.</operator><name>sl_descr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_predefined</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_predefined</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>SL_Predefined_Custom</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">15</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_timestamp_resolution</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_OCR_resolution</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_timestamp_length</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_OCR_length</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_AU_length</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_instant_bitrate_length</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i16</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_degradation_priority_length</name></name> <operator>=</operator> <name>i16</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_AU_seqnum_length</name></name> <operator>=</operator> <operator>(</operator><name>i16</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_packet_seqnum_length</name></name> <operator>=</operator> <operator>(</operator><name>i16</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SL_Predefined_NULL</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>sl_descr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sl_descr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_timestamp_resolution</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_timestamp_length</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SL_Predefined_MP4</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>sl_descr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sl_descr</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <name>USE_TIMESTAMPS_FLAG</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>USE_DURATION_FLAG</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_timescale</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_accessunit_duration</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_compositionunit_duration</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name><name>sl_descr</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>USE_TIMESTAMPS_FLAG</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_startdecoding_timestamp</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_timestamp_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_startcomposition_timestamp</name></name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>sl_descr</name><operator>-&gt;</operator><name>i_timestamp_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * read sl desc predefined: 0x%x"</literal></expr></argument>, <argument><expr><name>i_predefined</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>OD_DecSpecificDesc_Read</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,

<parameter><decl><type><name>od_read_params_t</name></type> <name>params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>decoder_config_descriptor_t</name> <modifier>*</modifier></type><name>p_dec_config</name> <init>= <expr><name><name>params</name><operator>.</operator><name>p_dec_config</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>p_extra</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>i_extra</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>p_extra</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>p_dec_config</name><operator>-&gt;</operator><name>i_extra</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>OD_DecConfigDesc_Read</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,

<parameter><decl><type><name>od_read_params_t</name></type> <name>params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>decoder_config_descriptor_t</name> <modifier>*</modifier></type><name>p_dec_config</name> <init>= <expr><name><name>params</name><operator>.</operator><name>p_dec_config</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">13</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>i_objectTypeIndication</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_flags</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>i_streamType</name></name> <operator>=</operator> <name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>OD_Desc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>,

<argument><expr><name>ODTag_DecSpecificDescr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * read decoder objecttype: %x streamtype:%x extra: %u"</literal></expr></argument>,

<argument><expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>i_objectTypeIndication</name></name></expr></argument>, <argument><expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>i_streamType</name></name></expr></argument>, <argument><expr><name><name>p_dec_config</name><operator>-&gt;</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>OD_ESDesc_Read</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,

<parameter><decl><type><name>od_read_params_t</name></type> <name>params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>es_mpeg4_descriptor_t</name> <modifier>*</modifier></type><name>es_descr</name> <init>= <expr><name><name>params</name><operator>.</operator><name>es_descr</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>es_descr</name><operator>-&gt;</operator><name>i_es_id</name></name> <operator>=</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_flags</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>es_descr</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>ODGetURL</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * read ES Descriptor for es id %"</literal><name>PRIx16</name></expr></argument>, <argument><expr><name><name>es_descr</name><operator>-&gt;</operator><name>i_es_id</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>p_dec_config</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>es_descr</name><operator>-&gt;</operator><name>dec_descr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><literal type="number">1</literal> <operator>!=</operator> <call><name>OD_Desc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>,

<argument><expr><name>ODTag_DecConfigDescr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>sl_descr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>es_descr</name><operator>-&gt;</operator><name>sl_descr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>OD_Desc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><name>ODTag_SLDescr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>es_descr</name><operator>-&gt;</operator><name>b_ok</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>OD_InitialObjectDesc_Read</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>od_read_params_t</name></type> <name>params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_iod</name> <init>= <expr><name><name>params</name><operator>.</operator><name>p_od</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_iod</name><operator>-&gt;</operator><name>i_ID</name></name> <operator>=</operator> <operator>(</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_flags</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_iod</name><operator>-&gt;</operator><name>i_ID</name></name> <operator>|=</operator> <name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * ObjectDescriptorID: %"</literal><name>PRIu16</name></expr></argument>, <argument><expr><name><name>p_iod</name><operator>-&gt;</operator><name>i_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * includeInlineProfileLevel flag: 0x%"</literal><name>PRIx8</name></expr></argument>, <argument><expr><operator>(</operator> <name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x01</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_iod</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>ODGetURL</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * URL: %s"</literal></expr></argument>, <argument><expr><name><name>p_iod</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_desc_count</name> <init>= <expr><call><name>OD_Desc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>,

<argument><expr><name>ODTag_ESDescr</name></expr></argument>, <argument><expr><name>ES_DESCRIPTOR_COUNT</name></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_desc_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * missing ES Descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ODObjectDescriptorRead</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,

<parameter><decl><type><name>od_read_params_t</name></type> <name>params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_iod</name> <init>= <expr><name><name>params</name><operator>.</operator><name>p_od</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_iod</name><operator>-&gt;</operator><name>i_ID</name></name> <operator>=</operator> <operator>(</operator> <call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal> <operator>)</operator></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_flags</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_iod</name><operator>-&gt;</operator><name>i_ID</name></name> <operator>|=</operator> <name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * ObjectDescriptorID: %"</literal><name>PRIu16</name></expr></argument>, <argument><expr><name><name>p_iod</name><operator>-&gt;</operator><name>i_ID</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name>i_flags</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_iod</name><operator>-&gt;</operator><name>psz_url</name></name> <operator>=</operator> <call><name>ODGetURL</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * URL: %s"</literal></expr></argument>, <argument><expr><name><name>p_iod</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_desc_count</name> <init>= <expr><call><name>OD_Desc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>,

<argument><expr><name>ODTag_ESDescr</name></expr></argument>, <argument><expr><name>ES_DESCRIPTOR_COUNT</name></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_desc_count</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * missing ES Descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>OD_Desc_Read</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>pi_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_target_tag</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_max_desc</name></decl></parameter>, <parameter><decl><type><name>od_read_params_t</name></type> <name>params</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_read_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>*</operator><name>pi_data</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>i_max_desc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_tag</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><name>pi_data</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_length</name> <init>= <expr><call><name>ODDescriptorLength</name><argument_list>( <argument><expr><name>pi_data</name></expr></argument>, <argument><expr><name>pp_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_target_tag</name> <operator>!=</operator> <name>i_tag</name> <operator>||</operator> <name>i_length</name> <operator>&gt;</operator> <operator>*</operator><name>pi_data</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_descriptor_data</name> <init>= <expr><name>i_length</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_descriptor_data</name> <init>= <expr><operator>*</operator><name>pp_data</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" Reading descriptor 0x%"</literal><name>PRIx8</name><literal type="string">": found tag 0x%"</literal><name>PRIx8</name><literal type="string">" left %d"</literal></expr></argument>,

<argument><expr><name>i_target_tag</name></expr></argument>, <argument><expr><name>i_tag</name></expr></argument>, <argument><expr><operator>*</operator><name>pi_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_tag</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ODTag_ObjectDescr</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_od</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>od_descriptor_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_od</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>od_read_params_t</name></type> <name>childparams</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>childparams</name><operator>.</operator><name>p_od</name></name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>pp_ods</name><index>[<expr><name>i_read_count</name></expr>]</index></name> <operator>=</operator> <name>p_od</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>ODObjectDescriptorRead</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>i_descriptor_data</name></expr></argument>,

<argument><expr><name>p_descriptor_data</name></expr></argument>, <argument><expr><name>childparams</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content/>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ODTag_InitialObjectDescr</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_iod</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>od_descriptor_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_iod</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>od_read_params_t</name></type> <name>childparams</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>childparams</name><operator>.</operator><name>p_od</name></name> <operator>=</operator> <name><name>params</name><operator>.</operator><name>pp_ods</name><index>[<expr><name>i_read_count</name></expr>]</index></name> <operator>=</operator> <name>p_iod</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>OD_InitialObjectDesc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>i_descriptor_data</name></expr></argument>,

<argument><expr><name>p_descriptor_data</name></expr></argument>, <argument><expr><name>childparams</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content/>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ODTag_ESDescr</name></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_iod</name> <init>= <expr><name><name>params</name><operator>.</operator><name>p_od</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>od_read_params_t</name></type> <name>childparams</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>childparams</name><operator>.</operator><name>es_descr</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>p_iod</name><operator>-&gt;</operator><name>es_descr</name><index>[<expr><name>i_read_count</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>OD_ESDesc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>i_descriptor_data</name></expr></argument>,

<argument><expr><name>p_descriptor_data</name></expr></argument>, <argument><expr><name>childparams</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content/>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ODTag_DecConfigDescr</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>OD_DecConfigDesc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>i_descriptor_data</name></expr></argument>,

<argument><expr><name>p_descriptor_data</name></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content/>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ODTag_DecSpecificDescr</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>OD_DecSpecificDesc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>i_descriptor_data</name></expr></argument>,

<argument><expr><name>p_descriptor_data</name></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content/>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>ODTag_SLDescr</name></expr>:</case>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><operator>!</operator><call><name>OD_SLDesc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>i_descriptor_data</name></expr></argument>,

<argument><expr><name>p_descriptor_data</name></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content/>}</block></if></if_stmt><empty_stmt>;</empty_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">"trying to read unsupported descriptor"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>pp_data</name> <operator>+=</operator> <name>i_length</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_data</name> <operator>-=</operator> <name>i_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>i_read_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint8_t</name></type> <name>ODInit</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_start_tag</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_min</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>i_max</name></decl></parameter>, <parameter><decl><type><name>od_descriptor_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_ods</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>od_read_params_t</name></type> <name>params</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>pp_ods</name></name> <operator>=</operator> <name>pp_ods</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_read</name> <init>= <expr><call><name>OD_Desc_Read</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><name>i_start_tag</name></expr></argument>, <argument><expr><name>i_max</name></expr></argument>, <argument><expr><name>params</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_read</name> <operator>&lt;</operator> <name>i_min</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" cannot read first tag 0x%"</literal><name>PRIx8</name></expr></argument>, <argument><expr><name>i_start_tag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_read</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>IODNew</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_iod_scope</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_iod_label</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_iod_label</name> <operator>==</operator> <literal type="number">0x02</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i_iod_label</name> <operator>=</operator> <name>i_iod_scope</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_iod_scope</name> <operator>=</operator> <literal type="number">0x10</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>i_data</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>p_data</name><operator>--</operator></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * iod label:0x%"</literal><name>PRIx8</name><literal type="string">" scope:0x%"</literal><name>PRIx8</name></expr></argument>,

<argument><expr><name>i_iod_label</name></expr></argument>, <argument><expr><name>i_iod_scope</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_iod_scope</name> <operator>!=</operator> <literal type="number">0x10</literal> <operator>&amp;&amp;</operator> <name>i_iod_scope</name> <operator>!=</operator> <literal type="number">0x11</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">" * can't handle reserved scope 0x%"</literal><name>PRIx8</name></expr></argument>, <argument><expr><name>i_iod_scope</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type> <name><name>ods</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_count</name> <init>= <expr><call><name>ODInit</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>ODTag_InitialObjectDescr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ods</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_count</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ODFree</name><argument_list>( <argument><expr><name><name>ods</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>ods</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ODFree</name><parameter_list>( <parameter><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_iod</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_iod</name><operator>-&gt;</operator><name>psz_url</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_iod</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_iod</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>es_descr</name></cpp:macro> <cpp:value>p_iod-&gt;es_descr[i]</cpp:value></cpp:define>

<if_stmt><if>if<condition>( <expr><name><name>es_descr</name><operator>.</operator><name>b_ok</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>es_descr</name><operator>.</operator><name>psz_url</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>es_descr</name><operator>.</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>es_descr</name><operator>.</operator><name>dec_descr</name><operator>.</operator><name>p_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>es_descr</name></cpp:undef>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_iod</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>sl_header_data</name></type> <name>DecodeSLHeader</name><parameter_list>( <parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>sl_config_descriptor_t</name> <modifier>*</modifier></type><name>sl</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>sl_header_data</name></type> <name>ret</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_ocr</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_idle</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_padding</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_padding</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>USE_ACCESS_UNIT_START_FLAG</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>b_au_start</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>USE_ACCESS_UNIT_END_FLAG</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>b_au_end</name></name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_OCR_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_has_ocr</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>USE_IDLE_FLAG</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_is_idle</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>USE_PADDING_FLAG</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_has_padding</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>ret</name><operator>.</operator><name>b_au_end</name></name> <operator>==</operator> <name><name>ret</name><operator>.</operator><name>b_au_start</name></name> <operator>&amp;&amp;</operator> <name><name>ret</name><operator>.</operator><name>b_au_start</name></name> <operator>==</operator> <name>false</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>b_au_end</name></name> <operator>=</operator> <name><name>ret</name><operator>.</operator><name>b_au_start</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_has_padding</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_padding</name> <operator>=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_is_idle</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>!</operator><name>b_has_padding</name> <operator>||</operator> <operator>!</operator><name>i_padding</name> <operator>)</operator></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_dts</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_cts</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_has_instant_bitrate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>p_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>p_t</name></decl>;</decl_stmt>

}</block> <decl>const <name><name>timestamps</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><operator>&amp;</operator><name>b_has_dts</name></expr>, <expr><operator>&amp;</operator><name><name>ret</name><operator>.</operator><name>i_dts</name></name></expr> }</block></expr>, <expr><block>{ <expr><operator>&amp;</operator><name>b_has_cts</name></expr>, <expr><operator>&amp;</operator><name><name>ret</name><operator>.</operator><name>i_pts</name></name></expr> }</block></expr> }</block></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>i_packet_seqnum_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_degradation_priority_length</name></name> <operator>&amp;&amp;</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>i_degradation_priority_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_has_ocr</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>i_OCR_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>ret</name><operator>.</operator><name>b_au_start</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>USE_RANDOM_ACCESS_POINT_FLAG</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>i_AU_seqnum_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>&amp;</operator> <name>USE_TIMESTAMPS_FLAG</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_has_dts</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_has_cts</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_instant_bitrate_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_has_instant_bitrate</name> <operator>=</operator> <call><name>bs_read1</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><operator>(</operator><name><name>timestamps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_b</name><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_read</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><call><name>__MIN</name><argument_list>( <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>i_timestamp_length</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_timestamp_length</name></name> <operator>&gt;</operator> <literal type="number">32</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_bits</name> <init>= <expr><call><name>__MAX</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>i_timestamp_length</name></name> <operator>-</operator> <literal type="number">32</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_read</name> <operator>=</operator> <name>i_read</name> <operator>&lt;&lt;</operator> <name>i_bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read</name> <operator>|=</operator> <call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>i_bits</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>sl</name><operator>-&gt;</operator><name>i_timestamp_resolution</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name><name>timestamps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_t</name><operator>)</operator> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator>

<call><name>vlc_tick_from_samples</name><argument_list>(<argument><expr><name>i_read</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>i_timestamp_resolution</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>i_AU_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_has_instant_bitrate</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>i_instant_bitrate_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>b_has_padding</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>i_padding</name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ret</name><operator>.</operator><name>i_size</name></name> <operator>=</operator> <operator>(</operator><call><name>bs_pos</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODTag_ObjectDescrUpdate</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODTag_ObjectDescrRemove</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ObjectDescrUpdateCommandRead</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>od_descriptors_t</name> <modifier>*</modifier></type><name>p_ods</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name><name>p_odsread</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_count</name> <init>= <expr><call><name>ODInit</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>ODTag_ObjectDescr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>p_odsread</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>i_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>od_descriptor_t</name> <modifier>*</modifier></type><name>p_od</name> <init>= <expr><name><name>p_odsread</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ARRAY_BSEARCH</name><argument_list>( <argument><expr><name><name>p_ods</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><operator>-&gt;</operator><name>i_ID</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>p_od</name><operator>-&gt;</operator><name>i_ID</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_pos</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ODFree</name><argument_list>( <argument><expr><name><name>p_ods</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i_pos</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ods</name><operator>-&gt;</operator><name>objects</name><operator>.</operator><name>p_elems</name><index>[<expr><name>i_pos</name></expr>]</index></name> <operator>=</operator> <name>p_od</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>ARRAY_APPEND</name><argument_list>( <argument><expr><name><name>p_ods</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><name>p_od</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ObjectDescrRemoveCommandRead</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>od_descriptors_t</name> <modifier>*</modifier></type><name>p_ods</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>bs_t</name></type> <name>s</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bs_init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <operator>(</operator><name>i_data</name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <literal type="number">10</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_id</name> <init>= <expr><call><name>bs_read</name><argument_list>( <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ARRAY_BSEARCH</name><argument_list>( <argument><expr><name><name>p_ods</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><operator>-&gt;</operator><name>i_ID</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>i_id</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pos</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ARRAY_REMOVE</name><argument_list>( <argument><expr><name><name>p_ods</name><operator>-&gt;</operator><name>objects</name></name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>DecodeODCommand</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_object</name></decl></parameter>, <parameter><decl><type><name>od_descriptors_t</name> <modifier>*</modifier></type><name>p_ods</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<while>while<condition>( <expr><name>i_data</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_tag</name> <init>= <expr><call><name>ODGetBytes</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_length</name> <init>= <expr><call><name>ODDescriptorLength</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>i_length</name> <operator>||</operator> <name>i_length</name> <operator>&gt;</operator> <name>i_data</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>od_debug</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><literal type="string">"Decode tag 0x%x length %d"</literal></expr></argument>, <argument><expr><name>i_tag</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name>i_tag</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>ODTag_ObjectDescrUpdate</name></expr>:</case>

<expr_stmt><expr><call><name>ObjectDescrUpdateCommandRead</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>p_ods</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ODTag_ObjectDescrRemove</name></expr>:</case>

<expr_stmt><expr><call><name>ObjectDescrRemoveCommandRead</name><argument_list>( <argument><expr><name>p_object</name></expr></argument>, <argument><expr><name>p_ods</name></expr></argument>, <argument><expr><name>i_length</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_length</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

</unit>
