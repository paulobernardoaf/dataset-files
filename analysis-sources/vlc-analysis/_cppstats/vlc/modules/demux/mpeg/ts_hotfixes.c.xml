<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mpeg\ts_hotfixes.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_DVBPSI_DVBPSI_H_</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/dvbpsi.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/descriptor.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dvbpsi/pmt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../mux/mpeg/streams.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../mux/mpeg/tsutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../mux/mpeg/tables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timestamps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_psi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_pid.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_streams_private.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ts_hotfixes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ProbePES</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pesstart</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_adaptfield</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_pes</name> <init>= <expr><name>p_pesstart</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_adaptfield</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>len</name> <init>= <expr><operator>*</operator><name>p_pes</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_pes</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_pes</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name>i_data</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>len</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>len</name> <operator>&gt;=</operator> <literal type="number">7</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_pes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_pcr_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_pes</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">9</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_pes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_pes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_pesextoffset</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stime_t</name></type> <name>i_dts</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i_pesextoffset</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>i_pesextoffset</name> <operator>||</operator>

<operator>!</operator><call><name>ExtractPESTimestamp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pes</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_pes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i_pesextoffset</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>i_pesextoffset</name> <operator>||</operator>

<operator>!</operator><call><name>ExtractPESTimestamp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_pes</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x01</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dts</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_pesextoffset</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_pesextoffset</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x08</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_pesextoffset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x04</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_pesextoffset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x02</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_pesextoffset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>i_pesextoffset</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_payloadoffset</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_pes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_pesextoffset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>i_pesextoffset</name> <operator>||</operator> <name>i_data</name> <operator>&lt;</operator> <name>i_payloadoffset</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>p_pes</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_pes</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_extension2_offset</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_pes</name><index>[<expr><name>i_pesextoffset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_extension2_offset</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_pes</name><index>[<expr><name>i_pesextoffset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_extension2_offset</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_pes</name><index>[<expr><name>i_pesextoffset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_extension2_offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_pes</name><index>[<expr><name>i_pesextoffset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_extension2_offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_pes</name><index>[<expr><name>i_pesextoffset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_len</name> <init>= <expr><name><name>p_pes</name><index>[<expr><name>i_pesextoffset</name> <operator>+</operator> <name>i_extension2_offset</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_extension2_offset</name> <operator>+=</operator> <name>i_len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>i_extension2_offset</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_extension2_offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>&amp;</operator><name><name>p_pes</name><index>[<expr><name>i_payloadoffset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>i_stream_id</name> <init>= <expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_stream_id</name></name> <operator>=</operator> <name><name>p_pes</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>i_stream_id</name> <operator>==</operator> <literal type="number">0xBD</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="string">"\x7F\xFE\x80\x01"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name> <operator>=</operator> <name>VLC_CODEC_DTS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="string">"\x0B\x77"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name> <operator>=</operator> <name>VLC_CODEC_EAC3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>(<expr><name>i_stream_id</name> <operator>&gt;=</operator> <literal type="number">0xC0</literal> <operator>&amp;&amp;</operator> <name>i_stream_id</name> <operator>&lt;=</operator> <literal type="number">0xDF</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>AUDIO_ES</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xE0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xE0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0C</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x04</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>==</operator> <literal type="number">0x00</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name> <operator>=</operator> <name>VLC_CODEC_MPGA</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0xFF</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name> <operator>=</operator> <name>VLC_CODEC_MP4A</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'A'</literal></expr></argument>,<argument><expr><literal type="char">'D'</literal></expr></argument>,<argument><expr><literal type="char">'T'</literal></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_stream_id</name> <operator>&gt;=</operator> <literal type="number">0xE0</literal> <operator>&amp;&amp;</operator> <name>i_stream_id</name> <operator>&lt;=</operator> <literal type="number">0xEF</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_cat</name></name> <operator>=</operator> <name>VIDEO_ES</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="string">"\x00\x00\x00\x01"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name> <operator>=</operator> <name>VLC_CODEC_H264</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><literal type="string">"\x00\x00\x01"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name> <operator>=</operator> <name>VLC_CODEC_MPGV</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>i_timesourcepid</name></name> <operator>&amp;&amp;</operator> <name>i_dts</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>i_first_dts</name></name> <operator>=</operator> <name>i_dts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>i_timesourcepid</name></name> <operator>=</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>i_timesourcepid</name></name> <operator>==</operator> <name><name>pid</name><operator>-&gt;</operator><name>i_pid</name></name> <operator>&amp;&amp;</operator> <name>i_dts</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>status</name></name> <operator>==</operator> <name>PAT_WAITING</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_dts</name> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>i_first_dts</name></name> <operator>&gt;</operator> <call><name>TO_SCALE</name><argument_list>(<argument><expr><name>MIN_PAT_INTERVAL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>patfix</name><operator>.</operator><name>status</name></name> <operator>=</operator> <name>PAT_MISSING</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BuildPATCallback</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>pat_pid</name> <init>= <expr><operator>(</operator><name>ts_pid_t</name> <operator>*</operator><operator>)</operator> <name>p_opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>dvbpsi_packet_push</name><argument_list>( <argument><expr><name><name>pat_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pat</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>BuildPMTCallback</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p_opaque</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>program_pid</name> <init>= <expr><operator>(</operator><name>ts_pid_t</name> <operator>*</operator><operator>)</operator> <name>p_opaque</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>program_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TYPE_PMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>dvbpsi_packet_push</name><argument_list>( <argument><expr><name><name>program_pid</name><operator>-&gt;</operator><name>u</name><operator>.</operator><name>p_pmt</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,

<argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_next</name> <init>= <expr><name><name>p_block</name><operator>-&gt;</operator><name>p_next</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_block</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>MissingPATPMTFixup</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_program_number</name> <init>= <expr><literal type="number">1234</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_program_pid</name> <init>= <expr><literal type="number">1337</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_pcr_pid</name> <init>= <expr><literal type="number">0x1FFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_num_pes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_t</name> <modifier>*</modifier></type><name>p_program_pid</name> <init>= <expr><call><name>GetPID</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_program_pid</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>SEEN</name><argument_list>(<argument><expr><name>p_program_pid</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i_program_pid</name> <operator>=</operator> <name>MIN_ES_PID</name></expr>;</init>

<condition><expr><name>i_program_pid</name> <operator>&lt;=</operator> <name>MAX_ES_PID</name> <operator>&amp;&amp;</operator> <call><name>SEEN</name><argument_list>(<argument><expr><name>p_program_pid</name></expr></argument>)</argument_list></call></expr>;</condition>

<incr><expr><name>i_program_pid</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_program_pid</name> <operator>=</operator> <call><name>GetPID</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><name>i_program_pid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ts_pid_t</name> <modifier>*</modifier></type><name>p_pid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ts_pid_next_context_t</name></type> <name>pidnextctx</name> <init>= <expr><name>ts_pid_NextContextInitValue</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator><name>p_pid</name> <operator>=</operator> <call><name>ts_pid_Next</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pids</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pidnextctx</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SEEN</name><argument_list>(<argument><expr><name>p_pid</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_pcr_pid</name> <operator>==</operator> <literal type="number">0x1FFF</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name> <operator>||</operator>

<name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_pcr_count</name></name> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_pcr_pid</name> <operator>=</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_num_pes</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name>i_num_pes</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>tsmux_stream_t</name></type> <name>patstream</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>i_pid</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>i_continuity_counter</name> <operator>=</operator> <literal type="number">0x10</literal></expr>,

<expr><operator>.</operator><name>b_discontinuity</name> <operator>=</operator> <name>false</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tsmux_stream_t</name></type> <name>pmtprogramstream</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>i_pid</name> <operator>=</operator> <name>i_program_pid</name></expr>,

<expr><operator>.</operator><name>i_continuity_counter</name> <operator>=</operator> <literal type="number">0x0</literal></expr>,

<expr><operator>.</operator><name>b_discontinuity</name> <operator>=</operator> <name>false</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>BuildPAT</name><argument_list>( <argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pids</name><operator>.</operator><name>pat</name></name></expr></argument>, <argument><expr><name>BuildPATCallback</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>patstream</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmtprogramstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_program_number</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_program_pid</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>TYPE_PMT</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"PAT creation failed"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ts_mux_standard</name></type> <name>mux_standard</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>standard</name></name> <operator>==</operator> <name>TS_STANDARD_ATSC</name><operator>)</operator></expr> ?</condition><then> <expr><name>TS_MUX_STANDARD_ATSC</name></expr>

</then><else>: <expr><name>TS_MUX_STANDARD_DVB</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<struct>struct <name>esstreams_t</name>

<block>{

<decl_stmt><decl><type><name>pesmux_stream_t</name></type> <name>pes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tsmux_stream_t</name></type> <name>ts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>esstreams_t</name></name> <modifier>*</modifier></type><name>esstreams</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name>i_num_pes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>esstreams_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pes_mapped_stream_t</name> <modifier>*</modifier></type><name>mapped</name> <init>= <expr><call><name>calloc</name><argument_list>( <argument><expr><name>i_num_pes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pes_mapped_stream_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>esstreams</name> <operator>&amp;&amp;</operator> <name>mapped</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pids</name><operator>.</operator><name>i_all</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_pid</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>pids</name><operator>.</operator><name>pp_all</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>SEEN</name><argument_list>(<argument><expr><name>p_pid</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>, <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_cat</name></name></expr></argument>, <argument><expr><name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_fourcc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>fmt</name><operator>.</operator><name>i_original_fourcc</name></name> <operator>=</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_original_fourcc</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>VLC_SUCCESS</name> <operator>!=</operator>

<call><name>FillPMTESParams</name><argument_list>(<argument><expr><name>mux_standard</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pes</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>pes</name><operator>.</operator><name>i_stream_id</name></name> <operator>=</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>probed</name><operator>.</operator><name>i_stream_id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>ts</name><operator>.</operator><name>i_pid</name></name> <operator>=</operator> <name><name>p_pid</name><operator>-&gt;</operator><name>i_pid</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapped</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pes</name> <operator>=</operator> <operator>&amp;</operator><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>pes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapped</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ts</name> <operator>=</operator> <operator>&amp;</operator><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ts</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mapped</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fmt</name> <operator>=</operator> <operator>&amp;</operator><name><name>esstreams</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>BuildPMT</name><argument_list>( <argument><expr><call><name>GetPID</name><argument_list>(<argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>u</name><operator>.</operator><name>p_pat</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>, <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>mux_standard</name></expr></argument>,

<argument><expr><name>p_program_pid</name></expr></argument>, <argument><expr><name>BuildPMTCallback</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>i_pcr_pid</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pmtprogramstream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_program_number</name></expr></argument>,

<argument><expr><name>j</name></expr></argument>, <argument><expr><name>mapped</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>j</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>esstreams</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>esstreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mapped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
