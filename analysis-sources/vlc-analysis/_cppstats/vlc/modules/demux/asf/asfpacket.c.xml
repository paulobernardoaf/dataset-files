<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\asf\asfpacket.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asfpacket.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>asf_packet_t</name>

<block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>property</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>padding_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>send_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>multiple</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>length_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_skip</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>left</name></decl>;</decl_stmt>

}</block></struct></type> <name>asf_packet_t</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>GetValue2b</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>var</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>skip</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>bits</name><operator>&amp;</operator><literal type="number">0x03</literal></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <name><name>p</name><index>[<expr><operator>*</operator><name>skip</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>skip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <call><name>GetWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><operator>*</operator><name>skip</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>skip</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>var</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><operator>*</operator><name>skip</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>skip</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>SkipBytes</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_bytes</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_read</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_bytes</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>i_read</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <name>i_read</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxSubPayload</name><parameter_list>( <parameter><decl><type><name>asf_packet_sys_t</name> <modifier>*</modifier></type><name>p_packetsys</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name></type> <name>i_stream_number</name></decl></parameter>, <parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_frame</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>i_sub_payload_data_length</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_pts</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>i_dts</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>i_media_object_offset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_keyframe</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_ignore_pts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>pp_frame</name> <operator>&amp;&amp;</operator> <name>i_media_object_offset</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_send</name></name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name>i_stream_number</name></expr></argument>, <argument><expr><name>pp_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frag</name> <init>= <expr><call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_sub_payload_data_length</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_frag</name> <operator>==</operator> <name>NULL</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>p_demux</name></name></expr></argument>, <argument><expr><literal type="string">"cannot read data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b_ignore_pts</name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_TICK_INVALID</name></expr> </then><else>: <expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_pts</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name>i_dts</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>b_keyframe</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_frag</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>|=</operator> <name>BLOCK_FLAG_TYPE_I</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>block_ChainAppend</name><argument_list>( <argument><expr><name>pp_frame</name></expr></argument>, <argument><expr><name>p_frag</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ParsePayloadExtensions</name><parameter_list>( <parameter><decl><type><name>asf_packet_sys_t</name> <modifier>*</modifier></type><name>p_packetsys</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>asf_track_info_t</name> <modifier>*</modifier></type><name>p_tkinfo</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_data</name></decl></parameter>,

<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>b_keyframe</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_tkinfo</name> <operator>||</operator> <operator>!</operator><name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_esp</name></name> <operator>||</operator> <operator>!</operator><name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_esp</name><operator>-&gt;</operator><name>p_ext</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_payload_extensions_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>asf_payload_extension_system_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_esp</name><operator>-&gt;</operator><name>i_payload_extension_system_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>p_ext</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_esp</name><operator>-&gt;</operator><name>p_ext</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr> )</condition> 

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_payload_extensions_size</name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_payload_extensions_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_payload_extensions_size</name> <operator>=</operator> <name><name>p_ext</name><operator>-&gt;</operator><name>i_data_size</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_data</name> <operator>&lt;</operator> <name>i_payload_extensions_size</name></expr> )</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>i_extension_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mfasf_sampleextension_outputcleanpoint_guid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_payload_extensions_size</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>sizeerror</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>b_keyframe</name> <operator>|=</operator> <operator>*</operator><name>p_data</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>i_extension_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_dvr_sampleextension_videoframe_guid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_payload_extensions_size</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>sizeerror</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_val</name> <init>= <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>b_keyframe</name> <operator>=</operator> <name>i_val</name> <operator>&amp;</operator> <name>ASF_EXTENSION_VIDEOFRAME_NEWFRAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>b_keyframe</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>b_keyframe</name> <operator>|=</operator> <operator>(</operator> <operator>(</operator> <name>i_val</name> <operator>&amp;</operator> <name>ASF_EXTENSION_VIDEOFRAME_TYPE_MASK</name> <operator>)</operator>

<operator>==</operator> <name>ASF_EXTENSION_VIDEOFRAME_IFRAME</name> <operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>i_extension_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mfasf_sampleextension_pixelaspectratio_guid</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_setaspectratio</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_payload_extensions_size</name> <operator>!=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>sizeerror</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_setaspectratio</name></name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_sp</name><operator>-&gt;</operator><name>i_stream_number</name></name></expr></argument>,

<argument><expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>i_extension_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_dvr_sampleextension_timing_rep_data_guid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name>i_payload_extensions_size</name> <operator>!=</operator> <literal type="number">48</literal></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>sizeerror</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

else

{

msg_Dbg( p_demux, "Unknown extension " GUID_FMT, GUID_PRINT( p_ext-&gt;i_extension_id ) );

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_data</name> <operator>-=</operator> <name>i_payload_extensions_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_payload_extensions_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return;</return>

<label><name>sizeerror</name>:</label>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unknown extension "</literal> <name>GUID_FMT</name> <literal type="string">" data size of %u"</literal></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_extension_id</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>i_payload_extensions_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>DemuxPayload</name><parameter_list>(<parameter><decl><type><name>asf_packet_sys_t</name> <modifier>*</modifier></type><name>p_packetsys</name></decl></parameter>, <parameter><decl><type><name>asf_packet_t</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_payload</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_payload</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>&gt;=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>left</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_packet_keyframe</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_stream_number</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name><operator>++</operator></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_media_object_number</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetValue2b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_media_object_number</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>property</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_media_object_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetValue2b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_media_object_offset</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>property</name></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_replicated_data_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetValue2b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_replicated_data_length</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>property</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pkt_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pkt_time_delta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_payload_data_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_temp_payload_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name><name>p_packetsys</name><operator>-&gt;</operator><name>pi_preroll</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><operator>*</operator><name><name>p_packetsys</name><operator>-&gt;</operator><name>pi_preroll</name></name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name><name>p_packetsys</name><operator>-&gt;</operator><name>pi_preroll_start</name></name> <operator>==</operator> <name>ASFPACKET_PREROLL_FROM_CURRENT</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>p_packetsys</name><operator>-&gt;</operator><name>pi_preroll_start</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>send_time</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>asf_track_info_t</name> <modifier>*</modifier></type><name>p_tkinfo</name> <init>= <expr><call><name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_gettrackinfo</name></name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name>i_stream_number</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name>p_tkinfo</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_ignore_pts</name> <init>= <expr><operator>(</operator><name><name>p_tkinfo</name><operator>-&gt;</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name><operator>)</operator></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>&lt;</operator> <name>i_replicated_data_length</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_replicated_data_length</name> <operator>&gt;</operator> <literal type="number">7</literal></expr> )</condition> 

<block>{<block_content>

<expr_stmt><expr><name>i_pkt_time</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name></name> <operator>+</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ParsePayloadExtensions</name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name>p_tkinfo</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>i_replicated_data_length</name> <operator>-</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>b_packet_keyframe</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pkt_time</name> <operator>-=</operator> <operator>*</operator><name><name>p_packetsys</name><operator>-&gt;</operator><name>pi_preroll</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>+=</operator> <name>i_replicated_data_length</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>( <expr><name>i_replicated_data_length</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_pkt_time</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>send_time</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_replicated_data_length</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_pkt_time_delta</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>b_ignore_pts</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pkt_time</name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>i_media_object_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pkt_time</name> <operator>-=</operator> <operator>*</operator><name><name>p_packetsys</name><operator>-&gt;</operator><name>pi_preroll</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i_media_object_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid replicated data length detected."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>padding_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_payload_data_length</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>padding_length</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr>;</expr_stmt>

<goto>goto <name>skip</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>||</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>&gt;=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>left</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_preroll_done</name> <init>= <expr><operator>(</operator> <name><name>pkt</name><operator>-&gt;</operator><name>send_time</name></name> <operator>&gt;</operator> <operator>(</operator><operator>*</operator><name><name>p_packetsys</name><operator>-&gt;</operator><name>pi_preroll_start</name></name> <operator>+</operator> <operator>*</operator><name><name>p_packetsys</name><operator>-&gt;</operator><name>pi_preroll</name></name><operator>)</operator> <operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i_pkt_time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>i_pkt_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>-&gt;</operator><name>multiple</name></name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>GetValue2b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_temp_payload_length</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>length_type</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>padding_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_temp_payload_length</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>padding_length</name></name> <operator>-</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>i_payload_data_length</name> <operator>=</operator> <name>i_temp_payload_length</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">"payload(%d) stream_number:%"</literal><name>PRIu8</name><literal type="string">" media_object_number:%d media_object_offset:%"</literal><name>PRIu32</name><literal type="string">" replicated_data_length:%"</literal><name>PRIu32</name><literal type="string">" payload_data_length %"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name>i_payload</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i_stream_number</name></expr></argument>, <argument><expr><name>i_media_object_number</name></expr></argument>,

<argument><expr><name>i_media_object_offset</name></expr></argument>, <argument><expr><name>i_replicated_data_length</name></expr></argument>, <argument><expr><name>i_payload_data_length</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>,

<argument><expr><literal type="string">" pkttime=%"</literal><name>PRId64</name><literal type="string">" st=%"</literal><name>PRId64</name></expr></argument>,

<argument><expr><name>i_pkt_time</name></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>send_time</name></name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator> <name>i_payload_data_length</name> <operator>||</operator> <name>i_payload_data_length</name> <operator>&gt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>left</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">" payload length problem %d %"</literal><name>PRIu32</name><literal type="string">" %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>multiple</name></name></expr></argument>, <argument><expr><name>i_payload_data_length</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_doskip</name></name> <operator>&amp;&amp;</operator>

<call><name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_doskip</name></name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name>i_stream_number</name></expr></argument>, <argument><expr><name>b_packet_keyframe</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>b_preroll_done</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_track_time</name> <init>= <expr><name>i_pkt_time</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_updatetime</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_updatetime</name></name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name>i_stream_number</name></expr></argument>, <argument><expr><name>i_track_time</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_updatesendtime</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>p_packetsys</name><operator>-&gt;</operator><name>pf_updatesendtime</name></name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>send_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_subpayload_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>i_payload_data_length</name> <operator>&amp;&amp;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>left</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_sub_payload_data_length</name> <init>= <expr><name>i_payload_data_length</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_replicated_data_length</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_sub_payload_data_length</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name><index>[<expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_payload_data_length</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sub_payload_data_length</name> <operator>&gt;</operator> <name>i_payload_data_length</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>SkipBytes</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_payload_pts</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_payload_pts</name> <operator>=</operator> <name>i_pkt_time</name> <operator>+</operator> <name>i_pkt_time_delta</name> <operator>*</operator> <name>i_subpayload_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_sp</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_payload_pts</name> <operator>-=</operator> <call><name>VLC_TICK_FROM_MSFTIME</name><argument_list>(<argument><expr><name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_sp</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_payload_dts</name> <init>= <expr><name>i_pkt_time</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_sp</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_payload_dts</name> <operator>-=</operator> <call><name>VLC_TICK_FROM_MSFTIME</name><argument_list>(<argument><expr><name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_sp</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_sub_payload_data_length</name> <operator>&amp;&amp;</operator>

<call><name>DemuxSubPayload</name><argument_list>( <argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><name>i_stream_number</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_tkinfo</name><operator>-&gt;</operator><name>p_frame</name></name></expr></argument>,

<argument><expr><name>i_sub_payload_data_length</name></expr></argument>, <argument><expr><name>i_payload_pts</name></expr></argument>, <argument><expr><name>i_payload_dts</name></expr></argument>,

<argument><expr><name>i_media_object_offset</name></expr></argument>, <argument><expr><name>b_packet_keyframe</name></expr></argument>, <argument><expr><name>b_ignore_pts</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>&gt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>+</operator> <name>i_sub_payload_data_length</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>-=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>+</operator> <name>i_sub_payload_data_length</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_return</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>-&gt;</operator><name>p_peek</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>left</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_return</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>i_return</name> <operator>&lt;</operator> <name><name>pkt</name><operator>-&gt;</operator><name>left</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot peek, EOF ?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_sub_payload_data_length</name> <operator>&lt;=</operator> <name>i_payload_data_length</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_payload_data_length</name> <operator>-=</operator> <name>i_sub_payload_data_length</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_payload_data_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>i_subpayload_count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>skip</name>:</label>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>i_skip</name></name> <operator>+=</operator> <name>i_payload_data_length</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>DemuxASFPacket</name><parameter_list>( <parameter><decl><type><name>asf_packet_sys_t</name> <modifier>*</modifier></type><name>p_packetsys</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>i_data_packet_min</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_data_packet_max</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><name><name>p_packetsys</name><operator>-&gt;</operator><name>p_demux</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_return</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>,<argument><expr><name>i_data_packet_min</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_return</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>i_return</name> <operator>&lt;</operator> <name>i_data_packet_min</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot peek while getting new packet, EOF ?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_skip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&amp;</operator><literal type="number">0x80</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_error_correction_data_length</name> <init>= <expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_opaque_data_present</name> <init>= <expr><operator>(</operator> <name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>)</operator><operator>&amp;</operator> <literal type="number">0x01</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_error_correction_length_type</name> <init>= <expr><operator>(</operator> <name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name>i_error_correction_length_type</name> <operator>!=</operator> <literal type="number">0x00</literal> <operator>||</operator>

<name>i_opaque_data_present</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>

<name>i_error_correction_data_length</name> <operator>!=</operator> <literal type="number">0x02</literal></expr> )</condition>

<block>{<block_content>

<goto>goto <name>loop_error_recovery</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <name>i_error_correction_data_length</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"no error correction"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>i_data_packet_min</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>loop_error_recovery</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>asf_packet_t</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_packet_flags</name> <init>= <expr><name><name>p_peek</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>i_skip</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>property</name></name> <operator>=</operator> <name><name>p_peek</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i_skip</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>multiple</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>i_packet_flags</name><operator>&amp;</operator><literal type="number">0x01</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>i_data_packet_min</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>padding_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetValue2b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>.</operator><name>length</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>, <argument><expr><name>i_data_packet_min</name> <operator>-</operator> <name>i_skip</name></expr></argument>, <argument><expr><name>i_packet_flags</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>loop_error_recovery</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_packet_sequence</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetValue2b</name><argument_list>(<argument><expr><operator>&amp;</operator><name>i_packet_sequence</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>, <argument><expr><name>i_data_packet_min</name> <operator>-</operator> <name>i_skip</name></expr></argument>, <argument><expr><name>i_packet_flags</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>loop_error_recovery</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>GetValue2b</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pkt</name><operator>.</operator><name>padding_length</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_skip</name></expr></argument>, <argument><expr><name>i_data_packet_min</name> <operator>-</operator> <name>i_skip</name></expr></argument>, <argument><expr><name>i_packet_flags</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>loop_error_recovery</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>padding_length</name></name> <operator>&gt;</operator> <name><name>pkt</name><operator>.</operator><name>length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Too large padding: %"</literal><name>PRIu32</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>padding_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>loop_error_recovery</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>length</name></name> <operator>&lt;</operator> <name>i_data_packet_min</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>padding_length</name></name> <operator>+=</operator> <name>i_data_packet_min</name> <operator>-</operator> <name><name>pkt</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>i_data_packet_min</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;</operator> <name>i_data_packet_min</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>loop_error_recovery</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>send_time</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>i_skip</name></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_skip</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_return</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_return</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pkt</name><operator>.</operator><name>length</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator><name>i_return</name> <operator>&lt;</operator> <name><name>pkt</name><operator>.</operator><name>length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot peek, EOF ?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_payload_count</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>length_type</name></name> <operator>=</operator> <literal type="number">0x02</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>multiple</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_skip</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>i_data_packet_min</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>loop_error_recovery</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_payload_count</name> <operator>=</operator> <name><name>p_peek</name><index>[<expr><name>i_skip</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>length_type</name></name> <operator>=</operator> <operator>(</operator> <name><name>p_peek</name><index>[<expr><name>i_skip</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>)</operator><operator>&amp;</operator><literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_skip</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"%d payloads"</literal></expr></argument>, <argument><expr><name>i_payload_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>i_skip</name></name> <operator>=</operator> <name>i_skip</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>p_peek</name></name> <operator>=</operator> <name>p_peek</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>left</name></name> <operator>=</operator> <name><name>pkt</name><operator>.</operator><name>length</name></name></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i_payload</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_payload</name> <operator>&lt;</operator> <name>i_payload_count</name></expr> ;</condition> <incr><expr><name>i_payload</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>DemuxPayload</name><argument_list>(<argument><expr><name>p_packetsys</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>, <argument><expr><name>i_payload</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"payload err %d / %d"</literal></expr></argument>, <argument><expr><name>i_payload</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i_payload_count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>left</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>left</name></name> <operator>&gt;</operator> <name><name>pkt</name><operator>.</operator><name>padding_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Didn't read %"</literal><name>PRIu32</name><literal type="string">" bytes in the packet"</literal></expr></argument>,

<argument><expr><name><name>pkt</name><operator>.</operator><name>left</name></name> <operator>-</operator> <name><name>pkt</name><operator>.</operator><name>padding_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>pkt</name><operator>.</operator><name>left</name></name> <operator>&lt;</operator> <name><name>pkt</name><operator>.</operator><name>padding_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Read %"</literal><name>PRIu32</name><literal type="string">" too much bytes in the packet"</literal></expr></argument>,

<argument><expr><name><name>pkt</name><operator>.</operator><name>padding_length</name></name> <operator>-</operator> <name><name>pkt</name><operator>.</operator><name>left</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i_return</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>.</operator><name>left</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_return</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>i_return</name> <operator>&lt;</operator> <name><name>pkt</name><operator>.</operator><name>left</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot skip data, EOF ?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>loop_error_recovery</name>:</label>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported packet header"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_data_packet_min</name> <operator>!=</operator> <name>i_data_packet_max</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported packet header, fatal error"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_return</name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_data_packet_min</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_return</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>i_return</name> <operator>!=</operator> <name>i_data_packet_min</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot skip data, EOF ?"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
