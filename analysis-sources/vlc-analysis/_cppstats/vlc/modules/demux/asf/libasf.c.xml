<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\asf\libasf.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libasf.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>AsfObjectHelperHave</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_peek</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_current</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_wanted</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_wanted</name> <operator>&gt;</operator> <name>i_peek</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>&amp;</operator><name><name>p_current</name><index>[<expr><name>i_wanted</name></expr>]</index></name> <operator>&lt;=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_peek</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_HAVE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AsfObjectHelperHave( p_peek, i_peek, p_data, n )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>AsfObjectHelperSkip</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_peek</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_wanted</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>AsfObjectHelperHave</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument>, <argument><expr><operator>*</operator><name>pp_data</name></expr></argument>, <argument><expr><name>i_wanted</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_data</name> <operator>+=</operator> <name>i_wanted</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp_data</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_peek</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_SKIP</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AsfObjectHelperSkip( p_peek, i_peek, (uint8_t**)&amp;p_data, n )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_FUNCTION_READ_X</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>cmd</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>static inline type AsfObjectHelperRead##x( const uint8_t *p_peek, size_t i_peek, uint8_t **pp_data ) { uint8_t *p_data = *pp_data; type i_ret = 0; if( ASF_HAVE(x) ) i_ret = cmd; ASF_SKIP(x); *pp_data = p_data; return i_ret; }</cpp:value></cpp:define>

<macro><name>ASF_FUNCTION_READ_X</name><argument_list>( <argument>uint8_t</argument>, <argument><literal type="number">1</literal></argument>, <argument>*p_data</argument> )</argument_list></macro>

<macro><name>ASF_FUNCTION_READ_X</name><argument_list>( <argument>uint16_t</argument>, <argument><literal type="number">2</literal></argument>, <argument>GetWLE(p_data)</argument> )</argument_list></macro>

<macro><name>ASF_FUNCTION_READ_X</name><argument_list>( <argument>uint32_t</argument>, <argument><literal type="number">4</literal></argument>, <argument>GetDWLE(p_data)</argument> )</argument_list></macro>

<macro><name>ASF_FUNCTION_READ_X</name><argument_list>( <argument>uint64_t</argument>, <argument><literal type="number">8</literal></argument>, <argument>GetQWLE(p_data)</argument> )</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_READ1</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>AsfObjectHelperRead1( p_peek, i_peek, (uint8_t**)&amp;p_data )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_READ2</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>AsfObjectHelperRead2( p_peek, i_peek, (uint8_t**)&amp;p_data )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_READ4</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>AsfObjectHelperRead4( p_peek, i_peek, (uint8_t**)&amp;p_data )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_READ8</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>AsfObjectHelperRead8( p_peek, i_peek, (uint8_t**)&amp;p_data )</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>AsfObjectHelperReadString</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_peek</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>*</operator><name>pp_data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ASF_HAVE</name><argument_list>(<argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_SKIP</name><argument_list>(<argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp_data</name> <operator>=</operator> <name>p_data</name></expr>;</expr_stmt>

<return>return <expr><name>psz_string</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASF_READS</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AsfObjectHelperReadString( p_peek, i_peek, (uint8_t**)&amp;p_data, n )</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObjectCommon</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_common_t</name> <modifier>*</modifier></type><name>p_common</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>common</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>ASF_OBJECT_COMMON_SIZE</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_common</name><operator>-&gt;</operator><name>i_object_id</name></name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_common</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_common</name><operator>-&gt;</operator><name>i_object_pos</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_common</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"found object guid: "</literal> <name>GUID_FMT</name> <literal type="string">" size:%"</literal><name>PRIu64</name><literal type="string">" at %"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_common</name><operator>-&gt;</operator><name>i_object_id</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name><name>p_common</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument>, <argument><expr><name><name>p_common</name><operator>-&gt;</operator><name>i_object_pos</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_NextObject</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_boundary</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name></type> <name>obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_boundary</name> <operator>&amp;&amp;</operator> <name>i_pos</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name>i_pos</name> <operator>&gt;=</operator> <name>i_boundary</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_obj</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ASF_ReadObjectCommon</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>obj</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <operator>&amp;</operator><name>obj</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>UINT64_MAX</name> <operator>-</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_pos</name></name> <operator>)</operator> <operator>&lt;</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name></name> <operator>&amp;&amp;</operator>

<name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_size</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_pos</name></name> <operator>+</operator>

<name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_size</name></name> <operator>&lt;</operator>

<name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_pos</name></name> <operator>+</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_size</name></name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_pos</name></name> <operator>+</operator>

<name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_Null</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>pp_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>pp_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_Header</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_header_t</name> <modifier>*</modifier></type><name>p_hdr</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_subobj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">30</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_sub_object_count</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_reserved1</name></name> <operator>=</operator> <name><name>p_peek</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_reserved2</name></name> <operator>=</operator> <name><name>p_peek</name><index>[<expr><literal type="number">29</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"read \"header object\" subobj:%u, reserved1:%u, reserved2:%u"</literal></expr></argument>,

<argument><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_sub_object_count</name></name></expr></argument>,

<argument><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_reserved1</name></name></expr></argument>,

<argument><expr><name><name>p_hdr</name><operator>-&gt;</operator><name>i_reserved2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">30</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_subobj</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>asf_object_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_subobj</name> <operator>||</operator> <call><name>ASF_ReadObject</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_subobj</name></expr></argument>, <argument><expr><operator>(</operator><name>asf_object_t</name><operator>*</operator><operator>)</operator><name>p_hdr</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_subobj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ASF_NextObject</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_subobj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_Data</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_data_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">50</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><operator>-&gt;</operator><name>i_file_id</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_total_data_packets</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_reserved</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"read \"data object\" file_id:"</literal> <name>GUID_FMT</name> <literal type="string">" total data packet:"</literal>

<literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" reserved:%u"</literal></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_file_id</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_total_data_packets</name></name></expr></argument>,

<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_reserved</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_Index</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_index_t</name> <modifier>*</modifier></type><name>p_index</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_index</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&lt;</operator> <literal type="number">56</literal>

<operator>||</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name>

<operator>||</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call>

<operator>&lt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_object_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_file_id</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_time_interval</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_max_packet_count</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_count</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">52</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>index_entry</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"read \"index object\" file_id:"</literal> <name>GUID_FMT</name>

<literal type="string">" index_entry_time_interval:%"</literal><name>PRId64</name><literal type="string">" max_packet_count:%u "</literal>

<literal type="string">"index_entry_count:%u"</literal></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_file_id</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_time_interval</name></name></expr></argument>,

<argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_max_packet_count</name></name></expr></argument>,

<argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_time_interval</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_count</name></name> <operator>&gt;</operator> <operator>(</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>-</operator> <literal type="number">56</literal><operator>)</operator> <operator>/</operator> <literal type="number">6</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_count</name></name> <operator>=</operator> <operator>(</operator><name><name>p_index</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>-</operator> <literal type="number">56</literal><operator>)</operator> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>index_entry</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_count</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>asf_index_entry_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_index</name><operator>-&gt;</operator><name>index_entry</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>p_peek</name> <operator>+=</operator> <literal type="number">56</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_index</name><operator>-&gt;</operator><name>i_index_entry_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>p_peek</name> <operator>+=</operator> <literal type="number">6</literal></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>index_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_packet_number</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_index</name><operator>-&gt;</operator><name>index_entry</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_packet_count</name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_Index</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_index_t</name> <modifier>*</modifier></type><name>p_index</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_index</name><operator>-&gt;</operator><name>index_entry</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_file_properties</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_file_properties_t</name> <modifier>*</modifier></type><name>p_fp</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>file_properties</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">104</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">104</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_fp</name><operator>-&gt;</operator><name>i_file_id</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_file_size</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_creation_date</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">48</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_data_packets_count</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">56</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_play_duration</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_send_duration</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">72</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_preroll</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">80</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">88</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_min_data_packet_size</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">92</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_max_data_packet_size</name></name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">96</literal></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_max_bitrate</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">100</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"read \"file properties object\" file_id:"</literal> <name>GUID_FMT</name>

<literal type="string">" file_size:%"</literal><name>PRIu64</name><literal type="string">" creation_date:%"</literal><name>PRIu64</name><literal type="string">" data_packets_count:"</literal>

<literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" play_duration:%"</literal><name>PRId64</name><literal type="string">" send_duration:%"</literal><name>PRId64</name><literal type="string">" preroll:%"</literal><name>PRId64</name>

<literal type="string">" flags:%u min_data_packet_size:%d "</literal>

<literal type="string">" max_data_packet_size:%u max_bitrate:%u"</literal></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_file_id</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_file_size</name></name></expr></argument>,

<argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_creation_date</name></name></expr></argument>, <argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_data_packets_count</name></name></expr></argument>,

<argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_play_duration</name></name></expr></argument>, <argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_send_duration</name></name></expr></argument>,

<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_preroll</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument>,

<argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_min_data_packet_size</name></name></expr></argument>, <argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_max_data_packet_size</name></name></expr></argument>,

<argument><expr><name><name>p_fp</name><operator>-&gt;</operator><name>i_max_bitrate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_metadata</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_metadata_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_meta</name><operator>-&gt;</operator><name>i_record_entries_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_meta</name><operator>-&gt;</operator><name>record</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_meta</name><operator>-&gt;</operator><name>record</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_meta</name><operator>-&gt;</operator><name>record</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_metadata</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_metadata_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>metadata</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_meta</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&lt;</operator> <literal type="number">26</literal> <operator>||</operator> <name><name>p_meta</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_meta</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_meta</name><operator>-&gt;</operator><name>i_object_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_meta</name><operator>-&gt;</operator><name>i_record_entries_count</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>p_peek</name> <operator>+</operator> <literal type="number">26</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_meta</name><operator>-&gt;</operator><name>record</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_meta</name><operator>-&gt;</operator><name>i_record_entries_count</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>asf_metadata_record_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_meta</name><operator>-&gt;</operator><name>record</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_meta</name><operator>-&gt;</operator><name>i_record_entries_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_meta</name><operator>-&gt;</operator><name>i_record_entries_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_metadata_record_t</name> <modifier>*</modifier></type><name>p_record</name> <init>= <expr><operator>&amp;</operator><name><name>p_meta</name><operator>-&gt;</operator><name>record</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_data</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ASF_READ2</name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>i_stream</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_name</name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_data</name> <operator>=</operator> <call><name>ASF_READ4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>UINT32_MAX</name> <operator>-</operator> <name>i_name</name> <operator>&lt;</operator> <name>i_data</name> <operator>||</operator>

<operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><name>i_name</name> <operator>+</operator> <name>i_data</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>ASF_READS</name><argument_list>( <argument><expr><name>i_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_record</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_METADATA_TYPE_STRING</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><call><name>ASF_READS</name><argument_list>( <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_record</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <name>i_data</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_record</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_METADATA_TYPE_BYTE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_record</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <name>i_data</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_record</name><operator>-&gt;</operator><name>p_data</name></name> <operator>&amp;&amp;</operator> <name>i_data</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_record</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_data</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_record</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_METADATA_TYPE_QWORD</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>i_val</name></name> <operator>=</operator> <call><name>ASF_READ8</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_record</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_METADATA_TYPE_DWORD</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>i_val</name></name> <operator>=</operator> <call><name>ASF_READ4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_record</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_METADATA_TYPE_WORD</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>i_val</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_record</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_METADATA_TYPE_BOOL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_record</name><operator>-&gt;</operator><name>i_val</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_data</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_meta</name><operator>-&gt;</operator><name>i_record_entries_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"read \"metadata object\" %"</literal><name>PRIu32</name><literal type="string">" entries"</literal></expr></argument>,

<argument><expr><name><name>p_meta</name><operator>-&gt;</operator><name>i_record_entries_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>p_meta</name><operator>-&gt;</operator><name>i_record_entries_count</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_metadata_record_t</name> <modifier>*</modifier></type><name>p_rec</name> <init>= <expr><operator>&amp;</operator><name><name>p_meta</name><operator>-&gt;</operator><name>record</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_rec</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_METADATA_TYPE_STRING</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - %s=%s"</literal></expr></argument>,

<argument><expr><name><name>p_rec</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_rec</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_rec</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_METADATA_TYPE_BYTE</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - %s (%u bytes)"</literal></expr></argument>,

<argument><expr><name><name>p_rec</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_rec</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - %s=%"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><name><name>p_rec</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>p_rec</name><operator>-&gt;</operator><name>i_val</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_header_extension</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_header_extension_t</name> <modifier>*</modifier></type><name>p_he</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>header_extension</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_he</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_he</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">46</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_he</name><operator>-&gt;</operator><name>i_reserved1</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_he</name><operator>-&gt;</operator><name>i_reserved2</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_he</name><operator>-&gt;</operator><name>i_header_extension_size</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">42</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_he</name><operator>-&gt;</operator><name>i_header_extension_size</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>i_peek</name><operator>-</operator><literal type="number">46</literal><operator>)</operator> <operator>&lt;</operator> <name><name>p_he</name><operator>-&gt;</operator><name>i_header_extension_size</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_he</name><operator>-&gt;</operator><name>p_header_extension_data</name></name> <operator>=</operator>

<call><name>malloc</name><argument_list>( <argument><expr><name><name>p_he</name><operator>-&gt;</operator><name>i_header_extension_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_he</name><operator>-&gt;</operator><name>p_header_extension_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_he</name><operator>-&gt;</operator><name>p_header_extension_data</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">46</literal></expr></argument>,

<argument><expr><name><name>p_he</name><operator>-&gt;</operator><name>i_header_extension_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_he</name><operator>-&gt;</operator><name>p_header_extension_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_he</name><operator>-&gt;</operator><name>i_header_extension_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"read \"header extension object\" reserved1:"</literal> <name>GUID_FMT</name>

<literal type="string">" reserved2:%u header_extension_size:%"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_he</name><operator>-&gt;</operator><name>i_reserved1</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name><name>p_he</name><operator>-&gt;</operator><name>i_reserved2</name></name></expr></argument>,

<argument><expr><name><name>p_he</name><operator>-&gt;</operator><name>i_header_extension_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_he</name><operator>-&gt;</operator><name>i_header_extension_size</name></name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">46</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">46</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_he</name><operator>-&gt;</operator><name>p_header_extension_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>asf_object_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_child</name> <operator>==</operator> <name>NULL</name>

<operator>||</operator> <call><name>ASF_ReadObject</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_child</name></expr></argument>, <argument><expr><operator>(</operator><name>asf_object_t</name><operator>*</operator><operator>)</operator><name>p_he</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ASF_NextObject</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_child</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr> )</condition> 

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_header_extension</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_header_extension_t</name> <modifier>*</modifier></type><name>p_he</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>header_extension</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_he</name><operator>-&gt;</operator><name>p_header_extension_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_stream_properties</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_stream_properties_t</name> <modifier>*</modifier></type><name>p_sp</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>stream_properties</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>UINT64_MAX</name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr></cpp:if>

<if_stmt><if>if<condition>( <expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>SSIZE_MAX</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"unable to peek: object size is too large"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">78</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sp</name><operator>-&gt;</operator><name>i_stream_type</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sp</name><operator>-&gt;</operator><name>i_error_correction_type</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">40</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_time_offset</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">56</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_type_specific_data_length</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">64</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_error_correction_data_length</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">68</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">72</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_stream_number</name></name> <operator>=</operator> <name><name>p_sp</name><operator>-&gt;</operator><name>i_flags</name></name><operator>&amp;</operator><literal type="number">0x07f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_stream_number</name></name> <operator>&gt;</operator> <name>ASF_MAX_STREAMNUMBER</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_reserved</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">74</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>-=</operator> <literal type="number">78</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_type_specific_data_length</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <name><name>p_sp</name><operator>-&gt;</operator><name>i_type_specific_data_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>p_type_specific_data</name></name> <operator>=</operator>

<call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_type_specific_data_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sp</name><operator>-&gt;</operator><name>p_type_specific_data</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>p_type_specific_data</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">78</literal></expr></argument>,

<argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_type_specific_data_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>-=</operator> <name><name>p_sp</name><operator>-&gt;</operator><name>i_type_specific_data_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_error_correction_data_length</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <name><name>p_sp</name><operator>-&gt;</operator><name>i_error_correction_data_length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>p_type_specific_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>p_error_correction_data</name></name> <operator>=</operator>

<call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_error_correction_data_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sp</name><operator>-&gt;</operator><name>p_error_correction_data</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>p_type_specific_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>p_error_correction_data</name></name></expr></argument>,

<argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">78</literal> <operator>+</operator> <name><name>p_sp</name><operator>-&gt;</operator><name>i_type_specific_data_length</name></name></expr></argument>,

<argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_error_correction_data_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"read \"stream Properties object\" stream_type:"</literal> <name>GUID_FMT</name>

<literal type="string">" error_correction_type:"</literal> <name>GUID_FMT</name> <literal type="string">" time_offset:%"</literal><name>PRIu64</name>

<literal type="string">" type_specific_data_length:%"</literal><name>PRIu32</name><literal type="string">" error_correction_data_length:%"</literal><name>PRIu32</name>

<literal type="string">" flags:0x%x stream_number:%u"</literal></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_stream_type</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_error_correction_type</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_time_offset</name></name></expr></argument>,

<argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_type_specific_data_length</name></name></expr></argument>,

<argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_error_correction_data_length</name></name></expr></argument>,

<argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument>,

<argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_stream_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_stream_properties</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_stream_properties_t</name> <modifier>*</modifier></type><name>p_sp</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>stream_properties</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>p_type_specific_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>p_error_correction_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_codec_list</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_codec_list_t</name> <modifier>*</modifier></type><name>p_cl</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>codec_list</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>asf_codec_entry_t</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name><name>p_cl</name><operator>-&gt;</operator><name>codecs</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</init>

<condition><expr><name>codec</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>codec</name> <operator>=</operator> <name>next</name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>codec</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>codec</name><operator>-&gt;</operator><name>p_information</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_codec_list</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_codec_list_t</name> <modifier>*</modifier></type><name>p_cl</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>codec_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cl</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_cl</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">44</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_cl</name><operator>-&gt;</operator><name>i_reserved</name></name></expr></argument>, <argument><expr><name>p_peek</name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name> <init>= <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">40</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"read \"codec list object\" reserved_guid:"</literal> <name>GUID_FMT</name>

<literal type="string">" codec_entries_count:%u"</literal></expr></argument>, <argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_cl</name><operator>-&gt;</operator><name>i_reserved</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name>count</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>p_peek</name> <operator>+</operator> <literal type="number">44</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>asf_codec_entry_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>p_cl</name><operator>-&gt;</operator><name>codecs</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_codec_entry_t</name> <modifier>*</modifier></type><name>p_codec</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_codec</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>p_codec</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_codec</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_codec</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_codec</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>ASF_READS</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>*</operator><call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_codec</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>ASF_READS</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>*</operator><call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_codec</name><operator>-&gt;</operator><name>i_information_length</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ASF_HAVE</name><argument_list>( <argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>i_information_length</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_codec</name><operator>-&gt;</operator><name>p_information</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>i_information_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>p_information</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>p_information</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>,

<argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>i_information_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name><name>p_codec</name><operator>-&gt;</operator><name>i_information_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_codec</name><operator>-&gt;</operator><name>p_information</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - codec[%"</literal><name>PRIu32</name><literal type="string">"] %s name:\"%s\" "</literal>

<literal type="string">"description:\"%s\" information_length:%u"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator> <name><name>p_codec</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_CODEC_TYPE_VIDEO</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"video"</literal></expr>

</then><else>: <expr><operator>(</operator> <ternary><condition><expr><operator>(</operator> <name><name>p_codec</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_CODEC_TYPE_AUDIO</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"audio"</literal></expr>

</then><else>: <expr><literal type="string">"unknown"</literal></expr></else></ternary> <operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>,

<argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>, <argument><expr><name><name>p_codec</name><operator>-&gt;</operator><name>i_information_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p_codec</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_codec</name><operator>-&gt;</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ASF_FreeObject_codec_list</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>char</name> <modifier>*</modifier></type><name>get_wstring</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_str</name> <init>= <expr><call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_str</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>i_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>psz_str</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_content_description</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_content_description_t</name> <modifier>*</modifier></type><name>p_cd</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>content_description</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_title</name></decl>, <decl><type ref="prev"/><name>i_artist</name></decl>, <decl><type ref="prev"/><name>i_copyright</name></decl>, <decl><type ref="prev"/><name>i_description</name></decl>, <decl><type ref="prev"/><name>i_rating</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_cd</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">34</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>p_peek</name> <operator>+</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_title</name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_artist</name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_copyright</name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_description</name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_rating</name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><name>i_title</name><operator>+</operator><name>i_artist</name><operator>+</operator><name>i_copyright</name><operator>+</operator><name>i_description</name><operator>+</operator><name>i_rating</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_title</name></name> <operator>=</operator> <call><name>get_wstring</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_title</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_artist</name></name> <operator>=</operator> <call><name>get_wstring</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_artist</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_copyright</name></name> <operator>=</operator> <call><name>get_wstring</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_copyright</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_description</name></name> <operator>=</operator> <call><name>get_wstring</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_rating</name></name> <operator>=</operator> <call><name>get_wstring</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>i_rating</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"read \"content description object\" title:\"%s\" artist:\"%s\" copyright:\"%s\" description:\"%s\" rating:\"%s\""</literal></expr></argument>,

<argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument>,

<argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_artist</name></name></expr></argument>,

<argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_copyright</name></name></expr></argument>,

<argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument>,

<argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_content_description</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_content_description_t</name> <modifier>*</modifier></type><name>p_cd</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>content_description</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_title</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_artist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_copyright</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_description</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_cd</name><operator>-&gt;</operator><name>psz_rating</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_language_list</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_language_list_t</name> <modifier>*</modifier></type><name>p_ll</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>language_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ll</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_ll</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">26</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>ASF_OBJECT_COMMON_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ll</name><operator>-&gt;</operator><name>i_language</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ll</name><operator>-&gt;</operator><name>i_language</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ll</name><operator>-&gt;</operator><name>ppsz_language</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_ll</name><operator>-&gt;</operator><name>i_language</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ll</name><operator>-&gt;</operator><name>ppsz_language</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ll</name><operator>-&gt;</operator><name>i_language</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ll</name><operator>-&gt;</operator><name>ppsz_language</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ASF_READS</name><argument_list>( <argument><expr><call><name>ASF_READ1</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_ll</name><operator>-&gt;</operator><name>i_language</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"read \"language list object\" %u entries"</literal></expr></argument>,

<argument><expr><name><name>p_ll</name><operator>-&gt;</operator><name>i_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ll</name><operator>-&gt;</operator><name>i_language</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - '%s'"</literal></expr></argument>,

<argument><expr><name><name>p_ll</name><operator>-&gt;</operator><name>ppsz_language</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_language_list</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_language_list_t</name> <modifier>*</modifier></type><name>p_ll</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>language_list</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ll</name><operator>-&gt;</operator><name>i_language</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_ll</name><operator>-&gt;</operator><name>ppsz_language</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_ll</name><operator>-&gt;</operator><name>ppsz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_stream_bitrate_properties</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_stream_bitrate_properties_t</name> <modifier>*</modifier></type><name>p_sb</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>stream_bitrate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sb</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_sb</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">26</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>ASF_OBJECT_COMMON_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sb</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sb</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>&gt;</operator> <name>ASF_MAX_STREAMNUMBER</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sb</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <name>ASF_MAX_STREAMNUMBER</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sb</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sb</name><operator>-&gt;</operator><name>bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_stream_number</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call><operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_sb</name><operator>-&gt;</operator><name>bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_stream_number</name> <operator>&gt;</operator> <name>ASF_MAX_STREAMNUMBER</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sb</name><operator>-&gt;</operator><name>bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_avg_bitrate</name> <operator>=</operator> <call><name>ASF_READ4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sb</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"read \"stream bitrate properties object\""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sb</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">" - stream=%u bitrate=%"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name><name>p_sb</name><operator>-&gt;</operator><name>bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_stream_number</name></expr></argument>,

<argument><expr><name><name>p_sb</name><operator>-&gt;</operator><name>bitrate</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_avg_bitrate</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_stream_bitrate_properties</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_extended_stream_properties</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_extended_stream_properties_t</name> <modifier>*</modifier></type><name>p_esp</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>ext_stream</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_esp</name><operator>-&gt;</operator><name>p_ext</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_esp</name><operator>-&gt;</operator><name>i_payload_extension_system_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>p_ext</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pi_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>p_ext</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_name_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>ppsz_stream_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>pi_stream_name_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>ppsz_stream_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_extended_stream_properties</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_extended_stream_properties_t</name> <modifier>*</modifier></type><name>p_esp</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>ext_stream</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">88</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>ASF_OBJECT_COMMON_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_start_time</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_end_time</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_data_bitrate</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_buffer_size</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_initial_buffer_fullness</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><name>ASF_OBJECT_COMMON_SIZE</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_alternate_data_bitrate</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_alternate_buffer_size</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_alternate_initial_buffer_fullness</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_maximum_object_size</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_number</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_number</name></name> <operator>&gt;</operator> <name>ASF_MAX_STREAMNUMBER</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_language_index</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_average_time_per_frame</name></name><operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_name_count</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_payload_extension_system_count</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_data</name><index>[<expr><literal type="number">62</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_data</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>pi_stream_name_language</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_name_count</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>ppsz_stream_name</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_name_count</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_esp</name><operator>-&gt;</operator><name>pi_stream_name_language</name></name> <operator>||</operator>

<operator>!</operator><name><name>p_esp</name><operator>-&gt;</operator><name>ppsz_stream_name</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>pi_stream_name_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>ppsz_stream_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_name_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>pi_stream_name_language</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>ppsz_stream_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ASF_READS</name><argument_list>( <argument><expr><call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_name_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>p_ext</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_payload_extension_system_count</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>asf_payload_extension_system_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_esp</name><operator>-&gt;</operator><name>p_ext</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_esp</name><operator>-&gt;</operator><name>i_payload_extension_system_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_payload_extension_system_t</name> <modifier>*</modifier></type><name>p_ext</name> <init>= <expr><operator>&amp;</operator> <name><name>p_esp</name><operator>-&gt;</operator><name>p_ext</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><literal type="number">16</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ext</name><operator>-&gt;</operator><name>i_extension_id</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASF_SKIP</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_info_length</name></name> <operator>=</operator> <call><name>ASF_READ4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_info_length</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_info_length</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ext</name><operator>-&gt;</operator><name>pi_info</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_info_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_ext</name><operator>-&gt;</operator><name>pi_info</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>pi_info</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_info_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_SKIP</name><argument_list>( <argument><expr><name><name>p_ext</name><operator>-&gt;</operator><name>i_info_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_payload_extension_system_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_payload_extension_system_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>p_sp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_data</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_peek</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>p_data</name> <operator>-</operator> <name>p_peek</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>(</operator><name>p_data</name> <operator>-</operator> <name>p_peek</name><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ASF_FreeObject_extended_stream_properties</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_sp</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>asf_object_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sp</name> <operator>||</operator> <call><name>ASF_ReadObject</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_sp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_esp</name><operator>-&gt;</operator><name>p_sp</name></name> <operator>=</operator> <operator>(</operator><name>asf_object_stream_properties_t</name><operator>*</operator><operator>)</operator><name>p_sp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"read \"extended stream properties object\":"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - start=%"</literal><name>PRIu64</name><literal type="string">" end=%"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_start_time</name></name></expr></argument>, <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_end_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - data bitrate=%"</literal><name>PRId32</name><literal type="string">" buffer=%"</literal><name>PRId32</name><literal type="string">" initial fullness=%"</literal><name>PRId32</name></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_data_bitrate</name></name></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_buffer_size</name></name></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_initial_buffer_fullness</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - alternate data bitrate=%"</literal><name>PRId32</name><literal type="string">" buffer=%"</literal><name>PRId32</name><literal type="string">" initial fullness=%"</literal><name>PRId32</name></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_alternate_data_bitrate</name></name></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_alternate_buffer_size</name></name></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_alternate_initial_buffer_fullness</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - maximum object size=%"</literal><name>PRId32</name></expr></argument>, <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_maximum_object_size</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - flags=0x%x"</literal></expr></argument>, <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_flags</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - stream number=%u language=%u"</literal></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_number</name></name></expr></argument>, <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_language_index</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - average time per frame=%"</literal><name>PRIu64</name></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_average_time_per_frame</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - stream name count=%u"</literal></expr></argument>, <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_name_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_esp</name><operator>-&gt;</operator><name>i_stream_name_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - lang id=%u name=%s"</literal></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>pi_stream_name_language</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>ppsz_stream_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - payload extension system count=%u"</literal></expr></argument>,

<argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>i_payload_extension_system_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_esp</name><operator>-&gt;</operator><name>i_payload_extension_system_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - %u - payload extension: "</literal> <name>GUID_FMT</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_esp</name><operator>-&gt;</operator><name>p_ext</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_extension_id</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_advanced_mutual_exclusion</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_advanced_mutual_exclusion_t</name> <modifier>*</modifier></type><name>p_ae</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>advanced_mutual_exclusion</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ae</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_ae</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>ASF_OBJECT_COMMON_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>vlc_guid_t</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_guid_mutex_language</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ae</name><operator>-&gt;</operator><name>exclusion_type</name></name> <operator>=</operator> <name>LANGUAGE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>vlc_guid_t</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_guid_mutex_bitrate</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ae</name><operator>-&gt;</operator><name>exclusion_type</name></name> <operator>=</operator> <name>BITRATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_SKIP</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ae</name><operator>-&gt;</operator><name>i_stream_number_count</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ae</name><operator>-&gt;</operator><name>pi_stream_number</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_ae</name><operator>-&gt;</operator><name>i_stream_number_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_ae</name><operator>-&gt;</operator><name>pi_stream_number</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ae</name><operator>-&gt;</operator><name>i_stream_number_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ae</name><operator>-&gt;</operator><name>i_stream_number_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ae</name><operator>-&gt;</operator><name>pi_stream_number</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_ae</name><operator>-&gt;</operator><name>pi_stream_number</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>ASF_MAX_STREAMNUMBER</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_ae</name><operator>-&gt;</operator><name>i_stream_number_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"read \"advanced mutual exclusion object\" type %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_ae</name><operator>-&gt;</operator><name>exclusion_type</name></name> <operator>==</operator> <name>LANGUAGE</name></expr> ?</condition><then> <expr><literal type="string">"Language"</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator> <name><name>p_ae</name><operator>-&gt;</operator><name>exclusion_type</name></name> <operator>==</operator> <name>BITRATE</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Bitrate"</literal></expr> </then><else>: <expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></else></ternary></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ae</name><operator>-&gt;</operator><name>i_stream_number_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - stream=%u"</literal></expr></argument>, <argument><expr><name><name>p_ae</name><operator>-&gt;</operator><name>pi_stream_number</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_advanced_mutual_exclusion</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_advanced_mutual_exclusion_t</name> <modifier>*</modifier></type><name>p_ae</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>advanced_mutual_exclusion</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_ae</name><operator>-&gt;</operator><name>pi_stream_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_stream_prioritization</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_stream_prioritization_t</name> <modifier>*</modifier></type><name>p_sp</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>stream_prioritization</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">26</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>ASF_OBJECT_COMMON_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_priority_count</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_flag</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_priority_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_stream_number</name></name> <operator>=</operator>

<call><name>calloc</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_priority_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_flag</name></name> <operator>||</operator> <operator>!</operator><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_stream_number</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_flag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_stream_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sp</name><operator>-&gt;</operator><name>i_priority_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_stream_number</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>i_priority_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"read \"stream prioritization object\""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sp</name><operator>-&gt;</operator><name>i_priority_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - Stream:%u flags=0x%x"</literal></expr></argument>,

<argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_stream_number</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_stream_prioritization</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_stream_prioritization_t</name> <modifier>*</modifier></type><name>p_sp</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>stream_prioritization</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_stream_number</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_sp</name><operator>-&gt;</operator><name>pi_priority_flag</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_bitrate_mutual_exclusion</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_bitrate_mutual_exclusion_t</name> <modifier>*</modifier></type><name>p_ex</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>bitrate_mutual_exclusion</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ex</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_ex</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">42</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>ASF_OBJECT_COMMON_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>vlc_guid_t</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_guid_mutex_language</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ex</name><operator>-&gt;</operator><name>exclusion_type</name></name> <operator>=</operator> <name>LANGUAGE</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>(</operator><specifier>const</specifier> <name>vlc_guid_t</name> <operator>*</operator><operator>)</operator> <name>p_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_guid_mutex_bitrate</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ex</name><operator>-&gt;</operator><name>exclusion_type</name></name> <operator>=</operator> <name>BITRATE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_SKIP</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ex</name><operator>-&gt;</operator><name>i_stream_number_count</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ex</name><operator>-&gt;</operator><name>pi_stream_numbers</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_ex</name><operator>-&gt;</operator><name>i_stream_number_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator> <name><name>p_ex</name><operator>-&gt;</operator><name>pi_stream_numbers</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ex</name><operator>-&gt;</operator><name>i_stream_number_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ex</name><operator>-&gt;</operator><name>i_stream_number_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ex</name><operator>-&gt;</operator><name>pi_stream_numbers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>p_ex</name><operator>-&gt;</operator><name>pi_stream_numbers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>ASF_MAX_STREAMNUMBER</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ex</name><operator>-&gt;</operator><name>pi_stream_numbers</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"read \"bitrate exclusion object\" type %s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_ex</name><operator>-&gt;</operator><name>exclusion_type</name></name> <operator>==</operator> <name>LANGUAGE</name></expr> ?</condition><then> <expr><literal type="string">"Language"</literal></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator> <name><name>p_ex</name><operator>-&gt;</operator><name>exclusion_type</name></name> <operator>==</operator> <name>BITRATE</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Bitrate"</literal></expr> </then><else>: <expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></else></ternary></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ex</name><operator>-&gt;</operator><name>i_stream_number_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - stream=%u"</literal></expr></argument>, <argument><expr><name><name>p_ex</name><operator>-&gt;</operator><name>pi_stream_numbers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_bitrate_mutual_exclusion</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_bitrate_mutual_exclusion_t</name> <modifier>*</modifier></type><name>p_ex</name> <init>= <expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>bitrate_mutual_exclusion</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_ex</name><operator>-&gt;</operator><name>pi_stream_numbers</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ex</name><operator>-&gt;</operator><name>i_stream_number_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_extended_content_description</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_extended_content_description_t</name> <modifier>*</modifier></type><name>p_ec</name> <init>=

<expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>extended_content_description</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ec</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">26</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>ASF_OBJECT_COMMON_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_name</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_name</name></name> <operator>||</operator> <operator>!</operator><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ec</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>i_type</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ASF_READS</name><argument_list>( <argument><expr><call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_type</name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>ASF_METADATA_TYPE_STRING</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ASF_READS</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>ASF_METADATA_TYPE_BYTE</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>hex</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><literal type="string">"0123456789ABCDEF"</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><literal type="number">2</literal><operator>*</operator><name>i_size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name>v</name> <init>= <expr><call><name>ASF_READ1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>psz_value</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><name>v</name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_value</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hex</name><index>[<expr><name>v</name><operator>&amp;</operator><literal type="number">0xf</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>psz_value</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i_size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>ASF_METADATA_TYPE_BOOL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><ternary><condition><expr><call><name>ASF_READ1</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASF_SKIP</name><argument_list>(<argument><expr><name>i_size</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>ASF_METADATA_TYPE_DWORD</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>ASF_READ4</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>ASF_METADATA_TYPE_QWORD</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><call><name>ASF_READ8</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name>i_type</name> <operator>==</operator> <name>ASF_METADATA_TYPE_WORD</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASF_SKIP</name><argument_list>(<argument><expr><name>i_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_ec</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"read \"extended content description object\""</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ec</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" - '%s' = '%s'"</literal></expr></argument>,

<argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_extended_content_description</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_extended_content_description_t</name> <modifier>*</modifier></type><name>p_ec</name> <init>=

<expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>extended_content_description</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint16_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_ec</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_ec</name><operator>-&gt;</operator><name>ppsz_value</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_marker</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_marker_t</name> <modifier>*</modifier></type><name>p_mk</name> <init>= <expr><operator>(</operator><name>asf_object_marker_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mk</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>&gt;</operator> <name>INT32_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name><name>p_mk</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>ASF_OBJECT_COMMON_SIZE</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>( <argument><expr><literal type="number">16</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_GetGUID</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_mk</name><operator>-&gt;</operator><name>i_reserved1</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASF_SKIP</name><argument_list>( <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mk</name><operator>-&gt;</operator><name>i_count</name></name> <operator>=</operator> <call><name>ASF_READ4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mk</name><operator>-&gt;</operator><name>i_reserved2</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_mk</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>ASF_READS</name><argument_list>( <argument><expr><call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_mk</name><operator>-&gt;</operator><name>i_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_mk</name><operator>-&gt;</operator><name>marker</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name><name>p_mk</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>asf_marker_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_mk</name><operator>-&gt;</operator><name>marker</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mk</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_marker_t</name> <modifier>*</modifier></type><name>p_marker</name> <init>= <expr><operator>&amp;</operator><name><name>p_mk</name><operator>-&gt;</operator><name>marker</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>ASF_HAVE</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>+</operator><literal type="number">8</literal><operator>+</operator><literal type="number">2</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><literal type="number">4</literal><operator>+</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_marker</name><operator>-&gt;</operator><name>i_offset</name></name> <operator>=</operator> <call><name>ASF_READ8</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_marker</name><operator>-&gt;</operator><name>i_presentation_time</name></name> <operator>=</operator> <call><name>ASF_READ8</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_marker</name><operator>-&gt;</operator><name>i_entry_length</name></name> <operator>=</operator> <call><name>ASF_READ2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_marker</name><operator>-&gt;</operator><name>i_send_time</name></name> <operator>=</operator> <call><name>ASF_READ4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_marker</name><operator>-&gt;</operator><name>i_flags</name></name> <operator>=</operator> <call><name>ASF_READ4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_marker</name><operator>-&gt;</operator><name>i_marker_description_length</name></name> <operator>=</operator> <call><name>ASF_READ4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_marker</name><operator>-&gt;</operator><name>i_marker_description_length</name></name> <operator>&lt;=</operator> <operator>(</operator><name>UINT32_MAX</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_marker</name><operator>-&gt;</operator><name>p_marker_description</name></name> <operator>=</operator> <call><name>ASF_READS</name><argument_list>( <argument><expr><name><name>p_marker</name><operator>-&gt;</operator><name>i_marker_description_length</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_marker</name><operator>-&gt;</operator><name>i_marker_description_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Read \"marker object\": %"</literal><name>PRIu32</name><literal type="string">" chapters: %s"</literal></expr></argument>, <argument><expr><name><name>p_mk</name><operator>-&gt;</operator><name>i_count</name></name></expr></argument>, <argument><expr><name><name>p_mk</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mk</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"New chapter named: %s"</literal></expr></argument>, <argument><expr><name><name>p_mk</name><operator>-&gt;</operator><name>marker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_marker_description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject_marker</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_marker_t</name> <modifier>*</modifier></type><name>p_mk</name> <init>= <expr><operator>(</operator><name>asf_object_marker_t</name> <operator>*</operator><operator>)</operator><name>p_obj</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_mk</name><operator>-&gt;</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_mk</name><operator>-&gt;</operator><name>marker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_marker_description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_mk</name><operator>-&gt;</operator><name>marker</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>p_mk</name><operator>-&gt;</operator><name>name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject_Raw</name><parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>ASF_Object_Function_entry</name>

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_guid_t</name> <modifier>*</modifier></type><name>p_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>ASF_ReadObject_function</name>)<parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>ASF_FreeObject_function</name>)<parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>;</function_decl>

}</block> <decl><name><name>ASF_Object_Function</name> <index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_header_guid</name></expr>, <expr><name>ASF_OBJECT_HEADER</name></expr>,

<expr><name>ASF_ReadObject_Header</name></expr>, <expr><name>ASF_FreeObject_Null</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_data_guid</name></expr>, <expr><name>ASF_OBJECT_DATA</name></expr>,

<expr><name>ASF_ReadObject_Data</name></expr>, <expr><name>ASF_FreeObject_Null</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_simple_index_guid</name></expr>, <expr><name>ASF_OBJECT_INDEX</name></expr>,

<expr><name>ASF_ReadObject_Index</name></expr>, <expr><name>ASF_FreeObject_Index</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_file_properties_guid</name></expr>, <expr><name>ASF_OBJECT_FILE_PROPERTIES</name></expr>,

<expr><name>ASF_ReadObject_file_properties</name></expr>, <expr><name>ASF_FreeObject_Null</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_stream_properties_guid</name></expr>, <expr><name>ASF_OBJECT_STREAM_PROPERTIES</name></expr>,

<expr><name>ASF_ReadObject_stream_properties</name></expr>,<expr><name>ASF_FreeObject_stream_properties</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_header_extension_guid</name></expr>, <expr><name>ASF_OBJECT_HEADER_EXTENSION</name></expr>,

<expr><name>ASF_ReadObject_header_extension</name></expr>, <expr><name>ASF_FreeObject_header_extension</name></expr>}</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_metadata_guid</name></expr>, <expr><name>ASF_OBJECT_METADATA</name></expr>,

<expr><name>ASF_ReadObject_metadata</name></expr>, <expr><name>ASF_FreeObject_metadata</name></expr>}</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_codec_list_guid</name></expr>, <expr><name>ASF_OBJECT_CODEC_LIST</name></expr>,

<expr><name>ASF_ReadObject_codec_list</name></expr>, <expr><name>ASF_FreeObject_codec_list</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_marker_guid</name></expr>, <expr><name>ASF_OBJECT_MARKER</name></expr>,

<expr><name>ASF_ReadObject_marker</name></expr>, <expr><name>ASF_FreeObject_marker</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_padding</name></expr>, <expr><name>ASF_OBJECT_PADDING</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_compatibility_guid</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>, <expr><name>NULL</name></expr>, <expr><name>NULL</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_content_description_guid</name></expr>, <expr><name>ASF_OBJECT_CONTENT_DESCRIPTION</name></expr>,

<expr><name>ASF_ReadObject_content_description</name></expr>, <expr><name>ASF_FreeObject_content_description</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_language_list</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_language_list</name></expr>, <expr><name>ASF_FreeObject_language_list</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_stream_bitrate_properties</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_stream_bitrate_properties</name></expr>,

<expr><name>ASF_FreeObject_stream_bitrate_properties</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_extended_stream_properties_guid</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_extended_stream_properties</name></expr>,

<expr><name>ASF_FreeObject_extended_stream_properties</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_advanced_mutual_exclusion</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_advanced_mutual_exclusion</name></expr>,

<expr><name>ASF_FreeObject_advanced_mutual_exclusion</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_stream_prioritization</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_stream_prioritization</name></expr>,

<expr><name>ASF_FreeObject_stream_prioritization</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_bitrate_mutual_exclusion_guid</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_bitrate_mutual_exclusion</name></expr>,

<expr><name>ASF_FreeObject_bitrate_mutual_exclusion</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_extended_content_description</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_extended_content_description</name></expr>,

<expr><name>ASF_FreeObject_extended_content_description</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_content_encryption_guid</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_Raw</name></expr>, <expr><name>ASF_FreeObject_Null</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_advanced_content_encryption_guid</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_Raw</name></expr>, <expr><name>ASF_FreeObject_Null</name></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_extended_content_encryption_guid</name></expr>, <expr><name>ASF_OBJECT_OTHER</name></expr>,

<expr><name>ASF_ReadObject_Raw</name></expr>, <expr><name>ASF_FreeObject_Null</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_ParentObject</name><parameter_list>( <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>p_father</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_last</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name> <operator>=</operator> <name>p_obj</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name> <operator>=</operator> <name>p_obj</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_father</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_last</name></name> <operator>=</operator> <name>p_obj</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>ASF_Object_Function_entry</name></name> <modifier>*</modifier></type> <name>ASF_GetObject_Function</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>vlc_guid_t</name> <modifier>*</modifier></type><name>id</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>ASF_Object_Function</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><name><name>ASF_Object_Function</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_id</name></expr></argument>, <argument><expr><name>id</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>ASF_Object_Function</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ASF_ReadObject</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,

<parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_father</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_obj</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_obj</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ASF_ReadObjectCommon</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot read one asf object"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name></name> <operator>=</operator> <name>p_father</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_size</name></name> <operator>&lt;</operator> <name>ASF_OBJECT_COMMON_SIZE</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"found a corrupted asf object (size&lt;24)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ASF_Object_Function_entry</name></name> <modifier>*</modifier></type><name>p_reader</name> <init>=

<expr><call><name>ASF_GetObject_Function</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_reader</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name><name>p_reader</name><operator>-&gt;</operator><name>i_type</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_reader</name><operator>-&gt;</operator><name>ASF_ReadObject_function</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <call><name><name>p_reader</name><operator>-&gt;</operator><name>ASF_ReadObject_function</name></name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"unknown asf object (not loaded): "</literal> <name>GUID_FMT</name></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_id</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>i_result</name> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ASF_ParentObject</name><argument_list>( <argument><expr><name>p_father</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i_result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_FreeObject</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_child</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_obj</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_child</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASF_FreeObject</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_child</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>ASF_Object_Function_entry</name></name> <modifier>*</modifier></type><name>p_entry</name> <init>=

<expr><call><name>ASF_GetObject_Function</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_id</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_entry</name> <operator>&amp;&amp;</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>ASF_FreeObject_function</name></name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"freing asf object "</literal> <name>GUID_FMT</name></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_id</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>p_entry</name><operator>-&gt;</operator><name>ASF_FreeObject_function</name></name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_guid_t</name> <modifier>*</modifier></type><name>p_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

}</block> <decl><name><name>ASF_ObjectDumpDebugInfo</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><operator>&amp;</operator><name>vlc_object_root_guid</name></expr>, <expr><literal type="string">"Root"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_header_guid</name></expr>, <expr><literal type="string">"Header"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_data_guid</name></expr>, <expr><literal type="string">"Data"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_index_guid</name></expr>, <expr><literal type="string">"Index"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_simple_index_guid</name></expr>, <expr><literal type="string">"Simple Index"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_file_properties_guid</name></expr>, <expr><literal type="string">"File Properties"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_stream_properties_guid</name></expr>, <expr><literal type="string">"Stream Properties"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_content_description_guid</name></expr>, <expr><literal type="string">"Content Description"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_header_extension_guid</name></expr>, <expr><literal type="string">"Header Extension"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_metadata_guid</name></expr>, <expr><literal type="string">"Metadata"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_codec_list_guid</name></expr>, <expr><literal type="string">"Codec List"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_marker_guid</name></expr>, <expr><literal type="string">"Marker"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_stream_type_audio</name></expr>, <expr><literal type="string">"Stream Type Audio"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_stream_type_video</name></expr>, <expr><literal type="string">"Stream Type Video"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_stream_type_command</name></expr>, <expr><literal type="string">"Stream Type Command"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_language_list</name></expr>, <expr><literal type="string">"Language List"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_stream_bitrate_properties</name></expr>, <expr><literal type="string">"Stream Bitrate Properties"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_padding</name></expr>, <expr><literal type="string">"Padding"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_extended_stream_properties_guid</name></expr>, <expr><literal type="string">"Extended Stream Properties"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_advanced_mutual_exclusion</name></expr>, <expr><literal type="string">"Advanced Mutual Exclusion"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_stream_prioritization</name></expr>, <expr><literal type="string">"Stream Prioritization"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_bitrate_mutual_exclusion_guid</name></expr>, <expr><literal type="string">"Bitrate Mutual Exclusion"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_extended_content_description</name></expr>, <expr><literal type="string">"Extended content description"</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_content_encryption_guid</name></expr>, <expr><literal type="string">"Content Encryption"</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_advanced_content_encryption_guid</name></expr>, <expr><literal type="string">"Advanced Content Encryption"</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>asf_object_extended_content_encryption_guid</name></expr>, <expr><literal type="string">"Entended Content Encryption"</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>nonasf_object_index_placeholder_guid</name></expr>, <expr><literal type="string">"Index Placeholder"</literal></expr>}</block></expr>,

<expr><block>{ <expr><operator>&amp;</operator><name>nonasf_object_compatibility</name></expr>, <expr><literal type="string">"Object Compatibility"</literal></expr>}</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="string">"Unknown"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ASF_ObjectDumpDebug</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>,

<parameter><decl><type><name>asf_object_common_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>i_level</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>asf_object_u</name></name> <modifier>*</modifier></type><name>p_child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>ASF_ObjectDumpDebugInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_id</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><name><name>ASF_ObjectDumpDebugInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>p_id</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>i_object_id</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <name><name>ASF_ObjectDumpDebugInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_level</name> <operator>&gt;=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">5</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>str</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_level</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'|'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i_level</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><name>i_level</name></expr></argument>,

<argument><expr><literal type="string">"+ '%s'"</literal>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<literal type="string">"GUID "</literal><name>GUID_FMT</name><literal type="string">" size:%"</literal><name>PRIu64</name><literal type="string">" pos:%"</literal><name>PRIu64</name></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

, <argument><expr><name>psz_name</name></expr></argument>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ASF_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
, <argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>i_object_id</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>i_object_size</name></name></expr></argument>, <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>i_object_pos</name></name></expr></argument>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>p_child</name> <operator>=</operator> <name><name>p_node</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</init> <condition><expr><name>p_child</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>

<incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>ASF_ObjectDumpDebug</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_child</name><operator>-&gt;</operator><name>common</name></name></expr></argument>, <argument><expr><name>i_level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>asf_object_root_t</name> <modifier>*</modifier></type><name>ASF_ReadObjectRoot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_seekable</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_root_t</name> <modifier>*</modifier></type><name>p_root</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>asf_object_root_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_boundary</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_root</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name>ASF_OBJECT_ROOT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_root</name><operator>-&gt;</operator><name>i_object_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vlc_object_root_guid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>vlc_guid_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>i_object_pos</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>i_object_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_first</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_fp</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_index</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_metadata</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition>;</condition> <incr/>)</control>

<block>{<block_content>

<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>asf_object_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_obj</name> <operator>||</operator> <call><name>ASF_ReadObject</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><operator>(</operator><name>asf_object_t</name><operator>*</operator><operator>)</operator><name>p_root</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<case>case<expr><operator>(</operator> <name>ASF_OBJECT_HEADER</name> <operator>)</operator></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>p_root</name><operator>-&gt;</operator><name>p_index</name></name> <operator>||</operator> <name><name>p_root</name><operator>-&gt;</operator><name>p_data</name></name> <operator>||</operator> <name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name></name> <operator>=</operator> <operator>(</operator><name>asf_object_header_t</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr>;</expr_stmt>

<break>break;</break>

<case>case<expr><operator>(</operator> <name>ASF_OBJECT_DATA</name> <operator>)</operator></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>p_root</name><operator>-&gt;</operator><name>p_index</name></name> <operator>||</operator> <name><name>p_root</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <operator>(</operator><name>asf_object_data_t</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr>;</expr_stmt>

<break>break;</break>

<case>case<expr><operator>(</operator> <name>ASF_OBJECT_INDEX</name> <operator>)</operator></expr>:</case>

<if_stmt><if>if <condition>( <expr><name><name>p_root</name><operator>-&gt;</operator><name>p_index</name></name></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_index</name></name> <operator>=</operator> <operator>(</operator><name>asf_object_index_t</name><operator>*</operator><operator>)</operator><name>p_obj</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"unknown top-level object found: "</literal> <name>GUID_FMT</name></expr></argument>,

<argument><expr><call><name>GUID_PRINT</name><argument_list>( <argument><expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_id</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>asf_object_file_properties_guid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_boundary</name> <operator>=</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>file_properties</name><operator>.</operator><name>i_file_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>ASF_OBJECT_DATA</name> <operator>&amp;&amp;</operator>

<name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_size</name></name> <operator>&lt;=</operator> <literal type="number">50</literal></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_seekable</name> <operator>&amp;&amp;</operator> <name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name></name> <operator>&amp;&amp;</operator> <name><name>p_root</name><operator>-&gt;</operator><name>p_data</name></name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ASF_NextObject</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>i_boundary</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>p_root</name><operator>-&gt;</operator><name>p_data</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_fp</name></name> <operator>=</operator> <call><name>ASF_FindObject</name><argument_list>( <argument><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>asf_object_file_properties_guid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_root</name><operator>-&gt;</operator><name>p_fp</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_hdr_ext</name> <init>=

<expr><call><name>ASF_FindObject</name><argument_list>( <argument><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>asf_object_header_extension_guid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_hdr_ext</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_ext_stream</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_metadata</name></name> <operator>=</operator>

<call><name>ASF_FindObject</name><argument_list>( <argument><expr><name>p_hdr_ext</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>asf_object_metadata_guid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_ext_stream</name> <operator>=</operator> <call><name>ASF_CountObject</name><argument_list>( <argument><expr><name>p_hdr_ext</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>asf_object_extended_stream_properties_guid</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_ext_stream</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_esp</name> <init>=

<expr><call><name>ASF_FindObject</name><argument_list>( <argument><expr><name>p_hdr_ext</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>asf_object_extended_stream_properties_guid</name></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_esp</name><operator>-&gt;</operator><name>ext_stream</name><operator>.</operator><name>p_sp</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_sp</name> <init>=

<expr><operator>(</operator><name>asf_object_t</name><operator>*</operator><operator>)</operator><name><name>p_esp</name><operator>-&gt;</operator><name>ext_stream</name><operator>.</operator><name>p_sp</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name><operator>-&gt;</operator><name>p_last</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name> <operator>=</operator> <name>p_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name><operator>-&gt;</operator><name>p_last</name></name> <operator>=</operator> <name>p_sp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sp</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_father</name></name> <operator>=</operator> <operator>(</operator><name>asf_object_t</name><operator>*</operator><operator>)</operator><name><name>p_root</name><operator>-&gt;</operator><name>p_hdr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_ObjectDumpDebug</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>asf_object_common_t</name><operator>*</operator><operator>)</operator><name>p_root</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_root</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"cannot find file properties object"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ASF_FreeObjectRoot</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_root</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ASF_FreeObjectRoot</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>asf_object_root_t</name> <modifier>*</modifier></type><name>p_root</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <name><name>p_root</name><operator>-&gt;</operator><name>p_first</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_obj</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_next</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_next</name> <operator>=</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ASF_FreeObject</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_obj</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <name>p_next</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_root</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ASF_CountObject</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_guid_t</name> <modifier>*</modifier></type><name>p_guid</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_child</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <operator>(</operator><name>asf_object_t</name> <operator>*</operator><operator>)</operator><name>_p_obj</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_obj</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_child</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_id</name></name></expr></argument>, <argument><expr><name>p_guid</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_count</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>i_count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>ASF_FindObject</name><parameter_list>( <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>_p_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vlc_guid_t</name> <modifier>*</modifier></type><name>p_guid</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>i_number</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>asf_object_t</name> <modifier>*</modifier></type><name>p_child</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>p_obj</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p_obj</name> <operator>=</operator> <operator>(</operator><name>asf_object_t</name> <operator>*</operator><operator>)</operator><name>_p_obj</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_obj</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_first</name></name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>p_child</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>guidcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>i_object_id</name></name></expr></argument>, <argument><expr><name>p_guid</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_number</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>p_child</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_number</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>p_next</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
