<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\dash\mpd\DASHCommonAttributesElements.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>dash</name>

<block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>mpd</name>

<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>ContentDescription</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>DASHCommonAttributesElements</name>

<block>{<block_content>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>DASHCommonAttributesElements</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>DASHCommonAttributesElements</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>int</name> <macro><name>getParX</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>setParX</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>parX</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><name>int</name> <macro><name>getParY</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>setParY</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>parY</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><name>int</name> <macro><name>getFrameRate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>setFrameRate</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>frameRate</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>getNumberOfChannels</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>void</name></type> <name>addChannel</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>channel</name></expr></argument> )</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>getSamplingRates</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>addSampleRate</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>sampleRate</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ContentDescription</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>getContentProtections</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>addContentProtection</name><parameter_list>( <parameter><decl><type><name>ContentDescription</name> <modifier>*</modifier></type><name>desc</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ContentDescription</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>getAccessibilities</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>addAccessibility</name><parameter_list>( <parameter><decl><type><name>ContentDescription</name> <modifier>*</modifier></type><name>desc</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ContentDescription</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>getRatings</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>addRating</name><parameter_list>( <parameter><decl><type><name>ContentDescription</name><modifier>*</modifier></type> <name>desc</name></decl></parameter> )</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ContentDescription</name><operator>*</operator></expr></argument>&gt;</argument_list></name><operator>&amp;</operator> <macro><name>getViewpoints</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>addViewpoint</name><parameter_list>( <parameter><decl><type><name>ContentDescription</name> <modifier>*</modifier></type><name>desc</name></decl></parameter> )</parameter_list>;</function_decl>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name>int</name></type> <name>parX</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parY</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frameRate</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>std</name><operator>::</operator><name>string</name></expr></argument>&gt;</argument_list></name> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>sampleRates</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ContentDescription</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>contentProtections</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ContentDescription</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>accessibilities</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ContentDescription</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>ratings</name></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>ContentDescription</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <name>viewpoints</name></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

</unit>
