<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\dash\mpd\Representation.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DASHCommonAttributesElements.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../adaptive/playlist/SegmentInfoCommon.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../adaptive/playlist/BaseRepresentation.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>dash</name>

<block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>mpd</name>

<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AdaptationSet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>MPD</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>adaptive</name></decl>;</decl_stmt>

<expr_stmt><expr><name>using</name> <name>namespace</name> <name>adaptive</name><operator>::</operator><name>playlist</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Representation</name> <range>: <expr><name>public</name> <name>BaseRepresentation</name></expr></range></decl>,

<decl><type ref="prev"/><name>public</name> <name>DASHCommonAttributesElements</name>

<block>{<block_content>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>Representation</name><argument_list>( <argument><expr><name>AdaptationSet</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>Representation</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>StreamFormat</name> <macro><name>getStreamFormat</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> 

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>contextualize</name><argument_list>(<argument>size_t</argument>, <argument>const std::string &amp;</argument>,

<argument>const BaseSegmentTemplate *</argument>)</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> 

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>stime_t</name></type> <name>getScaledTimeBySegmentNumber</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>MediaSegmentTemplate</name> <operator>*</operator></expr></argument>)</argument_list> const</decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

</unit>
