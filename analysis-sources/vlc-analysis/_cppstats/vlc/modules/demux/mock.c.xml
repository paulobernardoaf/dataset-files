<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mock.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_input.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vector.h&gt;</cpp:file></cpp:include>

<struct>struct <name>mock_track</name>

<block>{

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>id</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><name><name>struct</name> <name>VLC_VECTOR</name></name></type><argument_list>(<argument><expr>struct <name>mock_track</name> <operator>*</operator></expr></argument>)</argument_list> <name>mock_track_vector</name>;</typedef>

<function><type><specifier>static</specifier> <name>ssize_t</name></type>

<name>var_InheritSsize</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>value</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>value</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type>

<name>var_InheritUnsigned</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>value</name> <init>= <expr><call><name>var_InheritInteger</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>&lt;</operator> <name>UINT_MAX</name></expr> ?</condition><then> <expr><name>value</name></expr> </then><else>: <expr><name>UINT_MAX</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>vlc_fourcc_t</name></type>

<name>var_InheritFourcc</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>var_value</name> <init>= <expr><call><name>var_InheritString</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>var_value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>var_len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>var_value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>var_len</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>var_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[]</index></name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>var_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>var_len</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>value</name><index>[<expr><name>var_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>var_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>fourcc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fourcc</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>fourcc</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LIST_OPTIONS</name></cpp:macro> <cpp:value>X(length, vlc_tick_t, add_integer, var_InheritInteger, VLC_TICK_FROM_MS(5000)) X(audio_track_count, ssize_t, add_integer, var_InheritSsize, 0) X(audio_channels, unsigned, add_integer, var_InheritUnsigned, 2) X(audio_format, vlc_fourcc_t, add_string, var_InheritFourcc, "u8") X(audio_rate, unsigned, add_integer, var_InheritUnsigned, 44100) X(audio_packetized, bool, add_bool, var_InheritBool, true) X(audio_sample_length, vlc_tick_t, add_integer, var_InheritInteger, VLC_TICK_FROM_MS(40) ) X(video_track_count, ssize_t, add_integer, var_InheritSsize, 0) X(video_chroma, vlc_fourcc_t, add_string, var_InheritFourcc, "I420") X(video_width, unsigned, add_integer, var_InheritUnsigned, 640) X(video_height, unsigned, add_integer, var_InheritUnsigned, 480) X(video_frame_rate, unsigned, add_integer, var_InheritUnsigned, 25) X(video_frame_rate_base, unsigned, add_integer, var_InheritUnsigned, 1) X(video_packetized, bool, add_bool, var_InheritBool, true) X(input_sample_length, vlc_tick_t, add_integer, var_InheritInteger, VLC_TICK_FROM_MS(40) ) X(sub_track_count, ssize_t, add_integer, var_InheritSsize, 0) X(sub_packetized, bool, add_bool, var_InheritBool, true) X(title_count, ssize_t, add_integer, var_InheritSsize, 0 ) X(chapter_count, ssize_t, add_integer, var_InheritSsize, 0) X(null_names, bool, add_bool, var_InheritBool, false) X(program_count, ssize_t, add_integer, var_InheritSsize, 0) X(can_seek, bool, add_bool, var_InheritBool, true) X(can_pause, bool, add_bool, var_InheritBool, true) X(can_control_pace, bool, add_bool, var_InheritBool, true) X(can_control_rate, bool, add_bool, var_InheritBool, true) X(can_record, bool, add_bool, var_InheritBool, true) X(error, bool, add_bool, var_InheritBool, false) X(pts_delay, unsigned, add_integer, var_InheritUnsigned, MS_FROM_VLC_TICK(DEFAULT_PTS_DELAY)) X(add_video_track_at, vlc_tick_t, add_integer, var_InheritInteger, VLC_TICK_INVALID ) X(add_audio_track_at, vlc_tick_t, add_integer, var_InheritInteger, VLC_TICK_INVALID ) X(add_spu_track_at, vlc_tick_t, add_integer, var_InheritInteger, VLC_TICK_INVALID )</cpp:value></cpp:define> 

<struct>struct <name>demux_sys</name>

<block>{

<decl_stmt><decl><type><name>mock_track_vector</name></type> <name>tracks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>audio_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>video_pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>current_title</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>chapter_gap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>updates</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>var_name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>module_header_type</name></type></parameter>, <parameter><type><name>getter</name></type></parameter>, <parameter><type><name>default_value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type var_name;</cpp:value></cpp:define>

<expr_stmt><expr><name>LIST_OPTIONS</name></expr></expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>input_title_t</name> <modifier>*</modifier></type>

<name>CreateTitle</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><call><name>vlc_input_title_New</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>t</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>null_names</name></name>

<operator>&amp;&amp;</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><literal type="string">"Mock Title %zu"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name></name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>chapter_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vlc_seekpoint_New</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>i_seekpoint</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>null_names</name></name>

<operator>&amp;&amp;</operator> <call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>psz_name</name></expr></argument>, <argument><expr><literal type="string">"Mock Chapter %zu-%zu"</literal></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>

<operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>seekpoint</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>i_time_offset</name> <operator>=</operator> <name>i</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>chapter_gap</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Control</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>query</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>can_seek</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>can_pause</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>can_control_pace</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pts_delay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_SIGNAL</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<return>return <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>can_pause</name></name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>DEMUX_SET_TITLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>new_title</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new_title</name> <operator>&gt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>current_title</name></name> <operator>=</operator> <name>new_title</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>|=</operator> <name>INPUT_UPDATE_TITLE</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_SEEKPOINT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>chapter_gap</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>seekpoint_idx</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>seekpoint_idx</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>chapter_count</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>=</operator>

<operator>(</operator><name>seekpoint_idx</name> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>chapter_gap</name></name><operator>)</operator> <operator>+</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_TEST_AND_CLEAR_FLAGS</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>flags</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>unsigned</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>flags</name> <operator>&amp;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>updates</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>&amp;=</operator> <operator>~</operator><operator>*</operator><name>flags</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TITLE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>current_title</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_SEEKPOINT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>chapter_gap</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator> <name><name>sys</name><operator>-&gt;</operator><name>chapter_gap</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>can_seek</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>can_seek</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>input_title_t</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>titles</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>input_title_t</name> <operator>*</operator><operator>*</operator><operator>*</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>titles</name> <operator>=</operator> <call><name>vlc_alloc</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>titles</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>titles</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>titles</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>CreateTitle</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>titles</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index></expr>)</condition>

<block>{<block_content>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_input_title_Delete</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>titles</name><operator>)</operator><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>titles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>titles</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>int</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_GROUP_DEFAULT</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_GROUP_ALL</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_GROUP_LIST</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_ES</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_ES_LIST</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_NEXT_DEMUX_TIME</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>can_record</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_RECORD_STATE</name></expr>:</case>

<return>return <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>can_record</name></name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>DEMUX_CAN_CONTROL_RATE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>can_control_rate</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_RATE</name></expr>:</case>

<return>return <expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>can_control_rate</name></name></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

<case>case <expr><name>DEMUX_IS_PLAYLIST</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_NAV_ACTIVATE</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_NAV_UP</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_NAV_DOWN</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_NAV_LEFT</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_NAV_RIGHT</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_NAV_POPUP</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_NAV_MENU</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>

<name>CreateAudioBlock</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mock_track</name></name> <modifier>*</modifier></type><name>track</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>samples</name> <init>=

<expr><call><name>samples_from_vlc_tick</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>bytes</name> <init>= <expr><name>samples</name> <operator>/</operator> <name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_frame_length</name></name>

<operator>*</operator> <name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bytes_per_frame</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>demux</name></expr>;</expr_stmt>

</block_content>}</block></function>

<struct>struct <name>video_block</name>

<block>{

<decl_stmt><decl><type><name>block_t</name></type> <name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>video_block_free_cb</name><parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>video_block</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><call><name>container_of</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr>struct <name>video_block</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name><name>video</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>video</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>

<name>CreateVideoBlock</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mock_track</name></name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>picture_t</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><call><name>picture_NewFromFormat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>video</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>video_block</name></name> <modifier>*</modifier></type><name>video</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>video</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>video</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>picture_Release</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>video</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_block_callbacks</name></name></type> <name>cbs</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>free</name> <operator>=</operator> <name>video_block_free_cb</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>block_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>i_planes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>block_len</name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_lines</name> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_pitch</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>/</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <literal type="number">255</literal></expr></argument>,

<argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>block_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>video</name><operator>-&gt;</operator><name>b</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cbs</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p_pixels</name></expr></argument>, <argument><expr><name>block_len</name></expr></argument>)</argument_list></call></expr>;</return>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>demux</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type>

<name>CreateSubBlock</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>mock_track</name></name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>text</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>text</name></expr></argument>, <argument><expr><literal type="string">"subtitle @ %"</literal><name>PRId64</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><call><name>block_Alloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>b</name></expr>;</return>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>track</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>AppendMockTrack</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>packetized</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mock_track</name></name> <modifier>*</modifier></type><name>mock_track</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>mock_track</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>mock_track</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mock_track</name><operator>-&gt;</operator><name>fmt</name></name> <operator>=</operator> <operator>*</operator><name>fmt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mock_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mock_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_group</name></name> <operator>=</operator> <name>group</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mock_track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>b_packetized</name></name> <operator>=</operator> <name>packetized</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mock_track</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator> <name><name>mock_track</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>mock_track</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mock_track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>vlc_vector_push</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>mock_track</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>success</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <name>success</name></expr>;</expr_stmt> 

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>InitVideoTracks</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_chroma_description_t</name> <modifier>*</modifier></type><name>desc</name> <init>=

<expr><call><name>vlc_fourcc_GetChromaDescription</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>video_chroma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name> <operator>||</operator> <name><name>desc</name><operator>-&gt;</operator><name>plane_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>video_chroma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>frame_rate_ok</name> <init>=

<expr><name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate</name></name> <operator>!=</operator> <name>UINT_MAX</name> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate_base</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate_base</name></name> <operator>!=</operator> <name>UINT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>chroma_ok</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>video_chroma</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>size_ok</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>video_width</name></name> <operator>!=</operator> <name>UINT_MAX</name> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>video_height</name></name> <operator>!=</operator> <name>UINT_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate_base</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_chroma</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_rate_ok</name> <operator>||</operator> <operator>!</operator><name>chroma_ok</name> <operator>||</operator> <operator>!</operator><name>size_ok</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_rate_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid video frame rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chroma_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid video chroma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid video size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>video_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_chroma</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_frame_rate_base</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate_base</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AppendMockTrack</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>video_packetized</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>InitAudioTracks</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>rate_ok</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>audio_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_rate</name></name> <operator>!=</operator> <name>UINT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>format_ok</name> <init>= <expr><call><name>aout_BitsPerSample</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_format</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>channels_ok</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>audio_channels</name></name> <operator>&lt;=</operator> <name>AOUT_CHAN_MAX</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rate_ok</name> <operator>||</operator> <operator>!</operator><name>format_ok</name> <operator>||</operator> <operator>!</operator><name>channels_ok</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>rate_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid audio rate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>format_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid audio format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>channels_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid audio channels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>physical_channels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>audio_channels</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>physical_channels</name> <operator>=</operator> <name>AOUT_CHAN_CENTER</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><name>physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_2_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_2_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><name>physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_4_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case> <expr_stmt><expr><name>physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_4_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case> <expr_stmt><expr><name>physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_6_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case> <expr_stmt><expr><name>physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_7_0</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><name>physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_7_1</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">9</literal></expr>:</case> <expr_stmt><expr><name>physical_channels</name> <operator>=</operator> <name>AOUT_CHANS_8_1</name></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_format</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name>physical_channels</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aout_FormatPrepare</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>fmt</name><operator>.</operator><name>audio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AppendMockTrack</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_packetized</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>InitSubTracks</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_SUBT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AppendMockTrack</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sub_packetized</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>DemuxAudio</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>step_length</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>end_pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name> <operator>&lt;</operator> <name>end_pts</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mock_track</name></name> <modifier>*</modifier></type><name>track</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>track</argument>, <argument>&amp;sys-&gt;tracks</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>AUDIO_ES</name></expr>:</case>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>CreateAudioBlock</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>step_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<continue>continue;</continue>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>step_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name> <operator>+=</operator> <name>step_length</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>DemuxVideo</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>step_length</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>end_pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>&lt;</operator> <name>end_pts</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>mock_track</name></name> <modifier>*</modifier></type><name>track</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>track</argument>, <argument>&amp;sys-&gt;tracks</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VIDEO_ES</name></expr>:</case>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>CreateVideoBlock</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SPU_ES</name></expr>:</case>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>CreateSubBlock</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<continue>continue;</continue>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>block</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>step_length</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>+=</operator> <name>step_length</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Demux</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>video_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>sub_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>(<argument><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>video_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>sub_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>&gt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>video_step_length</name> <init>=

<expr><ternary><condition><expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>video_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>sub_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then>

<expr><call><name>VLC_TICK_FROM_SEC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate_base</name></name>

<operator>/</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_frame_rate</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>audio_step_length</name> <init>=

<expr><ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>sys</name><operator>-&gt;</operator><name>audio_sample_length</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>step_length</name> <init>= <expr><call><name>__MAX</name><argument_list>(<argument><expr><name>audio_step_length</name></expr></argument>, <argument><expr><name>video_step_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>VLC_SUCCESS</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>audio_eof</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>video_eof</name> <init>= <expr><name>true</name></expr></init></decl>, <decl><type ref="prev"/><name>input_eof</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DemuxAudio</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>audio_step_length</name></expr></argument>,

<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name>step_length</name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name> <operator>+</operator> <name>audio_step_length</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>audio_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>VLC_SUCCESS</name>

<operator>&amp;&amp;</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>video_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>sys</name><operator>-&gt;</operator><name>sub_track_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>DemuxVideo</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>video_step_length</name></expr></argument>,

<argument><expr><call><name>__MIN</name><argument_list>(<argument><expr><name>step_length</name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>+</operator> <name>video_step_length</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>video_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>step_length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>+=</operator> <name><name>sys</name><operator>-&gt;</operator><name>input_sample_length</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>input_sample_length</name></name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>input_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>add_video_track_at</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>add_video_track_at</name></name> <operator>&lt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>add_video_track_at</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>InitVideoTracks</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>video_track_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>video_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>add_audio_track_at</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>add_audio_track_at</name></name> <operator>&lt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>add_audio_track_at</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>InitAudioTracks</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_track_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>add_spu_track_at</name></name> <operator>!=</operator> <name>VLC_TICK_INVALID</name> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>add_spu_track_at</name></name> <operator>&lt;=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>add_spu_track_at</name></name> <operator>=</operator> <name>VLC_TICK_INVALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>InitSubTracks</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>sub_track_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>video_eof</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>audio_eof</name> <operator>&amp;&amp;</operator> <name>video_eof</name> <operator>&amp;&amp;</operator> <name>input_eof</name></expr> ?</condition><then> <expr><name>VLC_DEMUXER_EOF</name></expr>

</then><else>: <expr><name>VLC_DEMUXER_SUCCESS</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>Close</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>mock_track</name></name> <modifier>*</modifier></type><name>track</name></decl>;</decl_stmt>

<macro><name>vlc_vector_foreach</name><argument_list>(<argument>track</argument>, <argument>&amp;sys-&gt;tracks</argument>)</argument_list></macro>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>track</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>vlc_vector_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>Open</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>demux_sys</name></name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sys</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>var_LocationParse</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument>, <argument><expr><literal type="string">"mock-"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>var_name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>module_header_type</name></type></parameter>, <parameter><type><name>getter</name></type></parameter>, <parameter><type><name>default_value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sys-&gt;var_name = getter(obj, "mock-"#var_name);</cpp:value></cpp:define>

<macro><name>LIST_OPTIONS</name></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>length_ok</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>tracks_ok</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>video_track_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>sys</name><operator>-&gt;</operator><name>sub_track_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>titles_ok</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>title_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>chapters_ok</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>programs_ok</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>program_count</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>length_ok</name> <operator>||</operator> <operator>!</operator><name>tracks_ok</name> <operator>||</operator> <operator>!</operator><name>titles_ok</name> <operator>||</operator> <operator>!</operator><name>chapters_ok</name> <operator>||</operator> <operator>!</operator><name>programs_ok</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>length_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tracks_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid track count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>titles_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid title count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>chapters_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid chapter count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>programs_ok</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid program count"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>program_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>program_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>track_count</name> <init>= <expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>video_track_count</name></name> <operator>+</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_track_count</name></name> <operator>+</operator>

<name><name>sys</name><operator>-&gt;</operator><name>sub_track_count</name></name><operator>)</operator> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>program_count</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_vector_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>track_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>vlc_vector_reserve</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>tracks</name></name></expr></argument>, <argument><expr><name>track_count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>success</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>ssize_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>program_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>InitVideoTracks</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>video_track_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>InitAudioTracks</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>audio_track_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>InitSubTracks</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>sub_track_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>audio_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>video_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>current_title</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>chapter_gap</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sys</name><operator>-&gt;</operator><name>chapter_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>length</name></name> <operator>/</operator> <name><name>sys</name><operator>-&gt;</operator><name>chapter_count</name></name><operator>)</operator></expr> </then><else>: <expr><name>VLC_TICK_INVALID</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>updates</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>Close</name><argument_list>(<argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>var_name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>module_header_type</name></type></parameter>, <parameter><type><name>getter</name></type></parameter>, <parameter><type><name>default_value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>module_header_type("mock-"#var_name, default_value, NULL, NULL, true) change_volatile() change_safe()</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument><literal type="string">"mock access demux"</literal></argument>)</argument_list></macro>

<macro><name>set_capability</name><argument_list>(<argument><literal type="string">"access"</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>set_category</name><argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>(<argument>SUBCAT_INPUT_ACCESS</argument>)</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<decl><type><name>LIST_OPTIONS</name></type>

<name>add_shortcut</name><argument_list>(<argument><expr><literal type="string">"mock"</literal></expr></argument>)</argument_list>

<name>vlc_module_end</name><argument_list>()</argument_list></decl>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>X</name></cpp:undef>

</unit>
