<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\playlist\m3u.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_access.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"playlist.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ContainsURL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>GuessEncoding</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>IsUTF8</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>FromLatin1</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>CheckUnicode</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><call><name>IsUTF8</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strdup</name> <argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>IsHLS</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>hlsexts</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"#EXT-X-MEDIA:"</literal></expr>,

<expr><literal type="string">"#EXT-X-VERSION:"</literal></expr>,

<expr><literal type="string">"#EXT-X-TARGETDURATION:"</literal></expr>,

<expr><literal type="string">"#EXT-X-MEDIA-SEQUENCE:"</literal></expr>,

<expr><literal type="string">"#EXT-X-STREAM-INF:"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>hlsexts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>strnstr</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>buf</name></expr></argument>, <argument><expr><name><name>hlsexts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>Import_M3U</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_stream</name> <init>= <expr><operator>(</operator><name>stream_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_FILE</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_dup</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name>GuessEncoding</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><call><name>stream_HasExtension</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">".m3u8"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"RTSPtext"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>pf_dup</name> <operator>=</operator> <name>CheckUnicode</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"\xef\xbb\xbf"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pf_dup</name> <operator>=</operator> <name>CheckUnicode</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p_peek</name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>-=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>stream_MimeType</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>match</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_stream</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><name>type</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>!</operator><call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"application/vnd.apple.mpegurl"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"#EXTM3U"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <operator>(</operator><name>type</name> <operator>!=</operator> <name>NULL</name>

<operator>&amp;&amp;</operator> <operator>(</operator><call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"application/mpegurl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"application/x-mpegurl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"audio/mpegurl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"vnd.apple.mpegURL"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>vlc_ascii_strcasecmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"audio/x-mpegurl"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <call><name>stream_HasExtension</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">".m3u8"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>stream_HasExtension</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">".m3u"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <operator>!</operator><call><name>IsHLS</name><argument_list>(<argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else

if <condition>(<expr><call><name>stream_HasExtension</name><argument_list>(<argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">".vlc"</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"RTSPtext"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>ContainsURL</name><argument_list>(<argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_stream</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"found valid M3U playlist"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>pf_dup</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_readdir</name></name> <operator>=</operator> <name>ReadDir</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_stream</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>access_vaDirectoryControlHelper</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>ContainsURL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_peek</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ps</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>p_peek</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ps_end</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p_peek</name> <operator>+</operator> <name>i_peek</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_max</name> <init>= <expr><sizeof>sizeof<argument_list>( <argument><expr><literal type="string">"https://"</literal></expr></argument> )</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <name>i_max</name> <operator>+</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_newline</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>ps</name> <operator>+</operator> <name>i_max</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>ps_end</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>ps</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>ps</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>ps</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>b_newline</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>b_newline</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ps_match</name> <init>= <expr><call><name>strnstr</name><argument_list>( <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="string">"://"</literal></expr></argument>, <argument><expr><name>i_max</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>ps_match</name></expr>)</condition>

<block>{<block_content>

<switch>switch<condition>(<expr><name>ps_match</name> <operator>-</operator> <name>ps</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="string">"mms"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="string">"ftp"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="string">"http"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="string">"rtsp"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="string">"ftps"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="string">"https"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="string">"ftpes"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>ps</name> <operator>!=</operator> <literal type="char">'#'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ps</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>ps</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_newline</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ps</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>false</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>entry_meta_s</name>

<block>{

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_artist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_album_art</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_mrl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_language</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tvgid</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_grouptitle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type><name>ppsz_options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_options</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entry_meta_Init</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>entry_meta_s</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <name>INPUT_DURATION_INDEFINITE</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entry_meta_Clean</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>entry_meta_s</name></name> <modifier>*</modifier></type><name>e</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>e</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>e</name><operator>-&gt;</operator><name>psz_artist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>e</name><operator>-&gt;</operator><name>psz_album_art</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>e</name><operator>-&gt;</operator><name>psz_mrl</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>e</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>e</name><operator>-&gt;</operator><name>psz_tvgid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>e</name><operator>-&gt;</operator><name>psz_grouptitle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name><name>e</name><operator>-&gt;</operator><name>i_options</name></name><operator>--</operator></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>e</name><operator>-&gt;</operator><name>ppsz_options</name><index>[<expr><name><name>e</name><operator>-&gt;</operator><name>i_options</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>parseEXTINF</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>entry_meta_s</name></name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>CreateEntry</name><parameter_list>( <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>entry_meta_s</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>meta</name><operator>-&gt;</operator><name>psz_mrl</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>input_item_t</name> <modifier>*</modifier></type><name>p_input</name> <init>=

<expr><call><name>input_item_NewExt</name><argument_list>( <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_mrl</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>i_duration</name></name></expr></argument>,

<argument><expr><name>ITEM_TYPE_UNKNOWN</name></expr></argument>, <argument><expr><name>ITEM_NET_UNKNOWN</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_input</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_AddOptions</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>i_options</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>ppsz_options</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>meta</name><operator>-&gt;</operator><name>psz_artist</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetArtist</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_artist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>meta</name><operator>-&gt;</operator><name>psz_name</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetTitle</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>meta</name><operator>-&gt;</operator><name>psz_album_art</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetArtURL</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_album_art</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>meta</name><operator>-&gt;</operator><name>psz_language</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetLanguage</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_language</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>meta</name><operator>-&gt;</operator><name>psz_tvgid</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_AddInfo</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><literal type="string">"XMLTV"</literal></expr></argument>, <argument><expr><literal type="string">"tvg-id"</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_tvgid</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>meta</name><operator>-&gt;</operator><name>psz_grouptitle</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>input_item_SetAlbum</name><argument_list>( <argument><expr><name>p_input</name></expr></argument>, <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_grouptitle</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>input_item_node_AppendItem</name><argument_list>( <argument><expr><name>p_node</name></expr></argument>, <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>input_item_Release</name><argument_list>( <argument><expr><name>p_input</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDir</name><parameter_list>( <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>input_item_node_t</name> <modifier>*</modifier></type><name>p_subitems</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>entry_meta_s</name></name></type> <name>meta</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>entry_meta_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>char</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>pf_dup</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init>;</function_decl>

<expr_stmt><expr><name>psz_line</name> <operator>=</operator> <call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>psz_line</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_parse</name> <init>= <expr><name>psz_line</name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator>

<operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">'\r'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_parse</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator>

<operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator>

<operator>*</operator><name>psz_parse</name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_parse</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>psz_parse</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>nextline</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument>, <argument><expr><literal type="string">"EXTINF:"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"EXTINF:"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_parse</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"EXTINF:"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>i_duration</name></name> <operator>=</operator> <name>INPUT_DURATION_INDEFINITE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>parseEXTINF</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument>, <argument><expr><name>pf_dup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument>, <argument><expr><literal type="string">"EXTVLCOPT:"</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"EXTVLCOPT:"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_option</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_parse</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"EXTVLCOPT:"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>*</operator><name>psz_parse</name></expr> )</condition><block type="pseudo"><block_content> <goto>goto <name>nextline</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_option</name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_option</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TAB_APPEND</name><argument_list>( <argument><expr><name><name>meta</name><operator>.</operator><name>i_options</name></name></expr></argument>, <argument><expr><name><name>meta</name><operator>.</operator><name>ppsz_options</name></name></expr></argument>, <argument><expr><name>psz_option</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument>, <argument><expr><literal type="string">"EXTALBUMARTURL:"</literal></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>( <argument><expr><literal type="string">"EXTALBUMARTURL:"</literal></expr></argument> )</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_parse</name> <operator>+=</operator> <sizeof>sizeof<argument_list>( <argument><expr><literal type="string">"EXTALBUMARTURL:"</literal></expr></argument> )</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_parse</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>meta</name><operator>.</operator><name>psz_album_art</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>psz_album_art</name></name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument>, <argument><expr><literal type="string">"RTSPtext"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"RTSPtext"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<empty_stmt>;</empty_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>psz_parse</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_parse</name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>meta</name><operator>.</operator><name>psz_name</name></name> <operator>&amp;&amp;</operator> <name>psz_parse</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>psz_name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>meta</name><operator>.</operator><name>psz_mrl</name></name> <operator>=</operator> <call><name>ProcessMRL</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_url</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_parse</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CreateEntry</name><argument_list>( <argument><expr><name>p_subitems</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>entry_meta_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>entry_meta_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>nextline</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_line</name> <operator>=</operator> <call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_line</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>entry_meta_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>entry_meta_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parseEXTINFTitle</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter>,

<parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_dup</name>) <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>entry_meta_s</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_item</name> <init>= <expr><call><name>strstr</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><literal type="string">" - "</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_item</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_item</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_artist</name></name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_item</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_item</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>*</operator><name>psz_string</name> <operator>==</operator> <literal type="char">','</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_string</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_string</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_item</name> <operator>=</operator> <name>psz_string</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_string</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>psz_string</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_string</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_item</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_artist</name></name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><name>psz_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_string</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_item</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_name</name></name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><name>psz_item</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parseEXTINFIptvDiots</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter>,

<parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_dup</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>entry_meta_s</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppsz_meta</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><literal type="string">"tvg-"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strncmp</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><literal type="string">"group-"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_sep</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_string</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>psz_sep</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_keylen</name> <init>= <expr><name>psz_sep</name> <operator>-</operator> <name>psz_string</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_string</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"logo"</literal></expr></argument>, <argument><expr><name>i_keylen</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ppsz_meta</name> <operator>=</operator> <operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>psz_album_art</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_string</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"name"</literal></expr></argument>, <argument><expr><name>i_keylen</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ppsz_meta</name> <operator>=</operator> <operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>psz_name</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_string</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"language"</literal></expr></argument>, <argument><expr><name>i_keylen</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ppsz_meta</name> <operator>=</operator> <operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>psz_language</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_string</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"id"</literal></expr></argument>, <argument><expr><name>i_keylen</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ppsz_meta</name> <operator>=</operator> <operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>psz_tvgid</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>psz_string</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"title"</literal></expr></argument>, <argument><expr><name>i_keylen</name> <operator>-</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ppsz_meta</name> <operator>=</operator> <operator>&amp;</operator><name><name>meta</name><operator>-&gt;</operator><name>psz_grouptitle</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>ppsz_meta</name> <operator>||</operator> <operator>*</operator><name>ppsz_meta</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><name>psz_sep</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_valuelen</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_valuelen</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_escaped</name> <init>= <expr><operator>(</operator><operator>*</operator><name>psz_value</name> <operator>==</operator> <literal type="char">'"'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_valuelen</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>b_escaped</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>psz_value</name><index>[ <expr><name>i_valuelen</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ppsz_meta</name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><name>psz_value</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>ppsz_meta</name> <operator>=</operator> <call><name>pf_dup</name><argument_list>( <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parseEXTINFIptvDiotsInDuration</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter>,

<parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_dup</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>entry_meta_s</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>psz_string</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>psz_string</name> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_string</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_start</name> <init>= <expr><name>psz_string</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_escaped</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_key</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_value</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_next</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition><expr><operator>!</operator><name>b_next</name></expr>;</condition> <incr><expr><operator>++</operator><name>psz_string</name></expr></incr> )</control>

<block>{<block_content>

<switch>switch<condition>( <expr><operator>*</operator><name>psz_string</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'"'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_escaped</name> <operator>&amp;&amp;</operator> <name>b_value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_key</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_value</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_escaped</name> <operator>=</operator> <operator>!</operator><name>b_escaped</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\0'</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_escaped</name> <operator>&amp;&amp;</operator> <name>b_value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parseEXTINFIptvDiots</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><name>pf_dup</name></expr></argument>, <argument><expr><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return;</return>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>b_escaped</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_string</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>b_value</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parseEXTINFIptvDiots</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><name>pf_dup</name></expr></argument>, <argument><expr><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_next</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'='</literal></expr>:</case>

<expr_stmt><expr><name>b_key</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><name>b_key</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b_value</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parseEXTINF</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_string</name></decl></parameter>,

<parameter><function_decl><type><name>char</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>pf_dup</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>entry_meta_s</name></name> <modifier>*</modifier></type><name>meta</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>psz_string</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FREENULL</name><argument_list>( <argument><expr><name><name>meta</name><operator>-&gt;</operator><name>psz_artist</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<while>while<condition>( <expr><name>psz_string</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>*</operator><name>psz_string</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>psz_string</name> <operator>==</operator> <literal type="char">' '</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_string</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_comma</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_comma</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_comma</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> 

<if_stmt><if>if<condition>( <expr><operator>++</operator><name>psz_comma</name> <operator>&lt;</operator> <name>end</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parseEXTINFTitle</name><argument_list>( <argument><expr><name>psz_comma</name></expr></argument>, <argument><expr><name>pf_dup</name></expr></argument>, <argument><expr><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name></type> <name>i_parsed_duration</name> <init>= <expr><call><name>strtol</name><argument_list>( <argument><expr><name>psz_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_parsed_duration</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>i_duration</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>i_parsed_duration</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_end</name> <operator>&amp;&amp;</operator> <name>psz_end</name> <operator>!=</operator> <name>psz_string</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><name>psz_end</name> <operator>==</operator> <literal type="char">' '</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>parseEXTINFIptvDiotsInDuration</name><argument_list>( <argument><expr><name>psz_end</name></expr></argument>, <argument><expr><name>pf_dup</name></expr></argument>, <argument><expr><name>meta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
