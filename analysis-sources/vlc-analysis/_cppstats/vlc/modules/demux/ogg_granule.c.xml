<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\ogg_granule.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBVORBIS</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vorbis/codec.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ogg/ogg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ogg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ogg_granule.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THEORA_FTYPE_NOTDATA</name></cpp:macro> <cpp:value>0x80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>THEORA_FTYPE_INTERFRAME</name></cpp:macro> <cpp:value>0x40</cpp:value></cpp:define>

<function><type><name>bool</name></type> <name>Ogg_IsKeyFrame</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>logical_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ogg_packet</name> <modifier>*</modifier></type><name>p_packet</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_oggds</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><operator>(</operator> <name><name>p_packet</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_packet</name><operator>-&gt;</operator><name>packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>PACKET_IS_SYNCPOINT</name> <operator>)</operator></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <switch>switch <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_THEORA</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DAALA</name></expr>:</case> 

<if_stmt><if>if <condition>( <expr><name><name>p_packet</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_packet</name><operator>-&gt;</operator><name>packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>THEORA_FTYPE_NOTDATA</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>false</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>!</operator><operator>(</operator> <name><name>p_packet</name><operator>-&gt;</operator><name>packet</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name>THEORA_FTYPE_INTERFRAME</name> <operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>

<return>return <expr><operator>(</operator> <operator>(</operator> <operator>(</operator> <name><name>p_packet</name><operator>-&gt;</operator><name>granulepos</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal> <operator>)</operator> <operator>&amp;</operator> <literal type="number">0x07FFFFFF</literal> <operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</return>

<case>case <expr><name>VLC_CODEC_DIRAC</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>special</name><operator>.</operator><name>dirac</name><operator>.</operator><name>b_old</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name><name>p_packet</name><operator>-&gt;</operator><name>granulepos</name></name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name><name>p_packet</name><operator>-&gt;</operator><name>granulepos</name></name> <operator>&amp;</operator> <literal type="number">0xFF8000FF</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>

<default>default:</default>

<return>return <expr><name>true</name></expr>;</return>

</block_content>}</block></switch></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>Ogg_GetKeyframeGranule</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>logical_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_granule</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_oggds</name></name></expr> )</condition>

<block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> 

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <switch>switch<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_THEORA</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_DAALA</name></expr>:</case>

<return>return <expr><operator>(</operator> <name>i_granule</name> <operator>&gt;&gt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_granule_shift</name></name> <operator>)</operator> <operator>&lt;&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_granule_shift</name></name></expr>;</return>

<case>case <expr><name>VLC_CODEC_DIRAC</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>special</name><operator>.</operator><name>dirac</name><operator>.</operator><name>b_old</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator> <name>i_granule</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator> <name>i_granule</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr>;</return></block_content></block></else></if_stmt>

<default>default:</default>

<return>return <expr><name>i_granule</name></expr>;</return>

</block_content>}</block></switch></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>Ogg_GranuleToSampleDelta</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>logical_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_granule</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIRAC</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>special</name><operator>.</operator><name>dirac</name><operator>.</operator><name>b_old</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>i_granule</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x1fff</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>Ogg_GranuleToSample</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>logical_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_granule</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<switch>switch<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>VLC_CODEC_THEORA</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>i_first_frame_index</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>b_oggds</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_granule</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><name>VLC_CODEC_DAALA</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_KATE</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>ogg_int64_t</name></type> <name>iframe</name> <init>= <expr><name>i_granule</name> <operator>&gt;&gt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_granule_shift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_int64_t</name></type> <name>pframe</name> <init>= <expr><name>i_granule</name> <operator>-</operator> <operator>(</operator> <name>iframe</name> <operator>&lt;&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_granule_shift</name></name> <operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name>iframe</name> <operator>+</operator> <name>pframe</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>VLC_CODEC_VP8</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_OGGSPOTS</name></expr>:</case>

<return>return <expr><name>i_granule</name> <operator>&gt;&gt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_granule_shift</name></name></expr>;</return>

<case>case <expr><name>VLC_CODEC_DIRAC</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>special</name><operator>.</operator><name>dirac</name><operator>.</operator><name>b_old</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>i_granule</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i_granule</name> <operator>&amp;</operator> <literal type="number">0x3FFFFFFF</literal><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>i_granule</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>VLC_CODEC_OPUS</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_VORBIS</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_SPEEX</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_FLAC</name></expr>:</case>

<return>return <expr><name>i_granule</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>i_granule</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>Ogg_ShiftPacketSample</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>logical_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>i_sample</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_start</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_endtostartoffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>b_oggds</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_endtostartoffset</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>b_start</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_endtostartoffset</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>b_start</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>VIDEO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_DIRAC</name></expr> )</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>i_sample</name> <operator>+=</operator> <operator>(</operator><ternary><condition><expr><name><name>p_stream</name><operator>-&gt;</operator><name>special</name><operator>.</operator><name>dirac</name><operator>.</operator><name>b_interlaced</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i_endtostartoffset</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sample</name> <operator>+=</operator> <name>i_endtostartoffset</name> <operator>*</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_cat</name></name> <operator>==</operator> <name>AUDIO_ES</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_stream</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <name>VLC_CODEC_SPEEX</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_sample</name> <operator>+=</operator> <name>i_endtostartoffset</name> <operator>*</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>special</name><operator>.</operator><name>speex</name><operator>.</operator><name>i_framesize</name></name> <operator>*</operator>

<name><name>p_stream</name><operator>-&gt;</operator><name>special</name><operator>.</operator><name>speex</name><operator>.</operator><name>i_framesperpacket</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else 

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_endtostartoffset</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>i_sample</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>Ogg_SampleToTime</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>logical_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_sample</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_start</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>i_sample</name> <operator>=</operator> <call><name>Ogg_ShiftPacketSample</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_sample</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_sample</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>d</name> <init>= <expr><name><name>p_stream</name><operator>-&gt;</operator><name>dts</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>i_sample</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>bool</name></type> <name>Ogg_GranuleIsValid</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>logical_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_granule</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><operator>(</operator> <name>i_granule</name> <operator>&lt;</operator> <name><name>p_stream</name><operator>-&gt;</operator><name>i_first_frame_index</name></name> <operator>-</operator> <operator>!</operator><operator>!</operator><name><name>p_stream</name><operator>-&gt;</operator><name>b_oggds</name></name> <operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>vlc_tick_t</name></type> <name>Ogg_GranuleToTime</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>logical_stream_t</name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_granule</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_start</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_pts</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>Ogg_GranuleIsValid</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_granule</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_TICK_INVALID</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_sample</name> <init>= <expr><call><name>Ogg_GranuleToSample</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_granule</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>b_pts</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_delta</name> <init>= <expr><call><name>Ogg_GranuleToSampleDelta</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_granule</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_delta</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_sample</name> <operator>+=</operator> <name>i_delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>Ogg_SampleToTime</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>i_sample</name></expr></argument>, <argument><expr><name>b_start</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
