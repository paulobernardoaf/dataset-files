<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\nuv.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Nuv demuxer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">145</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"nuv"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_index_entry_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_idx_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_index_entry_t</name> <modifier>*</modifier></type><name>idx</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_index_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>demux_IndexInit</name><parameter_list>( <parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>demux_IndexClean</name><parameter_list>( <parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>demux_IndexAppend</name><parameter_list>( <parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>i_time</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>demux_IndexConvertTime</name><parameter_list>(<parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>time</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>uint64_t</name></type> <name>demux_IndexFindOffset</name><parameter_list>(<parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name></type> <name><name>id</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name><name>version</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_width_desired</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_height_desired</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>i_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>d_aspect</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>double</name></type> <name>d_fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_video_blocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_audio_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_text_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_keyframe_distance</name></decl>;</decl_stmt>

}</block></struct></type> <name>header_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUV_FH_SIZE</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>char</name></type> <name>i_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>i_compression</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>i_keyframe</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_filters</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_timecode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>i_length</name></decl>;</decl_stmt> 

}</block></struct></type> <name>frame_header_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_version</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_video_fcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_fourcc_t</name></type> <name>i_audio_fcc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_audio_sample_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_audio_bits_per_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_audio_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_audio_compression_ratio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_audio_quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rtjpeg_quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rtjpeg_luma_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_rtjpeg_chroma_filter</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_lavc_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_lavc_qmin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_lavc_qmax</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_lavc_maxqdiff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_seektable_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_keyframe_adjust_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>extended_header_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>header_t</name></type> <name>hdr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>extended_header_t</name></type> <name>exh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_pcr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es_video</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_extra_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_extra_f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es_audio</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_index_t</name></type> <name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_seekable</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>fh_buffer</name><index>[<expr><name>NUV_FH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_total_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_total_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_first_frame_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>HeaderLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>FrameHeaderLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>frame_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ExtendedHeaderLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>extended_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>SeekTableLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ControlSetPosition</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>guess</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>frame_header_t</name></type> <name>fh</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">12</literal> <operator>||</operator>

<operator>(</operator> <call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"MythTVVideo"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>strncmp</name><argument_list>( <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"NuppelVideo"</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_video</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_audio</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_extra_f</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_index</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_frames</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_length</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demux_IndexInit</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_stream_Control</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>STREAM_CAN_SEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

if( p_sys-&gt;b_seekable )

msg_Dbg( p_demux, "stream is seekable" );

else

msg_Dbg( p_demux, "stream is NOT seekable" );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>HeaderLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FrameHeaderLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fh</name></expr></argument> )</argument_list></call> <operator>||</operator> <name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <literal type="char">'D'</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_compression</name></name> <operator>==</operator> <literal type="char">'F'</literal> <operator>||</operator> <name><name>fh</name><operator>.</operator><name>i_compression</name></name> <operator>==</operator> <literal type="char">'R'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_extra_f</name></name> <operator>=</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_extra_f</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_extra_f</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_extra_f</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported 'D' frame (c=%c)"</literal></expr></argument>, <argument><expr><name><name>fh</name><operator>.</operator><name>i_compression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_peek</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>FrameHeaderLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fh</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_length</name></name> <operator>!=</operator> <literal type="number">512</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ExtendedHeaderLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>exh</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"stream is not seekable, skipping seektable"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><call><name>SeekTableLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_index</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Seektable is broken, seek won't be accurate"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"VLC doesn't support NUV without extended chunks (please upload samples)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>i_video_blocks</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>VIDEO_ES</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>exh</name><operator>.</operator><name>i_video_fcc</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_width</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_visible_height</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_extra_f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_extra_f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_num</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>d_aspect</name></name> <operator>*</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_sar_den</name></name> <operator>=</operator> <name><name>fmt</name><operator>.</operator><name>video</name><operator>.</operator><name>i_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name>id</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_video</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>i_audio_blocks</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MPGA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>exh</name><operator>.</operator><name>i_audio_sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>exh</name><operator>.</operator><name>i_audio_bits_per_sample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <name>id</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_audio</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>i_text_blocks</name></name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"text not yet supported (upload samples)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_first_frame_offset</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot load Nuv file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_extra_f</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demux_IndexClean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>frame_header_t</name></type> <name>fh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>FrameHeaderLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fh</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="char">'V'</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_data</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>fh</name><operator>.</operator><name>i_timecode</name></name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="char">'V'</literal><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_TICK_INVALID</name></expr> </then><else>: <expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>fh</name><operator>.</operator><name>i_keyframe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_index</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>demux_IndexAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>,

<argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name>VLC_TICK_0</name></expr></argument>,

<argument><expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>NUV_FH_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>&lt;</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name>VLC_TICK_0</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <name><name>p_data</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_es_audio</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_compression</name></name> <operator>==</operator> <literal type="char">'3'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_audio</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported compression %c for audio (upload samples)"</literal></expr></argument>, <argument><expr><name><name>fh</name><operator>.</operator><name>i_compression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="char">'V'</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_es_video</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_compression</name></name> <operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>fh</name><operator>.</operator><name>i_compression</name></name> <operator>&lt;=</operator><literal type="char">'3'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_data</name> <operator>=</operator> <call><name>block_Realloc</name><argument_list>( <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>NUV_FH_SIZE</name></expr></argument>, <argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_data</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_data</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fh_buffer</name></name></expr></argument>, <argument><expr><name>NUV_FH_SIZE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_compression</name></name> <operator>&gt;=</operator> <literal type="char">'0'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es_video</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported compression %c for video (upload samples)"</literal></expr></argument>, <argument><expr><name><name>fh</name><operator>.</operator><name>i_compression</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i64</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>f_current</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <name>f_current</name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>i64</name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>f</name> <init>= <expr><call><name>va_arg</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>t</name> <init>= <expr><call><name>llround</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_length</name></name> <operator>*</operator> <name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>demux_IndexConvertTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ControlSetPosition</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>stream_Size</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>demux_IndexFindOffset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>!=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ControlSetPosition</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_first_frame_offset</name></name>

<operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><call><name>stream_Size</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call>

<operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_first_frame_offset</name></name><operator>)</operator> <operator>*</operator> <name>f</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><call><name>ControlSetPosition</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>__MAX</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_pos</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_pos</name> <operator>=</operator> <call><name>demux_IndexConvertTime</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i_pos</name> <operator>!=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ControlSetPosition</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_pos</name></expr></argument>, <argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_length</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_total_length</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>&gt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_first_frame_offset</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_pcr</name></name> <operator>*</operator>

<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_first_frame_offset</name></name> <operator>)</operator> <operator>/</operator>

<operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_first_frame_offset</name></name> <operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>d_fps</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ControlSetPosition</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_guess</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_seekable</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b_guess</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unable to seek, skipping frames (slow)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unable to seek, only forward seeking is possible"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>frame_header_t</name></type> <name>fh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_tell</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i_tell</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <name>offset</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FrameHeaderLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fh</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="char">'V'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>fh</name><operator>.</operator><name>i_keyframe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_index</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>demux_IndexAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>,<argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>fh</name><operator>.</operator><name>i_timecode</name></name><operator>*</operator><literal type="number">1000</literal></expr></argument>, <argument><expr><name>i_tell</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>GetDoubleLE</name><parameter_list>( <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>pd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pd</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><index>[<expr><literal type="number">7</literal><operator>-</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name>pd</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>HeaderLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">72</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">72</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">72</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>h</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_width</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_height</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_width_desired</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_height_desired</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_mode</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDoubleLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>d_aspect</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>GetDoubleLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>d_fps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_video_blocks</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_audio_blocks</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_text_blocks</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_keyframe_distance</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">68</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Dbg( p_demux, "nuv: h=%s v=%s %dx%d a=%f fps=%f v=%d a=%d t=%d kfd=%d",

h-&gt;id, h-&gt;version, h-&gt;i_width, h-&gt;i_height, h-&gt;d_aspect,

h-&gt;d_fps, h-&gt;i_video_blocks, h-&gt;i_audio_blocks, h-&gt;i_text_blocks,

h-&gt;i_keyframe_distance );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><ternary><condition><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>d_fps</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>VLC_SUCCESS</name></expr> </then><else>: <expr><name>VLC_EGENERIC</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FrameHeaderLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>frame_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>buffer</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fh_buffer</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_type</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_compression</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_keyframe</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_filters</name></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_timecode</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Dbg( p_demux, "frame hdr: t=%c c=%c k=%d f=0x%x timecode=%d l=%d",

h-&gt;i_type,

h-&gt;i_compression ? h-&gt;i_compression : ' ',

h-&gt;i_keyframe ? h-&gt;i_keyframe : ' ',

h-&gt;i_filters,

h-&gt;i_timecode, h-&gt;i_length );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ExtendedHeaderLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>extended_header_t</name> <modifier>*</modifier></type><name>h</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">512</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_version</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_video_fcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_audio_fcc</name></name> <operator>=</operator> <call><name>VLC_FOURCC</name><argument_list>( <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buffer</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_audio_sample_rate</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_audio_bits_per_sample</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_audio_channels</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_audio_compression_ratio</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_audio_quality</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_rtjpeg_quality</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_rtjpeg_luma_filter</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">36</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_rtjpeg_chroma_filter</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_lavc_bitrate</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">44</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_lavc_qmin</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_lavc_qmin</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">52</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_lavc_maxqdiff</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">56</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_seektable_offset</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">60</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>i_keyframe_adjust_offset</name></name><operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><literal type="number">68</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Dbg( p_demux, "ex hdr: v=%d vffc=%4.4s afcc=%4.4s %dHz %dbits ach=%d acr=%d aq=%d"

"rtjpeg q=%d lf=%d lc=%d lavc br=%d qmin=%d qmax=%d maxqdiff=%d seekableoff=%"PRIi64" keyfao=%"PRIi64,

h-&gt;i_version,

(char*)&amp;h-&gt;i_video_fcc,

(char*)&amp;h-&gt;i_audio_fcc, h-&gt;i_audio_sample_rate, h-&gt;i_audio_bits_per_sample, h-&gt;i_audio_channels,

h-&gt;i_audio_compression_ratio, h-&gt;i_audio_quality,

h-&gt;i_rtjpeg_quality, h-&gt;i_rtjpeg_luma_filter, h-&gt;i_rtjpeg_chroma_filter,

h-&gt;i_lavc_bitrate, h-&gt;i_lavc_qmin, h-&gt;i_lavc_qmax, h-&gt;i_lavc_maxqdiff,

h-&gt;i_seektable_offset, h-&gt;i_keyframe_adjust_offset );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SeekTableLoad</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>frame_header_t</name></type> <name>fh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_original_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_time</name></decl>, <decl><type ref="prev"/><name>i_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyframe</name></decl>, <decl><type ref="prev"/><name>last_keyframe</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>kfa_entry_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>exh</name><operator>.</operator><name>i_seektable_offset</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_original_pos</name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Dbg( p_demux, "current offset %"PRIi64, i_original_pos );

msg_Dbg( p_demux, "seeking in stream to %"PRIi64, p_sys-&gt;exh.i_seektable_offset );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>exh</name><operator>.</operator><name>i_seektable_offset</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FrameHeaderLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fh</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>!=</operator> <literal type="char">'Q'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid seektable, frame type=%c"</literal></expr></argument>, <argument><expr><name><name>fh</name><operator>.</operator><name>i_type</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_seek_table</name> <init>= <expr><call><name>malloc</name><argument_list>( <argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_seek_table</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_seek_table</name></expr></argument>,

<argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_seek_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>i_seek_elements</name> <init>= <expr><name><name>fh</name><operator>.</operator><name>i_length</name></name> <operator>/</operator> <literal type="number">12</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>i_kfa_elements</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_kfa_table</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>exh</name><operator>.</operator><name>i_keyframe_adjust_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"seeking in stream to %"</literal><name>PRIi64</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>exh</name><operator>.</operator><name>i_keyframe_adjust_offset</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>exh</name><operator>.</operator><name>i_keyframe_adjust_offset</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_seek_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FrameHeaderLoad</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fh</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_seek_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>fh</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_kfa_table</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_kfa_table</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_seek_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_kfa_table</name></expr></argument>,

<argument><expr><name><name>fh</name><operator>.</operator><name>i_length</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_seek_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_kfa_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_kfa_elements</name> <operator>=</operator> <name><name>fh</name><operator>.</operator><name>i_length</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_kfa_elements</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"untested keyframe adjust support, upload samples"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i_seek_elements</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

uint8_t* p = p_seek_table + j * 12;

msg_Dbg( p_demux, "%x %x %x %x %x %x %x %x %x %x %x %x",

p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7], p[8], p[9], p[10], p[11]);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>keyframe</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_seek_table</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>+=</operator> <operator>(</operator><name>keyframe</name> <operator>-</operator> <name>last_keyframe</name><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>i_keyframe_distance</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>kfa_entry_id</name> <operator>&lt;</operator> <name>i_kfa_elements</name> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p_kfa_table</name> <operator>+</operator> <name>kfa_entry_id</name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>==</operator> <name>j</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>frame</name> <operator>-=</operator> <operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p_kfa_table</name> <operator>+</operator> <name>kfa_entry_id</name> <operator>*</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"corrected keyframe %d with current frame number %d (corrected with %d)"</literal></expr></argument>,

<argument><expr><name>keyframe</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>p_kfa_table</name> <operator>+</operator> <name>kfa_entry_id</name> <operator>*</operator> <literal type="number">12</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>kfa_entry_id</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_offset</name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><name>p_seek_table</name> <operator>+</operator> <name>j</name> <operator>*</operator> <literal type="number">12</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>frame</name> <operator>!=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid file offset %d %"</literal><name>PRIi64</name></expr></argument>, <argument><expr><name>keyframe</name></expr></argument>, <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_time</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator> <operator>(</operator><name>vlc_tick_t</name><operator>)</operator><name>frame</name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>)</operator> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>d_fps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>demux_IndexAppend</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>i_time</name></expr></argument> , <argument><expr><name>i_offset</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

msg_Dbg( p_demux, "adding entry position %d %"PRIi64 " file offset %"PRIi64, keyframe, i_time, i_offset );

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>last_keyframe</name> <operator>=</operator> <name>keyframe</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_frames</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>frame</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_index</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_total_length</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_total_frames</name></name> <operator>*</operator> <name>CLOCK_FREQ</name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>d_fps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"index table loaded (%d elements)"</literal></expr></argument>, <argument><expr><name>i_seek_elements</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_kfa_elements</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name>p_kfa_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>( <argument><expr><name>p_seek_table</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_original_pos</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEMUX_INDEX_SIZE_MAX</name></cpp:macro> <cpp:value>(100000)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>demux_IndexInit</name><parameter_list>( <parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type><name>p_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx_max</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>demux_IndexClean</name><parameter_list>( <parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type><name>p_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>demux_IndexAppend</name><parameter_list>( <parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type><name>p_idx</name></decl></parameter>,

<parameter><decl><type><name>int64_t</name></type> <name>i_time</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i_offset</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_time</name> <operator>&gt;=</operator> <name>i_time</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name> <operator>&gt;=</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>i_idx_max</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name> <operator>&gt;=</operator> <name>DEMUX_INDEX_SIZE_MAX</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_length</name> <init>= <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_time</name> <operator>-</operator>

<name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_time</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_count</name> <init>= <expr><name>DEMUX_INDEX_SIZE_MAX</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_time</name> <operator>&lt;</operator> <name>j</name> <operator>*</operator> <name>i_length</name> <operator>/</operator> <name>i_count</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>*</operator> <name>DEMUX_INDEX_SIZE_MAX</name> <operator>/</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>INT_MAX</name> <operator>-</operator> <literal type="number">1000</literal> <operator>&lt;</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>i_idx_max</name></name> <operator>||</operator>

<operator>(</operator><name>SIZE_MAX</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>demux_index_entry_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>-</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>i_idx_max</name></name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_realloc</name> <init>= <expr><operator>(</operator><literal type="number">1000</literal> <operator>+</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>i_idx_max</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>demux_index_entry_t</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_index_entry_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name></name></expr></argument>, <argument><expr><name>i_realloc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_realloc</name></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx_max</name></name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name></expr>]</index></name><operator>.</operator><name>i_time</name> <operator>=</operator> <name>i_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>=</operator> <name>i_offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>demux_IndexConvertTime</name><parameter_list>(<parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type><name>p_idx</name></decl></parameter>,

<parameter><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>&lt;=</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_time</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>&gt;=</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_max</name></expr>]</index></name><operator>.</operator><name>i_time</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_max</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_med</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_max</name> <operator>-</operator> <name>i_min</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_med</name> <operator>=</operator> <operator>(</operator><name>i_min</name><operator>+</operator><name>i_max</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_med</name></expr>]</index></name><operator>.</operator><name>i_time</name> <operator>&lt;</operator> <name>i_time</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_min</name> <operator>=</operator> <name>i_med</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_med</name></expr>]</index></name><operator>.</operator><name>i_time</name> <operator>&gt;</operator> <name>i_time</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max</name> <operator>=</operator> <name>i_med</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_med</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_time</name> <operator>-</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_min</name></expr>]</index></name><operator>.</operator><name>i_time</name> <operator>&lt;</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_max</name></expr>]</index></name><operator>.</operator><name>i_time</name> <operator>-</operator> <name>i_time</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_min</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_max</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>demux_IndexFindOffset</name><parameter_list>(<parameter><decl><type><name>demux_index_t</name> <modifier>*</modifier></type><name>p_idx</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>i_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_max</name> <init>= <expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>i_idx</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&lt;=</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_offset</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>==</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_max</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_max</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>&gt;</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_max</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_med</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_max</name> <operator>-</operator> <name>i_min</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_med</name> <operator>=</operator> <operator>(</operator><name>i_min</name><operator>+</operator><name>i_max</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_med</name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>&lt;</operator> <name>i_offset</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_min</name> <operator>=</operator> <name>i_med</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_med</name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>&gt;</operator> <name>i_offset</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_max</name> <operator>=</operator> <name>i_med</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_med</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>i_offset</name> <operator>-</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_min</name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>&lt;</operator> <name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_max</name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>-</operator> <name>i_offset</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_min</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name><name>p_idx</name><operator>-&gt;</operator><name>idx</name><index>[<expr><name>i_max</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

</unit>
