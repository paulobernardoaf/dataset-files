<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\smf.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPO_MIN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEMPO_MAX</name></cpp:macro> <cpp:value>250</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>ReadVarInt</name> <parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>byte</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>byte</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>val</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>smf_track_t</name>

<block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>next</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>length</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>running_event</name></decl>;</decl_stmt> 

}</block></struct></type> <name>mtrk_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadDeltaTime</name> <parameter_list>(<parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>mtrk_t</name> <modifier>*</modifier></type><name>track</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>delta_time</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>assert</name> <argument_list>(<argument><expr><call><name>vlc_stream_Tell</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name><name>track</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>track</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;=</operator> <name><name>track</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>delta_time</name> <operator>=</operator> <call><name>ReadVarInt</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>delta_time</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>next</name></name> <operator>+=</operator> <name>delta_time</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>track</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>track</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>pulse</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>tick</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>duration</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>ppqn</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>trackc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>mtrk_t</name></type> <name><name>trackv</name><index>[]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function><type><specifier>static</specifier>

<name>int</name></type> <name>HandleMeta</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mtrk_t</name> <modifier>*</modifier></type><name>tr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>payload</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>length</name> <operator>=</operator> <call><name>ReadVarInt</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>payload</name> <operator>=</operator> <call><name>malloc</name> <argument_list>(<argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>payload</name> <operator>==</operator> <name>NULL</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>vlc_stream_Read</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>payload</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>length</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>payload</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0x00</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">0x01</literal></expr>:</case> 

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Text : %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x02</literal></expr>:</case> 

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Copyright : %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x03</literal></expr>:</case> 

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Track name: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x04</literal></expr>:</case> 

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Instrument: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x05</literal></expr>:</case> 

<break>break;</break>

<case>case <expr><literal type="number">0x06</literal></expr>:</case> 

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Marker : %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x07</literal></expr>:</case> 

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Cue point : %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x08</literal></expr>:</case> 

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Info</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Patch name: %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x09</literal></expr>:</case> 

<expr_stmt><expr><call><name>EnsureUTF8</name> <argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"MIDI port : %s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x2F</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name><name>tr</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>tr</name><operator>-&gt;</operator><name>length</name></name> <operator>!=</operator> <call><name>vlc_stream_Tell</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"misplaced end of track"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x51</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>uspqn</name> <init>= <expr><operator>(</operator><name><name>payload</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name><name>payload</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>payload</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tempo</name> <init>= <expr><literal type="number">60</literal> <operator>*</operator> <literal type="number">1000000</literal> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name>uspqn</name></expr> ?</condition><then> <expr><name>uspqn</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"tempo: %uus/qn -&gt; %u BPM"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>uspqn</name></expr></argument>, <argument><expr><name>tempo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tempo</name> <operator>&lt;</operator> <name>TEMPO_MIN</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"tempo too slow -&gt; %u BPM"</literal></expr></argument>, <argument><expr><name>TEMPO_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempo</name> <operator>=</operator> <name>TEMPO_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else

if <condition>(<expr><name>tempo</name> <operator>&gt;</operator> <name>TEMPO_MAX</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"tempo too fast -&gt; %u BPM"</literal></expr></argument>, <argument><expr><name>TEMPO_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tempo</name> <operator>=</operator> <name>TEMPO_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>date_Change</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>ppqn</name></name> <operator>*</operator> <name>tempo</name></expr></argument>, <argument><expr><literal type="number">60</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x54</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"SMPTE offset not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x58</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x59</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><name>length</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid key signature"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0x7f</literal></expr>:</case> 

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"ignored proprietary SMF Meta Event (%d bytes)"</literal></expr></argument>,

<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Warn</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown SMF Meta Event type 0x%02X (%d bytes)"</literal></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier>

<name>int</name></type> <name>HandleMessage</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>mtrk_t</name> <modifier>*</modifier></type><name>tr</name></decl></parameter>, <parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>first</name></decl>, <decl><type ref="prev"/><name>event</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>datalen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>start</name></name> <operator>+</operator> <name><name>tr</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><call><name>vlc_stream_Read</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>first</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>event</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>first</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><name>first</name></expr> </then><else>: <expr><name><name>tr</name><operator>-&gt;</operator><name>running_event</name></name></expr></else></ternary></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>event</name> <operator>&amp;</operator> <literal type="number">0xf0</literal></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0xF0</literal></expr>:</case> 

<switch>switch <condition>(<expr><name>event</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0xF0</literal></expr>:</case> 

<case>case <expr><literal type="number">0xF7</literal></expr>:</case> 

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>ReadVarInt</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>vlc_stream_Block</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>block_Realloc</name> <argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>

<goto>goto <name>send</name>;</goto>

</block_content>}</block>

<case>case <expr><literal type="number">0xFF</literal></expr>:</case> 

<if_stmt><if>if <condition>(<expr><call><name>HandleMeta</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<goto>goto <name>skip</name>;</goto>

<case>case <expr><literal type="number">0xF1</literal></expr>:</case>

<case>case <expr><literal type="number">0xF3</literal></expr>:</case>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xF2</literal></expr>:</case>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0xF4</literal></expr>:</case>

<case>case <expr><literal type="number">0xF5</literal></expr>:</case>

<default>default:</default>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<break>break;</break>

<case>case <expr><literal type="number">0xC0</literal></expr>:</case>

<case>case <expr><literal type="number">0xD0</literal></expr>:</case>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>datalen</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>block</name> <operator>=</operator> <call><name>block_Alloc</name> <argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name>datalen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>block</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>skip</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>datalen</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>datalen</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"malformatted MIDI event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>first</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>datalen</name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <call><name>vlc_stream_Read</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>p_buffer</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>datalen</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>datalen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>send</name>:</label>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>block_Release</name> <argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>skip</name>:</label>

<if_stmt><if>if <condition>(<expr><name>event</name> <operator>&lt;</operator> <literal type="number">0xF8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>running_event</name></name> <operator>=</operator> <name>event</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name> <argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>tr</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>block_Release</name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>SeekSet0</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>ppqn</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pulse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name> <operator>=</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>trackc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mtrk_t</name> <modifier>*</modifier></type><name>tr</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>trackv</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>running_event</name></name> <operator>=</operator> <literal type="number">0xF6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>tr</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>ReadDeltaTime</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>tr</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"fatal parsing error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadEvents</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>pulse</name></decl></parameter>,

<parameter><decl><type><name>es_out_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>cur_pulse</name> <init>= <expr><operator>*</operator><name>pulse</name></expr></init></decl>, <decl><type ref="prev"/><name>next_pulse</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sys</name><operator>-&gt;</operator><name>trackc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mtrk_t</name> <modifier>*</modifier></type><name>track</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>trackv</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>track</name><operator>-&gt;</operator><name>next</name></name> <operator>&lt;=</operator> <name>cur_pulse</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>HandleMessage</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><name>track</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>ReadDeltaTime</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>track</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"fatal parsing error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>next_pulse</name> <operator>&gt;</operator> <name><name>track</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next_pulse</name> <operator>=</operator> <name><name>track</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>next_pulse</name> <operator>!=</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>date_Increment</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>next_pulse</name> <operator>-</operator> <name>cur_pulse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pulse</name> <operator>=</operator> <name>next_pulse</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TICK</name></cpp:macro> <cpp:value>VLC_TICK_FROM_MS(10)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name> <operator>&lt;=</operator> <call><name>date_Get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>tick</name> <init>= <expr><call><name>block_Alloc</name> <argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>tick</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tick</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xF9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tick</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator> <name><name>tick</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>tick</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name> <operator>+=</operator> <name>TICK</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>pulse</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>pulse</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ReadEvents</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pulse</name></expr></argument>, <argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pulse</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pulse</name></name> <operator>=</operator> <name>pulse</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Seek</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>vlc_tick_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pts</name> <operator>&lt;</operator> <call><name>date_Get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>SeekSet0</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>pulse</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>pulse</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>pts</name> <operator>&gt;</operator> <call><name>date_Get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pulse</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ReadEvents</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pulse</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>pulse</name></name> <operator>=</operator> <name>pulse</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>date_Get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name><operator>)</operator> <operator>/</operator> <name>TICK</name><operator>)</operator> <operator>*</operator> <name>TICK</name> <operator>+</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name> <parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>i_query</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name><name>sys</name><operator>-&gt;</operator><name>tick</name></name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>VLC_TICK_0</name><operator>)</operator>

<operator>/</operator> <name><name>sys</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<return>return <expr><call><name>Seek</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>sys</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>sys</name><operator>-&gt;</operator><name>tick</name></name> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<return>return <expr><call><name>Seek</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><call><name>va_arg</name> <argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>stream</name> <init>= <expr><name><name>demux</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>multitrack</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>peek</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="string">"RMID"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>riff_len</name> <init>= <expr><call><name>GetDWLE</name> <argument_list>(<argument><expr><name>peek</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"detected RIFF MIDI file (%"</literal><name>PRIu32</name><literal type="string">" bytes)"</literal></expr></argument>, <argument><expr><name>riff_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>vlc_stream_Read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>chnk_hdr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>chnk_len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>riff_len</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>vlc_stream_Read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>chnk_hdr</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>riff_len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>chnk_len</name> <operator>=</operator> <call><name>GetDWLE</name> <argument_list>(<argument><expr><name>chnk_hdr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>riff_len</name> <operator>&lt;</operator> <name>chnk_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>riff_len</name> <operator>-=</operator> <name>chnk_len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>memcmp</name> <argument_list>(<argument><expr><name>chnk_hdr</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>chnk_len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>chnk_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Peek</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>peek</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>, <argument><expr><literal type="string">"MThd\x00\x00\x00\x06"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>peek</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><call><name>GetWBE</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>multitrack</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>multitrack</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported SMF file type %u"</literal></expr></argument>, <argument><expr><call><name>GetWBE</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>peek</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tracks</name> <init>= <expr><call><name>GetWBE</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>peek</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>multitrack</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>tracks</name> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"invalid SMF type 0 file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"detected Standard MIDI File (type %u) with %u track(s)"</literal></expr></argument>,

<argument><expr><name>multitrack</name></expr></argument>, <argument><expr><name>tracks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ppqn</name> <init>= <expr><call><name>GetWBE</name> <argument_list>(<argument><expr><name>peek</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ppqn</name> <operator>&amp;</operator> <literal type="number">0x8000</literal></expr>)</condition>

<block>{<block_content> 

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"SMPTE timestamps not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ppqn</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"invalid SMF file PPQN: %u"</literal></expr></argument>, <argument><expr><name>ppqn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">" %u pulses per quarter note"</literal></expr></argument>, <argument><expr><name>ppqn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>malloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>sys</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <operator>(</operator><sizeof>sizeof <argument_list>(<argument><expr><name>mtrk_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>tracks</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">14</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>ppqn</name></name> <operator>=</operator> <name>ppqn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>trackc</name></name> <operator>=</operator> <name>tracks</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tracks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>mtrk_t</name> <modifier>*</modifier></type><name>tr</name> <init>= <expr><name><name>sys</name><operator>-&gt;</operator><name>trackv</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>head</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vlc_stream_Seek</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name><name>tr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name> <operator>+</operator> <name><name>tr</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"cannot build SMF index (corrupted file?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Read</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>head</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"incomplete SMF chunk, file is corrupted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name> <argument_list>(<argument><expr><name>head</name></expr></argument>, <argument><expr><literal type="string">"MTrk"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint_fast32_t</name></type> <name>chunk_len</name> <init>= <expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name>head</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><literal type="string">"skipping unknown SMF chunk (%"</literal><name>PRIuFAST32</name><literal type="string">" bytes)"</literal></expr></argument>,

<argument><expr><name>chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Seek</name><argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><call><name>vlc_stream_Tell</name><argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>chunk_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tr</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <call><name>GetDWBE</name> <argument_list>(<argument><expr><name>head</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vlc_stream_Control</name> <argument_list>(<argument><expr><name>stream</name></expr></argument>, <argument><expr><name>STREAM_CAN_FASTSEEK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>SeekSet0</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>uint64_t</name></type> <name>pulse</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pulse</name> <operator>!=</operator> <name>UINT64_MAX</name></expr>;</condition><incr/>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>ReadEvents</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pulse</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>date_Get</name> <argument_list>(<argument><expr><operator>&amp;</operator><name><name>sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SeekSet0</name> <argument_list>(<argument><expr><name>demux</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_MIDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name> <argument_list>(<argument><expr><name><name>demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name> <argument_list>(<argument><expr><name>p_sys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name> <argument_list>(<argument>N_(<literal type="string">"SMF demuxer"</literal>)</argument>)</argument_list></macro>

<macro><name>set_category</name> <argument_list>(<argument>CAT_INPUT</argument>)</argument_list></macro>

<macro><name>set_subcategory</name> <argument_list>(<argument>SUBCAT_INPUT_DEMUX</argument>)</argument_list></macro>

<macro><name>set_capability</name> <argument_list>(<argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">20</literal></argument>)</argument_list></macro>

<macro><name>set_callbacks</name> <argument_list>(<argument>Open</argument>, <argument>Close</argument>)</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
