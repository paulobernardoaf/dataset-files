<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\wav.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_aout.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codecs.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"windows_audio_commons.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WAV_CHAN_MAX</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<expr_stmt><expr><call><name>static_assert</name><argument_list>( <argument><expr><name>INPUT_CHAN_MAX</name> <operator>&gt;=</operator> <name>WAV_CHAN_MAX</name></expr></argument>, <argument><expr><literal type="string">"channel count mismatch"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_data_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_frame_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_channel_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>i_chans_to_reorder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pi_chan_table</name><index>[<expr><name>AOUT_CHAN_MAX</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<enum>enum <name>wav_chunk_id</name> <block>{

<decl><name>wav_chunk_id_data</name></decl>,

<decl><name>wav_chunk_id_ds64</name></decl>,

<decl><name>wav_chunk_id_fmt</name></decl>,

}</block>;</enum>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>wav_chunk_id_key</name>

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>wav_chunk_id</name></name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name><name>wav_chunk_id_key_list</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>wav_chunk_id_data</name></expr>, <expr><literal type="string">"data"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>wav_chunk_id_ds64</name></expr>, <expr><literal type="string">"ds64"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>wav_chunk_id_fmt</name></expr>, <expr><literal type="string">"fmt "</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>wav_chunk_id_key_count</name> <init>= <expr><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>wav_chunk_id_key_list</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type>

<name>wav_chunk_CompareCb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wav_chunk_id_key</name></name> <modifier>*</modifier></type><name>id</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>memcmp</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>id</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_read_size</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_read_samples</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_end</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><name>i_pos</name> <operator>&gt;=</operator> <name>i_end</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>( <expr><name>i_end</name> <operator>&lt;</operator> <name>i_pos</name> <operator>+</operator> <name>i_read_size</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_read_size</name> <operator>=</operator> <name>i_end</name> <operator>-</operator> <name>i_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_read_samples</name> <operator>=</operator> <operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>-</operator> <name>i_read_size</name> <operator>)</operator>

<operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <name>p_block</name> <operator>=</operator> <call><name>vlc_stream_Block</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>i_read_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot read data"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>aout_ChannelReorder</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_chan_table</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>i_read_samples</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_end</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_end</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr></argument>, <argument><expr><name>i_end</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></argument>,

<argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>ret</name> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ofs</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>ofs</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ofs</name> <operator>-=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>pts</name> <init>=

<expr><call><name>vlc_tick_from_samples</name><argument_list>( <argument><expr><name>ofs</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>pts</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ChunkSkip</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <name>i_size</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>i_size</name> <operator>&gt;=</operator> <literal type="number">65536</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>,

<argument><expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <name>i_size</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_ret</name> <init>= <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>size_t</name><operator>)</operator> <name>i_ret</name> <operator>!=</operator> <name>i_size</name></expr> ?</condition><then> <expr><name>VLC_EGENERIC</name></expr> </then><else>: <expr><name>VLC_SUCCESS</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ChunkGetNext</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>wav_chunk_id</name></name> <modifier>*</modifier></type><name>p_id</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>wav_chunk_id_key_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>strcmp</name><argument_list>( <argument><expr><name><name>wav_chunk_id_key_list</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>key</name></expr></argument>,

<argument><expr><name><name>wav_chunk_id_key_list</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>key</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>wav_chunk_id_key</name></name> <modifier>*</modifier></type><name>id</name> <init>=

<expr><call><name>bsearch</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>wav_chunk_id_key_list</name></expr></argument>, <argument><expr><name>wav_chunk_id_key_count</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>wav_chunk_id_key_list</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>wav_chunk_CompareCb</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name> <init>= <expr><call><name>GetDWLE</name><argument_list>( <argument><expr><name>p_peek</name> <operator>+</operator> <literal type="number">4</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>id</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unknown chunk '%4.4s' of size: %u"</literal></expr></argument>,

<argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>ChunkSkip</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">8</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>p_id</name> <operator>=</operator> <name><name>id</name><operator>-&gt;</operator><name>id</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FrameInfo_PCM</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_bytes</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>&gt;</operator> <literal type="number">352800</literal>

<operator>||</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>&gt;</operator> <literal type="number">64</literal>

<operator>||</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <name>WAV_CHAN_MAX</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_samples</name> <operator>=</operator> <call><name>__MAX</name><argument_list>( <argument><expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_bytes</name> <operator>=</operator> <operator>*</operator><name>pi_samples</name> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>*</operator>

<operator>(</operator> <operator>(</operator><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_modulo</name> <init>= <expr><name>i_bytes</name> <operator>%</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_modulo</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i_bytes</name> <operator>+=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>-</operator> <name>i_modulo</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name>i_bytes</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FrameInfo_MS_ADPCM</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_samples</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>-</operator>

<literal type="number">7</literal> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>)</operator> <operator>/</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FrameInfo_IMA_ADPCM</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_samples</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>-</operator>

<literal type="number">4</literal> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>)</operator> <operator>/</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FrameInfo_Creative_ADPCM</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_samples</name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>/</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>FrameInfo_MSGSM</name><parameter_list>( <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>pi_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>pi_samples</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>es_format_t</name> <modifier>*</modifier></type><name>p_fmt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_samples</name> <operator>=</operator> <operator>(</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>*</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator>

<operator>/</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>i_bitrate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi_size</name> <operator>=</operator> <name><name>p_fmt</name><operator>-&gt;</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ChunkParseDS64</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <literal type="number">24</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid 'ds64' chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">24</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>=</operator> <call><name>GetQWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ChunkSkip</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ChunkParseFmt</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>i_size</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WAVEFORMATEXTENSIBLE</name> <modifier>*</modifier></type><name>p_wf_ext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WAVEFORMATEX</name> <modifier>*</modifier></type><name>p_wf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_extended</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid 'fmt ' chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p_wf_ext</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><operator>!</operator><name>p_wf_ext</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_wf</name> <operator>=</operator> <operator>&amp;</operator><name><name>p_wf_ext</name><operator>-&gt;</operator><name>Format</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_size</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>p_wf</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator><name>i_size</name> <operator>||</operator>

<operator>(</operator> <operator>(</operator> <name>i_size</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&amp;&amp;</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"cannot load 'fmt ' chunk"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>wf_tag_to_fourcc</name><argument_list>( <argument><expr><call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <call><name>GetWLE</name> <argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nChannels</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nSamplesPerSec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nBlockAlign</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><operator>-&gt;</operator><name>nAvgBytesPerSec</name></name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wBitsPerSample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEX</name></expr></argument>)</argument_list></sizeof></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <call><name>__MIN</name><argument_list>( <argument><expr><call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><operator>-&gt;</operator><name>cbSize</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>i_size</name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WAVEFORMATEX</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_extended</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument> )</argument_list></call> <operator>==</operator> <name>WAVE_FORMAT_EXTENSIBLE</name> <operator>&amp;&amp;</operator>

<name>i_size</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEXTENSIBLE</name></expr></argument> )</argument_list></sizeof> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof>

<operator>&gt;=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEXTENSIBLE</name></expr></argument> )</argument_list></sizeof> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_channel_mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GUID</name></type> <name>guid_subformat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>guid_subformat</name> <operator>=</operator> <name><name>p_wf_ext</name><operator>-&gt;</operator><name>SubFormat</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guid_subformat</name><operator>.</operator><name>Data1</name></name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf_ext</name><operator>-&gt;</operator><name>SubFormat</name><operator>.</operator><name>Data1</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guid_subformat</name><operator>.</operator><name>Data2</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf_ext</name><operator>-&gt;</operator><name>SubFormat</name><operator>.</operator><name>Data2</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>guid_subformat</name><operator>.</operator><name>Data3</name></name> <operator>=</operator> <call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf_ext</name><operator>-&gt;</operator><name>SubFormat</name><operator>.</operator><name>Data3</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sf_tag_to_fourcc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>guid_subformat</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"extensible format guid "</literal> <name>GUID_FMT</name></expr></argument>, <argument><expr><call><name>GUID_PRINT</name><argument_list>(<argument><expr><name>guid_subformat</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i_extended</name> <operator>=</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEXTENSIBLE</name></expr></argument> )</argument_list></sizeof> <operator>-</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>-=</operator> <name>i_extended</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_channel_mask</name> <operator>=</operator> <call><name>GetDWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf_ext</name><operator>-&gt;</operator><name>dwChannelMask</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_channel_mask</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name> <operator>=</operator> <call><name>getChannelMask</name><argument_list>( <argument><expr><operator>&amp;</operator><name>i_channel_mask</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_match</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_channel_mask</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Some channels are unrecognized or uselessly specified (0x%x)"</literal></expr></argument>, <argument><expr><name>i_channel_mask</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_match</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_missing</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>-</operator> <name>i_match</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Trying to fill up unspecified position for %d channels"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>-</operator> <name>i_match</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_pair</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>AOUT_CHAN_REARLEFT</name><operator>|</operator><name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_MIDDLELEFT</name><operator>|</operator><name>AOUT_CHAN_MIDDLERIGHT</name></expr>,

<expr><name>AOUT_CHAN_LEFT</name><operator>|</operator><name>AOUT_CHAN_RIGHT</name></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pi_pair</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pi_pair</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_missing</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name> <operator>&amp;</operator> <name><name>pi_pair</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_missing</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name> <operator>|=</operator> <name><name>pi_pair</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pi_channels_aout</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pi_channels_aout</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <name>i_missing</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name> <operator>&amp;</operator> <name><name>pi_channels_aout</name><index>[<expr><name>i</name></expr>]</index></name> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name> <operator>|=</operator> <name><name>pi_channels_aout</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_missing</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_missing</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>i_match</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>-</operator> <name>i_missing</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_match</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Invalid/unsupported channel mask"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal>

<operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&lt;=</operator> <name>AOUT_CHAN_MAX</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>pi_default_channels</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AOUT_CHAN_LEFT</name></expr>, <expr><name>AOUT_CHAN_RIGHT</name></expr>, <expr><name>AOUT_CHAN_CENTER</name></expr>,

<expr><name>AOUT_CHAN_LFE</name></expr>, <expr><name>AOUT_CHAN_REARLEFT</name></expr>, <expr><name>AOUT_CHAN_REARRIGHT</name></expr>,

<expr><name>AOUT_CHAN_MIDDLELEFT</name></expr>, <expr><name>AOUT_CHAN_MIDDLERIGHT</name></expr>, <expr><name>AOUT_CHAN_REARCENTER</name></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>&amp;&amp;</operator>

<name>i</name> <operator>&lt;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pi_default_channels</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pi_default_channels</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name> <operator>|=</operator> <name><name>pi_default_channels</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <call><name>VLC_FOURCC</name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>,<argument><expr><literal type="char">'f'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'t'</literal></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name> <operator>=</operator>

<call><name>aout_CheckChannelReorder</name><argument_list>( <argument><expr><name>pi_channels_aout</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pi_chan_table</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"channel mask: %x, reordering: %u"</literal></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_physical_channels</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>p_extra</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_wf</name> <operator>+</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>WAVEFORMATEX</name></expr></argument> )</argument_list></sizeof> <operator>+</operator> <name>i_extended</name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"format: 0x%4.4x, fourcc: %4.4s, channels: %d, "</literal>

<literal type="string">"freq: %u Hz, bitrate: %uKo/s, blockalign: %d, bits/samples: %d, "</literal>

<literal type="string">"extra size: %d"</literal></expr></argument>,

<argument><expr><call><name>GetWLE</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_wf</name><operator>-&gt;</operator><name>wFormatTag</name></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>/</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_blockalign</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_extra</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_wf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p_wf</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<switch>switch<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr> )</condition>

<block>{<block_content>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'t'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'u'</literal></expr></argument>, <argument><expr><literal type="char">'l'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><name>VLC_CODEC_ALAW</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_MULAW</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>FrameInfo_PCM</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>=</operator>

<call><name>vlc_fourcc_GetCodecAudio</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Unrecognized codec"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_ADPCM_MS</name></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x61</literal></expr></argument> )</argument_list></call></expr>:</case>

<case>case <expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'m'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0x62</literal></expr></argument> )</argument_list></call></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>FrameInfo_MS_ADPCM</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_ADPCM_IMA_WAV</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>FrameInfo_IMA_ADPCM</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_ADPCM_CREATIVE</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>FrameInfo_Creative_ADPCM</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>VLC_CODEC_MPGA</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_A52</name></expr>:</case>

<goto>goto <name>error</name>;</goto>

<case>case <expr><name>VLC_CODEC_GSM_MS</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_ADPCM_G726</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_TRUESPEECH</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_ATRAC3P</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_ATRAC3</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_G723_1</name></expr>:</case>

<case>case <expr><name>VLC_CODEC_WMA2</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>FrameInfo_MSGSM</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"unsupported codec (%4.4s)"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_codec</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid frame size: %i %i"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid sample rate: %i"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"found %s audio format"</literal></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_wf</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_is_rf64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>b_is_rf64</name> <operator>=</operator> <operator>(</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"RF64"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <operator>!</operator><name>b_is_rf64</name> <operator>&amp;&amp;</operator> <call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"RIFF"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call> <operator>)</operator> <operator>||</operator>

<call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"WAVE"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><operator>!</operator><name>p_sys</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_chans_to_reorder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_channel_mask</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">12</literal></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eof</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>wav_chunk_id</name></name></type> <name>id</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>!</operator><name>eof</name> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>ChunkGetNext</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_size</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"invalid chunk with a size 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>( <expr><name>id</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>wav_chunk_id_data</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_stream_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_GetSize</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stream_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name> <operator>=</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_is_rf64</name> <operator>&amp;&amp;</operator> <name>i_stream_size</name> <operator>&gt;=</operator> <name>i_size</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>( <argument><expr><name>b_is_rf64</name>

<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name> <operator>+</operator> <name>i_size</name> <operator>==</operator> <name>i_stream_size</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>eof</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if> 

<if type="elseif">else if<condition>( <expr><call><name>ChunkSkip</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>wav_chunk_id_ds64</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name>b_is_rf64</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>ChunkParseDS64</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"'ds64' chunk found but format not RF64"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>wav_chunk_id_fmt</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>ChunkParseFmt</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_size</name></name> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"'%s' chunk not found"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"data"</literal></expr> </then><else>:

<expr><ternary><condition><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"fmt "</literal></expr> </then><else>:

<expr><ternary><condition><expr><name>b_is_rf64</name></expr> ?</condition><then> <expr><literal type="string">"ds64"</literal></expr> </then><else>: <expr><literal type="string">"data"</literal></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr></argument> )</argument_list></call>

<operator>&amp;&amp;</operator> <call><name>vlc_stream_Seek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data_pos</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_bitrate</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_size</name></name> <operator>*</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>/</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_frame_samples</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"WAV demuxer"</literal>)</argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">142</literal></argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

</unit>
