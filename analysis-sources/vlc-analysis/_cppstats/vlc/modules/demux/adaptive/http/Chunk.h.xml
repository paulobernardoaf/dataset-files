<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\adaptive\http\Chunk.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"BytesRange.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ConnectionParams.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../ID.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>block_t</name></name></type> <name>block_t</name>;</typedef>

<decl_stmt><decl><type><name>namespace</name></type> <name>adaptive</name>

<block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>http</name>

<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AbstractConnection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AbstractConnectionManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AbstractChunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AbstractChunkSource</name>

<block>{<block_content>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>AbstractChunkSource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>AbstractChunkSource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>block_t</name> <modifier>*</modifier></type> <name>readBlock</name> <parameter_list>()</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<function_decl><type><name>virtual</name> <name>block_t</name> <modifier>*</modifier></type> <name>read</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>hasMoreData</name> <argument_list>()</argument_list></macro> <specifier>const</specifier> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>setBytesRange</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BytesRange</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><specifier>const</specifier> <name>BytesRange</name> <operator>&amp;</operator> <macro><name>getBytesRange</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getContentType</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

enum <expr_stmt><expr><name>RequestStatus</name> <macro><name>getRequestStatus</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<label><name>protected</name>:</label>

<decl_stmt><decl><type><name><name>enum</name> <name>RequestStatus</name></name></type> <name>requeststatus</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>contentLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BytesRange</name></type> <name>bytesRange</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>AbstractChunk</name>

<block>{<block_content>

<label><name>public</name>:</label>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>AbstractChunk</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name>string</name> <call><name>getContentType</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

enum <expr_stmt><expr><name>RequestStatus</name> <macro><name>getRequestStatus</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>size_t</name> <macro><name>getBytesRead</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>uint64_t</name> <macro><name>getStartByteInFile</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>bool</name> <macro><name>isEmpty</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>block_t</name> <modifier>*</modifier></type> <name>readBlock</name> <parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>block_t</name> <modifier>*</modifier></type> <name>read</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>

<expr_stmt><expr><call><name>AbstractChunk</name><argument_list>(<argument><expr><name>AbstractChunkSource</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AbstractChunkSource</name> <modifier>*</modifier></type><name>source</name></decl>;</decl_stmt>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>onDownload</name> <parameter_list>(<parameter><decl><type><name>block_t</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list> <init>= <expr><literal type="number">0</literal></expr></init>;</function_decl>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>size_t</name></type> <name>bytesRead</name></decl>;</decl_stmt>

<function_decl><type><name>block_t</name> <modifier>*</modifier></type> <name>doRead</name><parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>, <parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>HTTPChunkSource</name> <range>: <expr><name>public</name> <name>AbstractChunkSource</name></expr></range></decl>,

<decl><type ref="prev"/><name>public</name> <name>BackendPrefInterface</name>

<block>{<block_content>

<label><name>public</name>:</label>

<expr_stmt><expr><call><name>HTTPChunkSource</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>AbstractConnectionManager</name> <operator>*</operator></expr></argument>,

<argument><expr><specifier>const</specifier> <name>ID</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>HTTPChunkSource</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>block_t</name> <modifier>*</modifier></type> <name>readBlock</name> <parameter_list>()</parameter_list>;</function_decl> 

<function_decl><type><name>virtual</name> <name>block_t</name> <modifier>*</modifier></type> <name>read</name> <parameter_list>(<parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl> 

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>hasMoreData</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> 

<expr_stmt><expr><name>virtual</name> <name>std</name><operator>::</operator><name>string</name> <macro><name>getContentType</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>size_t</name></type> <name>CHUNK_SIZE</name> <init>= <expr><literal type="number">32768</literal></expr></init></decl>;</decl_stmt>

<label><name>protected</name>:</label>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>prepare</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>AbstractConnection</name> <modifier>*</modifier></type><name>connection</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AbstractConnectionManager</name> <modifier>*</modifier></type><name>connManager</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>consumed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name>prepared</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID</name></type> <name>sourceid</name></decl>;</decl_stmt>

<label><name>private</name>:</label>

<decl_stmt><decl><type><name>bool</name></type> <name>init</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ConnectionParams</name></type> <name>params</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>HTTPChunkBufferedSource</name> <range>: <expr><name>public</name> <name>HTTPChunkSource</name>

<block>{

<expr><name>friend</name> <name>class</name> <name>Downloader</name></expr>;

<expr><name>public</name><operator>:</operator>

<call><name>HTTPChunkBufferedSource</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>AbstractConnectionManager</name> <operator>*</operator></expr></argument>,

<argument><expr><specifier>const</specifier> <name>ID</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <operator>~</operator><call><name>HTTPChunkBufferedSource</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>block_t</name> <operator>*</operator> <call><name>readBlock</name> <argument_list>()</argument_list></call></expr>; 

<expr><name>virtual</name> <name>block_t</name> <operator>*</operator> <call><name>read</name> <argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>; 

<expr><name>virtual</name> <name>bool</name> <macro><name>hasMoreData</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>; 

<expr><name>void</name> <call><name>hold</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <call><name>release</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <name>bool</name> <call><name>prepare</name><argument_list>()</argument_list></call></expr>; 

<expr><name>void</name> <call><name>bufferize</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr>;

<expr><name>bool</name> <macro><name>isDone</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>

<name>block_t</name> <operator>*</operator><name>p_head</name></expr>; 

<expr><name>block_t</name> <operator>*</operator><operator>*</operator><name>pp_tail</name></expr>;

<expr><name>size_t</name> <name>buffered</name></expr>; 

<expr><name>bool</name> <name>done</name></expr>;

<expr><name>bool</name> <name>eof</name></expr>;

<expr><name>vlc_tick_t</name> <name>downloadstart</name></expr>;

<expr><name>vlc_cond_t</name> <name>avail</name></expr>;

<expr><name>bool</name> <name>held</name></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>HTTPChunk</name> <range>: <expr><name>public</name> <name>AbstractChunk</name>

<block>{

<expr><name>public</name><operator>:</operator>

<call><name>HTTPChunk</name><argument_list>(<argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>url</name></expr></argument>, <argument><expr><name>AbstractConnectionManager</name> <operator>*</operator></expr></argument>,

<argument><expr><specifier>const</specifier> <name>ID</name> <operator>&amp;</operator></expr></argument>, <argument><expr><name>bool</name> <operator>=</operator> <name>false</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <operator>~</operator><call><name>HTTPChunk</name><argument_list>()</argument_list></call></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <name>void</name> <macro><name>onDownload</name> <argument_list>(<argument>block_t **</argument>)</argument_list></macro> <block>{}</block></expr> 

}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

</unit>
