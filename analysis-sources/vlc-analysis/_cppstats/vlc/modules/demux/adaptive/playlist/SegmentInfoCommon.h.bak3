






















#ifndef SEGMENTINFOCOMMON_H
#define SEGMENTINFOCOMMON_H

#include <string>
#include <list>
#include "Inheritables.hpp"
#include "Templates.hpp"
#include "Segment.h"
#include "ICanonicalUrl.hpp"
#include "../tools/Properties.hpp"

namespace adaptive
{
namespace playlist
{
class Segment;

class SegmentInfoCommon : public ICanonicalUrl,
public Initializable<Segment>,
public Indexable<Segment>
{
public:
SegmentInfoCommon( ICanonicalUrl *parent = NULL );
virtual ~SegmentInfoCommon();
int getStartIndex() const;
void setStartIndex( int startIndex );
void appendBaseURL( const std::string& url );
virtual Url getUrlSegment() const; 
Property<stime_t> duration;
static bool getSegmentNumberByScaledTime(const std::vector<ISegment *> &,
stime_t, uint64_t *);

private:
int startIndex;
std::list<std::string> baseURLs;
};
}
}

#endif 
