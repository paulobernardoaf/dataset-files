<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\adaptive\playlist\SegmentTimeline.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SegmentInfoCommon.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>adaptive</name>

<block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>playlist</name>

<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SegmentTimeline</name> <range>: <expr><name>public</name> <name>TimescaleAble</name>

<block>{

<expr><name>class</name> <name>Element</name></expr>;

<expr><name>public</name><operator>:</operator>

<call><name>SegmentTimeline</name><argument_list>(<argument><expr><name>TimescaleAble</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><call><name>SegmentTimeline</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <operator>~</operator><call><name>SegmentTimeline</name><argument_list>()</argument_list></call></expr>;

<expr><name>void</name> <macro><name>addElement</name><argument_list>(<argument>uint64_t</argument>, <argument>stime_t d</argument>, <argument>uint64_t r = <literal type="number">0</literal></argument>, <argument>stime_t t = <literal type="number">0</literal></argument>)</argument_list></macro></expr>;

<expr><name>uint64_t</name> <macro><name>getElementNumberByScaledPlaybackTime</name><argument_list>(<argument>stime_t</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>getScaledPlaybackTimeDurationBySegmentNumber</name><argument_list>(<argument>uint64_t</argument>, <argument>stime_t *</argument>, <argument>stime_t *</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>stime_t</name> <macro><name>getScaledPlaybackTimeByElementNumber</name><argument_list>(<argument>uint64_t</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>stime_t</name> <macro><name>getMinAheadScaledTime</name><argument_list>(<argument>uint64_t</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>stime_t</name> <macro><name>getTotalLength</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint64_t</name> <macro><name>maxElementNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>uint64_t</name> <macro><name>minElementNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>pruneByPlaybackTime</name><argument_list>(<argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr>;

<expr><name>size_t</name> <call><name>pruneBySequenceNumber</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <call><name>updateWith</name><argument_list>(<argument><expr><name>SegmentTimeline</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>debug</name><argument_list>(<argument>vlc_object_t *</argument>, <argument>int = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>private</name><operator>:</operator>

<name>std</name><operator>::</operator><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>Element</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>elements</name></expr>;

<expr><name>stime_t</name> <name>totalLength</name></expr>;

<expr><name>class</name> <name>Element</name>

<block>{

<expr><name>public</name><operator>:</operator>

<call><name>Element</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>stime_t</name></expr></argument>, <argument><expr><name>uint64_t</name></expr></argument>, <argument><expr><name>stime_t</name></expr></argument>)</argument_list></call></expr>;

<expr><name>void</name> <macro><name>debug</name><argument_list>(<argument>vlc_object_t *</argument>, <argument>int = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>bool</name> <macro><name>contains</name><argument_list>(<argument>stime_t</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>stime_t</name> <name>t</name></expr>;

<expr><name>stime_t</name> <name>d</name></expr>;

<expr><name>uint64_t</name> <name>r</name></expr>;

<expr><name>uint64_t</name> <name>number</name></expr>;

}</block></expr>;

}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

</unit>
