<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\adaptive\playlist\Segment.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ICanonicalUrl.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../http/Chunk.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../encryption/CommonEncryption.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../tools/Properties.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Time.hpp"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>adaptive</name>

<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>SharedResources</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>http</name>

<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AbstractConnectionManager</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>playlist</name>

<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>BaseRepresentation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SubSegment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SegmentChunk</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>http</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>encryption</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>ISegment</name> <range>: <expr><name>public</name> <name>ICanonicalUrl</name>

<block>{

<expr><name>public</name><operator>:</operator>

<call><name>ISegment</name><argument_list>(<argument><expr><specifier>const</specifier> <name>ICanonicalUrl</name> <operator>*</operator><name>parent</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <operator>~</operator><call><name>ISegment</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>SegmentChunk</name><operator>*</operator> <call><name>toChunk</name> <argument_list>(<argument><expr><name>SharedResources</name> <operator>*</operator></expr></argument>, <argument><expr><name>AbstractConnectionManager</name> <operator>*</operator></expr></argument>,

<argument><expr><name>size_t</name></expr></argument>, <argument><expr><name>BaseRepresentation</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>SegmentChunk</name><operator>*</operator> <call><name>createChunk</name> <argument_list>(<argument><expr><name>AbstractChunkSource</name> <operator>*</operator></expr></argument>, <argument><expr><name>BaseRepresentation</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>setByteRange</name> <argument_list>(<argument>size_t start</argument>, <argument>size_t end</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>setSequenceNumber</name><argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></call></expr>;

<expr><name>virtual</name> <name>uint64_t</name> <macro><name>getSequenceNumber</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>isTemplate</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>size_t</name> <macro><name>getOffset</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ISegment</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>subSegments</name> <argument_list>()</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>addSubSegment</name> <argument_list>(<argument><expr><name>SubSegment</name> <operator>*</operator></expr></argument>)</argument_list></call> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>debug</name> <argument_list>(<argument>vlc_object_t *</argument>,<argument>int = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>bool</name> <macro><name>contains</name> <argument_list>(<argument>size_t byte</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>int</name> <macro><name>compare</name> <argument_list>(<argument>ISegment *</argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>void</name> <call><name>setEncryption</name> <argument_list>(<argument><expr><name>CommonEncryption</name> <operator>&amp;</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>int</name> <macro><name>getClassId</name> <argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name><name>Property</name><argument_list type="generic">&lt;<argument><expr><name>stime_t</name></expr></argument>&gt;</argument_list></name> <name>startTime</name></expr>;

<expr><name><name>Property</name><argument_list type="generic">&lt;<argument><expr><name>stime_t</name></expr></argument>&gt;</argument_list></name> <name>duration</name></expr>;

<expr><name>bool</name> <name>discontinuity</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>CLASSID_ISEGMENT</name> <operator>=</operator> <literal type="number">0</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>virtual</name> <name>bool</name> <call><name>prepareChunk</name> <argument_list>(<argument><expr><name>SharedResources</name> <operator>*</operator></expr></argument>,

<argument><expr><name>SegmentChunk</name> <operator>*</operator></expr></argument>,

<argument><expr><name>BaseRepresentation</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><name>CommonEncryption</name> <name>encryption</name></expr>;

<expr><name>size_t</name> <name>startByte</name></expr>;

<expr><name>size_t</name> <name>endByte</name></expr>;

<expr><name>std</name><operator>::</operator><name>string</name> <name>debugName</name></expr>;

<expr><name>int</name> <name>classId</name></expr>;

<expr><name>bool</name> <name>templated</name></expr>;

<expr><name>uint64_t</name> <name>sequence</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>SEQUENCE_INVALID</name></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>SEQUENCE_FIRST</name></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>Segment</name> <range>: <expr><name>public</name> <name>ISegment</name>

<block>{

<expr><name>public</name><operator>:</operator>

<call><name>Segment</name><argument_list>( <argument><expr><name>ICanonicalUrl</name> <operator>*</operator><name>parent</name></expr></argument> )</argument_list></call></expr>;

<expr><operator>~</operator><call><name>Segment</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>SegmentChunk</name><operator>*</operator> <call><name>createChunk</name><argument_list>(<argument><expr><name>AbstractChunkSource</name> <operator>*</operator></expr></argument>, <argument><expr><name>BaseRepresentation</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>; 

<expr><name>virtual</name> <name>void</name> <call><name>setSourceUrl</name><argument_list>( <argument><expr><specifier>const</specifier> <name>std</name><operator>::</operator><name>string</name> <operator>&amp;</operator><name>url</name></expr></argument> )</argument_list></call></expr>;

<expr><name>virtual</name> <name>Url</name> <macro><name>getUrlSegment</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>; 

<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ISegment</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>subSegments</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>void</name> <macro><name>debug</name><argument_list>(<argument>vlc_object_t *</argument>,<argument>int = <literal type="number">0</literal></argument>)</argument_list></macro> <specifier>const</specifier></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>addSubSegment</name><argument_list>(<argument><expr><name>SubSegment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>CLASSID_SEGMENT</name> <operator>=</operator> <literal type="number">1</literal></expr>;

<expr><name>protected</name><operator>:</operator>

<name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>SubSegment</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>subsegments</name></expr>;

<expr><name>Url</name> <name>sourceUrl</name></expr>;

<expr><name>int</name> <name>size</name></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>InitSegment</name> <range>: <expr><name>public</name> <name>Segment</name>

<block>{

<expr><name>public</name><operator>:</operator>

<call><name>InitSegment</name><argument_list>( <argument><expr><name>ICanonicalUrl</name> <operator>*</operator><name>parent</name></expr></argument> )</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>CLASSID_INITSEGMENT</name> <operator>=</operator> <literal type="number">2</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>IndexSegment</name> <range>: <expr><name>public</name> <name>Segment</name>

<block>{

<expr><name>public</name><operator>:</operator>

<call><name>IndexSegment</name><argument_list>( <argument><expr><name>ICanonicalUrl</name> <operator>*</operator><name>parent</name></expr></argument> )</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>CLASSID_INDEXSEGMENT</name> <operator>=</operator> <literal type="number">3</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>SubSegment</name> <range>: <expr><name>public</name> <name>ISegment</name>

<block>{

<expr><name>public</name><operator>:</operator>

<macro><name>SubSegment</name><argument_list>(<argument>ISegment *</argument>, <argument>size_t start</argument>, <argument>size_t end</argument>)</argument_list></macro></expr>;

<expr><name>virtual</name> <name>SegmentChunk</name><operator>*</operator> <call><name>createChunk</name><argument_list>(<argument><expr><name>AbstractChunkSource</name> <operator>*</operator></expr></argument>, <argument><expr><name>BaseRepresentation</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>; 

<expr><name>virtual</name> <name>Url</name> <macro><name>getUrlSegment</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>; 

<expr><name>virtual</name> <name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ISegment</name><operator>*</operator></expr></argument>&gt;</argument_list></name> <call><name>subSegments</name><argument_list>()</argument_list></call></expr>;

<expr><name>virtual</name> <name>void</name> <call><name>addSubSegment</name><argument_list>(<argument><expr><name>SubSegment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;

<expr><specifier>static</specifier> <specifier>const</specifier> <name>int</name> <name>CLASSID_SUBSEGMENT</name> <operator>=</operator> <literal type="number">4</literal></expr>;

}</block></expr></range></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

</block_content>}</block></decl></decl_stmt>

</unit>
