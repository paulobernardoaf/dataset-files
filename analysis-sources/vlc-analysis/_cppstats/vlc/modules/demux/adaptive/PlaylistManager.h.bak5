























#include "logic/AbstractAdaptationLogic.h"
#include "Streams.hpp"
#include <vector>

namespace adaptive
{
namespace playlist
{
class AbstractPlaylist;
class BasePeriod;
}

namespace http
{
class AbstractConnectionManager;
}

using namespace playlist;
using namespace logic;

class PlaylistManager
{
public:
PlaylistManager( demux_t *,
SharedResources *,
AbstractPlaylist *,
AbstractStreamFactory *,
AbstractAdaptationLogic::LogicType type );
virtual ~PlaylistManager ();

bool init();
bool start();
bool started() const;
void stop();

AbstractStream::buffering_status bufferize(vlc_tick_t, vlc_tick_t, vlc_tick_t);
AbstractStream::status dequeue(vlc_tick_t, vlc_tick_t *);
void drain();

virtual bool needsUpdate() const;
virtual bool updatePlaylist();
virtual void scheduleNextUpdate();


static int control_callback(demux_t *, int, va_list);
static int demux_callback(demux_t *);

protected:

virtual int doControl(int, va_list);
virtual int doDemux(vlc_tick_t);

virtual bool setPosition(vlc_tick_t);
vlc_tick_t getResumeTime() const;
vlc_tick_t getFirstDTS() const;

virtual vlc_tick_t getFirstPlaybackTime() const;
vlc_tick_t getCurrentDemuxTime() const;

virtual bool reactivateStream(AbstractStream *);
bool setupPeriod();
void unsetPeriod();

void updateControlsPosition();


virtual AbstractAdaptationLogic *createLogic(AbstractAdaptationLogic::LogicType,
AbstractConnectionManager *);
virtual AbstractBufferingLogic *createBufferingLogic() const;

SharedResources *resources;
AbstractAdaptationLogic::LogicType logicType;
AbstractAdaptationLogic *logic;
AbstractBufferingLogic *bufferingLogic;
AbstractPlaylist *playlist;
AbstractStreamFactory *streamFactory;
demux_t *p_demux;
std::vector<AbstractStream *> streams;
BasePeriod *currentPeriod;


struct
{
vlc_tick_t i_nzpcr;
vlc_tick_t i_firstpcr;
mutable vlc_mutex_t lock;
vlc_cond_t cond;
} demux;


time_t nextPlaylistupdate;
int failedupdates;


struct
{
bool b_live;
vlc_tick_t i_time;
double f_position;
mutable vlc_mutex_t lock;
vlc_tick_t playlistStart;
vlc_tick_t playlistEnd;
vlc_tick_t playlistLength;
time_t lastupdate;
} cached;

private:
void setBufferingRunState(bool);
void Run();
static void * managerThread(void *);
vlc_mutex_t lock;
vlc_thread_t thread;
bool b_thread;
vlc_cond_t waitcond;
bool b_buffering;
bool b_canceled;
};

}


