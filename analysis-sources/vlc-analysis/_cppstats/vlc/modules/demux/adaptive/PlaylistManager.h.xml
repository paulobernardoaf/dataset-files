<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\adaptive\PlaylistManager.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"logic/AbstractAdaptationLogic.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Streams.hpp"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>namespace</name></type> <name>adaptive</name>

<block>{<block_content>

<decl_stmt><decl><type><name>namespace</name></type> <name>playlist</name>

<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AbstractPlaylist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>BasePeriod</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>namespace</name></type> <name>http</name>

<block>{<block_content>

<decl_stmt><decl><type><name>class</name></type> <name>AbstractConnectionManager</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>playlist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>logic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>PlaylistManager</name>

<block>{<block_content>

<label><name>public</name>:</label>

<macro><name>PlaylistManager</name><argument_list>( <argument>demux_t *</argument>,

<argument>SharedResources *</argument>,

<argument>AbstractPlaylist *</argument>,

<argument>AbstractStreamFactory *</argument>,

<argument>AbstractAdaptationLogic::LogicType type</argument> )</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>virtual</name> <operator>~</operator><call><name>PlaylistManager</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>bool</name></type> <name>init</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>start</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>bool</name> <macro><name>started</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>AbstractStream</name><operator>::</operator><name>buffering_status</name> <call><name>bufferize</name><argument_list>(<argument><expr><name>vlc_tick_t</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>AbstractStream</name><operator>::</operator><name>status</name> <call><name>dequeue</name><argument_list>(<argument><expr><name>vlc_tick_t</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><name>void</name></type> <name>drain</name><parameter_list>()</parameter_list>;</function_decl>

<expr_stmt><expr><name>virtual</name> <name>bool</name> <macro><name>needsUpdate</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>updatePlaylist</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>void</name></type> <name>scheduleNextUpdate</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>control_callback</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>demux_callback</name><parameter_list>(<parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<label><name>protected</name>:</label>

<function_decl><type><name>virtual</name> <name>int</name></type> <name>doControl</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>int</name></type> <name>doDemux</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>setPosition</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><name>vlc_tick_t</name> <macro><name>getResumeTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc_tick_t</name> <macro><name>getFirstDTS</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>virtual</name> <name>vlc_tick_t</name> <macro><name>getFirstPlaybackTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<expr_stmt><expr><name>vlc_tick_t</name> <macro><name>getCurrentDemuxTime</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<function_decl><type><name>virtual</name> <name>bool</name></type> <name>reactivateStream</name><parameter_list>(<parameter><decl><type><name>AbstractStream</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>bool</name></type> <name>setupPeriod</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>unsetPeriod</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>updateControlsPosition</name><parameter_list>()</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>virtual</name> <name>AbstractAdaptationLogic</name> <modifier>*</modifier></type><name>createLogic</name><argument_list>(<argument><expr><name>AbstractAdaptationLogic</name><operator>::</operator><name>LogicType</name></expr></argument>,

<argument><expr><name>AbstractConnectionManager</name> <operator>*</operator></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name>virtual</name> <name>AbstractBufferingLogic</name> <operator>*</operator><macro><name>createBufferingLogic</name><argument_list>()</argument_list></macro> <specifier>const</specifier></expr>;</expr_stmt>

<decl_stmt><decl><type><name>SharedResources</name> <modifier>*</modifier></type><name>resources</name></decl>;</decl_stmt>

<expr_stmt><expr><name>AbstractAdaptationLogic</name><operator>::</operator><name>LogicType</name> <name>logicType</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AbstractAdaptationLogic</name> <modifier>*</modifier></type><name>logic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AbstractBufferingLogic</name> <modifier>*</modifier></type><name>bufferingLogic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AbstractPlaylist</name> <modifier>*</modifier></type><name>playlist</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AbstractStreamFactory</name> <modifier>*</modifier></type><name>streamFactory</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl>;</decl_stmt>

<expr_stmt><expr><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>AbstractStream</name> <operator>*</operator></expr></argument>&gt;</argument_list></name> <name>streams</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>BasePeriod</name> <modifier>*</modifier></type><name>currentPeriod</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_nzpcr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_firstpcr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>cond</name></decl>;</decl_stmt>

}</block> <decl><name>demux</name></decl>;</struct>

<decl_stmt><decl><type><name>time_t</name></type> <name>nextPlaylistupdate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>failedupdates</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_live</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>mutable</name> <name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>playlistStart</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>playlistEnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>playlistLength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>lastupdate</name></decl>;</decl_stmt>

}</block> <decl><name>cached</name></decl>;</struct>

<label><name>private</name>:</label>

<function_decl><type><name>void</name></type> <name>setBufferingRunState</name><parameter_list>(<parameter><decl><type><name>bool</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>Run</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type> <name>managerThread</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_thread_t</name></type> <name>thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_thread</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>waitcond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_buffering</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_canceled</name></decl>;</decl_stmt>

</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

</block_content>}</block></decl></decl_stmt>

</unit>
