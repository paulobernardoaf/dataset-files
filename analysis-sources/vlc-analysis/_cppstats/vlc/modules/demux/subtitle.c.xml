<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\subtitle.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_TYPE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Force the subtiles format. Selecting \"auto\" means autodetection and should always work.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUB_DESCRIPTION_LONGTEXT</name></cpp:macro> <cpp:value>N_("Override the default track description.")</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ppsz_sub_type</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"auto"</literal></expr>, <expr><literal type="string">"microdvd"</literal></expr>, <expr><literal type="string">"subrip"</literal></expr>, <expr><literal type="string">"subviewer"</literal></expr>, <expr><literal type="string">"ssa1"</literal></expr>,

<expr><literal type="string">"ssa2-4"</literal></expr>, <expr><literal type="string">"ass"</literal></expr>, <expr><literal type="string">"vplayer"</literal></expr>, <expr><literal type="string">"sami"</literal></expr>, <expr><literal type="string">"dvdsubtitle"</literal></expr>, <expr><literal type="string">"mpl2"</literal></expr>,

<expr><literal type="string">"aqt"</literal></expr>, <expr><literal type="string">"pjs"</literal></expr>, <expr><literal type="string">"mpsub"</literal></expr>, <expr><literal type="string">"jacosub"</literal></expr>, <expr><literal type="string">"psb"</literal></expr>, <expr><literal type="string">"realtext"</literal></expr>, <expr><literal type="string">"dks"</literal></expr>,

<expr><literal type="string">"subviewer1"</literal></expr>, <expr><literal type="string">"sbv"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument>N_(<literal type="string">"Subtitles"</literal>)</argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"Text subtitle parser"</literal>)</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">0</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"sub-type"</literal></argument>, <argument><literal type="string">"auto"</literal></argument>, <argument>N_(<literal type="string">"Subtitle format"</literal>)</argument>,

<argument>SUB_TYPE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>change_string_list</name><argument_list>( <argument>ppsz_sub_type</argument>, <argument>ppsz_sub_type</argument> )</argument_list></macro>

<macro><name>add_string</name><argument_list>( <argument><literal type="string">"sub-description"</literal></argument>, <argument>NULL</argument>, <argument>N_(<literal type="string">"Subtitle description"</literal>)</argument>,

<argument>SUB_DESCRIPTION_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"subtitle"</literal></argument> )</argument_list></macro>

<expr_stmt><expr><call><name>vlc_module_end</name> <argument_list>()</argument_list></call>

enum <name>subtitle_type_e</name>

<block>{

<expr><name>SUB_TYPE_UNKNOWN</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,

<expr><name>SUB_TYPE_MICRODVD</name></expr>,

<expr><name>SUB_TYPE_SUBRIP</name></expr>,

<expr><name>SUB_TYPE_SSA1</name></expr>,

<expr><name>SUB_TYPE_SSA2_4</name></expr>,

<expr><name>SUB_TYPE_ASS</name></expr>,

<expr><name>SUB_TYPE_VPLAYER</name></expr>,

<expr><name>SUB_TYPE_SAMI</name></expr>,

<expr><name>SUB_TYPE_SUBVIEWER</name></expr>, 

<expr><name>SUB_TYPE_DVDSUBTITLE</name></expr>, 

<expr><name>SUB_TYPE_MPL2</name></expr>,

<expr><name>SUB_TYPE_AQT</name></expr>,

<expr><name>SUB_TYPE_PJS</name></expr>,

<expr><name>SUB_TYPE_MPSUB</name></expr>,

<expr><name>SUB_TYPE_JACOSUB</name></expr>,

<expr><name>SUB_TYPE_PSB</name></expr>,

<expr><name>SUB_TYPE_RT</name></expr>,

<expr><name>SUB_TYPE_DKS</name></expr>,

<expr><name>SUB_TYPE_SUBVIEW1</name></expr>, 

<expr><name>SUB_TYPE_SBV</name></expr>,

<expr><name>SUB_TYPE_SCC</name></expr>, 

}</block></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>i_line_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_line</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>line</name></decl>;</decl_stmt>

}</block></struct></type> <name>text_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>TextLoad</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TextUnload</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

}</block></struct></type> <name>subtitle_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name><name>enum</name> <name>subtitle_type_e</name></name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_microsecperframe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_header</name></decl>;</decl_stmt> 

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_inited</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_comment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_time_resolution</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_time_shift</name></decl>;</decl_stmt>

}</block> <decl><name>jss</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><name>bool</name></type> <name>b_inited</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_total</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_factor</name></decl>;</decl_stmt>

}</block> <decl><name>mpsub</name></decl>;</struct>

<struct>struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_start</name></decl>;</decl_stmt>

}</block> <decl><name>sami</name></decl>;</struct>

}</block></struct></type> <name>subs_properties_t</name>;</typedef>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_slave</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_first_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_next_demux_date</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_current</name></decl>;</decl_stmt>

}</block> <decl><name>subtitles</name></decl>;</struct>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>subs_properties_t</name></type> <name>props</name></decl>;</decl_stmt>

<function_decl><type><name>block_t</name> <modifier>*</modifier></type> (<modifier>*</modifier><name>pf_convert</name>)<parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseMicroDvd</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseSubRip</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseSubViewer</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseSSA</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseVplayer</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseSami</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseDVDSubtitle</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseMPL2</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseAQT</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParsePJS</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseMPSub</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseJSS</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParsePSB</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseRealText</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseDKS</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseSubViewer1</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseCommonSBV</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ParseSCC</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_type_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_read</name>)<parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

}</block> <decl><name><name>sub_read_subtitle_function</name> <index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><literal type="string">"microdvd"</literal></expr>, <expr><name>SUB_TYPE_MICRODVD</name></expr>, <expr><literal type="string">"MicroDVD"</literal></expr>, <expr><name>ParseMicroDvd</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subrip"</literal></expr>, <expr><name>SUB_TYPE_SUBRIP</name></expr>, <expr><literal type="string">"SubRIP"</literal></expr>, <expr><name>ParseSubRip</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subviewer"</literal></expr>, <expr><name>SUB_TYPE_SUBVIEWER</name></expr>, <expr><literal type="string">"SubViewer"</literal></expr>, <expr><name>ParseSubViewer</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ssa1"</literal></expr>, <expr><name>SUB_TYPE_SSA1</name></expr>, <expr><literal type="string">"SSA-1"</literal></expr>, <expr><name>ParseSSA</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ssa2-4"</literal></expr>, <expr><name>SUB_TYPE_SSA2_4</name></expr>, <expr><literal type="string">"SSA-2/3/4"</literal></expr>, <expr><name>ParseSSA</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ass"</literal></expr>, <expr><name>SUB_TYPE_ASS</name></expr>, <expr><literal type="string">"SSA/ASS"</literal></expr>, <expr><name>ParseSSA</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vplayer"</literal></expr>, <expr><name>SUB_TYPE_VPLAYER</name></expr>, <expr><literal type="string">"VPlayer"</literal></expr>, <expr><name>ParseVplayer</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sami"</literal></expr>, <expr><name>SUB_TYPE_SAMI</name></expr>, <expr><literal type="string">"SAMI"</literal></expr>, <expr><name>ParseSami</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dvdsubtitle"</literal></expr>,<expr><name>SUB_TYPE_DVDSUBTITLE</name></expr>, <expr><literal type="string">"DVDSubtitle"</literal></expr>, <expr><name>ParseDVDSubtitle</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mpl2"</literal></expr>, <expr><name>SUB_TYPE_MPL2</name></expr>, <expr><literal type="string">"MPL2"</literal></expr>, <expr><name>ParseMPL2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"aqt"</literal></expr>, <expr><name>SUB_TYPE_AQT</name></expr>, <expr><literal type="string">"AQTitle"</literal></expr>, <expr><name>ParseAQT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pjs"</literal></expr>, <expr><name>SUB_TYPE_PJS</name></expr>, <expr><literal type="string">"PhoenixSub"</literal></expr>, <expr><name>ParsePJS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mpsub"</literal></expr>, <expr><name>SUB_TYPE_MPSUB</name></expr>, <expr><literal type="string">"MPSub"</literal></expr>, <expr><name>ParseMPSub</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"jacosub"</literal></expr>, <expr><name>SUB_TYPE_JACOSUB</name></expr>, <expr><literal type="string">"JacoSub"</literal></expr>, <expr><name>ParseJSS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"psb"</literal></expr>, <expr><name>SUB_TYPE_PSB</name></expr>, <expr><literal type="string">"PowerDivx"</literal></expr>, <expr><name>ParsePSB</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"realtext"</literal></expr>, <expr><name>SUB_TYPE_RT</name></expr>, <expr><literal type="string">"RealText"</literal></expr>, <expr><name>ParseRealText</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"dks"</literal></expr>, <expr><name>SUB_TYPE_DKS</name></expr>, <expr><literal type="string">"DKS"</literal></expr>, <expr><name>ParseDKS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"subviewer1"</literal></expr>, <expr><name>SUB_TYPE_SUBVIEW1</name></expr>, <expr><literal type="string">"Subviewer 1"</literal></expr>, <expr><name>ParseSubViewer1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sbv"</literal></expr>, <expr><name>SUB_TYPE_SBV</name></expr>, <expr><literal type="string">"SBV"</literal></expr>, <expr><name>ParseCommonSBV</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"scc"</literal></expr>, <expr><name>SUB_TYPE_SCC</name></expr>, <expr><literal type="string">"SCC"</literal></expr>, <expr><name>ParseSCC</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>, <expr><name>SUB_TYPE_UNKNOWN</name></expr>, <expr><literal type="string">"Unknown"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>va_list</name></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Fix</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_language_from_filename</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ToTextBlock</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_len</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>( <argument><expr><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><name>i_len</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>block_t</name> <modifier>*</modifier></type><name>ToEIA608Block</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_block</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>i_len</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>p_block</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name>i_block</name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tok</name> <init>= <expr><call><name>strtok_r</name><argument_list>( <argument><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<while>while<condition>( <expr><name>psz_tok</name> <operator>&amp;&amp;</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>psz_tok</name></expr></argument>, <argument><expr><literal type="string">"%2x%2x"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name>i_block</name> <operator>-</operator> <name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>&amp;</operator><name><name>p_block</name><operator>-&gt;</operator><name>p_buffer</name><index>[<expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFC</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>( <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>p_block</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_fps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_type</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>pf_read</name>)<parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>subtitle_t</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter> )</parameter_list>;</function_decl>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"subtitle demux discarded"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>demux_sys_t</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rate</name></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_convert</name></name> <operator>=</operator> <name>ToTextBlock</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_current</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>psz_header</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_microsecperframe</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>jss</name><operator>.</operator><name>b_inited</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>mpsub</name><operator>.</operator><name>b_inited</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>sami</name><operator>.</operator><name>psz_start</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>f_fps</name> <operator>=</operator> <call><name>var_CreateGetFloat</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sub-original-fps"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>f_fps</name> <operator>&gt;=</operator> <literal type="number">1.f</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_microsecperframe</name></name> <operator>=</operator> <call><name>llroundf</name><argument_list>( <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>CLOCK_FREQ</name> <operator>/</operator> <name>f_fps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"Override subtitle fps %f"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator> <name>f_fps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_type</name> <operator>=</operator> <call><name>var_CreateGetString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sub-type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_type</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_type</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>sub_read_subtitle_function</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_type_name</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>( <argument><expr><name><name>sub_read_subtitle_function</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_type_name</name></expr></argument>,

<argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name><name>sub_read_subtitle_function</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_type</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>i_start_pos</name> <init>= <expr><call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call> <operator>&lt;</operator> <literal type="number">16</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<enum>enum

<block>{

<decl><name>UTF8BOM</name></decl>,

<decl><name>UTF16LE</name></decl>,

<decl><name>UTF16BE</name></decl>,

<decl><name>NOBOM</name></decl>,

}</block> <decl><name>e_bom</name> <init>= <expr><name>NOBOM</name></expr></init></decl>;</enum>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_bom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"\xEF\xBB\xBF"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>e_bom</name> <operator>=</operator> <name>UTF8BOM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_bom</name> <operator>=</operator> <literal type="string">"UTF-8"</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"\xFF\xFE"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>e_bom</name> <operator>=</operator> <name>UTF16LE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_bom</name> <operator>=</operator> <literal type="string">"UTF-16LE"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="string">"\xFE\xFF"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>e_bom</name> <operator>=</operator> <name>UTF16BE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_bom</name> <operator>=</operator> <literal type="string">"UTF-16BE"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>e_bom</name> <operator>!=</operator> <name>NOBOM</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected %s Byte Order Mark"</literal></expr></argument>, <argument><expr><name>psz_bom</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_peek</name> <operator>=</operator> <call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>p_probestream</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>e_bom</name> <operator>!=</operator> <name>UTF8BOM</name> <operator>&amp;&amp;</operator> <name>e_bom</name> <operator>!=</operator> <name>NOBOM</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&gt;</operator> <literal type="number">16</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_outbuf</name> <init>= <expr><call><name>FromCharset</name><argument_list>( <argument><expr><name>psz_bom</name></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_outbuf</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p_probestream</name> <operator>=</operator> <call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p_outbuf</name></expr></argument>,

<argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>p_outbuf</name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>i_skip</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>e_bom</name> <operator>==</operator> <name>UTF8BOM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_probestream</name> <operator>=</operator> <call><name>vlc_stream_MemoryNew</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_skip</name></expr>]</index></name></expr></argument>,

<argument><expr><name>i_peek</name> <operator>-</operator> <name>i_skip</name></expr></argument>, <argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>p_probestream</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>SUB_TYPE_UNKNOWN</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_try</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"autodetecting subtitle format"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i_try</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i_try</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i_try</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>p_dummy</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>s</name> <operator>=</operator> <call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><name>p_probestream</name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;SAMI&gt;"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_SAMI</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{%d}{%d}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{%d}{}"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_MICRODVD</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d,%d --&gt; %d:%d:%d,%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d --&gt; %d:%d:%d,%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d,%d --&gt; %d:%d:%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d.%d --&gt; %d:%d:%d.%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">8</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d --&gt; %d:%d:%d.%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d.%d --&gt; %d:%d:%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d --&gt; %d:%d:%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">6</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_SUBRIP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"!: This is a Sub Station Alpha v1"</literal></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_SSA1</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ScriptType: v4.00+"</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_ASS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"ScriptType: v4.00"</literal></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_SSA2_4</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Dialogue: Marked"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_SSA2_4</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Dialogue:"</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_ASS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[INFORMATION]"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_SUBVIEWER</name></expr>;</expr_stmt> 

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d.%d %d:%d:%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">7</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"@%d @%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_JACOSUB</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d.%d,%d:%d:%d.%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_SBV</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d:"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_VPLAYER</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{T %d:%d:%d:%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_DVDSUBTITLE</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[%d:%d:%d]%c"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_DKS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"*** START SCRIPT"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_SUBVIEW1</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[%d][%d]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[%d][]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_MPL2</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"FORMAT=%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator> <call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"FORMAT=TIM%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_dummy</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name>p_dummy</name> <operator>==</operator><literal type="char">'E'</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_MPSUB</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"--&gt;&gt; %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_AQT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d,%d,"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_PJS</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{%d:%d:%d}"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_PSB</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;time"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_RT</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"WEBVTT"</literal></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Scenarist_SCC V1.0"</literal></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>SUB_TYPE_SCC</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>pf_convert</name></name> <operator>=</operator> <name>ToEIA608Block</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_stream_Delete</name><argument_list>( <argument><expr><name>p_probestream</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>SUB_TYPE_UNKNOWN</name></expr> )</condition>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>i_start_pos</name> <operator>==</operator> <call><name>vlc_stream_Tell</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"failed to recognize subtitle type"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>sub_read_subtitle_function</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_type</name> <operator>==</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected %s format"</literal></expr></argument>,

<argument><expr><name><name>sub_read_subtitle_function</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pf_read</name> <operator>=</operator> <name><name>sub_read_subtitle_function</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pf_read</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"loading all subtitles..."</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>e_bom</name> <operator>==</operator> <name>UTF8BOM</name> <operator>&amp;&amp;</operator> 

<call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>text_t</name></type> <name>txtlines</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>TextLoad</name><argument_list>( <argument><expr><operator>&amp;</operator><name>txtlines</name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i_max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i_max</name> <operator>&lt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <literal type="number">500</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>subtitle_t</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name> <operator>&gt;=</operator> <name>i_max</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_max</name> <operator>+=</operator> <literal type="number">500</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>subtitle_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>i_max</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_realloc</name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TextUnload</name><argument_list>( <argument><expr><operator>&amp;</operator><name>txtlines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>pf_read</name><argument_list>( <argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>props</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>txtlines</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>TextUnload</name><argument_list>( <argument><expr><operator>&amp;</operator><name>txtlines</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>(<argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"loaded %zu subtitles"</literal></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>SUB_TYPE_SSA1</name> <operator>||</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>SUB_TYPE_SSA2_4</name> <operator>||</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>SUB_TYPE_ASS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Fix</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_SSA</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>i_type</name></name> <operator>==</operator> <name>SUB_TYPE_SCC</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_CEA608</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>subs</name><operator>.</operator><name>cc</name><operator>.</operator><name>i_reorder_depth</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_SUBT</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>i_stop</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>psz_language</name> <init>= <expr><call><name>get_language_from_filename</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_language</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>psz_language</name></name> <operator>=</operator> <name>psz_language</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"detected language %s of subtitle: %s"</literal></expr></argument>, <argument><expr><name>psz_language</name></expr></argument>,

<argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_location</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_description</name> <init>= <expr><call><name>var_InheritString</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"sub-description"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_description</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_description</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>psz_description</name></name> <operator>=</operator> <name>psz_description</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_description</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>psz_header</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>fmt</name><operator>.</operator><name>p_extra</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>psz_header</name></name></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_extra</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>psz_header</name></name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>Close</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>props</name><operator>.</operator><name>psz_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>

<name>ResetCurrentIndex</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_rate</name></name> <operator>&gt;</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>pf</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<block>{<block_content>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResetCurrentIndex</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_current</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>/=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i64</name> <init>= <expr><name>VLC_TICK_0</name> <operator>+</operator> <name>f</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>demux_Control</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>DEMUX_SET_TIME</name></expr></argument>, <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_CAN_CONTROL_RATE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_RATE</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f_rate</name></name> <operator>=</operator> <operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>float</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ResetCurrentIndex</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_NEXT_DEMUX_TIME</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_barrier</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_current</name></name> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_current</name></name></expr>]</index></name><operator>.</operator><name>i_start</name> <operator>*</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>f_rate</name></name> <operator>)</operator> <operator>&lt;=</operator> <name>i_barrier</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name> <init>= <expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_current</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_barrier</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_block</name> <init>= <expr><call><name><name>p_sys</name><operator>-&gt;</operator><name>pf_convert</name></name><argument_list>( <argument><expr><name>p_subtitle</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_rate</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>&gt;=</operator> <name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <operator>(</operator><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>-</operator> <name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name><operator>)</operator> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>f_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_current</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_barrier</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_date</name></name> <operator>+=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">125</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_current</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subtitle_cmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>first</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>second</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>result</name> <init>= <expr><operator>(</operator><operator>(</operator><name>subtitle_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>first</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>i_start</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>subtitle_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>second</name><operator>)</operator><operator>)</operator><operator>-&gt;</operator><name>i_start</name></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name>result</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><ternary><condition><expr><name>result</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Fix</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>qsort</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>i_count</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>subtitles</name><operator>.</operator><name>p_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> )</argument_list></sizeof></expr></argument>, <argument><expr><name>subtitle_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>TextLoad</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>stream_t</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_line_max</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_line_max</name> <operator>=</operator> <literal type="number">500</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><name>i_line_max</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>char</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>txt</name><operator>-&gt;</operator><name>line</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>vlc_stream_ReadLine</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name><index>[<expr><name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name></expr>]</index></name> <operator>=</operator> <name>psz</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>i_line_max</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_line_max</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>p_realloc</name> <init>= <expr><call><name>realloc</name><argument_list>( <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name></name></expr></argument>, <argument><expr><name>i_line_max</name> <operator>*</operator> <sizeof>sizeof<argument_list>( <argument><expr><name>char</name> <operator>*</operator></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_realloc</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name></name> <operator>=</operator> <name>p_realloc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TextUnload</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>txt</name><operator>-&gt;</operator><name>line</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>TextGetLine</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name> <operator>&gt;=</operator> <name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return<expr><operator>(</operator> <name>NULL</name> <operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>txt</name><operator>-&gt;</operator><name>line</name><index>[<expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name><operator>++</operator></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>TextPreviousLine</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseMicroDvd</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_stop</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{%d}{}%[^\r\n]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_start</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{%d}{%d}%[^\r\n]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stop</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_start</name> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator> <name>i_stop</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_fps</name> <init>= <expr><call><name>us_strtof</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>f_fps</name> <operator>&gt;</operator> <literal type="number">0.f</literal> <operator>&amp;&amp;</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"sub-original-fps"</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0.f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>i_microsecperframe</name></name> <operator>=</operator> <call><name>llroundf</name><argument_list>(<argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>CLOCK_FREQ</name> <operator>/</operator> <name>f_fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>i_start</name> <operator>*</operator> <name><name>p_props</name><operator>-&gt;</operator><name>i_microsecperframe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <ternary><condition><expr><name>i_stop</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>(</operator><name>i_stop</name> <operator>*</operator> <name><name>p_props</name><operator>-&gt;</operator><name>i_microsecperframe</name></name><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSubRipSubViewer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier> <name>pf_parse_timing</name>)<parameter_list>(<parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>b_replace_br</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>pf_parse_timing</name><argument_list>( <argument><expr><name>p_subtitle</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator>

<name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&lt;</operator> <name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name></expr> )</condition>

<block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_old</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_old</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_old</name> <operator>+</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition>

<block>{<block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_replace_br</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"[br]"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subtitle_ParseSubRipTimingValue</name><parameter_list>(<parameter><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>timing_value</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>d1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d,%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d.%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>timing_value</name><operator>)</operator> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>d1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subtitle_ParseSubRipTiming</name><parameter_list>( <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_result</name> <init>= <expr><name>VLC_EGENERIC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_stop</name></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_start</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_stop</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%s --&gt; %s"</literal></expr></argument>, <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><name>psz_stop</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<call><name>subtitle_ParseSubRipTimingValue</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name></expr></argument>, <argument><expr><name>psz_start</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name> <operator>&amp;&amp;</operator>

<call><name>subtitle_ParseSubRipTimingValue</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name></expr></argument>, <argument><expr><name>psz_stop</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_result</name> <operator>=</operator> <name>VLC_SUCCESS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>psz_stop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i_result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSubRip</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ParseSubRipSubViewer</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_props</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>p_subtitle</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>subtitle_ParseSubRipTiming</name></expr></argument>,

<argument><expr><name>false</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subtitle_ParseSubViewerTiming</name><parameter_list>( <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d.%d,%d:%d:%d.%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>d1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h2</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m2</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s2</name></expr></argument> )</argument_list></call> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSubViewer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ParseSubRipSubViewer</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><name>p_props</name></expr></argument>, <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>p_subtitle</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>subtitle_ParseSubViewerTiming</name></expr></argument>,

<argument><expr><name>true</name></expr></argument> )</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSSA</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>header_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"Dialogue: %15[^,],%d:%d:%d.%d,%d:%d:%d.%d,%[^\r\n]"</literal></expr></argument>,

<argument><expr><name>temp</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c2</name></expr></argument>,

<argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">10</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_props</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>SUB_TYPE_SSA1</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">','</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_layer</name> <init>= <expr><ternary><condition><expr><operator>(</operator> <name><name>p_props</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>SUB_TYPE_ASS</name> <operator>)</operator></expr> ?</condition><then> <expr><call><name>atoi</name><argument_list>( <argument><expr><name>temp</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_temp</name></expr></argument>, <argument><expr><literal type="string">"%zu,%d,%s"</literal></expr></argument>, <argument><expr><name>i_idx</name></expr></argument>, <argument><expr><name>i_layer</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <name>psz_temp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument> )</argument_list></call> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>c1</name> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h2</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m2</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s2</name></expr></argument> )</argument_list></call> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>c2</name> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>header_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>p_props</name><operator>-&gt;</operator><name>psz_header</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>header_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name><name>p_props</name><operator>-&gt;</operator><name>psz_header</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>s_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>psz_header</name></name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name><name>p_props</name><operator>-&gt;</operator><name>psz_header</name></name></expr></argument>, <argument><expr><name>header_len</name> <operator>+</operator> <name>s_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_props</name><operator>-&gt;</operator><name>psz_header</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>( <argument><expr><name><name>p_props</name><operator>-&gt;</operator><name>psz_header</name></name> <operator>+</operator> <name>header_len</name></expr></argument>, <argument><expr><name>s_len</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_len</name> <operator>+=</operator> <name>s_len</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseVplayer</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d%*c%[^\r\n]"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ParseSamiSearch</name><parameter_list>( <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_str</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>psz_start</name> <operator>&amp;&amp;</operator> <call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><name>psz_str</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>psz_start</name></expr></argument>, <argument><expr><name>psz_str</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><operator>&amp;</operator><name><name>s</name><index>[<expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_str</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><name>psz_str</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><operator>&amp;</operator><name><name>s</name><index>[<expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_str</name></expr></argument> )</argument_list></call></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSami</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>text</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt> 

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ParseSamiSearch</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><name><name>p_props</name><operator>-&gt;</operator><name>sami</name><operator>.</operator><name>psz_start</name></name></expr></argument>, <argument><expr><literal type="string">"Start="</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>sami</name><operator>.</operator><name>psz_start</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_start</name> <operator>=</operator> <call><name>strtol</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name>psz_end</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>s</name> <operator>=</operator> <call><name>ParseSamiSearch</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;P"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><operator>(</operator> <name>s</name> <operator>=</operator> <call><name>ParseSamiSearch</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_text</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name>s</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strncasecmp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;br"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"Start="</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>sami</name><operator>.</operator><name>psz_start</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>ParseSamiSearch</name><argument_list>( <argument><expr><name>txt</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strncmp</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&amp;nbsp;"</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>*</operator><name>s</name> <operator>==</operator> <literal type="char">'\t'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>i_text</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></sizeof></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>i_text</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>text</name><index>[<expr><name>i_text</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>i_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseDVDSubtitle</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>,

<argument><expr><literal type="string">"{T %d:%d:%d:%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c1</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument> )</argument_list></call> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>c1</name> <operator>*</operator> <literal type="number">10</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_old</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'}'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_old</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_old</name> <operator>+</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseMPL2</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_stop</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i_stop</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[%d][] %[^\r\n]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_start</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[%d][%d] %[^\r\n]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i_stop</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>i_start</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <ternary><condition><expr><name>i_stop</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><name>i_stop</name> <operator>*</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal> <operator>&amp;&amp;</operator> <operator>(</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>psz_text</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseAQT</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>, <parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_old</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_firstline</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"--&gt;&gt; %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>t</name></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_firstline</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_firstline</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>TextPreviousLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_old</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_old</name> <operator>+</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>txt</name><operator>-&gt;</operator><name>i_line</name></name> <operator>==</operator> <name><name>txt</name><operator>-&gt;</operator><name>i_line_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParsePJS</name><parameter_list>(<parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t1</name></decl>, <decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d,%d,\"%[^\n\r]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t2</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>t1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <literal type="number">10</literal> <operator>*</operator> <name>t2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>psz_text</name><index>[ <expr><call><name>strlen</name><argument_list>(<argument><expr><name>psz_text</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseMPSub</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><literal type="string">""</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>b_inited</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>f_total</name></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>i_factor</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>b_inited</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>p_dummy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strstr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"FORMAT"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"FORMAT=TIM%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_dummy</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>p_dummy</name> <operator>==</operator> <literal type="char">'E'</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>i_factor</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>psz_temp</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_temp</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"FORMAT=%[^\r\n]"</literal></expr></argument>, <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f_fps</name> <init>= <expr><call><name>us_strtof</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>f_fps</name> <operator>&gt;</operator> <literal type="number">0.f</literal> <operator>&amp;&amp;</operator> <call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"sub-original-fps"</literal></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <literal type="number">0.f</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>var_SetFloat</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"sub-original-fps"</literal></expr></argument>, <argument><expr><name>f_fps</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>i_factor</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f1</name> <init>= <expr><call><name>us_strtof</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_temp</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz_temp</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>f2</name> <init>= <expr><call><name>us_strtof</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>f_total</name></name> <operator>+=</operator> <name>f1</name> <operator>*</operator> <name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>i_factor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>llroundf</name><argument_list>(<argument><expr><literal type="number">10000.f</literal> <operator>*</operator> <name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>f_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>f_total</name></name> <operator>+=</operator> <name>f2</name> <operator>*</operator> <name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>i_factor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>llroundf</name><argument_list>(<argument><expr><literal type="number">10000.f</literal> <operator>*</operator> <name><name>p_props</name><operator>-&gt;</operator><name>mpsub</name><operator>.</operator><name>f_total</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_old</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_old</name> <operator>+</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseJSS</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_orig</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_orig2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>b_inited</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_comment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_resolution</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_shift</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>b_inited</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>line_length</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_orig</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><name>line_length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_orig</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <name>psz_orig</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>h2</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>, <decl><type ref="prev"/><name>f1</name></decl>, <decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d.%d %d:%d:%d.%d %[^\n\r]"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f2</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">9</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><operator>(</operator> <name>h1</name> <operator>*</operator><literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name> <operator>)</operator> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>f1</name> <operator>+</operator> <name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_shift</name></name> <operator>)</operator> <operator>/</operator> <name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_resolution</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><operator>(</operator> <name>h2</name> <operator>*</operator><literal type="number">3600</literal> <operator>+</operator> <name>m2</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s2</name> <operator>)</operator> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator> <operator>(</operator> <name>f2</name> <operator>+</operator> <name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_shift</name></name> <operator>)</operator> <operator>/</operator> <name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_resolution</name></name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"@%d @%d %[^\n\r]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f2</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator>

<call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><operator>(</operator><name>f1</name> <operator>+</operator> <name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_shift</name></name> <operator>)</operator> <operator>/</operator> <name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_resolution</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator>

<call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><operator>(</operator><name>f2</name> <operator>+</operator> <name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_shift</name></name> <operator>)</operator> <operator>/</operator> <name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_resolution</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sec</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>shift</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inv</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<switch>switch<condition>( <expr><call><name>toupper</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>psz_text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <ternary><condition><expr><call><name>isalpha</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>psz_text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">6</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr> ;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>shift</name> <operator>&gt;</operator> <name>line_length</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>h</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>inv</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%*d:%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%*d:%*d:%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>sscanf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%*d:%*d:%*d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d:%d.%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>*=</operator> <name>inv</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>sec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sec</name> <operator>*=</operator> <name>inv</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_shift</name></name> <operator>=</operator> <operator>(</operator> <operator>(</operator> <name>h</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>sec</name> <operator>)</operator>

<operator>*</operator> <name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_resolution</name></name> <operator>+</operator> <name>f</name> <operator>)</operator> <operator>*</operator> <name>inv</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <ternary><condition><expr><call><name>isalpha</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><name><name>psz_text</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr> ;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>shift</name> <operator>&gt;</operator> <name>line_length</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sscanf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><name>shift</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_resolution</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_resolution</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_time_resolution</name></name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_orig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_orig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<while>while<condition>( <expr><name><name>psz_text</name><index>[ <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s2</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s2</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_orig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>s2</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_old</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_old</name> <operator>+</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_orig</name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while<condition>( <expr><operator>*</operator><name>psz_text</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>psz_text</name> <operator>==</operator> <literal type="char">'\t'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if<condition>( <expr><call><name>isalpha</name><argument_list>( <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><name>psz_text</name></expr></argument> )</argument_list></call> <operator>||</operator> <operator>*</operator><name>psz_text</name> <operator>==</operator> <literal type="char">'['</literal></expr> )</condition>

<block>{<block_content>

<while>while<condition>( <expr><operator>*</operator><name>psz_text</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_text</name> <operator>!=</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>psz_text</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<while>while<condition>( <expr><operator>*</operator><name>psz_text</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>*</operator><name>psz_text</name> <operator>==</operator> <literal type="char">'\t'</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>psz_orig2</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text2</name> <operator>=</operator> <name>psz_orig2</name></expr>;</expr_stmt>

<for>for<control>( <init>;</init> <condition><expr><operator>*</operator><name>psz_text</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_text</name> <operator>!=</operator> <literal type="char">'\n'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_text</name> <operator>!=</operator> <literal type="char">'\r'</literal></expr>;</condition> <incr/>)</control>

<block>{<block_content>

<switch>switch<condition>( <expr><operator>*</operator><name>psz_text</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><literal type="char">'{'</literal></expr>:</case>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_comment</name></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'}'</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_comment</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_comment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">' '</literal></expr> )</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'~'</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_comment</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text2</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">' '</literal></expr>:</case>

<case>case <expr><literal type="char">'\t'</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'\t'</literal></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_comment</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text2</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'\\'</literal></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'n'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text2</name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text2</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">'C'</literal> <operator>)</operator> <operator>||</operator>

<operator>(</operator> <call><name>toupper</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name><operator>)</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="char">'F'</literal> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'B'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'b'</literal> <operator>||</operator>

<operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'I'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'i'</literal> <operator>||</operator>

<operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'U'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator>

<operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'D'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'N'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'~'</literal> <operator>||</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'{'</literal> <operator>||</operator>

<operator>(</operator><operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>==</operator> <literal type="char">'\\'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>( <expr><operator>(</operator> <operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="char">'\r'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>*</operator><operator>(</operator><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>!=</operator> <literal type="char">'\0'</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_props</name><operator>-&gt;</operator><name>jss</name><operator>.</operator><name>i_comment</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>psz_text2</name> <operator>=</operator> <operator>*</operator><name>psz_text</name></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name>psz_text</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_orig2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_orig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParsePSB</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h2</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{%d:%d:%d}{%d:%d:%d}%[^\r\n]"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">7</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h2</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m2</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'|'</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>psz_text</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>ParseRealTime</name><parameter_list>( <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>m</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>f</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>psz</name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d.%d"</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%d:%d.%d"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%d.%d"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%d:%d"</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>

<call><name>sscanf</name><argument_list>( <argument><expr><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition>

<block>{<block_content>

<return>return <expr><call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator> <operator>*</operator><name>h</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <operator>*</operator><name>m</name> <operator>)</operator> <operator>*</operator> <literal type="number">60</literal> <operator>)</operator> <operator>+</operator> <operator>*</operator><name>s</name></expr></argument> )</argument_list></call>

<operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><operator>*</operator><name>f</name> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseRealText</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_temp</name> <init>= <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;time"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_temp</name> <operator>!=</operator> <name>NULL</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_end</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>psz_begin</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument>,

<argument><expr><literal type="string">"&lt;%*[t|T]ime %*[b|B]egin=\"%11[^\"]\" %*[e|E]nd=\"%11[^\"]%*[^&gt;]%[^\n\r]"</literal></expr></argument>,

<argument><expr><name>psz_begin</name></expr></argument>, <argument><expr><name>psz_end</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">3</literal> <operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator> <call><name>sscanf</name><argument_list>( <argument><expr><name>psz_temp</name></expr></argument>,

<argument><expr><literal type="string">"&lt;%*[t|T]ime %*[b|B]egin=\"%11[^\"]\"%*[^&gt;]%[^\n\r]"</literal></expr></argument>,

<argument><expr><name>psz_begin</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">2</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i_time</name> <init>= <expr><call><name>ParseRealTime</name><argument_list>( <argument><expr><name>psz_begin</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f1</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <ternary><condition><expr><name>i_time</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_time</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>i_time</name> <operator>=</operator> <call><name>ParseRealTime</name><argument_list>( <argument><expr><name>psz_end</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <ternary><condition><expr><name>i_time</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>i_time</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>strcasestr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;time"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<call><name>strcasestr</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;clear/"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>TextPreviousLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_old</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_old</name> <operator>+</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>psz_text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseDKS</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h2</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>malloc</name><argument_list>( <argument><expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[%d:%d:%d]%[^\r\n]"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[%d:%d:%d]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>h2</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m2</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<while>while<condition>( <expr><operator>(</operator> <name>p</name> <operator>=</operator> <call><name>strstr</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"[br]"</literal></expr></argument> )</argument_list></call> <operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memmove</name><argument_list>( <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSubViewer1</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_props</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name></decl>, <decl><type ref="prev"/><name>m1</name></decl>, <decl><type ref="prev"/><name>s1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h2</name></decl>, <decl><type ref="prev"/><name>m2</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[%d:%d:%d]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"[%d:%d:%d]"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h2</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m2</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseCommonSBV</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_props</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_text</name></decl>;</decl_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>m2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>d2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>s</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="string">"%d:%d:%d.%d,%d:%d:%d.%d"</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d1</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d2</name></expr></argument> )</argument_list></call> <operator>==</operator> <literal type="number">8</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h1</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m1</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s1</name></expr></argument> )</argument_list></call> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>d1</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <call><name>vlc_tick_from_sec</name><argument_list>( <argument><expr><name>h2</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m2</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s2</name></expr></argument> )</argument_list></call> <operator>+</operator>

<call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><name>d2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>&lt;</operator> <name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_old</name></decl>;</decl_stmt>

<expr_stmt><expr><name>i_len</name> <operator>=</operator> <ternary><condition><expr><name>s</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i_len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <name>psz_text</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_old</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_text</name> <operator>=</operator> <call><name>realloc_or_free</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>i_old</name> <operator>+</operator> <name>i_len</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcat</name><argument_list>( <argument><expr><name>psz_text</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ParseSCC</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_obj</name></decl></parameter>, <parameter><decl><type><name>subs_properties_t</name> <modifier>*</modifier></type><name>p_props</name></decl></parameter>,

<parameter><decl><type><name>text_t</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>subtitle_t</name> <modifier>*</modifier></type><name>p_subtitle</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i_idx</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>p_obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>i_idx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>( <argument><expr><name>p_props</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <name>rates</name>

<block>{

<decl_stmt><decl><type><name>unsigned</name></type> <name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_rational_t</name></type> <name>rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_drop_allowed</name></decl>;</decl_stmt>

}</block> <decl><name><name>framerates</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">2398</literal></expr>, <expr><block>{ <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2400</literal></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2500</literal></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">2997</literal></expr>, <expr><block>{ <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">3000</literal></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5000</literal></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5994</literal></expr>, <expr><block>{ <expr><literal type="number">60000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr>, <expr><name>true</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6000</literal></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><name>false</name></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>rates</name></name> <modifier>*</modifier></type><name>p_rate</name> <init>= <expr><operator>&amp;</operator><name><name>framerates</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f_fps</name> <init>= <expr><call><name>var_GetFloat</name><argument_list>( <argument><expr><name>p_obj</name></expr></argument>, <argument><expr><literal type="string">"sub-original-fps"</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>f_fps</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>framerates</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>f_fps</name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>==</operator> <name><name>framerates</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>p_rate</name> <operator>=</operator> <operator>&amp;</operator><name><name>framerates</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init>;</init><condition>;</condition> <incr/>)</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_line</name> <init>= <expr><call><name>TextGetLine</name><argument_list>( <argument><expr><name>txt</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_line</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>h</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>sscanf</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="string">"%u:%u:%u%c%u "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>f</name></expr></argument> )</argument_list></call> <operator>!=</operator> <literal type="number">5</literal> <operator>||</operator>

<operator>(</operator> <name>c</name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">';'</literal> <operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>i_frames</name> <init>= <expr><name>h</name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name>m</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>s</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <name><name>p_rate</name><operator>-&gt;</operator><name>b_drop_allowed</name></name></expr> )</condition> 

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>i_mins</name> <init>= <expr><name>h</name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name>m</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i_frames</name> <operator>=</operator> <name>i_frames</name> <operator>*</operator> <name><name>p_rate</name><index>[<expr><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rate</name><operator>.</operator><name>num</name></name> <operator>+</operator> <name>f</name>

<operator>-</operator> <operator>(</operator><name><name>p_rate</name><index>[<expr><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>rate</name><operator>.</operator><name>den</name></name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>i_mins</name> <operator>-</operator> <name>i_mins</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_frames</name> <operator>=</operator> <name>i_frames</name> <operator>*</operator> <name><name>framerates</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>rate</name><operator>.</operator><name>num</name></name> <operator>/</operator> <name><name>framerates</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name><name>rate</name><operator>.</operator><name>den</name></name> <operator>+</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_start</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <call><name>vlc_tick_from_sec</name><argument_list>(<argument><expr><name>i_frames</name></expr></argument>)</argument_list></call><operator>*</operator>

<name><name>p_rate</name><operator>-&gt;</operator><name>rate</name><operator>.</operator><name>den</name></name> <operator>/</operator> <name><name>p_rate</name><operator>-&gt;</operator><name>rate</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>i_stop</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_text</name> <init>= <expr><call><name>strchr</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="char">'\t'</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_text</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>psz_text</name> <operator>=</operator> <call><name>strchr</name><argument_list>( <argument><expr><name>psz_line</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument> )</argument_list></call><operator>)</operator></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>psz_text</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>( <argument><expr><name>psz_text</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_subtitle</name><operator>-&gt;</operator><name>psz_text</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>get_language_from_filename</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>psz_sub_file</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_ret</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_tmp</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_language_begin</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_sub_file</name></expr> )</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_work</name> <init>= <expr><call><name>strdup</name><argument_list>( <argument><expr><name>psz_sub_file</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>psz_tmp</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_work</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_tmp</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>psz_tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>psz_language_begin</name> <operator>=</operator> <call><name>strrchr</name><argument_list>( <argument><expr><name>psz_work</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_language_begin</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_ret</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><operator>++</operator><name>psz_language_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>psz_tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'.'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_work</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>psz_ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
