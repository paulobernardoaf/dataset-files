<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\mod.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_meta.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libmodplug/modplug.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Open</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>Close</name> <parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOISE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Enable noise reduction algorithm.")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVERB_LONGTEXT</name></cpp:macro> <cpp:value>N_("Enable reverberation" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVERB_LEVEL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Reverberation level (from 0 " "to 100, default value is 0)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVERB_DELAY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Reverberation delay, in ms." " Usual values are from 40 to 200ms." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEGABASS_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Enable megabass mode" )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEGABASS_LEVEL_LONGTEXT</name></cpp:macro> <cpp:value>N_("Megabass mode level (from 0 to 100, " "default value is 0)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEGABASS_RANGE_LONGTEXT</name></cpp:macro> <cpp:value>N_("Megabass mode cutoff frequency, in Hz. " "This is the maximum frequency for which the megabass " "effect applies. Valid values are from 10 to 100 Hz." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURROUND_LEVEL_LONGTEXT</name></cpp:macro> <cpp:value>N_( "Surround effect level (from 0 to 100, " "default value is 0)." )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURROUND_DELAY_LONGTEXT</name></cpp:macro> <cpp:value>N_("Surround delay, in ms. Usual values are " "from 5 to 40 ms." )</cpp:value></cpp:define>

<macro><name>vlc_module_begin</name> <argument_list>()</argument_list></macro>

<macro><name>set_shortname</name><argument_list>( <argument><literal type="string">"MOD"</literal></argument>)</argument_list></macro>

<macro><name>set_description</name><argument_list>( <argument>N_(<literal type="string">"MOD demuxer (libmodplug)"</literal> )</argument> )</argument_list></macro>

<macro><name>set_capability</name><argument_list>( <argument><literal type="string">"demux"</literal></argument>, <argument><literal type="number">10</literal></argument> )</argument_list></macro>

<macro><name>set_category</name><argument_list>( <argument>CAT_INPUT</argument> )</argument_list></macro>

<macro><name>set_subcategory</name><argument_list>( <argument>SUBCAT_INPUT_DEMUX</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"mod-noisereduction"</literal></argument>, <argument>true</argument>, <argument>N_(<literal type="string">"Noise reduction"</literal>)</argument>,

<argument>NOISE_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"mod-reverb"</literal></argument>, <argument>false</argument>, <argument>N_(<literal type="string">"Reverb"</literal>)</argument>,

<argument>REVERB_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"mod-reverb-level"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>,

<argument>N_(<literal type="string">"Reverberation level"</literal>)</argument>, <argument>REVERB_LEVEL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"mod-reverb-delay"</literal></argument>, <argument><literal type="number">40</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1000</literal></argument>,

<argument>N_(<literal type="string">"Reverberation delay"</literal>)</argument>, <argument>REVERB_DELAY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"mod-megabass"</literal></argument>, <argument>false</argument>, <argument>N_(<literal type="string">"Mega bass"</literal>)</argument>,

<argument>MEGABASS_LONGTEXT</argument>, <argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"mod-megabass-level"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>,

<argument>N_(<literal type="string">"Mega bass level"</literal>)</argument>, <argument>MEGABASS_LEVEL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"mod-megabass-range"</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">10</literal></argument>, <argument><literal type="number">100</literal></argument>,

<argument>N_(<literal type="string">"Mega bass cutoff"</literal>)</argument>, <argument>MEGABASS_RANGE_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_bool</name><argument_list>( <argument><literal type="string">"mod-surround"</literal></argument>, <argument>false</argument>, <argument>N_(<literal type="string">"Surround"</literal>)</argument>, <argument>N_(<literal type="string">"Surround"</literal>)</argument>,

<argument>false</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"mod-surround-level"</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">100</literal></argument>,

<argument>N_(<literal type="string">"Surround level"</literal>)</argument>, <argument>SURROUND_LEVEL_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>add_integer_with_range</name><argument_list>( <argument><literal type="string">"mod-surround-delay"</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1000</literal></argument>,

<argument>N_(<literal type="string">"Surround delay (ms)"</literal>)</argument>, <argument>SURROUND_DELAY_LONGTEXT</argument>, <argument>true</argument> )</argument_list></macro>

<macro><name>set_callbacks</name><argument_list>( <argument>Open</argument>, <argument>Close</argument> )</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>( <argument><literal type="string">"mod"</literal></argument> )</argument_list></macro>

<macro><name>vlc_module_end</name> <argument_list>()</argument_list></macro>

<decl_stmt><decl><type><specifier>static</specifier> <name>vlc_mutex_t</name></type> <name>libmodplug_lock</name> <init>= <expr><name>VLC_STATIC_MUTEX</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name> <modifier>*</modifier></type><name>es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>date_t</name></type> <name>pts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModPlugFile</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name> <parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>Validate</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ext</name></decl></parameter> )</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD_MAX_FILE_SIZE</name></cpp:macro> <cpp:value>(500*1000*1000)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Open</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ModPlug_Settings</name></type> <name>settings</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_demux</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>force</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ext</name> <init>= <expr><ternary><condition><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr> ?</condition><then> <expr><call><name>strrchr</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>psz_filepath</name></name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument> )</argument_list></call></expr>

</then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_ext</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_ext</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>Validate</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><name>psz_ext</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"MOD validation failed (ext=%s)"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>psz_ext</name></expr> ?</condition><then> <expr><name>psz_ext</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>i_size</name> <init>= <expr><call><name>stream_Size</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>i_size</name> <operator>&gt;=</operator> <name>MOD_MAX_FILE_SIZE</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p_sys</name> <operator>=</operator> <call><name>vlc_obj_malloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><operator>*</operator><name>p_sys</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_sys</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"loading complete file (could be long)"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <name>i_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name> <operator>=</operator> <call><name>vlc_obj_malloc</name><argument_list>( <argument><expr><name>p_this</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data</name></name> <operator>=</operator> <call><name>vlc_stream_Read</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"failed to read the complete file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>libmodplug_lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ModPlug_GetSettings</name><argument_list>( <argument><expr><operator>&amp;</operator><name>settings</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mFlags</name></name> <operator>=</operator> <name>MODPLUG_ENABLE_OVERSAMPLING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mChannels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mBits</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mFrequency</name></name> <operator>=</operator> <literal type="number">44100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mResamplingMode</name></name> <operator>=</operator> <name>MODPLUG_RESAMPLE_FIR</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-noisereduction"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mFlags</name></name> <operator>|=</operator> <name>MODPLUG_ENABLE_NOISE_REDUCTION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-reverb"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mFlags</name></name> <operator>|=</operator> <name>MODPLUG_ENABLE_REVERB</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mReverbDepth</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-reverb-level"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mReverbDelay</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-reverb-delay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-megabass"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mFlags</name></name> <operator>|=</operator> <name>MODPLUG_ENABLE_MEGABASS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mBassAmount</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-megabass-level"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mBassRange</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-megabass-range"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>var_InheritBool</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-surround"</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mFlags</name></name> <operator>|=</operator> <name>MODPLUG_ENABLE_SURROUND</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mSurroundDepth</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-surround-level"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>settings</name><operator>.</operator><name>mSurroundDelay</name></name> <operator>=</operator> <call><name>var_InheritInteger</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"mod-surround-delay"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ModPlug_SetSettings</name><argument_list>( <argument><expr><operator>&amp;</operator><name>settings</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name> <operator>=</operator> <call><name>ModPlug_Load</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_data</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_data</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>( <argument><expr><operator>&amp;</operator><name>libmodplug_lock</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"failed to understand the file"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>date_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>settings</name><operator>.</operator><name>mFrequency</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>( <argument><expr><call><name>ModPlug_GetLength</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"MOD loaded name=%s length=%"</literal><name>PRId64</name><literal type="string">"ms"</literal></expr></argument>,

<argument><expr><call><name>ModPlug_GetName</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'t'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>, <argument><expr><literal type="char">'o'</literal></expr></argument>, <argument><expr><literal type="char">'s'</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument>, <argument><expr><name>AUDIO_ES</name></expr></argument>, <argument><expr><call><name>VLC_FOURCC</name><argument_list>( <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'r'</literal></expr></argument>, <argument><expr><literal type="char">'a'</literal></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>mFrequency</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>mChannels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>=</operator> <name><name>settings</name><operator>.</operator><name>mBits</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>(<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>Close</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name> <modifier>*</modifier></type><name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ModPlug_Unload</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>block_t</name> <modifier>*</modifier></type><name>p_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_bk</name> <init>= <expr><operator>(</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_bitspersample</name></name> <operator>/</operator> <literal type="number">8</literal> <operator>)</operator> <operator>*</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_channels</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p_frame</name> <operator>=</operator> <call><name>block_Alloc</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>fmt</name><operator>.</operator><name>audio</name><operator>.</operator><name>i_rate</name></name> <operator>/</operator> <literal type="number">10</literal> <operator>*</operator> <name>i_bk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>p_frame</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_read</name> <init>= <expr><call><name>ModPlug_Read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name><name>p_frame</name><operator>-&gt;</operator><name>p_buffer</name></name></expr></argument>, <argument><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_read</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>block_Release</name><argument_list>( <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_buffer</name></name> <operator>=</operator> <name>i_read</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>

<name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_frame</name><operator>-&gt;</operator><name>i_pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>es</name></name></expr></argument>, <argument><expr><name>p_frame</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Increment</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>i_read</name> <operator>/</operator> <name>i_bk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>pf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name> <modifier>*</modifier></type><name>pi64</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name><operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>current</name> <init>= <expr><call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>length</name> <init>= <expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <name>current</name> <operator>/</operator> <name>length</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <name>f</name> <operator>*</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>i64</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i64</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ModPlug_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>(<argument><expr><name>i64</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>date_Get</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<expr_stmt><expr><name>pi64</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pi64</name> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>likely</name><argument_list>(<argument><expr><name>i64</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>i64</name> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_length</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>ModPlug_Seek</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><call><name>MS_FROM_VLC_TICK</name><argument_list>( <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>date_Set</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i64</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>pb_bool</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name><operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pb_bool</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt> 

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>vlc_meta_t</name> <modifier>*</modifier></type><name>p_meta</name> <init>= <expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_meta_t</name> <operator>*</operator></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_num_samples</name> <init>= <expr><call><name>ModPlug_NumSamples</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></init></decl>,

<decl><type ref="prev"/><name>i_num_instruments</name> <init>= <expr><call><name>ModPlug_NumInstruments</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_num_patterns</name> <init>= <expr><call><name>ModPlug_NumPatterns</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></init></decl>,

<decl><type ref="prev"/><name>i_num_channels</name> <init>= <expr><call><name>ModPlug_NumChannels</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_temp</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_module_info</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>psz_instrument_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>i_temp_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_name</name> <init>= <expr><call><name>ModPlug_GetName</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_name</name> <operator>&amp;&amp;</operator> <call><name>IsUTF8</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_SetTitle</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>psz_name</name> <operator>=</operator> <call><name>ModPlug_GetMessage</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_name</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>psz_name</name> <operator>&amp;&amp;</operator> <call><name>IsUTF8</name><argument_list>( <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_meta_SetDescription</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><name>psz_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_instrument_info</name></expr></argument>, <argument><expr><literal type="string">", %i Instruments"</literal></expr></argument>,

<argument><expr><name>i_num_instruments</name></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz_module_info</name></expr></argument>,

<argument><expr><literal type="string">"%i Channels, %i Patterns\n"</literal>

<literal type="string">"%i Samples%s\n"</literal></expr></argument>,

<argument><expr><name>i_num_channels</name></expr></argument>, <argument><expr><name>i_num_patterns</name></expr></argument>, <argument><expr><name>i_num_samples</name></expr></argument>,

<argument><expr><operator>(</operator> <ternary><condition><expr><name>i_num_instruments</name></expr> ?</condition><then> <expr><name>psz_instrument_info</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary> <operator>)</operator></expr></argument> )</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"Module Information"</literal></expr></argument>,

<argument><expr><name>psz_module_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_module_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_instrument_info</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>i_num_instruments</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_temp_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_num_instruments</name> <operator>&amp;&amp;</operator> <name>i_temp_index</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>psz_temp</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>lBuffer</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ModPlug_InstrumentName</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>lBuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>lBuffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name>IsUTF8</name><argument_list>( <argument><expr><name>lBuffer</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_temp_index</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_temp</name><index>[<expr><name>i_temp_index</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_temp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i_temp_index</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>lBuffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"Instruments"</literal></expr></argument>, <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_num_samples</name> <operator>&amp;&amp;</operator> <name>i_temp_index</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>psz_temp</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>psz_buffer</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ModPlug_SampleName</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>psz_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><call><name>IsUTF8</name><argument_list>( <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>i_temp_index</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>psz_temp</name><index>[<expr><name>i_temp_index</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>psz_temp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>i_temp_index</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>psz_buffer</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_meta_AddExtra</name><argument_list>( <argument><expr><name>p_meta</name></expr></argument>, <argument><expr><literal type="string">"Samples"</literal></expr></argument>, <argument><expr><name>psz_temp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case> 

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Validate</name><parameter_list>( <parameter><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ext</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct

<block>{

<decl_stmt><decl><type><name>int</name></type> <name>i_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_marker</name></decl>;</decl_stmt>

}</block> <decl><name><name>p_marker</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ziRCONia"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Extended Module"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="string">"SCRM"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"IMPM"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"GF1PATCH110"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="string">"!SCREAM!"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="string">"!Scream!"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="string">"BMOD2STM"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"MMD0"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"MMD1"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"MMD2"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"MMD3"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"MTM"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"DMDL"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"DBM0"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"if"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"JN"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"FAR\xfe"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Extreme"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"OKTASONGCMOD"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">44</literal></expr>, <expr><literal type="string">"PTMF"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"MAS_UTrack_V00"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"DDMF"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="string">"DSMFSONG"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"\xc1\x83\x2a\x9e"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"ASYLUM Music Format V1.0"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"AMF"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"PSM\xfe"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"PSM "</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"MT20"</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"M.K."</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"M!K!"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"M&amp;K!"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"N.T."</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"CD81"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"OKTA"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"16CN"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"32CN"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"FLT4"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"FLT8"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"6CHN"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"8CHN"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"FLT"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1080</literal></expr>, <expr><literal type="string">"TDZ"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1081</literal></expr>, <expr><literal type="string">"CHN"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1082</literal></expr>, <expr><literal type="string">"CH"</literal></expr> }</block></expr>,

<expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>ppsz_mod_ext</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"mod"</literal></expr>, <expr><literal type="string">"s3m"</literal></expr>, <expr><literal type="string">"xm"</literal></expr>, <expr><literal type="string">"it"</literal></expr>, <expr><literal type="string">"669"</literal></expr>, <expr><literal type="string">"amf"</literal></expr>, <expr><literal type="string">"ams"</literal></expr>, <expr><literal type="string">"dbm"</literal></expr>, <expr><literal type="string">"dmf"</literal></expr>, <expr><literal type="string">"dsm"</literal></expr>,

<expr><literal type="string">"far"</literal></expr>, <expr><literal type="string">"mdl"</literal></expr>, <expr><literal type="string">"med"</literal></expr>, <expr><literal type="string">"mtm"</literal></expr>, <expr><literal type="string">"okt"</literal></expr>, <expr><literal type="string">"ptm"</literal></expr>, <expr><literal type="string">"stm"</literal></expr>, <expr><literal type="string">"ult"</literal></expr>, <expr><literal type="string">"umx"</literal></expr>, <expr><literal type="string">"mt2"</literal></expr>,

<expr><literal type="string">"psm"</literal></expr>, <expr><literal type="string">"abc"</literal></expr>, <expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>has_valid_extension</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_ext</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>ppsz_mod_ext</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>has_valid_extension</name> <operator>|=</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_ext</name></expr></argument>, <argument><expr><name><name>ppsz_mod_ext</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>has_valid_extension</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <literal type="number">4</literal></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>p_marker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_marker</name> <init>= <expr><name><name>p_marker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>psz_marker</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_size</name> <init>= <expr><call><name>strlen</name><argument_list>( <argument><expr><name>psz_marker</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>i_offset</name> <init>= <expr><name><name>p_marker</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_offset</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_peek</name> <operator>&lt;</operator> <name>i_offset</name> <operator>+</operator> <name>i_size</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>memcmp</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><name>i_offset</name></expr>]</index></name></expr></argument>, <argument><expr><name>psz_marker</name></expr></argument>, <argument><expr><name>i_size</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name>i_size</name> <operator>&gt;=</operator> <literal type="number">4</literal> <operator>||</operator> <name>has_valid_extension</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>psz_ext</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_ext</name></expr></argument>, <argument><expr><literal type="string">"abc"</literal></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_k</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_tx</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>i_peek</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>b_k</name> <operator>|=</operator> <name><name>p_peek</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'K'</literal> <operator>&amp;&amp;</operator> <name><name>p_peek</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b_tx</name> <operator>|=</operator> <operator>(</operator> <name><name>p_peek</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal> <operator>||</operator> <name><name>p_peek</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p_peek</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>b_k</name> <operator>||</operator> <operator>!</operator><name>b_tx</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_ext</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcasecmp</name><argument_list>( <argument><expr><name>psz_ext</name></expr></argument>, <argument><expr><literal type="string">"mod"</literal></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator> <name>i_peek</name> <operator>&gt;=</operator> <literal type="number">20</literal> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <literal type="number">30</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>memchr</name><argument_list>( <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">15</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_sample</name> <init>= <expr><operator>&amp;</operator><name><name>p_peek</name><index>[<expr><literal type="number">20</literal> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">30</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>memchr</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sample</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><literal type="number">22</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>p</name></expr> )</condition>

<block>{<block_content>

<for>for<control>( <init>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <operator>&amp;</operator><name><name>p_sample</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>*</operator><name>p</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sample</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">64</literal></expr> )</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

</unit>
