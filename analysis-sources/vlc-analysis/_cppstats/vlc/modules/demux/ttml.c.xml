<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\demux\ttml.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_demux.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_xml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_memstream.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_es_out.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_charset.h&gt;</cpp:file></cpp:include> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../codec/ttml/ttml.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct

<block>{

<decl_stmt><decl><type><name>xml_t</name><modifier>*</modifier></type> <name>p_xml</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>xml_reader_t</name><modifier>*</modifier></type> <name>p_reader</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>es_out_id_t</name><modifier>*</modifier></type> <name>p_es</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i_next_demux_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_slave</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_first_time</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tt_node_t</name> <modifier>*</modifier></type><name>p_rootnode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>tt_timings_t</name></type> <name>temporal_extent</name></decl>;</decl_stmt>

<struct>struct

<block>{

<decl_stmt><decl><type><name>tt_time_t</name> <modifier>*</modifier></type><name>p_array</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_current</name></decl>;</decl_stmt>

}</block> <decl><name>times</name></decl>;</struct>

}</block></struct></type> <name>demux_sys_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>tt_genTiming</name><parameter_list>( <parameter><decl><type><name>tt_time_t</name></type> <name>t</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>f</name> <init>= <expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>%</operator> <name>CLOCK_FREQ</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>/=</operator> <name>CLOCK_FREQ</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>h</name> <init>= <expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>/</operator> <literal type="number">3600</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>m</name> <init>= <expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>%</operator> <literal type="number">3600</literal> <operator>/</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>s</name> <init>= <expr><name><name>t</name><operator>.</operator><name>base</name></name> <operator>%</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>f</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>lz</name> <init>= <expr><literal type="string">"000000"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_lz</name> <init>= <expr><operator>&amp;</operator><name><name>lz</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>unsigned</name></type> <name>i</name><init>=<expr><literal type="number">10</literal><operator>*</operator><name>f</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>CLOCK_FREQ</name></expr>;</condition> <incr><expr><name>i</name> <operator>*=</operator> <literal type="number">10</literal></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>psz_lz</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init>;</init> <condition><expr><name>f</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>f</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>f</name> <operator>/=</operator> <literal type="number">10</literal></expr></incr> )</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%02u:%02u:%02u.%s%u"</literal></expr></argument>,

<argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>psz_lz</name></expr></argument>, <argument><expr><name>f</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>t</name><operator>.</operator><name>frames</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%02u:%02u:%02u:%s%u"</literal></expr></argument>,

<argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>t</name><operator>.</operator><name>frames</name></name> <operator>&lt;</operator> <literal type="number">10</literal></expr> ?</condition><then> <expr><literal type="string">"0"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>t</name><operator>.</operator><name>frames</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>i_ret</name> <operator>=</operator> <call><name>asprintf</name><argument_list>( <argument><expr><operator>&amp;</operator><name>psz</name></expr></argument>, <argument><expr><literal type="string">"%02u:%02u:%02u"</literal></expr></argument>,

<argument><expr><name>h</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><ternary><condition><expr><name>i_ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><name>psz</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_MemstreamPutEntities</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_entities</name> <init>= <expr><call><name>vlc_xml_encode</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_entities</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>psz_entities</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_entities</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_node_AttributesToText</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tt_node_t</name><modifier>*</modifier></type> <name>p_node</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>bool</name></type> <name>b_timed_node</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_dictionary_t</name><modifier>*</modifier></type> <name>p_attr_dict</name> <init>= <expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>attr_dict</name></name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p_attr_dict</name><operator>-&gt;</operator><name>i_size</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>

<block>{<block_content>

<for>for <control>( <init><decl><type><name>vlc_dictionary_entry_t</name><modifier>*</modifier></type> <name>p_entry</name> <init>= <expr><name><name>p_attr_dict</name><operator>-&gt;</operator><name>p_entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</init>

<condition><expr><name>p_entry</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>p_entry</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><literal type="string">"begin"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><literal type="string">"end"</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><literal type="string">"dur"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>b_timed_node</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument>, <argument><expr><literal type="string">"timeContainer"</literal></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><name>psz_value</name> <operator>=</operator> <name><name>p_entry</name><operator>-&gt;</operator><name>p_value</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><name>psz_value</name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" %s=\""</literal></expr></argument>, <argument><expr><name><name>p_entry</name><operator>-&gt;</operator><name>psz_key</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_MemstreamPutEntities</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>psz_value</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if<condition>( <expr><name>b_timed_node</name></expr> )</condition>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>tt_genTiming</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" begin=\"%s\""</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>end</name></name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz</name> <init>= <expr><call><name>tt_genTiming</name><argument_list>( <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>end</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">" end=\"%s\""</literal></expr></argument>, <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tt_node_ToText</name><parameter_list>( <parameter><decl><type><name><name>struct</name> <name>vlc_memstream</name></name> <modifier>*</modifier></type><name>p_stream</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_basenode</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>tt_time_t</name> <modifier>*</modifier></type><name>playbacktime</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>( <expr><name><name>p_basenode</name><operator>-&gt;</operator><name>i_type</name></name> <operator>==</operator> <name>TT_NODE_TYPE_ELEMENT</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>tt_node_t</name> <modifier>*</modifier></type><name>p_node</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>tt_node_t</name> <operator>*</operator><operator>)</operator> <name>p_basenode</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tt_time_Valid</name><argument_list>( <argument><expr><name>playbacktime</name></expr></argument> )</argument_list></call> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>tt_timings_Contains</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>timings</name></name></expr></argument>, <argument><expr><name>playbacktime</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="char">'&lt;'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_MemstreamPutEntities</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_node_AttributesToText</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>tt_node_HasChild</name><argument_list>( <argument><expr><name>p_node</name></expr></argument> )</argument_list></call></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TTML_DEMUX_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>vlc_memstream_printf</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"&lt;!-- starts %ld ends %ld --&gt;"</literal></expr></argument>,

<argument><expr><call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr></argument>,

<argument><expr><call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_node</name><operator>-&gt;</operator><name>timings</name><operator>.</operator><name>end</name></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for<control>( <init><decl><type><specifier>const</specifier> <name>tt_basenode_t</name> <modifier>*</modifier></type><name>p_child</name> <init>= <expr><name><name>p_node</name><operator>-&gt;</operator><name>p_child</name></name></expr></init></decl>;</init>

<condition><expr><name>p_child</name></expr>;</condition> <incr><expr><name>p_child</name> <operator>=</operator> <name><name>p_child</name><operator>-&gt;</operator><name>p_next</name></name></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><call><name>tt_node_ToText</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name>p_child</name></expr></argument>, <argument><expr><name>playbacktime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"&lt;/"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_MemstreamPutEntities</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_node</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="char">'&gt;'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_memstream_puts</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><literal type="string">"/&gt;"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>tt_textnode_t</name> <modifier>*</modifier></type><name>p_textnode</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>tt_textnode_t</name> <operator>*</operator><operator>)</operator> <name>p_basenode</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_MemstreamPutEntities</name><argument_list>( <argument><expr><name>p_stream</name></expr></argument>, <argument><expr><name><name>p_textnode</name><operator>-&gt;</operator><name>psz_text</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Control</name><parameter_list>( <parameter><decl><type><name>demux_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i_query</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>args</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_tick_t</name></type> <name>i64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>pf</name></decl>, <decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b</name></decl>;</decl_stmt>

<switch>switch<condition>( <expr><name>i_query</name></expr> )</condition>

<block>{<block_content>

<case>case <expr><name>DEMUX_CAN_SEEK</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>bool</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_TIME</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_TIME</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>tt_time_t</name></type> <name>t</name> <init>= <expr><call><name>tt_time_Create</name><argument_list>( <argument><expr><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call> <operator>-</operator> <name>VLC_TICK_0</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_index</name> <init>= <expr><call><name>tt_timings_FindLowerIndex</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <name>i_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_SET_NEXT_DEMUX_TIME</name></expr>:</case>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_GET_LENGTH</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>tt_time_t</name></type> <name>t</name> <init>= <expr><call><name>tt_time_Sub</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>temporal_extent</name><operator>.</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>vlc_tick_t</name> <operator>*</operator></expr></argument> )</argument_list></call> <operator>=</operator> <call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_GET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>pf</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name> <operator>*</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>/</operator> <operator>(</operator><name>i64</name> <operator>+</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">500</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>pf</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<case>case <expr><name>DEMUX_SET_POSITION</name></expr>:</case>

<expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>va_arg</name><argument_list>( <argument><expr><name>args</name></expr></argument>, <argument><expr><name>double</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <name>f</name> <operator>*</operator> <call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>tt_time_t</name></type> <name>t</name> <init>= <expr><call><name>tt_time_Create</name><argument_list>( <argument><expr><name>i64</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_index</name> <init>= <expr><call><name>tt_timings_FindLowerIndex</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name></name></expr></argument>,

<argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name> <operator>=</operator> <name>i_index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DEMUX_CAN_PAUSE</name></expr>:</case>

<case>case <expr><name>DEMUX_SET_PAUSE_STATE</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_CONTROL_PACE</name></expr>:</case>

<return>return <expr><call><name>demux_vaControlHelper</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i_query</name></expr></argument>, <argument><expr><name>args</name></expr></argument> )</argument_list></call></expr>;</return>

<case>case <expr><name>DEMUX_GET_PTS_DELAY</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_FPS</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_META</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_ATTACHMENTS</name></expr>:</case>

<case>case <expr><name>DEMUX_GET_TITLE_INFO</name></expr>:</case>

<case>case <expr><name>DEMUX_HAS_UNSUPPORTED_META</name></expr>:</case>

<case>case <expr><name>DEMUX_CAN_RECORD</name></expr>:</case>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ReadTTML</name><parameter_list>( <parameter><decl><type><name>demux_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>psz_node_name</name></decl>;</decl_stmt>

<do>do

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i_type</name> <init>= <expr><call><name>xml_ReaderNextNode</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_reader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>psz_node_name</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>b_empty</name> <init>= <expr><call><name>xml_ReaderIsEmptyElement</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_reader</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>i_type</name> <operator>&lt;=</operator> <name>XML_READER_NONE</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<switch>switch<condition>(<expr><name>i_type</name></expr>)</condition>

<block>{<block_content>

<default>default:</default>

<break>break;</break>

<case>case <expr><name>XML_READER_STARTELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name>psz_node_name</name></expr></argument>, <argument><expr><literal type="string">"tt"</literal></expr></argument> )</argument_list></call> <operator>||</operator>

<name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name> <operator>!=</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name> <operator>=</operator> <call><name>tt_node_New</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_reader</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>psz_node_name</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name>b_empty</name></expr> )</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name> <operator>||</operator>

<call><name>tt_nodes_Read</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_reader</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>XML_READER_ENDELEM</name></expr>:</case>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name> <operator>||</operator>

<call><name>tt_node_NameCompare</name><argument_list>( <argument><expr><name>psz_node_name</name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name><operator>-&gt;</operator><name>psz_node_name</name></name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block> while<condition>( <expr><literal type="number">1</literal></expr> )</condition>;</do>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name> <operator>==</operator> <name>NULL</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>Demux</name><parameter_list>( <parameter><decl><type><name>demux_t</name><modifier>*</modifier></type> <name>p_demux</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<while>while<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name> <operator>&amp;&amp;</operator>

<call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_playbacktime</name> <init>=

<expr><call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>vlc_tick_t</name></type> <name>i_playbackendtime</name> <init>=

<expr><call><name>tt_time_Convert</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name> <operator>&amp;&amp;</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name>i_playbacktime</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>stream</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tt_node_ToText</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><name>tt_basenode_t</name> <operator>*</operator><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name><index>[<expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>block_t</name><modifier>*</modifier></type> <name>p_block</name> <init>= <expr><call><name>block_heap_Alloc</name><argument_list>( <argument><expr><name><name>stream</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>stream</name><operator>.</operator><name>length</name></name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>p_block</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_dts</name></name> <operator>=</operator>

<name><name>p_block</name><operator>-&gt;</operator><name>i_pts</name></name> <operator>=</operator> <name>VLC_TICK_0</name> <operator>+</operator> <name>i_playbacktime</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_block</name><operator>-&gt;</operator><name>i_length</name></name> <operator>=</operator> <name>i_playbackendtime</name> <operator>-</operator> <name>i_playbacktime</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>es_out_Send</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument>, <argument><expr><name>p_block</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>b_slave</name></name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>es_out_SetPCR</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>VLC_TICK_0</name> <operator>+</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>i_next_demux_time</name></name> <operator>+=</operator> <call><name>VLC_TICK_FROM_MS</name><argument_list>(<argument><expr><literal type="number">125</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_current</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_DEMUXER_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>VLC_DEMUXER_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>tt_OpenDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name><operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name> <modifier>*</modifier></type><name>p_sys</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_peek</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ssize_t</name></type> <name>i_peek</name> <init>= <expr><call><name>vlc_stream_Peek</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p_peek</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>i_peek</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_xml</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>p_peek</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i_xml</name> <init>= <expr><name>i_peek</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>psz_alloc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<switch>switch<condition>( <expr><call><name>GetQWBE</name><argument_list>(<argument><expr><name>p_peek</name></expr></argument>)</argument_list></call></expr> )</condition>

<block>{<block_content>

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xFFFE3C003F007800</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xFFFE3C003F007400</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xFEFF003C003F0078</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xFEFF003C003F0074</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>psz_alloc</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16"</literal></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x3C003F0078006D00</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x3C003F0074007400</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>psz_alloc</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16LE"</literal></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x003C003F0078006D</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x003C003F00740074</literal></expr></argument>)</argument_list></call></expr>:</case> 

<expr_stmt><expr><name>psz_alloc</name> <operator>=</operator> <call><name>FromCharset</name><argument_list>( <argument><expr><literal type="string">"UTF-16BE"</literal></expr></argument>, <argument><expr><name>p_peek</name></expr></argument>, <argument><expr><name>i_peek</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xEFBBBF3C3F786D6C</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x3C3F786D6C207665</literal></expr></argument>)</argument_list></call></expr>:</case> 

<case>case <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xEFBBBF3C74742078</literal></expr></argument>)</argument_list></call></expr>:</case> 

<break>break;</break>

<default>default:</default>

<if_stmt><if>if<condition>(<expr><call><name>GetDWBE</name><argument_list>(<argument><expr><name>p_peek</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>UINT32_C</name><argument_list>(<argument><expr><literal type="number">0x3C747420</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></switch>

<if_stmt><if>if<condition>( <expr><name>psz_alloc</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><name>psz_xml</name> <operator>=</operator> <name>psz_alloc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i_xml</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>psz_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_tt</name> <init>= <expr><call><name>strnstr</name><argument_list>( <argument><expr><name>psz_xml</name></expr></argument>, <argument><expr><literal type="string">"tt"</literal></expr></argument>, <argument><expr><name>i_xml</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_tt</name> <operator>||</operator> <name>psz_tt</name> <operator>==</operator> <name>psz_xml</name> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>psz_tt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>p_peek</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>i_xml</name> <operator>||</operator> <call><name>isalpha</name><argument_list>(<argument><expr><name><name>psz_tt</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>(</operator><name><name>psz_tt</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal> <operator>&amp;&amp;</operator> <name><name>psz_tt</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'&lt;'</literal><operator>)</operator></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>rgsz</name><index>[]</index></name> <init>=

<expr><block>{

<expr><literal type="string">"=\"http://www.w3.org/ns/ttml\""</literal></expr>,

<expr><literal type="string">"=\"http://www.w3.org/2004/11/ttaf1\""</literal></expr>,

<expr><literal type="string">"=\"http://www.w3.org/2006/04/ttaf1\""</literal></expr>,

<expr><literal type="string">"=\"http://www.w3.org/2006/10/ttaf1\""</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>psz_ns</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<for>for<control>( <init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>ARRAY_SIZE</name><argument_list>(<argument><expr><name>rgsz</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>psz_ns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<expr_stmt><expr><name>psz_ns</name> <operator>=</operator> <call><name>strnstr</name><argument_list>( <argument><expr><name>psz_xml</name></expr></argument>, <argument><expr><name><name>rgsz</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>i_xml</name> <operator>-</operator> <operator>(</operator><name>psz_tt</name> <operator>-</operator> <name>psz_xml</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>psz_alloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name>psz_ns</name></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name> <operator>=</operator> <name>p_sys</name> <operator>=</operator> <call><name>calloc</name><argument_list>( <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><operator>*</operator><name>p_sys</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>unlikely</name><argument_list>( <argument><expr><name>p_sys</name> <operator>==</operator> <name>NULL</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>b_first_time</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>temporal_extent</name><operator>.</operator><name>i_type</name></name> <operator>=</operator> <name>TT_TIMINGS_PARALLEL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>temporal_extent</name><operator>.</operator><name>begin</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>temporal_extent</name><operator>.</operator><name>end</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>temporal_extent</name><operator>.</operator><name>dur</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>temporal_extent</name><operator>.</operator><name>begin</name><operator>.</operator><name>base</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_xml</name></name> <operator>=</operator> <call><name>xml_Create</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_xml</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_reader</name></name> <operator>=</operator> <call><name>xml_ReaderCreate</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_xml</name></name></expr></argument>, <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>s</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_reader</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>TTML_DEMUX_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_reader</name><operator>-&gt;</operator><name>obj</name><operator>.</operator><name>logger</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if<condition>( <expr><call><name>ReadTTML</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument> )</argument_list></call> <operator>!=</operator> <name>VLC_SUCCESS</name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>tt_timings_Resolve</name><argument_list>( <argument><expr><operator>(</operator><name>tt_basenode_t</name> <operator>*</operator><operator>)</operator> <name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>temporal_extent</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>i_count</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TTML_DEMUX_DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>vlc_memstream</name></name></type> <name>stream</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_open</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>tt_time_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tt_time_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>tt_node_ToText</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><operator>(</operator><name>tt_basenode_t</name><operator>*</operator><operator>)</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_memstream_putc</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><call><name>vlc_memstream_close</name><argument_list>( <argument><expr><operator>&amp;</operator><name>stream</name></expr></argument> )</argument_list></call> <operator>==</operator> <name>VLC_SUCCESS</name></expr> )</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>msg_Dbg</name><argument_list>( <argument><expr><name>p_demux</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>stream</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>stream</name><operator>.</operator><name>ptr</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_demux</name></name> <operator>=</operator> <name>Demux</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_demux</name><operator>-&gt;</operator><name>pf_control</name></name> <operator>=</operator> <name>Control</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>es_format_t</name></type> <name>fmt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>es_format_Init</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument>, <argument><expr><name>SPU_ES</name></expr></argument>, <argument><expr><name>VLC_CODEC_TTML</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fmt</name><operator>.</operator><name>i_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name> <operator>=</operator> <call><name>es_out_Add</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>!</operator><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>es_format_Clean</name><argument_list>( <argument><expr><operator>&amp;</operator><name>fmt</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>tt_CloseDemux</name><argument_list>( <argument><expr><name>p_this</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>tt_CloseDemux</name><parameter_list>( <parameter><decl><type><name>vlc_object_t</name><modifier>*</modifier></type> <name>p_this</name></decl></parameter> )</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>demux_t</name> <modifier>*</modifier></type><name>p_demux</name> <init>= <expr><operator>(</operator><name>demux_t</name> <operator>*</operator><operator>)</operator><name>p_this</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>demux_sys_t</name><modifier>*</modifier></type> <name>p_sys</name> <init>= <expr><name><name>p_demux</name><operator>-&gt;</operator><name>p_sys</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>tt_node_RecursiveDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_rootnode</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>es_out_Del</name><argument_list>( <argument><expr><name><name>p_demux</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_es</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_reader</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xml_ReaderDelete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_reader</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_xml</name></name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xml_Delete</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>p_xml</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name><name>p_sys</name><operator>-&gt;</operator><name>times</name><operator>.</operator><name>p_array</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>( <argument><expr><name>p_sys</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
