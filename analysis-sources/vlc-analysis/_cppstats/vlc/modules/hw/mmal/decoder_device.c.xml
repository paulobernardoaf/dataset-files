<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\mmal\decoder_device.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_plugin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_vout_window.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_codec.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bcm_host.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interface/vcsm/user-vcsm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmal_picture.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoderDevice</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<macro><name>vlc_module_begin</name><argument_list>()</argument_list></macro>

<macro><name>set_description</name><argument_list>(<argument>N_(<literal type="string">"MMAL"</literal>)</argument>)</argument_list></macro>

<macro><name>set_callback_dec_device</name><argument_list>(<argument>OpenDecoderDevice</argument>, <argument><literal type="number">100</literal></argument>)</argument_list></macro>

<macro><name>add_shortcut</name><argument_list>(<argument><literal type="string">"mmal"</literal></argument>)</argument_list></macro>

<macro><name>vlc_module_end</name><argument_list>()</argument_list></macro>

<typedef>typedef <type><enum>enum <block>{

<decl><name>VCSM_INIT_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>VCSM_INIT_LEGACY</name></decl>,

<decl><name>VCSM_INIT_CMA</name></decl>

}</block></enum></type> <name>vcsm_init_type_t</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>volatile</specifier> <name>vcsm_init_type_t</name></type> <name>last_vcsm_type</name> <init>= <expr><name>VCSM_INIT_NONE</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>vcsm_init_type_t</name></type> <name>cma_vcsm_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>vcsm_init_type_t</name></type> <name>rv</name> <init>= <expr><name>VCSM_INIT_NONE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vcsm_init_type_t</name></type> <name>try_type</name> <init>= <expr><name>last_vcsm_type</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>try_type</name> <operator>==</operator> <name>VCSM_INIT_NONE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bcm_host_is_fkms_active</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>try_type</name> <operator>=</operator> <name>VCSM_INIT_CMA</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>try_type</name> <operator>=</operator> <name>VCSM_INIT_LEGACY</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>try_type</name> <operator>==</operator> <name>VCSM_INIT_CMA</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vcsm_init_ex</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>VCSM_INIT_CMA</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>vcsm_init_ex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>VCSM_INIT_LEGACY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vcsm_init_ex</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>VCSM_INIT_LEGACY</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><call><name>vcsm_init_ex</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>rv</name> <operator>=</operator> <name>VCSM_INIT_CMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rv</name> <operator>!=</operator> <name>VCSM_INIT_NONE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bcm_host_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last_vcsm_type</name> <operator>=</operator> <name>rv</name></expr>;</expr_stmt>

<return>return <expr><name>rv</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cma_vcsm_exit</name><parameter_list>()</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vcsm_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bcm_host_deinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>cma_vcsm_init_str</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>vcsm_init_type_t</name></type> <name>init_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>init_mode</name></expr>)</condition>

<block>{<block_content>

<case>case <expr><name>VCSM_INIT_CMA</name></expr>:</case>

<return>return <expr><literal type="string">"CMA"</literal></expr>;</return>

<case>case <expr><name>VCSM_INIT_LEGACY</name></expr>:</case>

<return>return <expr><literal type="string">"Legacy"</literal></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>vlc_assert_unreachable</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>CloseDecoderDevice</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cma_vcsm_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>vlc_decoder_device_operations</name></name></type> <name>mmal_device_ops</name> <init>= <expr><block>{

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>CloseDecoderDevice</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>OpenDecoderDevice</name><parameter_list>(<parameter><decl><type><name>vlc_decoder_device</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>vout_window_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>VLC_UNUSED</name><argument_list>(<argument><expr><name>window</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>mmal_decoder_device_t</name> <modifier>*</modifier></type><name>sys</name> <init>= <expr><call><name>vlc_obj_malloc</name><argument_list>(<argument><expr><call><name>VLC_OBJECT</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mmal_decoder_device_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>unlikely</name><argument_list>(<argument><expr><name>sys</name><operator>==</operator><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>VLC_ENOMEM</name></expr>;</return></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>vcsm_init_type_t</name></type> <name>vcsm_init_type</name> <init>= <expr><call><name>cma_vcsm_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vcsm_init_type</name> <operator>==</operator> <name>VCSM_INIT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>msg_Err</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"VCSM init failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_EGENERIC</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sys</name><operator>-&gt;</operator><name>is_cma</name></name> <operator>=</operator> <name>vcsm_init_type</name> <operator>==</operator> <name>VCSM_INIT_CMA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>ops</name></name> <operator>=</operator> <operator>&amp;</operator><name>mmal_device_ops</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>opaque</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>VLC_DECODER_DEVICE_MMAL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>device</name><operator>-&gt;</operator><name>sys</name></name> <operator>=</operator> <name>sys</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>msg_Warn</name><argument_list>(<argument><expr><name>device</name></expr></argument>, <argument><expr><literal type="string">"VCSM init succeeded: %s"</literal></expr></argument>, <argument><expr><call><name>cma_vcsm_init_str</name><argument_list>(<argument><expr><name>vcsm_init_type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>VLC_SUCCESS</name></expr>;</return>

</block_content>}</block></function>

</unit>
