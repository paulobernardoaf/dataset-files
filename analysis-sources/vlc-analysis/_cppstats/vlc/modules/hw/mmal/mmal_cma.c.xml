<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\vlc-analysis\_cppstats\vlc\modules\hw\mmal\mmal_cma.c"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CONFIG_H</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ioctl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;interface/vcsm/user-vcsm.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_common.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vlc_picture.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmal_cma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mmal_picture.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<struct>struct <name>cma_pool_fixed_s</name>

<block>{

<decl_stmt><decl><type><name>atomic_int</name></type> <name>ref_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_mutex_t</name></type> <name>lock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>n_out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pool_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flight_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>el_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cma_buf_t</name> <modifier>*</modifier><modifier>*</modifier></type> <name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_flight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vlc_cond_t</name></type> <name>flight_cond</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier></type> <name>alloc_v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>name</name></decl>;</decl_stmt>

}</block>;</struct>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>int</name></type> <name>inc_mod</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>m</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>cma_buf_t</name> <modifier>*</modifier></type> <name>cma_pool_alloc_cb</name><parameter_list>(<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cma_pool_delete</name><parameter_list>(<parameter><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>cma_buf_pool_on_delete_cb</name><parameter_list>(<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_pool</name><parameter_list>(<parameter><decl><type><name>cma_buf_t</name> <modifier>*</modifier><modifier>*</modifier> <specifier>const</specifier></type> <name>pool</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pool_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pool</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>!=</operator> <name>pool_size</name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>pool</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cma_pool_delete</name><argument_list>(<argument><expr><name><name>pool</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>pool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cma_pool_fixed_delete</name><parameter_list>(<parameter><decl><type><name>cma_pool_fixed_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>v</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>alloc_v</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>free_pool</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pool_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cma_buf_pool_on_delete_cb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cma_pool_fixed_unref</name><parameter_list>(<parameter><decl><type><name>cma_pool_fixed_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cma_pool_fixed_delete</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cma_pool_fixed_ref</name><parameter_list>(<parameter><decl><type><name>cma_pool_fixed_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cma_pool_fixed_dec_in_flight</name><parameter_list>(<parameter><decl><type><name>cma_pool_fixed_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>p</name><operator>-&gt;</operator><name>in_flight</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>flight_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cma_buf_t</name> <modifier>*</modifier></type> <name>cma_pool_fixed_get</name><parameter_list>(<parameter><decl><type><name>cma_pool_fixed_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>req_el_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>inc_flight</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>no_pool</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cma_buf_t</name> <modifier>*</modifier></type> <name>v</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>req_el_size</name> <operator>!=</operator> <name><name>p</name><operator>-&gt;</operator><name>el_size</name></name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>cma_buf_t</name> <modifier>*</modifier><modifier>*</modifier> <specifier>const</specifier></type> <name>deadpool</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pool</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>dead_n</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>pool_size</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>n_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>n_out</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>el_size</name></name> <operator>=</operator> <name>req_el_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>deadpool</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_pool</name><argument_list>(<argument><expr><name>deadpool</name></expr></argument>, <argument><expr><name>dead_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>req_el_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pool</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>no_pool</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>n_in</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>n_in</name></name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>n_in</name></name> <operator>=</operator> <call><name>inc_mod</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>n_in</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pool_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>in_flight</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>flight_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>inc_flight</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>p</name><operator>-&gt;</operator><name>in_flight</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>req_el_size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>cma_pool_alloc_cb</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>alloc_v</name></name></expr></argument>, <argument><expr><name>req_el_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cma_pool_fixed_ref</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>inc_flight</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cma_pool_fixed_dec_in_flight</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cma_pool_fixed_put</name><parameter_list>(<parameter><decl><type><name>cma_pool_fixed_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>cma_buf_t</name> <modifier>*</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>el_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>was_in_flight</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vlc_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>el_size</name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>el_size</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>n_out</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pool_size</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pool</name><index>[<expr><name><name>p</name><operator>-&gt;</operator><name>n_out</name></name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>n_out</name></name> <operator>=</operator> <call><name>inc_mod</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>n_out</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>pool_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>was_in_flight</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>p</name><operator>-&gt;</operator><name>in_flight</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>vlc_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>flight_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>cma_pool_delete</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cma_pool_fixed_unref</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cma_pool_fixed_kill</name><parameter_list>(<parameter><decl><type><name>cma_pool_fixed_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>cma_pool_fixed_get</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cma_pool_fixed_unref</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cma_pool_fixed_t</name><modifier>*</modifier></type>

<name>cma_pool_fixed_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pool_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>flight_size</name></decl></parameter>,

<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>alloc_v</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cma_pool_fixed_t</name><modifier>*</modifier> <specifier>const</specifier></type> <name>p</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cma_pool_fixed_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vlc_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>flight_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pool_size</name></name> <operator>=</operator> <name>pool_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>flight_size</name></name> <operator>=</operator> <name>flight_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>in_flight</name></name> <operator>=</operator> <operator>-</operator><name>flight_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>alloc_v</name></name> <operator>=</operator> <name>alloc_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <ternary><condition><expr><name>name</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>NULL</name></expr> </then><else>: <expr><call><name>strdup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<struct>struct <name>cma_buf_pool_s</name> <block>{

<decl_stmt><decl><type><name>cma_pool_fixed_t</name> <modifier>*</modifier></type> <name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>is_cma</name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>cma_buf_s</name> <block>{

<decl_stmt><decl><type><name>atomic_int</name></type> <name>ref_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier></type> <name>cbp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name>in_flight</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vcsm_h</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vc_h</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>mmap</name></decl>;</decl_stmt> 

}</block></struct></type> <name>cma_buf_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cma_pool_delete</name><parameter_list>(<parameter><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>atomic_load</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>mmap</name></name> <operator>!=</operator> <name>MAP_FAILED</name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>cbp</name><operator>-&gt;</operator><name>is_cma</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>mmap</name></name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vcsm_unlock_hdl</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>vcsm_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>fd</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cb</name><operator>-&gt;</operator><name>vcsm_h</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vcsm_free</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>vcsm_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>cma_buf_t</name> <modifier>*</modifier></type> <name>cma_pool_alloc_cb</name><parameter_list>(<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cbp</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cma_buf_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>cb</name> <operator>=</operator> <operator>(</operator><name>cma_buf_t</name><operator>)</operator><block>{

<expr><operator>.</operator><name>ref_count</name> <operator>=</operator> <call><name>ATOMIC_VAR_INIT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>cbp</name> <operator>=</operator> <name>cbp</name></expr>,

<expr><operator>.</operator><name>in_flight</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>size</name> <operator>=</operator> <name>size</name></expr>,

<expr><operator>.</operator><name>vcsm_h</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>vc_h</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>fd</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>mmap</name> <operator>=</operator> <name>MAP_FAILED</name></expr>,

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cb</name><operator>-&gt;</operator><name>vcsm_h</name></name> <operator>=</operator> <call><name>vcsm_malloc_cache</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>VCSM_CACHE_TYPE_HOST</name> <operator>|</operator> <literal type="number">0x80</literal></expr></argument>, <argument><expr><literal type="string">"VLC frame"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cb</name><operator>-&gt;</operator><name>vc_h</name></name> <operator>=</operator> <call><name>vcsm_vc_hdl_from_hdl</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>vcsm_h</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>

<block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cbp</name><operator>-&gt;</operator><name>is_cma</name></name></expr>)</condition>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cb</name><operator>-&gt;</operator><name>fd</name></name> <operator>=</operator> <call><name>vcsm_export_dmabuf</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>vcsm_h</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cb</name><operator>-&gt;</operator><name>mmap</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name> <operator>|</operator> <name>PROT_WRITE</name></expr></argument>, <argument><expr><name>MAP_SHARED</name> <operator>|</operator> <name>MAP_LOCKED</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>arm_addr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>arm_addr</name> <operator>=</operator> <call><name>vcsm_lock</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>vcsm_h</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>mmap</name></name> <operator>=</operator> <name>arm_addr</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>cb</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>cma_pool_delete</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cma_buf_pool_on_delete_cb</name><parameter_list>(<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cbp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cma_buf_pool_delete</name><parameter_list>(<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cbp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cbp</name><operator>-&gt;</operator><name>pool</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>cma_pool_fixed_kill</name><argument_list>(<argument><expr><name><name>cbp</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else

<block>{<block_content>

<expr_stmt><expr><call><name>cma_buf_pool_on_delete_cb</name><argument_list>(<argument><expr><name>cbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>cma_buf_pool_t</name> <modifier>*</modifier></type> <name>cma_buf_pool_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pool_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>flight_size</name></decl></parameter>,

<parameter><decl><type><name>bool</name></type> <name>is_cma</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cbp</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cma_buf_pool_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cbp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cbp</name><operator>-&gt;</operator><name>is_cma</name></name> <operator>=</operator> <name>is_cma</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>cbp</name><operator>-&gt;</operator><name>pool</name></name> <operator>=</operator> <call><name>cma_pool_fixed_new</name><argument_list>(<argument><expr><name>pool_size</name></expr></argument>, <argument><expr><name>flight_size</name></expr></argument>, <argument><expr><name>cbp</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><name>cbp</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>cma_buf_pool_delete</name><argument_list>(<argument><expr><name>cbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>cma_buf_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>cma_buf_vc_handle</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cma_buf_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>cb</name><operator>-&gt;</operator><name>vc_h</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type> <name>cma_buf_addr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>cma_buf_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name><name>cb</name><operator>-&gt;</operator><name>mmap</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>cma_buf_unref</name><parameter_list>(<parameter><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>atomic_fetch_sub</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>was_in_flight</name> <init>= <expr><name><name>cb</name><operator>-&gt;</operator><name>in_flight</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>in_flight</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>cma_pool_fixed_put</name><argument_list>(<argument><expr><name><name>cb</name><operator>-&gt;</operator><name>cbp</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name><name>cb</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>was_in_flight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>cma_buf_t</name> <modifier>*</modifier></type> <name>cma_buf_ref</name><parameter_list>(<parameter><decl><type><name>cma_buf_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>atomic_fetch_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cb</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>cb</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>cma_buf_t</name> <modifier>*</modifier></type> <name>cma_buf_pool_alloc_buf</name><parameter_list>(<parameter><decl><type><name>cma_buf_pool_t</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>cbp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>cma_buf_t</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cb</name> <init>= <expr><call><name>cma_pool_fixed_get</name><argument_list>(<argument><expr><name><name>cbp</name><operator>-&gt;</operator><name>pool</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cb</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>in_flight</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

<return>return <expr><call><name>cma_buf_ref</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
